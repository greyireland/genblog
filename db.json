{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/context_status.png","path":"images/context_status.png","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/context-init.png","path":"images/context-init.png","modified":0,"renderable":0},{"_id":"source/images/io-model.png","path":"images/io-model.png","modified":0,"renderable":0},{"_id":"source/images/git_object.png","path":"images/git_object.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/md5.min.js","path":"js/src/md5.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"source/images/thrit-network.png","path":"images/thrit-network.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"source/images/git_add.gif","path":"images/git_add.gif","modified":0,"renderable":0},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"source/images/https-detail.png","path":"images/https-detail.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/git_commit.gif","path":"images/git_commit.gif","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"8efff17e20845896e514f641bdae6d8e492d695d","modified":1570455180779},{"_id":"source/favicon.ico","hash":"e6c1bed3ac2b2a5f5c1e40a0860aa533c74d3e31","modified":1544341897000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"ba2fdffc8376ba9aeb8ef8ec9cd8e64c431bfd2b","modified":1590398038664},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1541488453000},{"_id":"source/about/index.md","hash":"eebd78f37ba678ddd3b43b8f3b99636e201071d1","modified":1590387623130},{"_id":"source/categories/index.md","hash":"fc623ca8759adf6fa028d85a7e40526c7e17ae79","modified":1542711378000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1570455185796},{"_id":"source/images/context_status.png","hash":"bc5ed36554dc16f36eb743d7596f8cfa413b9ddb","modified":1590383103550},{"_id":"source/tags/index.md","hash":"9b77ca2779083722c0a653a1e43f82890825dd0c","modified":1542711309000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"source/images/avatar.png","hash":"5d6a70904614f74328dfab5291caa2ecb7105208","modified":1590388579026},{"_id":"source/images/context-init.png","hash":"632cc9413395dac2481110790b558409d7681d48","modified":1590383066905},{"_id":"source/images/io-model.png","hash":"deae63861bf3f880c6943f296388347b2ead7359","modified":1590374542438},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"source/_posts/cs/epoll.md","hash":"56d81306a9ac9ee38f97def56db426dc8cad2edd","modified":1590376061863},{"_id":"source/_posts/cs/hash算法.md","hash":"e27891434af9e94cc557b855fcc682d2fc25c414","modified":1590376378348},{"_id":"source/_posts/cs/protobuf-intro.md","hash":"66e0384089e4225e75197ca1f84007b9751f24ae","modified":1590378058255},{"_id":"source/_posts/cs/代码规范.md","hash":"7258ff08b3b472f22faa81fa45f0e2f445c16ea3","modified":1590374448137},{"_id":"source/_posts/cs/https理解.md","hash":"3ba17e0484bfb2aa14e90872ca48622b12d41337","modified":1590376644893},{"_id":"source/_posts/distributed/cap原理.md","hash":"24d02c3743a088117f5a73f9bd176d5f3a91f0bf","modified":1590377649569},{"_id":"source/_posts/docker_k8s/docker命令.md","hash":"988368129b02711c419205456453ee6a456a08ad","modified":1590379356551},{"_id":"source/_posts/framework/etcd-intro.md","hash":"cc1f224ff20b7b60a113d68da7aa76ab9099d774","modified":1590380079956},{"_id":"source/_posts/framework/gin概览.md","hash":"f18558b191131f9eaecb7c04bd03af9dd2579a73","modified":1590380328888},{"_id":"source/_posts/docker_k8s/k8s入门.md","hash":"a3f887400637936184a86ce15791894827c1ee89","modified":1590379913778},{"_id":"source/_posts/framework/thrift-intro.md","hash":"4f154f75cadfe1172f18dab1a08017335ec096d2","modified":1590380471177},{"_id":"source/_posts/golang/go-bytes-Buffer.md","hash":"a6ebb3db551643d73b4c75a913b612222c09538e","modified":1590382908448},{"_id":"source/_posts/framework/boltdb使用.md","hash":"2844e1280593f401fc15b15d835c381e952722a7","modified":1590380036172},{"_id":"source/_posts/golang/go-context介绍.md","hash":"02875ce59e7f1fa4996a2804c0695a8434ab2f53","modified":1590383308576},{"_id":"source/_posts/golang/go-踩坑点.md","hash":"70f6592011b652200e71088d9a34a3bcc018ac68","modified":1590382595306},{"_id":"source/_posts/golang/go-test简介.md","hash":"fc7d4f3e08ef33f7bfc2d30c5ad77163972ce98e","modified":1590383428537},{"_id":"source/_posts/golang/go-函数式可选项.md","hash":"1232ad701715990fa295fb9cec523781ffc25a0e","modified":1590388141985},{"_id":"source/_posts/golang/go-文件io.md","hash":"2bf6c1230499549a1692bcf327de9548b0e7ab26","modified":1590382889528},{"_id":"source/_posts/golang/go-通道channel.md","hash":"89c16455d84ab01d8c91048e7e6c701fd21e2af9","modified":1590382633748},{"_id":"source/_posts/golang/golang入门笔记.md","hash":"77f253c3a616505ca207bad84b0b8fc6f2cc5ef4","modified":1590384889333},{"_id":"source/_posts/golang/go协程调度.md","hash":"4c4a6bcf0dc81fea04ee372ed5a96f897ea8912f","modified":1590383804615},{"_id":"source/_posts/golang/golang-pprof.md","hash":"26cf9a5ba24ff6b3746f2e7de6762f5c65ff4996","modified":1590384330115},{"_id":"source/_posts/golang/golang闭包.md","hash":"e526eccff2d363edd01026c29ec5c466d7e91aba","modified":1590384344736},{"_id":"source/_posts/golang/go错误和日志.md","hash":"14645a0e031f7fc9acbf30f25758f161bab8d3bb","modified":1590383491112},{"_id":"source/_posts/javascript/es6.md","hash":"d407da0c41332f50c6380d4e6caf72f01b466b19","modified":1590385315892},{"_id":"source/_posts/golang/net-http包关键点解析.md","hash":"99be281c6bc217cb9a4cf114a28f8a15c93c2ecd","modified":1590385117310},{"_id":"source/_posts/javascript/async和await.md","hash":"870956d11a47bd4d7d2b9e6e798c29dcd54a7bb8","modified":1590388425643},{"_id":"source/_posts/javascript/nodejs问题.md","hash":"357d1d33eaed5ef5a64da07683a8ce4ab2bd1e7f","modified":1590385360951},{"_id":"source/_posts/linux/signal信号.md","hash":"d9916757f8cc4b22de519ac9c2df96ee035a8452","modified":1590385529176},{"_id":"source/_posts/mysql/gorm源码分析.md","hash":"a646b855450bff20a816b253a3aaaecf9c66cea8","modified":1590385618188},{"_id":"source/_posts/mysql/mysql常见问题.md","hash":"a9e8d4f2c3cdecfd573f3d19f6fbc14dd207ac7f","modified":1590385859788},{"_id":"source/_posts/linux/linux常用命令.md","hash":"70ab48f5b62cedaf6c14a5e33113aeed23ac0681","modified":1590385495530},{"_id":"source/_posts/mysql/mongodb-intro.md","hash":"91798c96d2e267f0fd16941c184f7c935ee215d4","modified":1590385657068},{"_id":"source/_posts/linux/supervisor使用.md","hash":"741dc987b0f6aafa5290dbe64f753691ad47f3bf","modified":1590385546691},{"_id":"source/_posts/mysql/redis注意点.md","hash":"2624950258a7ff5f887f87894edffff376fdf34c","modified":1590385959347},{"_id":"source/_posts/other/php-intro-md.md","hash":"40bced30f22dbeaaef357999e041d4703fa4845d","modified":1590388386725},{"_id":"source/_posts/python/python常见问题.md","hash":"1c1e99d9efc9712a7e3cc7e87dc5e6ee9cb7404f","modified":1590386396950},{"_id":"source/_posts/system_design/私信系统设计.md","hash":"6847c89759e0c957a5b57f4b738e19e1102001e2","modified":1590386429105},{"_id":"source/_posts/tool/git-cheatcheet.md","hash":"f649a4d1f94e7d1c768c84b2c16071a95df6ec5e","modified":1590387037011},{"_id":"source/_posts/tool/vscode使用.md","hash":"a1746798d6288f76509514b42853ddd597fca2ff","modified":1590387110198},{"_id":"source/_posts/z-summary/每周计划.md","hash":"905f05efb558a1f622a1bf8cbccfbd6a39fcc4a2","modified":1590387495215},{"_id":"source/_posts/z-summary/源码阅读顺序.md","hash":"aae07f185e2ae986a22396869498fb39ec437ad1","modified":1590387602821},{"_id":"source/images/git_object.png","hash":"62c39c6b411d1b4d7c6e9775b3b0de48b38be5f3","modified":1590386807900},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3685f49d879d3e24a38ef651b4a4e0e8966d0ce3","modified":1590396199532},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1590393466350},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"08338cba394ebef11bd9473675237fbb8ba06f04","modified":1590396359916},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"52ce7fc1baae61136468607baf65d87ece242187","modified":1590397489904},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1590397308954},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"source/images/thrit-network.png","hash":"9069c1c6a25c3277e82082f8d41654970f1815e5","modified":1590380376715},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1590396313144},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"8b4b6d23a4d796a8a415f877bc9d6ea94cea7e46","modified":1590396325269},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"source/images/git_add.gif","hash":"74bbc4a3532c955c16c9b49efe7d5f1f9caf0046","modified":1590386780947},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"source/images/https-detail.png","hash":"69a1dd6d844b9e64cdb5ace51eee31a021474412","modified":1590376600689},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"source/images/git_commit.gif","hash":"b0aeaf6fbcb997f944cb2ded5fdbeb4e3c5839d8","modified":1590386798062},{"_id":"public/about/index.html","hash":"ca2820309db07ab9573468192dba08c21b57ef87","modified":1590398058999},{"_id":"public/categories/index.html","hash":"01f7129dc56da98bfc6414f08376d3958f88dfd6","modified":1590398058999},{"_id":"public/tags/index.html","hash":"473da15a4cb49f682dd4e8bff28d107ecb92b5d5","modified":1590398059003},{"_id":"public/archives/page/5/index.html","hash":"8b24aadf47d6d0a7cf5a978d458bf875ab81376f","modified":1590398059003},{"_id":"public/archives/2017/index.html","hash":"69dccf91494fcd8495885d23fa2984c1af31031a","modified":1590398059003},{"_id":"public/archives/2017/10/index.html","hash":"9878fccd610032def458248774205f8849415a43","modified":1590398059003},{"_id":"public/archives/2017/11/index.html","hash":"2163bc86dc980782b34336a4325ebd5e13da711e","modified":1590398059004},{"_id":"public/archives/2017/12/index.html","hash":"6db3eb9cef72128472d91eed94c7c2d50cb40376","modified":1590398059004},{"_id":"public/archives/2018/07/index.html","hash":"ddf25b3e05b29a19d63669c3746f89d4ede25b7a","modified":1590398059004},{"_id":"public/archives/2018/09/index.html","hash":"432e12f54a5e884355cf3ec9bfffadf337083766","modified":1590398059004},{"_id":"public/archives/2018/12/index.html","hash":"9ce8c4494278ab983bf81092c564f7f0283d9ba3","modified":1590398059004},{"_id":"public/archives/2019/01/index.html","hash":"7c851291fb53bdbda615cfe11323503e2c1cd3d1","modified":1590398059004},{"_id":"public/archives/2019/02/index.html","hash":"dd4121da51d1c03f9ad2c4829ce75ebeb4b97fd7","modified":1590398059004},{"_id":"public/archives/2019/03/index.html","hash":"65980b4d7e10d7f88707932d08c1456f69c294c7","modified":1590398059004},{"_id":"public/archives/2019/04/index.html","hash":"0a0dc122f1b3afdb397219ac2287c75d158e2ab7","modified":1590398059004},{"_id":"public/archives/2019/05/index.html","hash":"342830e722681e72b6f82e2cc2b67f72925595ef","modified":1590398059004},{"_id":"public/archives/2019/06/index.html","hash":"9c9be12c095d8de1ed15a47e5bd48e3b7c9a92a6","modified":1590398059004},{"_id":"public/archives/2019/10/page/2/index.html","hash":"8e0bda8192a241157104b304b57b9371d0805a06","modified":1590398059004},{"_id":"public/tags/epoll/index.html","hash":"a575a90abffefa552509a630110584c13503edc6","modified":1590398059004},{"_id":"public/tags/hash/index.html","hash":"6b5cb18751d5b67b7ab2d965a3d7dea6aae1156b","modified":1590398059004},{"_id":"public/tags/protobuf/index.html","hash":"2f6e2f6f046cdd31df21df36a159f9c87fb77252","modified":1590398059004},{"_id":"public/tags/code-style/index.html","hash":"a2c248429b7cad8372aa80f63bd19a7f4837119e","modified":1590398059004},{"_id":"public/tags/https/index.html","hash":"5e5d8a7d97eebe6134dae11f1614cabf53d5959e","modified":1590398059004},{"_id":"public/tags/SSL-TLS/index.html","hash":"e432a96124f34288e6902c830bdb777ca12e64f7","modified":1590398059004},{"_id":"public/tags/cap/index.html","hash":"26d1c2177d827cd0fce2a1dbafbba144cba93147","modified":1590398059004},{"_id":"public/tags/tags/index.html","hash":"4a4c0b0b694f313ba0b67142174c45a2fe0e3506","modified":1590398059005},{"_id":"public/tags/etcd/index.html","hash":"a2386071ea046374bd2688885cab7cda5e8d9c68","modified":1590398059005},{"_id":"public/tags/gin/index.html","hash":"10f85a4f04b7bad5f472e5df37938469124a1a3c","modified":1590398059005},{"_id":"public/tags/k8s/index.html","hash":"3d68705035ffd3cf1bdcd784182ad45517db70e7","modified":1590398059005},{"_id":"public/tags/thrift/index.html","hash":"5ea943df3608bcc3f28ce9922a3bc2b9cf1df68e","modified":1590398059005},{"_id":"public/tags/buffer/index.html","hash":"e3c8983fad1f96969911f83ce9b4d13be59d3386","modified":1590398059005},{"_id":"public/tags/boltdb/index.html","hash":"ca4512968b783c743225cefa851e85b23ad91038","modified":1590398059005},{"_id":"public/tags/golang/index.html","hash":"bf38582bc43af8c9b2762f0b7d3c99966f40ab51","modified":1590398059005},{"_id":"public/tags/context/index.html","hash":"265e8e7e3d7c733ff580ede4f6cb88887db3a094","modified":1590398059005},{"_id":"public/tags/go/index.html","hash":"ef936c9897bf98dc3367a8e0667989ce5d6bdba0","modified":1590398059005},{"_id":"public/tags/test/index.html","hash":"d78f034440ca1742d738fa3e1a761039e50472cc","modified":1590398059005},{"_id":"public/tags/bench-test/index.html","hash":"0fce0894c676c731381cd7a7e1a1c6b860b3ecb8","modified":1590398059005},{"_id":"public/tags/函数式选项/index.html","hash":"81a081ec02678cad4e920636ba575401f3fe14ed","modified":1590398059005},{"_id":"public/tags/闭包/index.html","hash":"5eac535f3a0b9f1a345aff21a7a1ea7a3fe58a69","modified":1590398059005},{"_id":"public/tags/error/index.html","hash":"2023b0349b8fa30d018ab5b79d01e4c94a692b2b","modified":1590398059005},{"_id":"public/tags/log/index.html","hash":"4155c804d83b648b55b33d3a5fcf74b350b574ed","modified":1590398059005},{"_id":"public/tags/ES6/index.html","hash":"b2194c6620eaec82539723435637a30f9a7cf433","modified":1590398059005},{"_id":"public/tags/net-http/index.html","hash":"5c9d770821e58773fc0d7a7ed6f8c688e8e39a22","modified":1590398059005},{"_id":"public/tags/await/index.html","hash":"10f170e081248ce7bb1d01ebbadfd56fce388039","modified":1590398059006},{"_id":"public/tags/async/index.html","hash":"e21aa78936feae992b3aa455a91d329d3de64d8e","modified":1590398059006},{"_id":"public/tags/signal/index.html","hash":"926a8c223960bd5f701ce2f693aec5596b07b954","modified":1590398059006},{"_id":"public/tags/gorm/index.html","hash":"d85d7ca76c5e9eaa1a2065885c52accfd79d4f8b","modified":1590398059006},{"_id":"public/tags/mysql/index.html","hash":"e7b212205a698f119605799a506c3b50ca08a58d","modified":1590398059006},{"_id":"public/tags/linux/index.html","hash":"2825157988afa033c3077f49735ab474f6bc92f8","modified":1590398059006},{"_id":"public/tags/cmd/index.html","hash":"f238361887a0502d1a7fec3b6b26eb48542bc7d9","modified":1590398059006},{"_id":"public/tags/mongo/index.html","hash":"474e7755e3a79bf5fefca87711282675279c7642","modified":1590398059006},{"_id":"public/tags/supervisor/index.html","hash":"0a67fee71c8a8edfe3072bf829b6da2af47cbfbd","modified":1590398059006},{"_id":"public/tags/redis/index.html","hash":"91298d8a159be6b1106abbbcdf4346cdd34551fc","modified":1590398059006},{"_id":"public/tags/php/index.html","hash":"7af6c941a697696773256851c827903f0ad2683d","modified":1590398059006},{"_id":"public/tags/php-fpm/index.html","hash":"42d364df2b83597023a52a9137ab8cf0aa7280d4","modified":1590398059006},{"_id":"public/tags/私信系统/index.html","hash":"722e2de44bb590b3c642e11d215b33517b2091f6","modified":1590398059006},{"_id":"public/tags/python/index.html","hash":"caf0ed5cb3e5672731c0b435ecbad45a9da33d3e","modified":1590398059007},{"_id":"public/tags/git/index.html","hash":"89095cd8f096c3b1026ff04b56989fdb270dd880","modified":1590398059007},{"_id":"public/tags/vscode/index.html","hash":"e510be347b470574d96737d264c4b794b3cb761f","modified":1590398059007},{"_id":"public/tags/计划/index.html","hash":"8b9cae8c6dbab9f11375843658bb61f29561830c","modified":1590398059007},{"_id":"public/tags/目标/index.html","hash":"21ff0ca19a583498c0ce9f2d01fd8256842ebecc","modified":1590398059007},{"_id":"public/tags/源码阅读/index.html","hash":"205e45f7324d964db8d4bcd1cc53754cdb22264f","modified":1590398059007},{"_id":"public/categories/cs/index.html","hash":"e35841fe03886b53875cfee086a41ecab40d1c26","modified":1590398059007},{"_id":"public/2019/10/16/golang/go错误和日志/index.html","hash":"616f964606a6a810106f8d3c6a543ebd5c6925fe","modified":1590398059008},{"_id":"public/2019/10/07/distributed/cap原理/index.html","hash":"5c40bc7e399a1d6edb3a0f0387dd0dd1ea2816b8","modified":1590398059008},{"_id":"public/2019/10/07/framework/etcd-intro/index.html","hash":"75c2233dbdb334cebc35a40458a70ab83d356558","modified":1590398059009},{"_id":"public/2019/10/07/mysql/gorm源码分析/index.html","hash":"b95ab2ade3bf074cffa000821445ab824e484acd","modified":1590398059009},{"_id":"public/2019/10/07/mysql/mysql常见问题/index.html","hash":"27ae186ca5f1727a6fa2278ea25ce4789ecbd13b","modified":1590398059009},{"_id":"public/2019/10/07/javascript/nodejs问题/index.html","hash":"168aca6096c5f4a3ef6dafbf1b885e28da554571","modified":1590398059009},{"_id":"public/2019/10/07/cs/protobuf-intro/index.html","hash":"c96547d07e90dadb118d0490d4a22d8bb6ba9ade","modified":1590398059009},{"_id":"public/2019/10/07/python/python常见问题/index.html","hash":"43added4abb996a2614977681e4bec73ce5a4448","modified":1590398059009},{"_id":"public/2019/10/07/mysql/redis注意点/index.html","hash":"d2208ad23a35ce4e413ed2978cc3b6b3b5d34db7","modified":1590398059009},{"_id":"public/2019/10/07/framework/thrift-intro/index.html","hash":"d8e84bfcd127a3756b1ff4eb0a22da17da4616b7","modified":1590398059010},{"_id":"public/2019/10/07/linux/signal信号/index.html","hash":"7758f900ab23cdbe3d61df192b402fbb98feb4ae","modified":1590398059010},{"_id":"public/2019/10/07/mysql/mongodb-intro/index.html","hash":"96040cbfaf633ca1d066459112192b5604dd6b41","modified":1590398059010},{"_id":"public/2019/06/28/cs/epoll/index.html","hash":"df5a20e7f9b45524338232f6f7435f210d46a2d2","modified":1590398059010},{"_id":"public/2019/05/12/linux/supervisor使用/index.html","hash":"ab47f9a97e56ec624e1a82083687b81cc7d39125","modified":1590398059010},{"_id":"public/2019/04/19/framework/boltdb使用/index.html","hash":"1c7a065e4b9ea764d3285127a56011f7c99ee026","modified":1590398059010},{"_id":"public/2019/04/06/cs/hash算法/index.html","hash":"41ce6086b44e961396785ef20880bb13d885bbf6","modified":1590398059010},{"_id":"public/2019/04/05/framework/gin概览/index.html","hash":"9c18470a96bfcdd7b8823b768881d9d51236cc29","modified":1590398059010},{"_id":"public/2019/03/16/golang/golang闭包/index.html","hash":"a3ba9fc9fbc56e1163886eb7f01fa9b2ae6b55d5","modified":1590398059010},{"_id":"public/2019/03/14/z-summary/源码阅读顺序/index.html","hash":"25ae41d8a888a783ac756495d27f14566e1d0b23","modified":1590398059010},{"_id":"public/2019/03/13/golang/go-test简介/index.html","hash":"15635d1ce342021ad3e62cde1ea291be80af0702","modified":1590398059010},{"_id":"public/2019/03/12/golang/go-context介绍/index.html","hash":"07e58ea39ceb97e77643fb4fcd71207e9a614ad5","modified":1590398059010},{"_id":"public/2019/03/11/cs/https理解/index.html","hash":"2ac8924743b0f1331e5b15c36de0c3d7ba9ff1fb","modified":1590398059010},{"_id":"public/2019/03/10/golang/go-函数式可选项/index.html","hash":"acb02d1b6a3126fa7b4cb73144cb2258e9ad4dd2","modified":1590398059010},{"_id":"public/2019/03/03/golang/net-http包关键点解析/index.html","hash":"dc821cc6737c134fbadfb70948dd2e188cf0de25","modified":1590398059010},{"_id":"public/2019/02/22/docker_k8s/k8s入门/index.html","hash":"27a7a3d031f55402713b986a1da41dbbd2488024","modified":1590398059010},{"_id":"public/2019/02/21/docker_k8s/docker命令/index.html","hash":"41b98684f19a7171bdd966a87b58ea77cbadd29f","modified":1590398059011},{"_id":"public/2019/02/21/cs/代码规范/index.html","hash":"da10d8d350abebd05663fd0c8723b2a89859f279","modified":1590398059011},{"_id":"public/2019/02/21/system_design/私信系统设计/index.html","hash":"1448f4757fc0926cb538c825a1100b66f2fd1b79","modified":1590398059011},{"_id":"public/2019/01/04/golang/golang-pprof/index.html","hash":"d6bc698ae3cd9da3d0a3fda1b0cda2adddffde2d","modified":1590398059011},{"_id":"public/2018/12/19/javascript/es6/index.html","hash":"3595bf980afab7b8ff2a9ed9c843fd1bb4a2608a","modified":1590398059011},{"_id":"public/2018/09/19/tool/git-cheatcheet/index.html","hash":"3ed940ac5fa6e248d5155537927ff495893ba75c","modified":1590398059011},{"_id":"public/2018/09/19/golang/go-bytes-Buffer/index.html","hash":"18be316aa1662477c12d383a89f3cbb2bdd7405e","modified":1590398059011},{"_id":"public/2018/09/19/tool/vscode使用/index.html","hash":"8db228745385c3322c3173562b283296eabb8d40","modified":1590398059011},{"_id":"public/2018/09/19/golang/go-踩坑点/index.html","hash":"7c5b715a6bec9fabbfc5cbcd762d7446464eaee4","modified":1590398059011},{"_id":"public/2018/09/19/golang/go-通道channel/index.html","hash":"fc48959a3e8320ee81c0adfecaf95918e79e63aa","modified":1590398059011},{"_id":"public/2018/09/19/golang/go-文件io/index.html","hash":"477f90aebad9d2f6075f63d097c3f79dcd5ab2b1","modified":1590398059011},{"_id":"public/2018/09/19/golang/go协程调度/index.html","hash":"868cbc08fb1007a32820806f7384a8bf02927fe8","modified":1590398059011},{"_id":"public/2018/07/21/linux/linux常用命令/index.html","hash":"333f26ee943b7981bd5955d9f54606ddf1eaa644","modified":1590398059011},{"_id":"public/2018/07/21/z-summary/每周计划/index.html","hash":"9639b7d34ebe9ab75caee19056ea012022628844","modified":1590398059011},{"_id":"public/2017/12/04/javascript/async和await/index.html","hash":"8af420d186f73446fe358ac87a76d3f62151b87f","modified":1590398059011},{"_id":"public/2017/11/09/other/php-intro-md/index.html","hash":"9fac430f2c3e3e0e643cc5229a69811504e34586","modified":1590398059011},{"_id":"public/2017/10/07/golang/golang入门笔记/index.html","hash":"45ef2d5066a2430cc6a7a0a644f4d49ef9aecb48","modified":1590398059011},{"_id":"public/archives/index.html","hash":"34351e742115fa13a97b525a5452efea84967e60","modified":1590398059011},{"_id":"public/archives/page/2/index.html","hash":"deebefbe3be8c5c35048bee29a0b4e9f31f8ee8b","modified":1590398059011},{"_id":"public/archives/page/3/index.html","hash":"6f92194d88f8f359bd4e98b4b96fa39d66ba3a98","modified":1590398059011},{"_id":"public/archives/page/4/index.html","hash":"3f3d9bd88f0a13dd336dcf1fc70ec63e07807613","modified":1590398059012},{"_id":"public/archives/2018/index.html","hash":"4d4c7a770cf3798f3c8f687de271981cdbeb3ab7","modified":1590398059012},{"_id":"public/archives/2019/index.html","hash":"be0a49ecf0fce703834525ccfbb77d5db1524014","modified":1590398059012},{"_id":"public/archives/2019/page/2/index.html","hash":"c9e1dbdb1466bb66ffbcc70ba00cfe78aa929447","modified":1590398059012},{"_id":"public/archives/2019/page/3/index.html","hash":"f010ae6e0e6881eea39038b9a617948505ba195f","modified":1590398059012},{"_id":"public/archives/2019/10/index.html","hash":"3b5af342ea3d3d52109012ad6f83be54abd78ec4","modified":1590398059012},{"_id":"public/index.html","hash":"e04f21c5dd5e42e0f6e3cbd5e53b3f5b33ebc281","modified":1590398059012},{"_id":"public/page/2/index.html","hash":"fb82642f09bba37f7172c7f952172558f5584fc2","modified":1590398059012},{"_id":"public/page/3/index.html","hash":"5ed1946a2582bb144f5ec6864cf0cd135d2427e1","modified":1590398059012},{"_id":"public/page/4/index.html","hash":"38dcbb972aade70a2855429b69ab0f965ea87a6d","modified":1590398059012},{"_id":"public/page/5/index.html","hash":"a75a35299d729fb506bd72400e90fb7485d66d0a","modified":1590398059012},{"_id":"public/categories/protobuf/index.html","hash":"8ed5388e1de75bc67f7c0f4af1a22ce9c36eb4be","modified":1590398059025},{"_id":"public/categories/code-style/index.html","hash":"7476056a5c91f51a06748e9ef3a098f6dc17c81c","modified":1590398059025},{"_id":"public/categories/cap/index.html","hash":"3d42bee9fcd6116ea8605b827b2813a56f70a2f2","modified":1590398059025},{"_id":"public/categories/categories/index.html","hash":"683102b4f82afa6f5671c572c1ce48f7f00c3541","modified":1590398059025},{"_id":"public/categories/etcd/index.html","hash":"881dfcb1bc33997511972f08312051705c16b5ab","modified":1590398059025},{"_id":"public/categories/框架/index.html","hash":"d3df1a089c53cc39c2d2c1e6ba083cbee3f3c864","modified":1590398059025},{"_id":"public/categories/docker/index.html","hash":"1958a03dd2dc11ec2dec7f03645ec36755951a71","modified":1590398059025},{"_id":"public/categories/rpc/index.html","hash":"e4fa017983aca7362268b3034a6e68898b7a2c12","modified":1590398059025},{"_id":"public/categories/go/index.html","hash":"4260624715617f22d7a9a20a6cb72312123f0594","modified":1590398059026},{"_id":"public/categories/boltdb/index.html","hash":"b25fada53eea50fe194ff8fed4938a139bcfcbfa","modified":1590398059026},{"_id":"public/categories/设计模式/index.html","hash":"3dd05948b542dee241cdb52c06db5b3561d95e70","modified":1590398059026},{"_id":"public/categories/golang/index.html","hash":"b80eb5e71c5808d5937d6670036149318cb3a55c","modified":1590398059026},{"_id":"public/categories/front-end/index.html","hash":"07256628196a6d7f5f4335790d12d98ab292143e","modified":1590398059026},{"_id":"public/categories/js/index.html","hash":"c2c5d1e87d0e220566b7f04146f979accd092287","modified":1590398059026},{"_id":"public/categories/linux/index.html","hash":"37d29d884a6812cdaa8fa063645148a6fb294ab2","modified":1590398059026},{"_id":"public/categories/gorm/index.html","hash":"32bbc60a901189db00f1fa89908f27b032760099","modified":1590398059026},{"_id":"public/categories/mysql/index.html","hash":"739cdab991736f1b92b2aaae455720ee2b3a7490","modified":1590398059026},{"_id":"public/categories/db/index.html","hash":"2a080759c0d29976a3697348e150f6b289f00f08","modified":1590398059026},{"_id":"public/categories/redis/index.html","hash":"6bf060a53574c0a7fce1e93a6f2bc2bfce49bd21","modified":1590398059026},{"_id":"public/categories/php/index.html","hash":"30fc4b7e16a2b27245ce2a9eeb2facd2b487e8de","modified":1590398059026},{"_id":"public/categories/python/index.html","hash":"740af4b2a5d684a59de2705e65692040dca55c62","modified":1590398059026},{"_id":"public/categories/system-design/index.html","hash":"08935d4fb5de18cadeab8cb5d73f6b9178f9829e","modified":1590398059026},{"_id":"public/categories/tool/index.html","hash":"a43ce91c4c6571be77df716fecd14fad20569542","modified":1590398059026},{"_id":"public/categories/idea/index.html","hash":"f67396f9307e6813e5dcbe4afc3ae58546315ba9","modified":1590398059026},{"_id":"public/categories/源码阅读/index.html","hash":"119e6fb07585abbf76d43823ad93cc5d87708d3c","modified":1590398059026},{"_id":"public/favicon.ico","hash":"e6c1bed3ac2b2a5f5c1e40a0860aa533c74d3e31","modified":1590398059026},{"_id":"public/images/context_status.png","hash":"bc5ed36554dc16f36eb743d7596f8cfa413b9ddb","modified":1590398059026},{"_id":"public/images/context-init.png","hash":"632cc9413395dac2481110790b558409d7681d48","modified":1590398059026},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1590398059026},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1590398059027},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1590398059027},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1590398059027},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1590398059027},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1590398059027},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1590398059027},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1590398059027},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1590398059027},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1590398059027},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1590398059027},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1590398059027},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1590398059027},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1590398059027},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1590398059027},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1590398059027},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1590398059027},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1590398059027},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1590398059027},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1590398059027},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1590398059027},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1590398059027},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1590398059027},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1590398059028},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1590398059028},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1590398059028},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1590398059028},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1590398059028},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1590398059028},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1590398059028},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1590398059028},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1590398059028},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1590398059028},{"_id":"public/images/io-model.png","hash":"deae63861bf3f880c6943f296388347b2ead7359","modified":1590398059601},{"_id":"public/images/avatar.png","hash":"5d6a70904614f74328dfab5291caa2ecb7105208","modified":1590398059604},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1590398059613},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1590398059614},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1590398059626},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1590398059626},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1590398059626},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1590398059626},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1590398059626},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1590398059626},{"_id":"public/js/src/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1590398059626},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1590398059626},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1590398059626},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1590398059626},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1590398059626},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1590398059626},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1590398059626},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1590398059626},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1590398059627},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1590398059627},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1590398059627},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1590398059627},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1590398059627},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1590398059627},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1590398059627},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1590398059628},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1590398059628},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1590398059628},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1590398059628},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1590398059628},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1590398059628},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1590398059628},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1590398059628},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1590398059628},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1590398059628},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1590398059628},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1590398059628},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1590398059628},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1590398059628},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1590398059628},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1590398059628},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1590398059629},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1590398059629},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1590398059629},{"_id":"public/css/main.css","hash":"743d875636650da8dd8b2867f4893ecb6481b676","modified":1590398059629},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1590398059629},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1590398059629},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1590398059629},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1590398059629},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1590398059629},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1590398059629},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1590398059629},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1590398059629},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1590398059629},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1590398059629},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1590398059629},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1590398059629},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1590398059629},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1590398059629},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1590398059629},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1590398059630},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1590398059630},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1590398059630},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1590398059630},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1590398059630},{"_id":"public/images/git_object.png","hash":"62c39c6b411d1b4d7c6e9775b3b0de48b38be5f3","modified":1590398059630},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1590398059631},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1590398059650},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1590398059673},{"_id":"public/images/thrit-network.png","hash":"9069c1c6a25c3277e82082f8d41654970f1815e5","modified":1590398059832},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1590398059832},{"_id":"public/images/git_add.gif","hash":"74bbc4a3532c955c16c9b49efe7d5f1f9caf0046","modified":1590398059965},{"_id":"public/images/git_commit.gif","hash":"b0aeaf6fbcb997f944cb2ded5fdbeb4e3c5839d8","modified":1590398060003},{"_id":"public/images/https-detail.png","hash":"69a1dd6d844b9e64cdb5ace51eee31a021474412","modified":1590398060005},{"_id":"source/README.md","hash":"411e59c0aacfb8fa4e230c1d335ef3e0944f41c6","modified":1590398552463},{"_id":"public/README.html","hash":"3c423f4c9872d2da6767233b5595fa10d172a6ca","modified":1590398566998}],"Category":[{"name":"cs","_id":"ckam9xr5l0005g938gmalevkh"},{"name":"protobuf","_id":"ckam9xr60000fg938s2zpksxc"},{"name":"code_style","_id":"ckam9xr64000ng938tib574j9"},{"name":"cap","_id":"ckam9xr68000tg938f87jup24"},{"name":"categories","_id":"ckam9xr6h000zg938sb3paaix"},{"name":"etcd","_id":"ckam9xr6n0015g938zgq2qgju"},{"name":"框架","_id":"ckam9xr6q001cg9382vt2dvqp"},{"name":"docker","_id":"ckam9xr6t001ig938kkuyoo0s"},{"name":"rpc","_id":"ckam9xr6w001og938u1y3r8p1"},{"name":"go","_id":"ckam9xr70001wg938c2t5cl73"},{"name":"boltdb","_id":"ckam9xr730023g938oe61kuen"},{"name":"设计模式","_id":"ckam9xr7g002tg93899g4pixh"},{"name":"golang","_id":"ckam9xr7w003ig938uvtamopr"},{"name":"front-end","_id":"ckam9xr81003qg938a4uve9ar"},{"name":"js","_id":"ckam9xr83003wg938wp171pit"},{"name":"linux","_id":"ckam9xr840040g938br8l9g2a"},{"name":"gorm","_id":"ckam9xr850045g938kvaiojcy"},{"name":"mysql","_id":"ckam9xr860049g938x87uwmlh"},{"name":"db","_id":"ckam9xr88004fg938xtgpc64k"},{"name":"redis","_id":"ckam9xr8a004mg938lta2nufi"},{"name":"php","_id":"ckam9xr8b004sg9381kac7biq"},{"name":"python","_id":"ckam9xr8b004xg938zni7ajqg"},{"name":"system design","_id":"ckam9xr8c0050g938dkylxo9t"},{"name":"tool","_id":"ckam9xr8d0054g93846yjzaee"},{"name":"idea","_id":"ckam9xr8e005bg938kg9oryku"},{"name":"源码阅读","_id":"ckam9xr8g005gg938dxw7qaso"}],"Data":[],"Page":[{"title":"about","date":"2018-11-20T10:56:34.000Z","type":"about","_content":"\n## 关于\n\n邮箱：fruitbag@163.com\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-11-20 18:56:34\ntype: about\n---\n\n## 关于\n\n邮箱：fruitbag@163.com\n","updated":"2020-05-25T06:20:23.130Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckam9xr2t0000g938h54bwac2","content":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>邮箱：<a href=\"mailto:fruitbag@163.com\" target=\"_blank\" rel=\"noopener\">fruitbag@163.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>邮箱：<a href=\"mailto:fruitbag@163.com\" target=\"_blank\" rel=\"noopener\">fruitbag@163.com</a></p>\n"},{"title":"categories","date":"2018-11-20T10:56:05.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-11-20 18:56:05\ntype: \"categories\"\n---\n","updated":"2018-11-20T10:56:18.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckam9xr2v0001g938kr4q0oyp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-11-20T10:54:49.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-11-20 18:54:49\ntype: \"tags\"\n---\n","updated":"2018-11-20T10:55:09.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckam9xr2x0002g938sn567m4q","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"# 我的博客\n\n[我的博客地址](https://greyireland.github.io/)\n","source":"README.md","raw":"# 我的博客\n\n[我的博客地址](https://greyireland.github.io/)\n","date":"2020-05-25T09:22:32.463Z","updated":"2020-05-25T09:22:32.463Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"ckama8ms50000vy38dndlbq4l","content":"<h1 id=\"我的博客\"><a href=\"#我的博客\" class=\"headerlink\" title=\"我的博客\"></a>我的博客</h1><p><a href=\"https://greyireland.github.io/\" target=\"_blank\" rel=\"noopener\">我的博客地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我的博客\"><a href=\"#我的博客\" class=\"headerlink\" title=\"我的博客\"></a>我的博客</h1><p><a href=\"https://greyireland.github.io/\" target=\"_blank\" rel=\"noopener\">我的博客地址</a></p>\n"}],"Post":[{"title":"epoll","date":"2019-06-28T08:56:03.000Z","_content":"\n## epoll\n\n### epoll 如何实现百万连接\n\n```c\nint epoll_create(int size);//size fd数量,创建了红黑树和就绪链表\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);//添加回调函数到红黑树，事件来临时将回调函数写到就绪链表\nint epoll_wait(int epfd, struct epoll_event *events,int maxevents, int timeout);//取出就绪链表数据\n```\n\n### epoll VS select & poll\n\n- select 轮询实现效率低，有 fd 限制\n- poll 去除 fd 限制，实际问题未解决\n- epoll 没有采用回调形式，可接入百万 fd\n\n### 问题\n\n为什么使用红黑树\n\n> 新添加 fd 时会查询是否已经存在 fd 的监听事件，如果没有则添加\n> 所以插入和删除性能比较好，时间复杂度 log(N)\n\n为什么比较快\n\n> 因为只需要监听就绪链表中是否有数据即可(时间复杂度 O(1))，不需要复制全部的 fd 的用户态\n\nLT 和 ET 区别\n\n> LT：水平触发，效率会低于 ET 触发，尤其在大并发，大流量的情况下。但是 LT 对代码编写要求比较低，不容易出现问题。LT 模式服务编写上的表现是：只要有数据没有被获取，内核就不断通知你，因此不用担心事件丢失的情况。\n>\n> ET：边缘触发，效率非常高，在并发，大流量的情况下，会比 LT 少很多 epoll 的系统调用，因此效率高。但是对编程要求高，需要细致的处理每个请求，否则容易发生丢失事件的情况。\n\n从本质上讲：与 LT 相比，ET 模型是通过减少系统调用来达到提高并行效率的。\n\n### 网络 IO 模型\n\n![网络IO模型](../../images/io-model.png)\n","source":"_posts/cs/epoll.md","raw":"---\ntitle: epoll\ntags:\n  - epoll\ncategories:\n  - cs\ndate: 2019-06-28 16:56:03\n---\n\n## epoll\n\n### epoll 如何实现百万连接\n\n```c\nint epoll_create(int size);//size fd数量,创建了红黑树和就绪链表\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);//添加回调函数到红黑树，事件来临时将回调函数写到就绪链表\nint epoll_wait(int epfd, struct epoll_event *events,int maxevents, int timeout);//取出就绪链表数据\n```\n\n### epoll VS select & poll\n\n- select 轮询实现效率低，有 fd 限制\n- poll 去除 fd 限制，实际问题未解决\n- epoll 没有采用回调形式，可接入百万 fd\n\n### 问题\n\n为什么使用红黑树\n\n> 新添加 fd 时会查询是否已经存在 fd 的监听事件，如果没有则添加\n> 所以插入和删除性能比较好，时间复杂度 log(N)\n\n为什么比较快\n\n> 因为只需要监听就绪链表中是否有数据即可(时间复杂度 O(1))，不需要复制全部的 fd 的用户态\n\nLT 和 ET 区别\n\n> LT：水平触发，效率会低于 ET 触发，尤其在大并发，大流量的情况下。但是 LT 对代码编写要求比较低，不容易出现问题。LT 模式服务编写上的表现是：只要有数据没有被获取，内核就不断通知你，因此不用担心事件丢失的情况。\n>\n> ET：边缘触发，效率非常高，在并发，大流量的情况下，会比 LT 少很多 epoll 的系统调用，因此效率高。但是对编程要求高，需要细致的处理每个请求，否则容易发生丢失事件的情况。\n\n从本质上讲：与 LT 相比，ET 模型是通过减少系统调用来达到提高并行效率的。\n\n### 网络 IO 模型\n\n![网络IO模型](../../images/io-model.png)\n","slug":"cs/epoll","published":1,"updated":"2020-05-25T03:07:41.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr5f0003g938zi8vnzid","content":"<h2 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h2><h3 id=\"epoll-如何实现百万连接\"><a href=\"#epoll-如何实现百万连接\" class=\"headerlink\" title=\"epoll 如何实现百万连接\"></a>epoll 如何实现百万连接</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span>;<span class=\"comment\">//size fd数量,创建了红黑树和就绪链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, <span class=\"keyword\">int</span> fd, struct epoll_event *event)</span></span>;<span class=\"comment\">//添加回调函数到红黑树，事件来临时将回调函数写到就绪链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_wait</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, struct epoll_event *events,<span class=\"keyword\">int</span> maxevents, <span class=\"keyword\">int</span> timeout)</span></span>;<span class=\"comment\">//取出就绪链表数据</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"epoll-VS-select-amp-poll\"><a href=\"#epoll-VS-select-amp-poll\" class=\"headerlink\" title=\"epoll VS select &amp; poll\"></a>epoll VS select &amp; poll</h3><ul>\n<li>select 轮询实现效率低，有 fd 限制</li>\n<li>poll 去除 fd 限制，实际问题未解决</li>\n<li>epoll 没有采用回调形式，可接入百万 fd</li>\n</ul>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>为什么使用红黑树</p>\n<blockquote>\n<p>新添加 fd 时会查询是否已经存在 fd 的监听事件，如果没有则添加<br>所以插入和删除性能比较好，时间复杂度 log(N)</p>\n</blockquote>\n<p>为什么比较快</p>\n<blockquote>\n<p>因为只需要监听就绪链表中是否有数据即可(时间复杂度 O(1))，不需要复制全部的 fd 的用户态</p>\n</blockquote>\n<p>LT 和 ET 区别</p>\n<blockquote>\n<p>LT：水平触发，效率会低于 ET 触发，尤其在大并发，大流量的情况下。但是 LT 对代码编写要求比较低，不容易出现问题。LT 模式服务编写上的表现是：只要有数据没有被获取，内核就不断通知你，因此不用担心事件丢失的情况。</p>\n<p>ET：边缘触发，效率非常高，在并发，大流量的情况下，会比 LT 少很多 epoll 的系统调用，因此效率高。但是对编程要求高，需要细致的处理每个请求，否则容易发生丢失事件的情况。</p>\n</blockquote>\n<p>从本质上讲：与 LT 相比，ET 模型是通过减少系统调用来达到提高并行效率的。</p>\n<h3 id=\"网络-IO-模型\"><a href=\"#网络-IO-模型\" class=\"headerlink\" title=\"网络 IO 模型\"></a>网络 IO 模型</h3><p><img src=\"../../images/io-model.png\" alt=\"网络IO模型\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h2><h3 id=\"epoll-如何实现百万连接\"><a href=\"#epoll-如何实现百万连接\" class=\"headerlink\" title=\"epoll 如何实现百万连接\"></a>epoll 如何实现百万连接</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span>;<span class=\"comment\">//size fd数量,创建了红黑树和就绪链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, <span class=\"keyword\">int</span> fd, struct epoll_event *event)</span></span>;<span class=\"comment\">//添加回调函数到红黑树，事件来临时将回调函数写到就绪链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_wait</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, struct epoll_event *events,<span class=\"keyword\">int</span> maxevents, <span class=\"keyword\">int</span> timeout)</span></span>;<span class=\"comment\">//取出就绪链表数据</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"epoll-VS-select-amp-poll\"><a href=\"#epoll-VS-select-amp-poll\" class=\"headerlink\" title=\"epoll VS select &amp; poll\"></a>epoll VS select &amp; poll</h3><ul>\n<li>select 轮询实现效率低，有 fd 限制</li>\n<li>poll 去除 fd 限制，实际问题未解决</li>\n<li>epoll 没有采用回调形式，可接入百万 fd</li>\n</ul>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>为什么使用红黑树</p>\n<blockquote>\n<p>新添加 fd 时会查询是否已经存在 fd 的监听事件，如果没有则添加<br>所以插入和删除性能比较好，时间复杂度 log(N)</p>\n</blockquote>\n<p>为什么比较快</p>\n<blockquote>\n<p>因为只需要监听就绪链表中是否有数据即可(时间复杂度 O(1))，不需要复制全部的 fd 的用户态</p>\n</blockquote>\n<p>LT 和 ET 区别</p>\n<blockquote>\n<p>LT：水平触发，效率会低于 ET 触发，尤其在大并发，大流量的情况下。但是 LT 对代码编写要求比较低，不容易出现问题。LT 模式服务编写上的表现是：只要有数据没有被获取，内核就不断通知你，因此不用担心事件丢失的情况。</p>\n<p>ET：边缘触发，效率非常高，在并发，大流量的情况下，会比 LT 少很多 epoll 的系统调用，因此效率高。但是对编程要求高，需要细致的处理每个请求，否则容易发生丢失事件的情况。</p>\n</blockquote>\n<p>从本质上讲：与 LT 相比，ET 模型是通过减少系统调用来达到提高并行效率的。</p>\n<h3 id=\"网络-IO-模型\"><a href=\"#网络-IO-模型\" class=\"headerlink\" title=\"网络 IO 模型\"></a>网络 IO 模型</h3><p><img src=\"../../images/io-model.png\" alt=\"网络IO模型\"></p>\n"},{"title":"hash算法","date":"2019-04-06T15:26:40.000Z","_content":"\n## hash 算法\n\n简单来说：hash（散列、杂凑）函数，是将任意长度的数据映射到有限长度的域上。直观解释起来，就是对一串数据 m 进行杂糅，输出另一段固定长度的数据 h，作为这段数据的特征（指纹）。\n\n由于用途的不同，hash 在数据结构中的含义【hashCode()】和密码学【md5,sha1,sha256】中的含义并不相同，所以在这两种不同的领域里，算法的设计侧重点也不同。\n\n### 数据结构 hash\n\n```java\nstring、int、bool、object hashCode()\n```\n\n### 密码学 hash\n\n```markdown\n| 算法   | bit 位数 | 16 进制字符串                                |\n| ------ | -------- | -------------------------------------------- |\n| md5    | 128      | e10adc3949ba59abbe56e057f20f883e             |\n| sha1   | 160      | 7c4a8d09ca3762af61e59520943dc26494f8941b     |\n| sha256 | 256      | 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a8... |\n| crc32  | 32       | 70930f27                                     |\n| fnv    | 32       | -                                            |\n```\n\n### 其他工具\n\n```text\nfnv：FNV能快速hash大量数据并保持较小的冲突率，它的高度分散使它适用于hash一些非常相近的字符串，比如URL，hostname，文件名，text，IP地址等。\nbase64:编码后的数据比原始数据略长，为原来的4/3,用64个可见字符表示数据a-z A-Z 0-9 + / ,可序列化可反序列化\nurlencode:url中只有字母和数字[0-9a-zA-Z]、一些特殊符号\"$-_.+!*'(),\"[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。\n```\n","source":"_posts/cs/hash算法.md","raw":"---\ntitle: hash算法\ntags:\n  - hash\ncategories:\n  - cs\ndate: 2019-04-06 23:26:40\n---\n\n## hash 算法\n\n简单来说：hash（散列、杂凑）函数，是将任意长度的数据映射到有限长度的域上。直观解释起来，就是对一串数据 m 进行杂糅，输出另一段固定长度的数据 h，作为这段数据的特征（指纹）。\n\n由于用途的不同，hash 在数据结构中的含义【hashCode()】和密码学【md5,sha1,sha256】中的含义并不相同，所以在这两种不同的领域里，算法的设计侧重点也不同。\n\n### 数据结构 hash\n\n```java\nstring、int、bool、object hashCode()\n```\n\n### 密码学 hash\n\n```markdown\n| 算法   | bit 位数 | 16 进制字符串                                |\n| ------ | -------- | -------------------------------------------- |\n| md5    | 128      | e10adc3949ba59abbe56e057f20f883e             |\n| sha1   | 160      | 7c4a8d09ca3762af61e59520943dc26494f8941b     |\n| sha256 | 256      | 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a8... |\n| crc32  | 32       | 70930f27                                     |\n| fnv    | 32       | -                                            |\n```\n\n### 其他工具\n\n```text\nfnv：FNV能快速hash大量数据并保持较小的冲突率，它的高度分散使它适用于hash一些非常相近的字符串，比如URL，hostname，文件名，text，IP地址等。\nbase64:编码后的数据比原始数据略长，为原来的4/3,用64个可见字符表示数据a-z A-Z 0-9 + / ,可序列化可反序列化\nurlencode:url中只有字母和数字[0-9a-zA-Z]、一些特殊符号\"$-_.+!*'(),\"[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。\n```\n","slug":"cs/hash算法","published":1,"updated":"2020-05-25T03:12:58.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr5j0004g938jzxmxymz","content":"<h2 id=\"hash-算法\"><a href=\"#hash-算法\" class=\"headerlink\" title=\"hash 算法\"></a>hash 算法</h2><p>简单来说：hash（散列、杂凑）函数，是将任意长度的数据映射到有限长度的域上。直观解释起来，就是对一串数据 m 进行杂糅，输出另一段固定长度的数据 h，作为这段数据的特征（指纹）。</p>\n<p>由于用途的不同，hash 在数据结构中的含义【hashCode()】和密码学【md5,sha1,sha256】中的含义并不相同，所以在这两种不同的领域里，算法的设计侧重点也不同。</p>\n<h3 id=\"数据结构-hash\"><a href=\"#数据结构-hash\" class=\"headerlink\" title=\"数据结构 hash\"></a>数据结构 hash</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string、<span class=\"keyword\">int</span>、bool、<span class=\"function\">object <span class=\"title\">hashCode</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"密码学-hash\"><a href=\"#密码学-hash\" class=\"headerlink\" title=\"密码学 hash\"></a>密码学 hash</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 算法   | bit 位数 | 16 进制字符串                                |</span><br><span class=\"line\">| ------ | -------- | -------------------------------------------- |</span><br><span class=\"line\">| md5    | 128      | e10adc3949ba59abbe56e057f20f883e             |</span><br><span class=\"line\">| sha1   | 160      | 7c4a8d09ca3762af61e59520943dc26494f8941b     |</span><br><span class=\"line\">| sha256 | 256      | 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a8... |</span><br><span class=\"line\">| crc32  | 32       | 70930f27                                     |</span><br><span class=\"line\">| fnv    | 32       | -                                            |</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fnv：FNV能快速hash大量数据并保持较小的冲突率，它的高度分散使它适用于hash一些非常相近的字符串，比如URL，hostname，文件名，text，IP地址等。</span><br><span class=\"line\">base64:编码后的数据比原始数据略长，为原来的4/3,用64个可见字符表示数据a-z A-Z 0-9 + / ,可序列化可反序列化</span><br><span class=\"line\">urlencode:url中只有字母和数字[0-9a-zA-Z]、一些特殊符号&quot;$-_.+!*&apos;(),&quot;[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hash-算法\"><a href=\"#hash-算法\" class=\"headerlink\" title=\"hash 算法\"></a>hash 算法</h2><p>简单来说：hash（散列、杂凑）函数，是将任意长度的数据映射到有限长度的域上。直观解释起来，就是对一串数据 m 进行杂糅，输出另一段固定长度的数据 h，作为这段数据的特征（指纹）。</p>\n<p>由于用途的不同，hash 在数据结构中的含义【hashCode()】和密码学【md5,sha1,sha256】中的含义并不相同，所以在这两种不同的领域里，算法的设计侧重点也不同。</p>\n<h3 id=\"数据结构-hash\"><a href=\"#数据结构-hash\" class=\"headerlink\" title=\"数据结构 hash\"></a>数据结构 hash</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string、<span class=\"keyword\">int</span>、bool、<span class=\"function\">object <span class=\"title\">hashCode</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"密码学-hash\"><a href=\"#密码学-hash\" class=\"headerlink\" title=\"密码学 hash\"></a>密码学 hash</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 算法   | bit 位数 | 16 进制字符串                                |</span><br><span class=\"line\">| ------ | -------- | -------------------------------------------- |</span><br><span class=\"line\">| md5    | 128      | e10adc3949ba59abbe56e057f20f883e             |</span><br><span class=\"line\">| sha1   | 160      | 7c4a8d09ca3762af61e59520943dc26494f8941b     |</span><br><span class=\"line\">| sha256 | 256      | 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a8... |</span><br><span class=\"line\">| crc32  | 32       | 70930f27                                     |</span><br><span class=\"line\">| fnv    | 32       | -                                            |</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fnv：FNV能快速hash大量数据并保持较小的冲突率，它的高度分散使它适用于hash一些非常相近的字符串，比如URL，hostname，文件名，text，IP地址等。</span><br><span class=\"line\">base64:编码后的数据比原始数据略长，为原来的4/3,用64个可见字符表示数据a-z A-Z 0-9 + / ,可序列化可反序列化</span><br><span class=\"line\">urlencode:url中只有字母和数字[0-9a-zA-Z]、一些特殊符号&quot;$-_.+!*&apos;(),&quot;[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。</span><br></pre></td></tr></table></figure>\n"},{"title":"protobuf_intro","date":"2019-10-07T12:55:39.000Z","_content":"\n## 为什么要使用 protobuf\n\n跟 JSON 相比 protobuf\n\n优点\n\n- 性能更高，更加规范\n- 编解码速度快，数据体积小\n- 使用统一的规范，不用再担心大小写不同导致解析失败等蛋疼的问题了\n\n缺点\n\n- 改动协议字段，需要重新生成文件。\n- 数据没有可读性\n\n## 安装\n\n在 go 中使用 protobuf，有两个可选用的包 goprotobuf（go 官方出品）和 gogoprotobuf。\ngogoprotobuf 完全兼容 google protobuf，它生成的代码质量和编解码性能均比 goprotobuf 高一些\n\n## 安装 protoc\n\n首先去[https://github.com/google/pro…](https://github.com/google/protobuf/releases) 上下载 protobuf 的编译器 protoc，同时设置环境变量\n\n## 安装 protobuf 库文件\n\n## goprotobuf\n\n安装插件和依赖库\n\n```go\ngo get github.com/golang/protobuf/proto\ngo get github.com/golang/protobuf/protoc-gen-go\n```\n\n生成 go 文件\n\n```go\nprotoc --go_out=. *.proto\n```\n\n## gogoprotobuf\n\n安装插件和依赖库\n\ngogoprotobuf 有两个插件可以使用\n\n- protoc-gen-gogo：和 protoc-gen-go 生成的文件差不多，性能稍微快一点点\n- protoc-gen-gofast：生成的文件更复杂，性能也更高(快 5-7 倍)\n\n```go\n// 依赖库\ngo get github.com/gogo/protobuf/proto\ngo get github.com/gogo/protobuf/gogoproto  //这个不装也没关系\n\n//gogo\ngo get github.com/gogo/protobuf/protoc-gen-gogo\n\n//gofast\ngo get github.com/gogo/protobuf/protoc-gen-gofast\n```\n\n生成 go 文件\n\n```go\n//gogo\nprotoc --gogo_out=. *.proto\n\n//gofast\nprotoc --gofast_out=. *.proto\n```\n\n## 简单使用\n\ntest.proto\n\n```proto3\n//指定版本，必须要写（proto3、proto2）\nsyntax = \"proto3\";\npackage proto;\n\nmessage UserInfo{\n    string message = 1;   //消息\n    int32 length = 2;    //消息大小\n    int32 cnt = 3;      //消息计数\n}\n```\n\nclient_protobuf.go\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"net\"\n    \"os\"\n    stProto \"proto\"\n    \"time\"\n\n    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个\n    \"github.com/golang/protobuf/proto\"\n    //\"github.com/gogo/protobuf/proto\"\n)\n\nfunc main() {\n    strIP := \"localhost:6600\"\n    var conn net.Conn\n    var err error\n\n    //连接服务器\n    for conn, err = net.Dial(\"tcp\", strIP); err != nil; conn, err = net.Dial(\"tcp\", strIP) {\n        fmt.Println(\"connect\", strIP, \"fail\")\n        time.Sleep(time.Second)\n        fmt.Println(\"reconnect...\")\n    }\n    fmt.Println(\"connect\", strIP, \"success\")\n    defer conn.Close()\n\n    //发送消息\n    cnt := 0\n    sender := bufio.NewScanner(os.Stdin)\n    for sender.Scan() {\n        cnt++\n        stSend := &stProto.UserInfo{\n            Message: sender.Text(),\n            Length:  *proto.Int(len(sender.Text())),\n            Cnt:     *proto.Int(cnt),\n        }\n\n        //protobuf编码\n        pData, err := proto.Marshal(stSend)\n        if err != nil {\n            panic(err)\n        }\n\n        //发送\n        conn.Write(pData)\n        if sender.Text() == \"stop\" {\n            return\n        }\n    }\n}\n```\n\nserver_protobuf.go\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"os\"\n    stProto \"proto\"\n\n    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个\n    \"github.com/golang/protobuf/proto\"\n    //\"github.com/gogo/protobuf/proto\"\n)\n\nfunc main() {\n    //监听\n    listener, err := net.Listen(\"tcp\", \"localhost:6600\")\n    if err != nil {\n        panic(err)\n    }\n\n    for {\n        conn, err := listener.Accept()\n        if err != nil {\n            panic(err)\n        }\n        fmt.Println(\"new connect\", conn.RemoteAddr())\n        go readMessage(conn)\n    }\n}\n\n//接收消息\nfunc readMessage(conn net.Conn) {\n    defer conn.Close()\n    buf := make([]byte, 4096, 4096)\n    for {\n        //读消息\n        cnt, err := conn.Read(buf)\n        if err != nil {\n            panic(err)\n        }\n\n        stReceive := &stProto.UserInfo{}\n        pData := buf[:cnt]\n\n        //protobuf解码\n        err = proto.Unmarshal(pData, stReceive)\n        if err != nil {\n            panic(err)\n        }\n\n        fmt.Println(\"receive\", conn.RemoteAddr(), stReceive)\n        if stReceive.Message == \"stop\" {\n            os.Exit(1)\n        }\n    }\n}\n```\n\n## 性能测试\n\n这里只是简单的用 go test 测试了一下\n\n```go\n//goprotobuf\n\"编码\"：447ns/op\n\"解码\"：422ns/op\n\n//gogoprotobuf-go\n\"编码\"：433ns/op\n\"解码\"：427ns/op\n\n//gogoprotobuf-fast\n\"编码\"：112ns/op\n\"解码\"：112ns/op\n```\n\n## gRPC-go\n\n安装\n\n```go\ngo get -u github.com/golang/protobuf/{proto,protoc-gen-go}\ngo get -u google.golang.org/grpc\nprotoc --go_out=plugins=grpc:. *.proto\n```\n\ngRPC 仓库\n\n```go\n// 引入包\ngoogle.golang.org/grpc\n\n// github\nhttps://github.com/grpc/grpc-go\n\n```\n\ngRPC 文档\n\n[gRPC 文档](https://godoc.org/google.golang.org/grpc)\n\ngRPC 需要使用插件：`plugins=grpc`，冒号`:`表示分割，点`.`表示当前目录\n\n```shell\nprotoc -I/usr/local/include -I. -I$GOPATH/src -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis --go_out=plugins=grpc:. *.proto\n```\n\nprotoc 工作原理\n\n[protoc 原理](<https://hitzhangjie.github.io/2017/05/23/Protoc%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90(%E7%B2%BE%E5%8D%8E%E7%89%88).html>)\n\ngRPC gateway\n[gRPC 仓库](https://github.com/grpc-ecosystem/grpc-gateway)\n优点\n\n- http rest 调用方式\n- swagger 文档生成\n","source":"_posts/cs/protobuf-intro.md","raw":"---\ntitle: protobuf_intro\ntags:\n  - protobuf\ncategories:\n  - protobuf\ndate: 2019-10-07 20:55:39\n---\n\n## 为什么要使用 protobuf\n\n跟 JSON 相比 protobuf\n\n优点\n\n- 性能更高，更加规范\n- 编解码速度快，数据体积小\n- 使用统一的规范，不用再担心大小写不同导致解析失败等蛋疼的问题了\n\n缺点\n\n- 改动协议字段，需要重新生成文件。\n- 数据没有可读性\n\n## 安装\n\n在 go 中使用 protobuf，有两个可选用的包 goprotobuf（go 官方出品）和 gogoprotobuf。\ngogoprotobuf 完全兼容 google protobuf，它生成的代码质量和编解码性能均比 goprotobuf 高一些\n\n## 安装 protoc\n\n首先去[https://github.com/google/pro…](https://github.com/google/protobuf/releases) 上下载 protobuf 的编译器 protoc，同时设置环境变量\n\n## 安装 protobuf 库文件\n\n## goprotobuf\n\n安装插件和依赖库\n\n```go\ngo get github.com/golang/protobuf/proto\ngo get github.com/golang/protobuf/protoc-gen-go\n```\n\n生成 go 文件\n\n```go\nprotoc --go_out=. *.proto\n```\n\n## gogoprotobuf\n\n安装插件和依赖库\n\ngogoprotobuf 有两个插件可以使用\n\n- protoc-gen-gogo：和 protoc-gen-go 生成的文件差不多，性能稍微快一点点\n- protoc-gen-gofast：生成的文件更复杂，性能也更高(快 5-7 倍)\n\n```go\n// 依赖库\ngo get github.com/gogo/protobuf/proto\ngo get github.com/gogo/protobuf/gogoproto  //这个不装也没关系\n\n//gogo\ngo get github.com/gogo/protobuf/protoc-gen-gogo\n\n//gofast\ngo get github.com/gogo/protobuf/protoc-gen-gofast\n```\n\n生成 go 文件\n\n```go\n//gogo\nprotoc --gogo_out=. *.proto\n\n//gofast\nprotoc --gofast_out=. *.proto\n```\n\n## 简单使用\n\ntest.proto\n\n```proto3\n//指定版本，必须要写（proto3、proto2）\nsyntax = \"proto3\";\npackage proto;\n\nmessage UserInfo{\n    string message = 1;   //消息\n    int32 length = 2;    //消息大小\n    int32 cnt = 3;      //消息计数\n}\n```\n\nclient_protobuf.go\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"net\"\n    \"os\"\n    stProto \"proto\"\n    \"time\"\n\n    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个\n    \"github.com/golang/protobuf/proto\"\n    //\"github.com/gogo/protobuf/proto\"\n)\n\nfunc main() {\n    strIP := \"localhost:6600\"\n    var conn net.Conn\n    var err error\n\n    //连接服务器\n    for conn, err = net.Dial(\"tcp\", strIP); err != nil; conn, err = net.Dial(\"tcp\", strIP) {\n        fmt.Println(\"connect\", strIP, \"fail\")\n        time.Sleep(time.Second)\n        fmt.Println(\"reconnect...\")\n    }\n    fmt.Println(\"connect\", strIP, \"success\")\n    defer conn.Close()\n\n    //发送消息\n    cnt := 0\n    sender := bufio.NewScanner(os.Stdin)\n    for sender.Scan() {\n        cnt++\n        stSend := &stProto.UserInfo{\n            Message: sender.Text(),\n            Length:  *proto.Int(len(sender.Text())),\n            Cnt:     *proto.Int(cnt),\n        }\n\n        //protobuf编码\n        pData, err := proto.Marshal(stSend)\n        if err != nil {\n            panic(err)\n        }\n\n        //发送\n        conn.Write(pData)\n        if sender.Text() == \"stop\" {\n            return\n        }\n    }\n}\n```\n\nserver_protobuf.go\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"os\"\n    stProto \"proto\"\n\n    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个\n    \"github.com/golang/protobuf/proto\"\n    //\"github.com/gogo/protobuf/proto\"\n)\n\nfunc main() {\n    //监听\n    listener, err := net.Listen(\"tcp\", \"localhost:6600\")\n    if err != nil {\n        panic(err)\n    }\n\n    for {\n        conn, err := listener.Accept()\n        if err != nil {\n            panic(err)\n        }\n        fmt.Println(\"new connect\", conn.RemoteAddr())\n        go readMessage(conn)\n    }\n}\n\n//接收消息\nfunc readMessage(conn net.Conn) {\n    defer conn.Close()\n    buf := make([]byte, 4096, 4096)\n    for {\n        //读消息\n        cnt, err := conn.Read(buf)\n        if err != nil {\n            panic(err)\n        }\n\n        stReceive := &stProto.UserInfo{}\n        pData := buf[:cnt]\n\n        //protobuf解码\n        err = proto.Unmarshal(pData, stReceive)\n        if err != nil {\n            panic(err)\n        }\n\n        fmt.Println(\"receive\", conn.RemoteAddr(), stReceive)\n        if stReceive.Message == \"stop\" {\n            os.Exit(1)\n        }\n    }\n}\n```\n\n## 性能测试\n\n这里只是简单的用 go test 测试了一下\n\n```go\n//goprotobuf\n\"编码\"：447ns/op\n\"解码\"：422ns/op\n\n//gogoprotobuf-go\n\"编码\"：433ns/op\n\"解码\"：427ns/op\n\n//gogoprotobuf-fast\n\"编码\"：112ns/op\n\"解码\"：112ns/op\n```\n\n## gRPC-go\n\n安装\n\n```go\ngo get -u github.com/golang/protobuf/{proto,protoc-gen-go}\ngo get -u google.golang.org/grpc\nprotoc --go_out=plugins=grpc:. *.proto\n```\n\ngRPC 仓库\n\n```go\n// 引入包\ngoogle.golang.org/grpc\n\n// github\nhttps://github.com/grpc/grpc-go\n\n```\n\ngRPC 文档\n\n[gRPC 文档](https://godoc.org/google.golang.org/grpc)\n\ngRPC 需要使用插件：`plugins=grpc`，冒号`:`表示分割，点`.`表示当前目录\n\n```shell\nprotoc -I/usr/local/include -I. -I$GOPATH/src -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis --go_out=plugins=grpc:. *.proto\n```\n\nprotoc 工作原理\n\n[protoc 原理](<https://hitzhangjie.github.io/2017/05/23/Protoc%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90(%E7%B2%BE%E5%8D%8E%E7%89%88).html>)\n\ngRPC gateway\n[gRPC 仓库](https://github.com/grpc-ecosystem/grpc-gateway)\n优点\n\n- http rest 调用方式\n- swagger 文档生成\n","slug":"cs/protobuf-intro","published":1,"updated":"2020-05-25T03:40:58.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr5o0007g938yxp4j5ag","content":"<h2 id=\"为什么要使用-protobuf\"><a href=\"#为什么要使用-protobuf\" class=\"headerlink\" title=\"为什么要使用 protobuf\"></a>为什么要使用 protobuf</h2><p>跟 JSON 相比 protobuf</p>\n<p>优点</p>\n<ul>\n<li>性能更高，更加规范</li>\n<li>编解码速度快，数据体积小</li>\n<li>使用统一的规范，不用再担心大小写不同导致解析失败等蛋疼的问题了</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>改动协议字段，需要重新生成文件。</li>\n<li>数据没有可读性</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在 go 中使用 protobuf，有两个可选用的包 goprotobuf（go 官方出品）和 gogoprotobuf。<br>gogoprotobuf 完全兼容 google protobuf，它生成的代码质量和编解码性能均比 goprotobuf 高一些</p>\n<h2 id=\"安装-protoc\"><a href=\"#安装-protoc\" class=\"headerlink\" title=\"安装 protoc\"></a>安装 protoc</h2><p>首先去<a href=\"https://github.com/google/protobuf/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/google/pro…</a> 上下载 protobuf 的编译器 protoc，同时设置环境变量</p>\n<h2 id=\"安装-protobuf-库文件\"><a href=\"#安装-protobuf-库文件\" class=\"headerlink\" title=\"安装 protobuf 库文件\"></a>安装 protobuf 库文件</h2><h2 id=\"goprotobuf\"><a href=\"#goprotobuf\" class=\"headerlink\" title=\"goprotobuf\"></a>goprotobuf</h2><p>安装插件和依赖库</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get github.com/golang/protobuf/proto</span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/golang/protobuf/protoc-gen-<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<p>生成 go 文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=. *.proto</span><br></pre></td></tr></table></figure>\n<h2 id=\"gogoprotobuf\"><a href=\"#gogoprotobuf\" class=\"headerlink\" title=\"gogoprotobuf\"></a>gogoprotobuf</h2><p>安装插件和依赖库</p>\n<p>gogoprotobuf 有两个插件可以使用</p>\n<ul>\n<li>protoc-gen-gogo：和 protoc-gen-go 生成的文件差不多，性能稍微快一点点</li>\n<li>protoc-gen-gofast：生成的文件更复杂，性能也更高(快 5-7 倍)</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依赖库</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/gogo/protobuf/proto</span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/gogo/protobuf/gogoproto  <span class=\"comment\">//这个不装也没关系</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gogo</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/gogo/protobuf/protoc-gen-gogo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gofast</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/gogo/protobuf/protoc-gen-gofast</span><br></pre></td></tr></table></figure>\n<p>生成 go 文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//gogo</span></span><br><span class=\"line\">protoc --gogo_out=. *.proto</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gofast</span></span><br><span class=\"line\">protoc --gofast_out=. *.proto</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p>test.proto</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//指定版本，必须要写（proto3、proto2）</span><br><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\">package proto;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserInfo&#123;</span><br><span class=\"line\">    string message = 1;   //消息</span><br><span class=\"line\">    int32 length = 2;    //消息大小</span><br><span class=\"line\">    int32 cnt = 3;      //消息计数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>client_protobuf.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">    stProto <span class=\"string\">\"proto\"</span></span><br><span class=\"line\">    <span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/golang/protobuf/proto\"</span></span><br><span class=\"line\">    <span class=\"comment\">//\"github.com/gogo/protobuf/proto\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    strIP := <span class=\"string\">\"localhost:6600\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> conn net.Conn</span><br><span class=\"line\">    <span class=\"keyword\">var</span> err error</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//连接服务器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> conn, err = net.Dial(<span class=\"string\">\"tcp\"</span>, strIP); err != <span class=\"literal\">nil</span>; conn, err = net.Dial(<span class=\"string\">\"tcp\"</span>, strIP) &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"connect\"</span>, strIP, <span class=\"string\">\"fail\"</span>)</span><br><span class=\"line\">        time.Sleep(time.Second)</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"reconnect...\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"connect\"</span>, strIP, <span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">    cnt := <span class=\"number\">0</span></span><br><span class=\"line\">    sender := bufio.NewScanner(os.Stdin)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> sender.Scan() &#123;</span><br><span class=\"line\">        cnt++</span><br><span class=\"line\">        stSend := &amp;stProto.UserInfo&#123;</span><br><span class=\"line\">            Message: sender.Text(),</span><br><span class=\"line\">            Length:  *proto.Int(<span class=\"built_in\">len</span>(sender.Text())),</span><br><span class=\"line\">            Cnt:     *proto.Int(cnt),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//protobuf编码</span></span><br><span class=\"line\">        pData, err := proto.Marshal(stSend)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//发送</span></span><br><span class=\"line\">        conn.Write(pData)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sender.Text() == <span class=\"string\">\"stop\"</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>server_protobuf.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">    stProto <span class=\"string\">\"proto\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/golang/protobuf/proto\"</span></span><br><span class=\"line\">    <span class=\"comment\">//\"github.com/gogo/protobuf/proto\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//监听</span></span><br><span class=\"line\">    listener, err := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:6600\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        conn, err := listener.Accept()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"new connect\"</span>, conn.RemoteAddr())</span><br><span class=\"line\">        <span class=\"keyword\">go</span> readMessage(conn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收消息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readMessage</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">    buf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">4096</span>, <span class=\"number\">4096</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读消息</span></span><br><span class=\"line\">        cnt, err := conn.Read(buf)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stReceive := &amp;stProto.UserInfo&#123;&#125;</span><br><span class=\"line\">        pData := buf[:cnt]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//protobuf解码</span></span><br><span class=\"line\">        err = proto.Unmarshal(pData, stReceive)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"receive\"</span>, conn.RemoteAddr(), stReceive)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> stReceive.Message == <span class=\"string\">\"stop\"</span> &#123;</span><br><span class=\"line\">            os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><p>这里只是简单的用 go test 测试了一下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//goprotobuf</span></span><br><span class=\"line\"><span class=\"string\">\"编码\"</span>：<span class=\"number\">447</span>ns/op</span><br><span class=\"line\"><span class=\"string\">\"解码\"</span>：<span class=\"number\">422</span>ns/op</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gogoprotobuf-go</span></span><br><span class=\"line\"><span class=\"string\">\"编码\"</span>：<span class=\"number\">433</span>ns/op</span><br><span class=\"line\"><span class=\"string\">\"解码\"</span>：<span class=\"number\">427</span>ns/op</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gogoprotobuf-fast</span></span><br><span class=\"line\"><span class=\"string\">\"编码\"</span>：<span class=\"number\">112</span>ns/op</span><br><span class=\"line\"><span class=\"string\">\"解码\"</span>：<span class=\"number\">112</span>ns/op</span><br></pre></td></tr></table></figure>\n<h2 id=\"gRPC-go\"><a href=\"#gRPC-go\" class=\"headerlink\" title=\"gRPC-go\"></a>gRPC-go</h2><p>安装</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get -u github.com/golang/protobuf/&#123;proto,protoc-gen-<span class=\"keyword\">go</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">go</span> get -u google.golang.org/grpc</span><br><span class=\"line\">protoc --go_out=plugins=grpc:. *.proto</span><br></pre></td></tr></table></figure>\n<p>gRPC 仓库</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入包</span></span><br><span class=\"line\">google.golang.org/grpc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// github</span></span><br><span class=\"line\">https:<span class=\"comment\">//github.com/grpc/grpc-go</span></span><br></pre></td></tr></table></figure>\n<p>gRPC 文档</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc\" target=\"_blank\" rel=\"noopener\">gRPC 文档</a></p>\n<p>gRPC 需要使用插件：<code>plugins=grpc</code>，冒号<code>:</code>表示分割，点<code>.</code>表示当前目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc -I/usr/local/include -I. -I$GOPATH/src -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis --go_out=plugins=grpc:. *.proto</span><br></pre></td></tr></table></figure>\n<p>protoc 工作原理</p>\n<p><a href=\"https://hitzhangjie.github.io/2017/05/23/Protoc%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90(%E7%B2%BE%E5%8D%8E%E7%89%88\" target=\"_blank\" rel=\"noopener\">protoc 原理</a>.html&gt;)</p>\n<p>gRPC gateway<br><a href=\"https://github.com/grpc-ecosystem/grpc-gateway\" target=\"_blank\" rel=\"noopener\">gRPC 仓库</a><br>优点</p>\n<ul>\n<li>http rest 调用方式</li>\n<li>swagger 文档生成</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要使用-protobuf\"><a href=\"#为什么要使用-protobuf\" class=\"headerlink\" title=\"为什么要使用 protobuf\"></a>为什么要使用 protobuf</h2><p>跟 JSON 相比 protobuf</p>\n<p>优点</p>\n<ul>\n<li>性能更高，更加规范</li>\n<li>编解码速度快，数据体积小</li>\n<li>使用统一的规范，不用再担心大小写不同导致解析失败等蛋疼的问题了</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>改动协议字段，需要重新生成文件。</li>\n<li>数据没有可读性</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在 go 中使用 protobuf，有两个可选用的包 goprotobuf（go 官方出品）和 gogoprotobuf。<br>gogoprotobuf 完全兼容 google protobuf，它生成的代码质量和编解码性能均比 goprotobuf 高一些</p>\n<h2 id=\"安装-protoc\"><a href=\"#安装-protoc\" class=\"headerlink\" title=\"安装 protoc\"></a>安装 protoc</h2><p>首先去<a href=\"https://github.com/google/protobuf/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/google/pro…</a> 上下载 protobuf 的编译器 protoc，同时设置环境变量</p>\n<h2 id=\"安装-protobuf-库文件\"><a href=\"#安装-protobuf-库文件\" class=\"headerlink\" title=\"安装 protobuf 库文件\"></a>安装 protobuf 库文件</h2><h2 id=\"goprotobuf\"><a href=\"#goprotobuf\" class=\"headerlink\" title=\"goprotobuf\"></a>goprotobuf</h2><p>安装插件和依赖库</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get github.com/golang/protobuf/proto</span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/golang/protobuf/protoc-gen-<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<p>生成 go 文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=. *.proto</span><br></pre></td></tr></table></figure>\n<h2 id=\"gogoprotobuf\"><a href=\"#gogoprotobuf\" class=\"headerlink\" title=\"gogoprotobuf\"></a>gogoprotobuf</h2><p>安装插件和依赖库</p>\n<p>gogoprotobuf 有两个插件可以使用</p>\n<ul>\n<li>protoc-gen-gogo：和 protoc-gen-go 生成的文件差不多，性能稍微快一点点</li>\n<li>protoc-gen-gofast：生成的文件更复杂，性能也更高(快 5-7 倍)</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依赖库</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/gogo/protobuf/proto</span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/gogo/protobuf/gogoproto  <span class=\"comment\">//这个不装也没关系</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gogo</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/gogo/protobuf/protoc-gen-gogo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gofast</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/gogo/protobuf/protoc-gen-gofast</span><br></pre></td></tr></table></figure>\n<p>生成 go 文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//gogo</span></span><br><span class=\"line\">protoc --gogo_out=. *.proto</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gofast</span></span><br><span class=\"line\">protoc --gofast_out=. *.proto</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p>test.proto</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//指定版本，必须要写（proto3、proto2）</span><br><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\">package proto;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserInfo&#123;</span><br><span class=\"line\">    string message = 1;   //消息</span><br><span class=\"line\">    int32 length = 2;    //消息大小</span><br><span class=\"line\">    int32 cnt = 3;      //消息计数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>client_protobuf.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">    stProto <span class=\"string\">\"proto\"</span></span><br><span class=\"line\">    <span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/golang/protobuf/proto\"</span></span><br><span class=\"line\">    <span class=\"comment\">//\"github.com/gogo/protobuf/proto\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    strIP := <span class=\"string\">\"localhost:6600\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> conn net.Conn</span><br><span class=\"line\">    <span class=\"keyword\">var</span> err error</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//连接服务器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> conn, err = net.Dial(<span class=\"string\">\"tcp\"</span>, strIP); err != <span class=\"literal\">nil</span>; conn, err = net.Dial(<span class=\"string\">\"tcp\"</span>, strIP) &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"connect\"</span>, strIP, <span class=\"string\">\"fail\"</span>)</span><br><span class=\"line\">        time.Sleep(time.Second)</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"reconnect...\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"connect\"</span>, strIP, <span class=\"string\">\"success\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">    cnt := <span class=\"number\">0</span></span><br><span class=\"line\">    sender := bufio.NewScanner(os.Stdin)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> sender.Scan() &#123;</span><br><span class=\"line\">        cnt++</span><br><span class=\"line\">        stSend := &amp;stProto.UserInfo&#123;</span><br><span class=\"line\">            Message: sender.Text(),</span><br><span class=\"line\">            Length:  *proto.Int(<span class=\"built_in\">len</span>(sender.Text())),</span><br><span class=\"line\">            Cnt:     *proto.Int(cnt),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//protobuf编码</span></span><br><span class=\"line\">        pData, err := proto.Marshal(stSend)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//发送</span></span><br><span class=\"line\">        conn.Write(pData)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sender.Text() == <span class=\"string\">\"stop\"</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>server_protobuf.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">    stProto <span class=\"string\">\"proto\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/golang/protobuf/proto\"</span></span><br><span class=\"line\">    <span class=\"comment\">//\"github.com/gogo/protobuf/proto\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//监听</span></span><br><span class=\"line\">    listener, err := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:6600\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        conn, err := listener.Accept()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"new connect\"</span>, conn.RemoteAddr())</span><br><span class=\"line\">        <span class=\"keyword\">go</span> readMessage(conn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收消息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readMessage</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">    buf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">4096</span>, <span class=\"number\">4096</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读消息</span></span><br><span class=\"line\">        cnt, err := conn.Read(buf)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stReceive := &amp;stProto.UserInfo&#123;&#125;</span><br><span class=\"line\">        pData := buf[:cnt]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//protobuf解码</span></span><br><span class=\"line\">        err = proto.Unmarshal(pData, stReceive)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"receive\"</span>, conn.RemoteAddr(), stReceive)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> stReceive.Message == <span class=\"string\">\"stop\"</span> &#123;</span><br><span class=\"line\">            os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><p>这里只是简单的用 go test 测试了一下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//goprotobuf</span></span><br><span class=\"line\"><span class=\"string\">\"编码\"</span>：<span class=\"number\">447</span>ns/op</span><br><span class=\"line\"><span class=\"string\">\"解码\"</span>：<span class=\"number\">422</span>ns/op</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gogoprotobuf-go</span></span><br><span class=\"line\"><span class=\"string\">\"编码\"</span>：<span class=\"number\">433</span>ns/op</span><br><span class=\"line\"><span class=\"string\">\"解码\"</span>：<span class=\"number\">427</span>ns/op</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gogoprotobuf-fast</span></span><br><span class=\"line\"><span class=\"string\">\"编码\"</span>：<span class=\"number\">112</span>ns/op</span><br><span class=\"line\"><span class=\"string\">\"解码\"</span>：<span class=\"number\">112</span>ns/op</span><br></pre></td></tr></table></figure>\n<h2 id=\"gRPC-go\"><a href=\"#gRPC-go\" class=\"headerlink\" title=\"gRPC-go\"></a>gRPC-go</h2><p>安装</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get -u github.com/golang/protobuf/&#123;proto,protoc-gen-<span class=\"keyword\">go</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">go</span> get -u google.golang.org/grpc</span><br><span class=\"line\">protoc --go_out=plugins=grpc:. *.proto</span><br></pre></td></tr></table></figure>\n<p>gRPC 仓库</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入包</span></span><br><span class=\"line\">google.golang.org/grpc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// github</span></span><br><span class=\"line\">https:<span class=\"comment\">//github.com/grpc/grpc-go</span></span><br></pre></td></tr></table></figure>\n<p>gRPC 文档</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc\" target=\"_blank\" rel=\"noopener\">gRPC 文档</a></p>\n<p>gRPC 需要使用插件：<code>plugins=grpc</code>，冒号<code>:</code>表示分割，点<code>.</code>表示当前目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc -I/usr/local/include -I. -I$GOPATH/src -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis --go_out=plugins=grpc:. *.proto</span><br></pre></td></tr></table></figure>\n<p>protoc 工作原理</p>\n<p><a href=\"https://hitzhangjie.github.io/2017/05/23/Protoc%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90(%E7%B2%BE%E5%8D%8E%E7%89%88\" target=\"_blank\" rel=\"noopener\">protoc 原理</a>.html&gt;)</p>\n<p>gRPC gateway<br><a href=\"https://github.com/grpc-ecosystem/grpc-gateway\" target=\"_blank\" rel=\"noopener\">gRPC 仓库</a><br>优点</p>\n<ul>\n<li>http rest 调用方式</li>\n<li>swagger 文档生成</li>\n</ul>\n"},{"title":"代码规范","date":"2019-02-21T10:30:18.000Z","_content":"\n## 代码风格\n\n### 代码简洁 VS 代码易读\n\n```go\nif (variable != null) {\n   return variable.getSomething();\n}\nreturn null;\n\n\nreturn x >= 90 ? \"A\" : x >= 80 ? \"B\" : x >= 70 ? \"C\" : x >= 60 ? \"D\" : \"E\";\n```\n\n坚持使用最直观的编码方式，而不是追求代码简短，真的可以避免很多不必要的错误。golang 不支持条件运算符\n\n### 好代码 VS 坏代码\n\n好代码\n\n- 容易理解(if 和条件运算符?)\n- 没有安全问题(\\*指针 并发 map)\n- 有充分的注释(关键地方有注释)\n- 命名规范(驼峰和下划线)\n- 有充分的测试(先测试再上线)\n\n坏代码\n\n- 难以阅读（函数太长太大）\n- 浪费计算机资源\n- 代码风格混乱\n- 没有测试\n\n### 优秀程序员\n\n硬指标\n\n- 优秀的编程技能\n- 解决问题能力\n- 认知和发现问题的能力\n\n软指标\n\n- 为高效推进目标进程，作出合适的权衡和妥协\n- 团队协调能力\n- 时间管理能力\n\n### 怎么写注释\n\n- Code Tells You How, Comments Tell You Why.\n- 参考 golang 源码\n  - 核心方法注释【英文不好可以用中文】\n\n### 异常处理\n\n底层 IO 的错误，抛给上层处理，上层来处理各种错误\n\n- socketIO 【redis/mysql/kafka】\n- file\n\n### 文档\n\n- 简介\n- 快速上手\n- 开发指南\n- 高级用法\n- 二次开发\n\n### 高效工具\n\n- 思维导图\n- 时序图\n- 问题清单\n","source":"_posts/cs/代码规范.md","raw":"---\ntitle: 代码规范\ntags:\n  - code_style\ncategories:\n  - code_style\ndate: 2019-02-21 18:30:18\n---\n\n## 代码风格\n\n### 代码简洁 VS 代码易读\n\n```go\nif (variable != null) {\n   return variable.getSomething();\n}\nreturn null;\n\n\nreturn x >= 90 ? \"A\" : x >= 80 ? \"B\" : x >= 70 ? \"C\" : x >= 60 ? \"D\" : \"E\";\n```\n\n坚持使用最直观的编码方式，而不是追求代码简短，真的可以避免很多不必要的错误。golang 不支持条件运算符\n\n### 好代码 VS 坏代码\n\n好代码\n\n- 容易理解(if 和条件运算符?)\n- 没有安全问题(\\*指针 并发 map)\n- 有充分的注释(关键地方有注释)\n- 命名规范(驼峰和下划线)\n- 有充分的测试(先测试再上线)\n\n坏代码\n\n- 难以阅读（函数太长太大）\n- 浪费计算机资源\n- 代码风格混乱\n- 没有测试\n\n### 优秀程序员\n\n硬指标\n\n- 优秀的编程技能\n- 解决问题能力\n- 认知和发现问题的能力\n\n软指标\n\n- 为高效推进目标进程，作出合适的权衡和妥协\n- 团队协调能力\n- 时间管理能力\n\n### 怎么写注释\n\n- Code Tells You How, Comments Tell You Why.\n- 参考 golang 源码\n  - 核心方法注释【英文不好可以用中文】\n\n### 异常处理\n\n底层 IO 的错误，抛给上层处理，上层来处理各种错误\n\n- socketIO 【redis/mysql/kafka】\n- file\n\n### 文档\n\n- 简介\n- 快速上手\n- 开发指南\n- 高级用法\n- 二次开发\n\n### 高效工具\n\n- 思维导图\n- 时序图\n- 问题清单\n","slug":"cs/代码规范","published":1,"updated":"2020-05-25T02:40:48.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr5q0008g9380iixwaz9","content":"<h2 id=\"代码风格\"><a href=\"#代码风格\" class=\"headerlink\" title=\"代码风格\"></a>代码风格</h2><h3 id=\"代码简洁-VS-代码易读\"><a href=\"#代码简洁-VS-代码易读\" class=\"headerlink\" title=\"代码简洁 VS 代码易读\"></a>代码简洁 VS 代码易读</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (variable != null) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> variable.getSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> null;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> x &gt;= <span class=\"number\">90</span> ? <span class=\"string\">\"A\"</span> : x &gt;= <span class=\"number\">80</span> ? <span class=\"string\">\"B\"</span> : x &gt;= <span class=\"number\">70</span> ? <span class=\"string\">\"C\"</span> : x &gt;= <span class=\"number\">60</span> ? <span class=\"string\">\"D\"</span> : <span class=\"string\">\"E\"</span>;</span><br></pre></td></tr></table></figure>\n<p>坚持使用最直观的编码方式，而不是追求代码简短，真的可以避免很多不必要的错误。golang 不支持条件运算符</p>\n<h3 id=\"好代码-VS-坏代码\"><a href=\"#好代码-VS-坏代码\" class=\"headerlink\" title=\"好代码 VS 坏代码\"></a>好代码 VS 坏代码</h3><p>好代码</p>\n<ul>\n<li>容易理解(if 和条件运算符?)</li>\n<li>没有安全问题(*指针 并发 map)</li>\n<li>有充分的注释(关键地方有注释)</li>\n<li>命名规范(驼峰和下划线)</li>\n<li>有充分的测试(先测试再上线)</li>\n</ul>\n<p>坏代码</p>\n<ul>\n<li>难以阅读（函数太长太大）</li>\n<li>浪费计算机资源</li>\n<li>代码风格混乱</li>\n<li>没有测试</li>\n</ul>\n<h3 id=\"优秀程序员\"><a href=\"#优秀程序员\" class=\"headerlink\" title=\"优秀程序员\"></a>优秀程序员</h3><p>硬指标</p>\n<ul>\n<li>优秀的编程技能</li>\n<li>解决问题能力</li>\n<li>认知和发现问题的能力</li>\n</ul>\n<p>软指标</p>\n<ul>\n<li>为高效推进目标进程，作出合适的权衡和妥协</li>\n<li>团队协调能力</li>\n<li>时间管理能力</li>\n</ul>\n<h3 id=\"怎么写注释\"><a href=\"#怎么写注释\" class=\"headerlink\" title=\"怎么写注释\"></a>怎么写注释</h3><ul>\n<li>Code Tells You How, Comments Tell You Why.</li>\n<li>参考 golang 源码<ul>\n<li>核心方法注释【英文不好可以用中文】</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>底层 IO 的错误，抛给上层处理，上层来处理各种错误</p>\n<ul>\n<li>socketIO 【redis/mysql/kafka】</li>\n<li>file</li>\n</ul>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li>简介</li>\n<li>快速上手</li>\n<li>开发指南</li>\n<li>高级用法</li>\n<li>二次开发</li>\n</ul>\n<h3 id=\"高效工具\"><a href=\"#高效工具\" class=\"headerlink\" title=\"高效工具\"></a>高效工具</h3><ul>\n<li>思维导图</li>\n<li>时序图</li>\n<li>问题清单</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码风格\"><a href=\"#代码风格\" class=\"headerlink\" title=\"代码风格\"></a>代码风格</h2><h3 id=\"代码简洁-VS-代码易读\"><a href=\"#代码简洁-VS-代码易读\" class=\"headerlink\" title=\"代码简洁 VS 代码易读\"></a>代码简洁 VS 代码易读</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (variable != null) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> variable.getSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> null;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> x &gt;= <span class=\"number\">90</span> ? <span class=\"string\">\"A\"</span> : x &gt;= <span class=\"number\">80</span> ? <span class=\"string\">\"B\"</span> : x &gt;= <span class=\"number\">70</span> ? <span class=\"string\">\"C\"</span> : x &gt;= <span class=\"number\">60</span> ? <span class=\"string\">\"D\"</span> : <span class=\"string\">\"E\"</span>;</span><br></pre></td></tr></table></figure>\n<p>坚持使用最直观的编码方式，而不是追求代码简短，真的可以避免很多不必要的错误。golang 不支持条件运算符</p>\n<h3 id=\"好代码-VS-坏代码\"><a href=\"#好代码-VS-坏代码\" class=\"headerlink\" title=\"好代码 VS 坏代码\"></a>好代码 VS 坏代码</h3><p>好代码</p>\n<ul>\n<li>容易理解(if 和条件运算符?)</li>\n<li>没有安全问题(*指针 并发 map)</li>\n<li>有充分的注释(关键地方有注释)</li>\n<li>命名规范(驼峰和下划线)</li>\n<li>有充分的测试(先测试再上线)</li>\n</ul>\n<p>坏代码</p>\n<ul>\n<li>难以阅读（函数太长太大）</li>\n<li>浪费计算机资源</li>\n<li>代码风格混乱</li>\n<li>没有测试</li>\n</ul>\n<h3 id=\"优秀程序员\"><a href=\"#优秀程序员\" class=\"headerlink\" title=\"优秀程序员\"></a>优秀程序员</h3><p>硬指标</p>\n<ul>\n<li>优秀的编程技能</li>\n<li>解决问题能力</li>\n<li>认知和发现问题的能力</li>\n</ul>\n<p>软指标</p>\n<ul>\n<li>为高效推进目标进程，作出合适的权衡和妥协</li>\n<li>团队协调能力</li>\n<li>时间管理能力</li>\n</ul>\n<h3 id=\"怎么写注释\"><a href=\"#怎么写注释\" class=\"headerlink\" title=\"怎么写注释\"></a>怎么写注释</h3><ul>\n<li>Code Tells You How, Comments Tell You Why.</li>\n<li>参考 golang 源码<ul>\n<li>核心方法注释【英文不好可以用中文】</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>底层 IO 的错误，抛给上层处理，上层来处理各种错误</p>\n<ul>\n<li>socketIO 【redis/mysql/kafka】</li>\n<li>file</li>\n</ul>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li>简介</li>\n<li>快速上手</li>\n<li>开发指南</li>\n<li>高级用法</li>\n<li>二次开发</li>\n</ul>\n<h3 id=\"高效工具\"><a href=\"#高效工具\" class=\"headerlink\" title=\"高效工具\"></a>高效工具</h3><ul>\n<li>思维导图</li>\n<li>时序图</li>\n<li>问题清单</li>\n</ul>\n"},{"title":"https理解","date":"2019-03-11T06:58:50.000Z","_content":"\n## https 请求过程\n\n### 交互流程\n\n1. 加密通信一条完整的 HTTPS 请求应该是这样的：客户端 (浏览器) 发起 HTTP 请求，请求连接服务端，发送支持的加密通信协议 (和版本)，并且生成一个随机数，后续用于生成\"对话密钥\"。【关键点：加密协议列表和随机数】\n\n2. 服务端确认加密通信协议 (和版本)，同时也生成一个随机数，后续用于生成\"对话密匙\"，并且将 CA 颁发的数字证书，一起发送给客户端。【关键点：确认加密协议、随机数、证书】\n\n3. 客户端收到数字证书后，检测内置的\"受信任的根证书颁发机构\"，查看解开数字证书的公匙是否在。如果解开数字证书的公匙存在，则使用它解开数字证书，得到正确的服务器公匙，同时再次生成一个随机数，用于服务器公匙加密，并发送给服务器。【关键点：解开证书，通过公钥加密随机数】\n\n4. 此时本地和服务器同时将三个随机数，根据约定的加密方法进行加密，各自生成本次会话的所使用的同一把 \"会话密匙\" 。到这里，认证阶段已经完毕，数据传输从非对称加密换成了对称加密(因为考虑到性能)，接下来所有的数据传输都是使用 HTTP 协议进行传输，只不过使用了 \"会话密匙\" 来加密内容。【关键点：私钥解密随机数，都使用三个随机数生成密匙】\n\n### 流程图\n\n![流程图](../../images/https-detail.png)\n","source":"_posts/cs/https理解.md","raw":"---\ntitle: https理解\ntags:\n  - https\n  - SSL/TLS\n\ncategories:\n  - cs\ndate: 2019-03-11 14:58:50\n---\n\n## https 请求过程\n\n### 交互流程\n\n1. 加密通信一条完整的 HTTPS 请求应该是这样的：客户端 (浏览器) 发起 HTTP 请求，请求连接服务端，发送支持的加密通信协议 (和版本)，并且生成一个随机数，后续用于生成\"对话密钥\"。【关键点：加密协议列表和随机数】\n\n2. 服务端确认加密通信协议 (和版本)，同时也生成一个随机数，后续用于生成\"对话密匙\"，并且将 CA 颁发的数字证书，一起发送给客户端。【关键点：确认加密协议、随机数、证书】\n\n3. 客户端收到数字证书后，检测内置的\"受信任的根证书颁发机构\"，查看解开数字证书的公匙是否在。如果解开数字证书的公匙存在，则使用它解开数字证书，得到正确的服务器公匙，同时再次生成一个随机数，用于服务器公匙加密，并发送给服务器。【关键点：解开证书，通过公钥加密随机数】\n\n4. 此时本地和服务器同时将三个随机数，根据约定的加密方法进行加密，各自生成本次会话的所使用的同一把 \"会话密匙\" 。到这里，认证阶段已经完毕，数据传输从非对称加密换成了对称加密(因为考虑到性能)，接下来所有的数据传输都是使用 HTTP 协议进行传输，只不过使用了 \"会话密匙\" 来加密内容。【关键点：私钥解密随机数，都使用三个随机数生成密匙】\n\n### 流程图\n\n![流程图](../../images/https-detail.png)\n","slug":"cs/https理解","published":1,"updated":"2020-05-25T03:17:24.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr5s0009g938da3t9i8c","content":"<h2 id=\"https-请求过程\"><a href=\"#https-请求过程\" class=\"headerlink\" title=\"https 请求过程\"></a>https 请求过程</h2><h3 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h3><ol>\n<li><p>加密通信一条完整的 HTTPS 请求应该是这样的：客户端 (浏览器) 发起 HTTP 请求，请求连接服务端，发送支持的加密通信协议 (和版本)，并且生成一个随机数，后续用于生成”对话密钥”。【关键点：加密协议列表和随机数】</p>\n</li>\n<li><p>服务端确认加密通信协议 (和版本)，同时也生成一个随机数，后续用于生成”对话密匙”，并且将 CA 颁发的数字证书，一起发送给客户端。【关键点：确认加密协议、随机数、证书】</p>\n</li>\n<li><p>客户端收到数字证书后，检测内置的”受信任的根证书颁发机构”，查看解开数字证书的公匙是否在。如果解开数字证书的公匙存在，则使用它解开数字证书，得到正确的服务器公匙，同时再次生成一个随机数，用于服务器公匙加密，并发送给服务器。【关键点：解开证书，通过公钥加密随机数】</p>\n</li>\n<li><p>此时本地和服务器同时将三个随机数，根据约定的加密方法进行加密，各自生成本次会话的所使用的同一把 “会话密匙” 。到这里，认证阶段已经完毕，数据传输从非对称加密换成了对称加密(因为考虑到性能)，接下来所有的数据传输都是使用 HTTP 协议进行传输，只不过使用了 “会话密匙” 来加密内容。【关键点：私钥解密随机数，都使用三个随机数生成密匙】</p>\n</li>\n</ol>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img src=\"../../images/https-detail.png\" alt=\"流程图\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"https-请求过程\"><a href=\"#https-请求过程\" class=\"headerlink\" title=\"https 请求过程\"></a>https 请求过程</h2><h3 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h3><ol>\n<li><p>加密通信一条完整的 HTTPS 请求应该是这样的：客户端 (浏览器) 发起 HTTP 请求，请求连接服务端，发送支持的加密通信协议 (和版本)，并且生成一个随机数，后续用于生成”对话密钥”。【关键点：加密协议列表和随机数】</p>\n</li>\n<li><p>服务端确认加密通信协议 (和版本)，同时也生成一个随机数，后续用于生成”对话密匙”，并且将 CA 颁发的数字证书，一起发送给客户端。【关键点：确认加密协议、随机数、证书】</p>\n</li>\n<li><p>客户端收到数字证书后，检测内置的”受信任的根证书颁发机构”，查看解开数字证书的公匙是否在。如果解开数字证书的公匙存在，则使用它解开数字证书，得到正确的服务器公匙，同时再次生成一个随机数，用于服务器公匙加密，并发送给服务器。【关键点：解开证书，通过公钥加密随机数】</p>\n</li>\n<li><p>此时本地和服务器同时将三个随机数，根据约定的加密方法进行加密，各自生成本次会话的所使用的同一把 “会话密匙” 。到这里，认证阶段已经完毕，数据传输从非对称加密换成了对称加密(因为考虑到性能)，接下来所有的数据传输都是使用 HTTP 协议进行传输，只不过使用了 “会话密匙” 来加密内容。【关键点：私钥解密随机数，都使用三个随机数生成密匙】</p>\n</li>\n</ol>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img src=\"../../images/https-detail.png\" alt=\"流程图\"></p>\n"},{"title":"cap原理","date":"2019-10-07T13:16:27.000Z","_content":"\n## CAP 分布式理论理解\n\nCA without P：如果不要求 P（不允许分区），则 C（强一致性）和 A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此 CA 的系统更多的是允许分区后各子系统依然保持 CA。\n\nCP without A：如果不要求 A（可用），相当于每个请求都需要在 Server 之间强一致，而 P（分区）会导致同步时间无限延长，如此 CP 也是可以保证的。很多传统的数据库分布式事务都属于这种模式。\n\nAP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的 NoSQL 都属于此类。\n","source":"_posts/distributed/cap原理.md","raw":"---\ntitle: cap原理\ntags:\n  - cap\ncategories:\n  - cap\ndate: 2019-10-07 21:16:27\n---\n\n## CAP 分布式理论理解\n\nCA without P：如果不要求 P（不允许分区），则 C（强一致性）和 A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此 CA 的系统更多的是允许分区后各子系统依然保持 CA。\n\nCP without A：如果不要求 A（可用），相当于每个请求都需要在 Server 之间强一致，而 P（分区）会导致同步时间无限延长，如此 CP 也是可以保证的。很多传统的数据库分布式事务都属于这种模式。\n\nAP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的 NoSQL 都属于此类。\n","slug":"distributed/cap原理","published":1,"updated":"2020-05-25T03:34:09.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr5x000dg9384m8zb2x7","content":"<h2 id=\"CAP-分布式理论理解\"><a href=\"#CAP-分布式理论理解\" class=\"headerlink\" title=\"CAP 分布式理论理解\"></a>CAP 分布式理论理解</h2><p>CA without P：如果不要求 P（不允许分区），则 C（强一致性）和 A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此 CA 的系统更多的是允许分区后各子系统依然保持 CA。</p>\n<p>CP without A：如果不要求 A（可用），相当于每个请求都需要在 Server 之间强一致，而 P（分区）会导致同步时间无限延长，如此 CP 也是可以保证的。很多传统的数据库分布式事务都属于这种模式。</p>\n<p>AP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的 NoSQL 都属于此类。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CAP-分布式理论理解\"><a href=\"#CAP-分布式理论理解\" class=\"headerlink\" title=\"CAP 分布式理论理解\"></a>CAP 分布式理论理解</h2><p>CA without P：如果不要求 P（不允许分区），则 C（强一致性）和 A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此 CA 的系统更多的是允许分区后各子系统依然保持 CA。</p>\n<p>CP without A：如果不要求 A（可用），相当于每个请求都需要在 Server 之间强一致，而 P（分区）会导致同步时间无限延长，如此 CP 也是可以保证的。很多传统的数据库分布式事务都属于这种模式。</p>\n<p>AP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的 NoSQL 都属于此类。</p>\n"},{"title":"docker命令","date":"2019-02-21T12:40:22.000Z","_content":"\n## 常用命令\n\n### 容器生命周期管理\n\n- [run](http://www.runoob.com/docker/docker-run-command.html)\n- [start/stop/restart](http://www.runoob.com/docker/docker-start-stop-restart-command.html)\n- [kill](http://www.runoob.com/docker/docker-kill-command.html) 向容器发送信号\n- [rm](http://www.runoob.com/docker/docker-rm-command.html) 常见 combo 是：stop x;rm x ;build x;run x\n- [pause/unpause](http://www.runoob.com/docker/docker-pause-unpause-command.html)\n- [create](http://www.runoob.com/docker/docker-create-command.html)\n- [exec](http://www.runoob.com/docker/docker-exec-command.html) 在运行的容器中执行命令\n\n### 容器操作\n\n- [ps](http://www.runoob.com/docker/docker-ps-command.html) 显示容器\n- [inspect](http://www.runoob.com/docker/docker-inspect-command.html) 获取容器/镜像的元数据。返回 json 格式的数据\n- [top](http://www.runoob.com/docker/docker-top-command.html) 查看容器中的进程信息\n- [attach](http://www.runoob.com/docker/docker-attach-command.html) **:**连接到正在运行中的容器。\n- [events](http://www.runoob.com/docker/docker-events-command.html) docker 相关的事件\n- [logs](http://www.runoob.com/docker/docker-logs-command.html) 应该是打印到 stdout 上的日志吧！！！\n- [wait](http://www.runoob.com/docker/docker-wait-command.html)\n- [export](http://www.runoob.com/docker/docker-export-command.html)\n- [port](http://www.runoob.com/docker/docker-port-command.html) 显示容器的端口映射\n\n### 容器 rootfs 命令\n\n- [commit](http://www.runoob.com/docker/docker-commit-command.html) 类似 git commit 一样修改之后保存新版本 docker commit -m \"commit test\" uuu fuiboom/myubuntu:v1 给运行的容器创建一个新的保存镜像（一般常用 Dockerfile 和 build 来构建镜像）\n- [cp](http://www.runoob.com/docker/docker-cp-command.html) 容器与主机的数据拷贝\n- [diff](http://www.runoob.com/docker/docker-diff-command.html) 显示容器文件结构的改变（显示自己改了什么东西）\n\n### 镜像仓库\n\n- [login](http://www.runoob.com/docker/docker-login-command.html)\n- [pull](http://www.runoob.com/docker/docker-pull-command.html) 拉取别人已经配置好的环境（非常好用的命令）\n- [push](http://www.runoob.com/docker/docker-push-command.html) push 自己的镜像，（需要登录）\n- [search](http://www.runoob.com/docker/docker-search-command.html)\n\n### 本地镜像管理\n\n- [images](http://www.runoob.com/docker/docker-images-command.html)\n- [rmi](http://www.runoob.com/docker/docker-rmi-command.html) 移除本地 image(不然占用本地磁盘空间)\n- [tag](http://www.runoob.com/docker/docker-tag-command.html) 创建一个镜像的引用 docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\n\n> docker tag mysql_client_test fuiboom/mysql_client_test 把官方的改造重新命名一下就可以 push\n>\n> docker push fuiboom/mysql_client_test\n\n- [build](http://www.runoob.com/docker/docker-build-command.html) 根据 Dockerfile 创建一个镜像\n- [history](http://www.runoob.com/docker/docker-history-command.html) 显示构建容器的历史数据\n- [save](http://www.runoob.com/docker/docker-save-command.html) save 和 load 搭配\n- [import](http://www.runoob.com/docker/docker-import-command.html) export 和 import 搭配\n\n### info|version\n\n- [info](http://www.runoob.com/docker/docker-info-command.html)\n- [version](http://www.runoob.com/docker/docker-version-command.html)\n\n### docker run 详细\n\n```bash\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n```\n\nOPTIONS 说明：\n\n- **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n- **-d:** 后台运行容器，并返回容器 ID；\n- **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n- **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n- **--name=\"nginx-lb\":** 为容器指定一个名称；\n- **--dns 8.8.8.8:** 指定容器使用的 DNS 服务器，默认和宿主一致；\n- **--dns-search example.com:** 指定容器 DNS 搜索域名，默认和宿主一致；\n- **-h \"mars\":** 指定容器的 hostname；\n- **-e username=\"ritchie\":** 设置环境变量；\n- **--env-file=[]:** 从指定文件读入环境变量；\n- **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定 CPU 运行；\n- **-m :**设置容器使用内存最大值；\n- **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n- **--link=[]:** 添加链接到另一个容器；\n- **--expose=[]:** 开放一个端口或一组端口；\n- -P 大 P 使用 expose 的端口映射到主机的随机端口（感觉不好，还是自己指定比较好）\n\n示例\n\n使用 docker 镜像 nginx:latest 以后台模式启动一个容器,并将容器命名为 mynginx。\n\n```bash\ndocker run --name mynginx -d nginx:latest\n```\n\n使用镜像 nginx:latest 以后台模式启动一个容器,并将容器的 80 端口映射到主机随机端口。\n\n```bash\ndocker run -P -d nginx:latest\n```\n\n使用镜像 nginx:latest 以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录/data 映射到容器的/data。\n\n```bash\ndocker run -p 80:80 -v /data:/data -d nginx:latest\n```\n\n使用镜像 nginx:latest 以交互模式启动一个容器,在容器内执行/bin/bash 命令。\n\n```bash\nrunoob@runoob:~$ docker run -it nginx:latest /bin/bash\nroot@b8573233d675:/#\n```\n\n### docker exec 语法\n\n```bash\ndocker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n```\n\nOPTIONS 说明：\n\n- **-d :**分离模式: 在后台运行\n- **-i :**即使没有附加也保持 STDIN 打开\n- **-t :**分配一个伪终端\n\n示例\n\n在容器 mynginx 中以交互模式执行容器内/root/runoob.sh 脚本 （用容器中的程序执行某段脚本）\n\n```bash\nrunoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh\n```\n\n在容器 mynginx 中开启一个交互模式的终端（启动容器的一个可交互 bash 窗口）\n\n```bash\nrunoob@runoob:~$ docker exec -i -t  mynginx /bin/bash\nroot@b1a0703e41e7:/#\n```\n\n启动、停止所有容器\n\n```bash\ndocker start/stop $(docker ps -a -q)\n```\n\n## 常见问题\n\n如何设置容器的 cpu，内存，磁盘，网络大小限制\n\n```text\n--cpu 4\n--memory 1g\n--device-read-bps /dev/sda:1mb // 每秒 byte 数据\n--device-read-iops /dev/sda:100 // 每秒 IO 次数\n```\n\n如何设置容器镜像\n\n```bash\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://a2a3a2e1.m.daocloud.io\n```\n\n```bash\nsudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service\nsudo sed -i \"s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=http://a2a3a2e1.m.daocloud.io|g\" /etc/systemd/system/docker.service\nsudo systemctl daemon-reload\nsudo service docker restart\n```\n\n```bash\nsudo sed -i \"s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=https://pee6w651.mirror.aliyuncs.com|g\" /etc/systemd/system/docker.service\n```\n\n## 常用镜像\n\nredis\n\n```bash\n//-d 后台运行\ndocker run --name some-redis -d redis\n\n//--link A:B 连接过去(自动设置host) --rm 终端退出时自动清除容器内容(跟-d不同时用)\ndocker run -it --link some-redis:redis --rm redis redis-cli -h redis -p 6379\n\n//自定义conf配置文件\ndocker run -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf --name myredis redis redis-server /usr/local/etc/redis/redis.conf\n\n```\n\nmysql\n\n```bash\n//创建mysql容器 -e 设置环境变量\ndocker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//客户端连接\ndocker run -it --link some-mysql:mysql --rm mysql sh -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\n\n//mysql的客户端\ndocker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p\n\n//mysql使用配置文件/my/custom/config-file.cnf ==> /etc/mysql/conf.d/config-file.cnf\ndocker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//指定外部存储目录\ndocker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//dump数据到宿主机\ndocker exec some-mysql sh -c 'exec mysqldump --all-databases -uroot -p\"$MYSQL_ROOT_PASSWORD\"' > /some/path/on/your/host/all-databases.sql\n```\n\nnginx\n\n```bash\n//静态页面\ndocker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx\n\n//配置文件\ndocker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx\n\n//debug模式运行\ndocker run --name my-nginx -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx nginx-debug -g 'daemon off;'\n```\n\nkafka\n\n```bash\ndocker pull wurstmeister/zookeeper\ndocker pull wurstmeister/kafka\ndocker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper\ndocker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.1.100:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.1.100:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka\n```\n\n## 编写 dockerfile 文件\n\n```bash\n#dockerfile文件\n\nFROM debian:jessie\n\nRUN buildDeps='gcc libc6-dev make' \\\n    && apt-get update \\\n    && apt-get install -y $buildDeps \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\" \\\n    && mkdir -p /usr/src/redis \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove $buildDeps\n```\n\n在 `Dockerfile` 文件所在目录执行：\n\n```bash\ndocker build -t nginx:v3 .\n```\n\n```bash\ndocker build [选项] <上下文路径/URL/->\n```\n\n如果在 `Dockerfile` 中这么写：\n\n```bash\nCOPY ./package.json /app/\n\n```\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n一般来说，应该会将 `Dockerfile` 置于一个空目录下，或者项目根目录下。\n\nCOPY 命令\n\n> 源路径必须使用相对当前目录的路径\n\n从上下文路径复制文件到 镜像中某个目录\n\n`COPY <源路径>... <目标路径>`\n\n`<目标路径>` 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 `WORKDIR`指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。\n\nCMD 命令\n\n```bash\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n```\n\nENV 命名\n\n```bash\nENV NODE_VERSION 7.2.0\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\"\n#后面可以使用到\n```\n\n下列指令可以支持环境变量展开（可以用这个环境变量）： `ADD`、`COPY`、`ENV`、`EXPOSE`、`LABEL`、`USER`、`WORKDIR`、`VOLUME`、`STOPSIGNAL`、`ONBUILD`。\n\nEXPOSE\n\n要将 `EXPOSE` 和在运行时使用 `-p <宿主端口>:<容器端口>` 区分开来。`-p`，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 `EXPOSE` 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\nWORKDIR\n\n> 下面 ENTRYPOINT 命令会在这个目录下面执行命令\n\n```bash\nWORKDIR <工作目录路径> #以后可以在某层有一个 相对路径\n```\n\nENTRYPOINT 入口\n\n```bash\nENTRYPOINT [\"/usr/sbin/nginx\",\"-g\",\"daemon off\"]\n```\n\n## 命令汇总\n\n```bash\ndocker ps -a //所有\ndocker ps -l //最近\ndocker ps -n 5//最近5个\ndocker ps //运行中\n```\n\n```bash\ndocker inspect xx\ndocker inspect -f '{{.NetworkSettings.IPAddress}}' mymysql\ndocker top xx\n```\n\n```bash\ndocker images\ndocker images ubutun_*\ndocker tag ubuntu:15.10 runoob/ubuntu:v3\ndocker build -t runoob/ubuntu:v1 .\ndocker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\ndocker import  my_ubuntu_v3.tar runoob/ubuntu:v4\n```\n\n```bash\nalias cp='cp -i'\nalias dex='docker exec -i -t'\nalias di='docker images'\nalias dip='docker inspect --format '\\''{{ .NetworkSettings.IPAddress }}'\\'''\nalias dkd='docker run -d -P'\nalias dki='docker run -i -t -P'\nalias dl='docker ps -l -q'\nalias dpa='docker ps -a'\nalias dps='docker ps'\nalias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'\nalias egrep='egrep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias grep='grep --color=auto'\nalias l.='ls -d .* --color=auto'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias mv='mv -i'\nalias rm='rm -i'\n```\n","source":"_posts/docker_k8s/docker命令.md","raw":"---\ntitle: docker命令\ntags:\n  - tags\ncategories:\n  - categories\ndate: 2019-02-21 20:40:22\n---\n\n## 常用命令\n\n### 容器生命周期管理\n\n- [run](http://www.runoob.com/docker/docker-run-command.html)\n- [start/stop/restart](http://www.runoob.com/docker/docker-start-stop-restart-command.html)\n- [kill](http://www.runoob.com/docker/docker-kill-command.html) 向容器发送信号\n- [rm](http://www.runoob.com/docker/docker-rm-command.html) 常见 combo 是：stop x;rm x ;build x;run x\n- [pause/unpause](http://www.runoob.com/docker/docker-pause-unpause-command.html)\n- [create](http://www.runoob.com/docker/docker-create-command.html)\n- [exec](http://www.runoob.com/docker/docker-exec-command.html) 在运行的容器中执行命令\n\n### 容器操作\n\n- [ps](http://www.runoob.com/docker/docker-ps-command.html) 显示容器\n- [inspect](http://www.runoob.com/docker/docker-inspect-command.html) 获取容器/镜像的元数据。返回 json 格式的数据\n- [top](http://www.runoob.com/docker/docker-top-command.html) 查看容器中的进程信息\n- [attach](http://www.runoob.com/docker/docker-attach-command.html) **:**连接到正在运行中的容器。\n- [events](http://www.runoob.com/docker/docker-events-command.html) docker 相关的事件\n- [logs](http://www.runoob.com/docker/docker-logs-command.html) 应该是打印到 stdout 上的日志吧！！！\n- [wait](http://www.runoob.com/docker/docker-wait-command.html)\n- [export](http://www.runoob.com/docker/docker-export-command.html)\n- [port](http://www.runoob.com/docker/docker-port-command.html) 显示容器的端口映射\n\n### 容器 rootfs 命令\n\n- [commit](http://www.runoob.com/docker/docker-commit-command.html) 类似 git commit 一样修改之后保存新版本 docker commit -m \"commit test\" uuu fuiboom/myubuntu:v1 给运行的容器创建一个新的保存镜像（一般常用 Dockerfile 和 build 来构建镜像）\n- [cp](http://www.runoob.com/docker/docker-cp-command.html) 容器与主机的数据拷贝\n- [diff](http://www.runoob.com/docker/docker-diff-command.html) 显示容器文件结构的改变（显示自己改了什么东西）\n\n### 镜像仓库\n\n- [login](http://www.runoob.com/docker/docker-login-command.html)\n- [pull](http://www.runoob.com/docker/docker-pull-command.html) 拉取别人已经配置好的环境（非常好用的命令）\n- [push](http://www.runoob.com/docker/docker-push-command.html) push 自己的镜像，（需要登录）\n- [search](http://www.runoob.com/docker/docker-search-command.html)\n\n### 本地镜像管理\n\n- [images](http://www.runoob.com/docker/docker-images-command.html)\n- [rmi](http://www.runoob.com/docker/docker-rmi-command.html) 移除本地 image(不然占用本地磁盘空间)\n- [tag](http://www.runoob.com/docker/docker-tag-command.html) 创建一个镜像的引用 docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\n\n> docker tag mysql_client_test fuiboom/mysql_client_test 把官方的改造重新命名一下就可以 push\n>\n> docker push fuiboom/mysql_client_test\n\n- [build](http://www.runoob.com/docker/docker-build-command.html) 根据 Dockerfile 创建一个镜像\n- [history](http://www.runoob.com/docker/docker-history-command.html) 显示构建容器的历史数据\n- [save](http://www.runoob.com/docker/docker-save-command.html) save 和 load 搭配\n- [import](http://www.runoob.com/docker/docker-import-command.html) export 和 import 搭配\n\n### info|version\n\n- [info](http://www.runoob.com/docker/docker-info-command.html)\n- [version](http://www.runoob.com/docker/docker-version-command.html)\n\n### docker run 详细\n\n```bash\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n```\n\nOPTIONS 说明：\n\n- **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n- **-d:** 后台运行容器，并返回容器 ID；\n- **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n- **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n- **--name=\"nginx-lb\":** 为容器指定一个名称；\n- **--dns 8.8.8.8:** 指定容器使用的 DNS 服务器，默认和宿主一致；\n- **--dns-search example.com:** 指定容器 DNS 搜索域名，默认和宿主一致；\n- **-h \"mars\":** 指定容器的 hostname；\n- **-e username=\"ritchie\":** 设置环境变量；\n- **--env-file=[]:** 从指定文件读入环境变量；\n- **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定 CPU 运行；\n- **-m :**设置容器使用内存最大值；\n- **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n- **--link=[]:** 添加链接到另一个容器；\n- **--expose=[]:** 开放一个端口或一组端口；\n- -P 大 P 使用 expose 的端口映射到主机的随机端口（感觉不好，还是自己指定比较好）\n\n示例\n\n使用 docker 镜像 nginx:latest 以后台模式启动一个容器,并将容器命名为 mynginx。\n\n```bash\ndocker run --name mynginx -d nginx:latest\n```\n\n使用镜像 nginx:latest 以后台模式启动一个容器,并将容器的 80 端口映射到主机随机端口。\n\n```bash\ndocker run -P -d nginx:latest\n```\n\n使用镜像 nginx:latest 以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录/data 映射到容器的/data。\n\n```bash\ndocker run -p 80:80 -v /data:/data -d nginx:latest\n```\n\n使用镜像 nginx:latest 以交互模式启动一个容器,在容器内执行/bin/bash 命令。\n\n```bash\nrunoob@runoob:~$ docker run -it nginx:latest /bin/bash\nroot@b8573233d675:/#\n```\n\n### docker exec 语法\n\n```bash\ndocker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n```\n\nOPTIONS 说明：\n\n- **-d :**分离模式: 在后台运行\n- **-i :**即使没有附加也保持 STDIN 打开\n- **-t :**分配一个伪终端\n\n示例\n\n在容器 mynginx 中以交互模式执行容器内/root/runoob.sh 脚本 （用容器中的程序执行某段脚本）\n\n```bash\nrunoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh\n```\n\n在容器 mynginx 中开启一个交互模式的终端（启动容器的一个可交互 bash 窗口）\n\n```bash\nrunoob@runoob:~$ docker exec -i -t  mynginx /bin/bash\nroot@b1a0703e41e7:/#\n```\n\n启动、停止所有容器\n\n```bash\ndocker start/stop $(docker ps -a -q)\n```\n\n## 常见问题\n\n如何设置容器的 cpu，内存，磁盘，网络大小限制\n\n```text\n--cpu 4\n--memory 1g\n--device-read-bps /dev/sda:1mb // 每秒 byte 数据\n--device-read-iops /dev/sda:100 // 每秒 IO 次数\n```\n\n如何设置容器镜像\n\n```bash\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://a2a3a2e1.m.daocloud.io\n```\n\n```bash\nsudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service\nsudo sed -i \"s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=http://a2a3a2e1.m.daocloud.io|g\" /etc/systemd/system/docker.service\nsudo systemctl daemon-reload\nsudo service docker restart\n```\n\n```bash\nsudo sed -i \"s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=https://pee6w651.mirror.aliyuncs.com|g\" /etc/systemd/system/docker.service\n```\n\n## 常用镜像\n\nredis\n\n```bash\n//-d 后台运行\ndocker run --name some-redis -d redis\n\n//--link A:B 连接过去(自动设置host) --rm 终端退出时自动清除容器内容(跟-d不同时用)\ndocker run -it --link some-redis:redis --rm redis redis-cli -h redis -p 6379\n\n//自定义conf配置文件\ndocker run -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf --name myredis redis redis-server /usr/local/etc/redis/redis.conf\n\n```\n\nmysql\n\n```bash\n//创建mysql容器 -e 设置环境变量\ndocker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//客户端连接\ndocker run -it --link some-mysql:mysql --rm mysql sh -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\n\n//mysql的客户端\ndocker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p\n\n//mysql使用配置文件/my/custom/config-file.cnf ==> /etc/mysql/conf.d/config-file.cnf\ndocker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//指定外部存储目录\ndocker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//dump数据到宿主机\ndocker exec some-mysql sh -c 'exec mysqldump --all-databases -uroot -p\"$MYSQL_ROOT_PASSWORD\"' > /some/path/on/your/host/all-databases.sql\n```\n\nnginx\n\n```bash\n//静态页面\ndocker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx\n\n//配置文件\ndocker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx\n\n//debug模式运行\ndocker run --name my-nginx -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx nginx-debug -g 'daemon off;'\n```\n\nkafka\n\n```bash\ndocker pull wurstmeister/zookeeper\ndocker pull wurstmeister/kafka\ndocker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper\ndocker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.1.100:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.1.100:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka\n```\n\n## 编写 dockerfile 文件\n\n```bash\n#dockerfile文件\n\nFROM debian:jessie\n\nRUN buildDeps='gcc libc6-dev make' \\\n    && apt-get update \\\n    && apt-get install -y $buildDeps \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\" \\\n    && mkdir -p /usr/src/redis \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove $buildDeps\n```\n\n在 `Dockerfile` 文件所在目录执行：\n\n```bash\ndocker build -t nginx:v3 .\n```\n\n```bash\ndocker build [选项] <上下文路径/URL/->\n```\n\n如果在 `Dockerfile` 中这么写：\n\n```bash\nCOPY ./package.json /app/\n\n```\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n一般来说，应该会将 `Dockerfile` 置于一个空目录下，或者项目根目录下。\n\nCOPY 命令\n\n> 源路径必须使用相对当前目录的路径\n\n从上下文路径复制文件到 镜像中某个目录\n\n`COPY <源路径>... <目标路径>`\n\n`<目标路径>` 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 `WORKDIR`指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。\n\nCMD 命令\n\n```bash\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n```\n\nENV 命名\n\n```bash\nENV NODE_VERSION 7.2.0\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\"\n#后面可以使用到\n```\n\n下列指令可以支持环境变量展开（可以用这个环境变量）： `ADD`、`COPY`、`ENV`、`EXPOSE`、`LABEL`、`USER`、`WORKDIR`、`VOLUME`、`STOPSIGNAL`、`ONBUILD`。\n\nEXPOSE\n\n要将 `EXPOSE` 和在运行时使用 `-p <宿主端口>:<容器端口>` 区分开来。`-p`，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 `EXPOSE` 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\nWORKDIR\n\n> 下面 ENTRYPOINT 命令会在这个目录下面执行命令\n\n```bash\nWORKDIR <工作目录路径> #以后可以在某层有一个 相对路径\n```\n\nENTRYPOINT 入口\n\n```bash\nENTRYPOINT [\"/usr/sbin/nginx\",\"-g\",\"daemon off\"]\n```\n\n## 命令汇总\n\n```bash\ndocker ps -a //所有\ndocker ps -l //最近\ndocker ps -n 5//最近5个\ndocker ps //运行中\n```\n\n```bash\ndocker inspect xx\ndocker inspect -f '{{.NetworkSettings.IPAddress}}' mymysql\ndocker top xx\n```\n\n```bash\ndocker images\ndocker images ubutun_*\ndocker tag ubuntu:15.10 runoob/ubuntu:v3\ndocker build -t runoob/ubuntu:v1 .\ndocker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\ndocker import  my_ubuntu_v3.tar runoob/ubuntu:v4\n```\n\n```bash\nalias cp='cp -i'\nalias dex='docker exec -i -t'\nalias di='docker images'\nalias dip='docker inspect --format '\\''{{ .NetworkSettings.IPAddress }}'\\'''\nalias dkd='docker run -d -P'\nalias dki='docker run -i -t -P'\nalias dl='docker ps -l -q'\nalias dpa='docker ps -a'\nalias dps='docker ps'\nalias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'\nalias egrep='egrep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias grep='grep --color=auto'\nalias l.='ls -d .* --color=auto'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias mv='mv -i'\nalias rm='rm -i'\n```\n","slug":"docker_k8s/docker命令","published":1,"updated":"2020-05-25T04:02:36.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr5z000eg938e6mn047b","content":"<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"容器生命周期管理\"><a href=\"#容器生命周期管理\" class=\"headerlink\" title=\"容器生命周期管理\"></a>容器生命周期管理</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-run-command.html\" target=\"_blank\" rel=\"noopener\">run</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-start-stop-restart-command.html\" target=\"_blank\" rel=\"noopener\">start/stop/restart</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-kill-command.html\" target=\"_blank\" rel=\"noopener\">kill</a> 向容器发送信号</li>\n<li><a href=\"http://www.runoob.com/docker/docker-rm-command.html\" target=\"_blank\" rel=\"noopener\">rm</a> 常见 combo 是：stop x;rm x ;build x;run x</li>\n<li><a href=\"http://www.runoob.com/docker/docker-pause-unpause-command.html\" target=\"_blank\" rel=\"noopener\">pause/unpause</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-create-command.html\" target=\"_blank\" rel=\"noopener\">create</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-exec-command.html\" target=\"_blank\" rel=\"noopener\">exec</a> 在运行的容器中执行命令</li>\n</ul>\n<h3 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-ps-command.html\" target=\"_blank\" rel=\"noopener\">ps</a> 显示容器</li>\n<li><a href=\"http://www.runoob.com/docker/docker-inspect-command.html\" target=\"_blank\" rel=\"noopener\">inspect</a> 获取容器/镜像的元数据。返回 json 格式的数据</li>\n<li><a href=\"http://www.runoob.com/docker/docker-top-command.html\" target=\"_blank\" rel=\"noopener\">top</a> 查看容器中的进程信息</li>\n<li><a href=\"http://www.runoob.com/docker/docker-attach-command.html\" target=\"_blank\" rel=\"noopener\">attach</a> <strong>:</strong>连接到正在运行中的容器。</li>\n<li><a href=\"http://www.runoob.com/docker/docker-events-command.html\" target=\"_blank\" rel=\"noopener\">events</a> docker 相关的事件</li>\n<li><a href=\"http://www.runoob.com/docker/docker-logs-command.html\" target=\"_blank\" rel=\"noopener\">logs</a> 应该是打印到 stdout 上的日志吧！！！</li>\n<li><a href=\"http://www.runoob.com/docker/docker-wait-command.html\" target=\"_blank\" rel=\"noopener\">wait</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-export-command.html\" target=\"_blank\" rel=\"noopener\">export</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-port-command.html\" target=\"_blank\" rel=\"noopener\">port</a> 显示容器的端口映射</li>\n</ul>\n<h3 id=\"容器-rootfs-命令\"><a href=\"#容器-rootfs-命令\" class=\"headerlink\" title=\"容器 rootfs 命令\"></a>容器 rootfs 命令</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-commit-command.html\" target=\"_blank\" rel=\"noopener\">commit</a> 类似 git commit 一样修改之后保存新版本 docker commit -m “commit test” uuu fuiboom/myubuntu:v1 给运行的容器创建一个新的保存镜像（一般常用 Dockerfile 和 build 来构建镜像）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-cp-command.html\" target=\"_blank\" rel=\"noopener\">cp</a> 容器与主机的数据拷贝</li>\n<li><a href=\"http://www.runoob.com/docker/docker-diff-command.html\" target=\"_blank\" rel=\"noopener\">diff</a> 显示容器文件结构的改变（显示自己改了什么东西）</li>\n</ul>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-login-command.html\" target=\"_blank\" rel=\"noopener\">login</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-pull-command.html\" target=\"_blank\" rel=\"noopener\">pull</a> 拉取别人已经配置好的环境（非常好用的命令）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-push-command.html\" target=\"_blank\" rel=\"noopener\">push</a> push 自己的镜像，（需要登录）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-search-command.html\" target=\"_blank\" rel=\"noopener\">search</a></li>\n</ul>\n<h3 id=\"本地镜像管理\"><a href=\"#本地镜像管理\" class=\"headerlink\" title=\"本地镜像管理\"></a>本地镜像管理</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-images-command.html\" target=\"_blank\" rel=\"noopener\">images</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-rmi-command.html\" target=\"_blank\" rel=\"noopener\">rmi</a> 移除本地 image(不然占用本地磁盘空间)</li>\n<li><a href=\"http://www.runoob.com/docker/docker-tag-command.html\" target=\"_blank\" rel=\"noopener\">tag</a> 创建一个镜像的引用 docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</li>\n</ul>\n<blockquote>\n<p>docker tag mysql_client_test fuiboom/mysql_client_test 把官方的改造重新命名一下就可以 push</p>\n<p>docker push fuiboom/mysql_client_test</p>\n</blockquote>\n<ul>\n<li><a href=\"http://www.runoob.com/docker/docker-build-command.html\" target=\"_blank\" rel=\"noopener\">build</a> 根据 Dockerfile 创建一个镜像</li>\n<li><a href=\"http://www.runoob.com/docker/docker-history-command.html\" target=\"_blank\" rel=\"noopener\">history</a> 显示构建容器的历史数据</li>\n<li><a href=\"http://www.runoob.com/docker/docker-save-command.html\" target=\"_blank\" rel=\"noopener\">save</a> save 和 load 搭配</li>\n<li><a href=\"http://www.runoob.com/docker/docker-import-command.html\" target=\"_blank\" rel=\"noopener\">import</a> export 和 import 搭配</li>\n</ul>\n<h3 id=\"info-version\"><a href=\"#info-version\" class=\"headerlink\" title=\"info|version\"></a>info|version</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-info-command.html\" target=\"_blank\" rel=\"noopener\">info</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-version-command.html\" target=\"_blank\" rel=\"noopener\">version</a></li>\n</ul>\n<h3 id=\"docker-run-详细\"><a href=\"#docker-run-详细\" class=\"headerlink\" title=\"docker run 详细\"></a>docker run 详细</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>\n<p>OPTIONS 说明：</p>\n<ul>\n<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>\n<li><strong>-d:</strong> 后台运行容器，并返回容器 ID；</li>\n<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>\n<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>\n<li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li>\n<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的 DNS 服务器，默认和宿主一致；</li>\n<li><strong>–dns-search example.com:</strong> 指定容器 DNS 搜索域名，默认和宿主一致；</li>\n<li><strong>-h “mars”:</strong> 指定容器的 hostname；</li>\n<li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li>\n<li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li>\n<li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定 CPU 运行；</li>\n<li><strong>-m :</strong>设置容器使用内存最大值；</li>\n<li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>\n<li><strong>–link=[]:</strong> 添加链接到另一个容器；</li>\n<li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li>\n<li>-P 大 P 使用 expose 的端口映射到主机的随机端口（感觉不好，还是自己指定比较好）</li>\n</ul>\n<p>示例</p>\n<p>使用 docker 镜像 nginx:latest 以后台模式启动一个容器,并将容器命名为 mynginx。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像 nginx:latest 以后台模式启动一个容器,并将容器的 80 端口映射到主机随机端口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -P -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像 nginx:latest 以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录/data 映射到容器的/data。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 80:80 -v /data:/data -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像 nginx:latest 以交互模式启动一个容器,在容器内执行/bin/bash 命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker run -it nginx:latest /bin/bash</span><br><span class=\"line\">root@b8573233d675:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"docker-exec-语法\"><a href=\"#docker-exec-语法\" class=\"headerlink\" title=\"docker exec 语法\"></a>docker exec 语法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>\n<p>OPTIONS 说明：</p>\n<ul>\n<li><strong>-d :</strong>分离模式: 在后台运行</li>\n<li><strong>-i :</strong>即使没有附加也保持 STDIN 打开</li>\n<li><strong>-t :</strong>分配一个伪终端</li>\n</ul>\n<p>示例</p>\n<p>在容器 mynginx 中以交互模式执行容器内/root/runoob.sh 脚本 （用容器中的程序执行某段脚本）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker <span class=\"built_in\">exec</span> -it mynginx /bin/sh /root/runoob.sh</span><br></pre></td></tr></table></figure>\n<p>在容器 mynginx 中开启一个交互模式的终端（启动容器的一个可交互 bash 窗口）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker <span class=\"built_in\">exec</span> -i -t  mynginx /bin/bash</span><br><span class=\"line\">root@b1a0703e41e7:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>启动、停止所有容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start/stop $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><p>如何设置容器的 cpu，内存，磁盘，网络大小限制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--cpu 4</span><br><span class=\"line\">--memory 1g</span><br><span class=\"line\">--device-read-bps /dev/sda:1mb // 每秒 byte 数据</span><br><span class=\"line\">--device-read-iops /dev/sda:100 // 每秒 IO 次数</span><br></pre></td></tr></table></figure>\n<p>如何设置容器镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://a2a3a2e1.m.daocloud.io</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service</span><br><span class=\"line\">sudo sed -i <span class=\"string\">\"s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=http://a2a3a2e1.m.daocloud.io|g\"</span> /etc/systemd/system/docker.service</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sed -i <span class=\"string\">\"s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=https://pee6w651.mirror.aliyuncs.com|g\"</span> /etc/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用镜像\"><a href=\"#常用镜像\" class=\"headerlink\" title=\"常用镜像\"></a>常用镜像</h2><p>redis</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//-d 后台运行</span><br><span class=\"line\">docker run --name some-redis -d redis</span><br><span class=\"line\"></span><br><span class=\"line\">//--link A:B 连接过去(自动设置host) --rm 终端退出时自动清除容器内容(跟-d不同时用)</span><br><span class=\"line\">docker run -it --link some-redis:redis --rm redis redis-cli -h redis -p 6379</span><br><span class=\"line\"></span><br><span class=\"line\">//自定义conf配置文件</span><br><span class=\"line\">docker run -v /myredis/conf/redis.conf:/usr/<span class=\"built_in\">local</span>/etc/redis/redis.conf --name myredis redis redis-server /usr/<span class=\"built_in\">local</span>/etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n<p>mysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建mysql容器 -e 设置环境变量</span><br><span class=\"line\">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//客户端连接</span><br><span class=\"line\">docker run -it --link some-mysql:mysql --rm mysql sh -c <span class=\"string\">'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\">//mysql的客户端</span><br><span class=\"line\">docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p</span><br><span class=\"line\"></span><br><span class=\"line\">//mysql使用配置文件/my/custom/config-file.cnf ==&gt; /etc/mysql/conf.d/config-file.cnf</span><br><span class=\"line\">docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//指定外部存储目录</span><br><span class=\"line\">docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//dump数据到宿主机</span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> some-mysql sh -c <span class=\"string\">'exec mysqldump --all-databases -uroot -p\"$MYSQL_ROOT_PASSWORD\"'</span> &gt; /some/path/on/your/host/all-databases.sql</span><br></pre></td></tr></table></figure>\n<p>nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//静态页面</span><br><span class=\"line\">docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//配置文件</span><br><span class=\"line\">docker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//debug模式运行</span><br><span class=\"line\">docker run --name my-nginx -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx nginx-debug -g <span class=\"string\">'daemon off;'</span></span><br></pre></td></tr></table></figure>\n<p>kafka</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull wurstmeister/zookeeper</span><br><span class=\"line\">docker pull wurstmeister/kafka</span><br><span class=\"line\">docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</span><br><span class=\"line\">docker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.1.100:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.1.100:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写-dockerfile-文件\"><a href=\"#编写-dockerfile-文件\" class=\"headerlink\" title=\"编写 dockerfile 文件\"></a>编写 dockerfile 文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#dockerfile文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">FROM debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\">RUN buildDeps=<span class=\"string\">'gcc libc6-dev make'</span> \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y <span class=\"variable\">$buildDeps</span> \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span> \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; rm redis.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm -r /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove <span class=\"variable\">$buildDeps</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>Dockerfile</code> 文件所在目录执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t nginx:v3 .</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure>\n<p>如果在 <code>Dockerfile</code> 中这么写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY ./package.json /app/</span><br></pre></td></tr></table></figure>\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。</p>\n<p>COPY 命令</p>\n<blockquote>\n<p>源路径必须使用相对当前目录的路径</p>\n</blockquote>\n<p>从上下文路径复制文件到 镜像中某个目录</p>\n<p><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></p>\n<p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code>指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>\n<p>CMD 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [ <span class=\"string\">\"sh\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo <span class=\"variable\">$HOME</span>\"</span> ]</span><br></pre></td></tr></table></figure>\n<p>ENV 命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV NODE_VERSION 7.2.0</span><br><span class=\"line\">RUN curl -SLO <span class=\"string\">\"https://nodejs.org/dist/v<span class=\"variable\">$NODE_VERSION</span>/node-v<span class=\"variable\">$NODE_VERSION</span>-linux-x64.tar.xz\"</span></span><br><span class=\"line\"><span class=\"comment\">#后面可以使用到</span></span><br></pre></td></tr></table></figure>\n<p>下列指令可以支持环境变量展开（可以用这个环境变量）： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>。</p>\n<p>EXPOSE</p>\n<p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<p>WORKDIR</p>\n<blockquote>\n<p>下面 ENTRYPOINT 命令会在这个目录下面执行命令</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR &lt;工作目录路径&gt; <span class=\"comment\">#以后可以在某层有一个 相对路径</span></span><br></pre></td></tr></table></figure>\n<p>ENTRYPOINT 入口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [<span class=\"string\">\"/usr/sbin/nginx\"</span>,<span class=\"string\">\"-g\"</span>,<span class=\"string\">\"daemon off\"</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"命令汇总\"><a href=\"#命令汇总\" class=\"headerlink\" title=\"命令汇总\"></a>命令汇总</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a //所有</span><br><span class=\"line\">docker ps -l //最近</span><br><span class=\"line\">docker ps -n 5//最近5个</span><br><span class=\"line\">docker ps //运行中</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect xx</span><br><span class=\"line\">docker inspect -f <span class=\"string\">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> mymysql</span><br><span class=\"line\">docker top xx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">docker images ubutun_*</span><br><span class=\"line\">docker tag ubuntu:15.10 runoob/ubuntu:v3</span><br><span class=\"line\">docker build -t runoob/ubuntu:v1 .</span><br><span class=\"line\">docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3</span><br><span class=\"line\">docker import  my_ubuntu_v3.tar runoob/ubuntu:v4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> cp=<span class=\"string\">'cp -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dex=<span class=\"string\">'docker exec -i -t'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> di=<span class=\"string\">'docker images'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dip=<span class=\"string\">'docker inspect --format '</span>\\<span class=\"string\">''</span>&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;<span class=\"string\">'\\'</span><span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dkd=<span class=\"string\">'docker run -d -P'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dki=<span class=\"string\">'docker run -i -t -P'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dl=<span class=\"string\">'docker ps -l -q'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dpa=<span class=\"string\">'docker ps -a'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dps=<span class=\"string\">'docker ps'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> drmf=<span class=\"string\">'docker stop $(docker ps -a -q) &amp;&amp; docker rm $(docker ps -a -q)'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> egrep=<span class=\"string\">'egrep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> fgrep=<span class=\"string\">'fgrep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> grep=<span class=\"string\">'grep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> l.=<span class=\"string\">'ls -d .* --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ls=<span class=\"string\">'ls --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mv=<span class=\"string\">'mv -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">'rm -i'</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"容器生命周期管理\"><a href=\"#容器生命周期管理\" class=\"headerlink\" title=\"容器生命周期管理\"></a>容器生命周期管理</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-run-command.html\" target=\"_blank\" rel=\"noopener\">run</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-start-stop-restart-command.html\" target=\"_blank\" rel=\"noopener\">start/stop/restart</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-kill-command.html\" target=\"_blank\" rel=\"noopener\">kill</a> 向容器发送信号</li>\n<li><a href=\"http://www.runoob.com/docker/docker-rm-command.html\" target=\"_blank\" rel=\"noopener\">rm</a> 常见 combo 是：stop x;rm x ;build x;run x</li>\n<li><a href=\"http://www.runoob.com/docker/docker-pause-unpause-command.html\" target=\"_blank\" rel=\"noopener\">pause/unpause</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-create-command.html\" target=\"_blank\" rel=\"noopener\">create</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-exec-command.html\" target=\"_blank\" rel=\"noopener\">exec</a> 在运行的容器中执行命令</li>\n</ul>\n<h3 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-ps-command.html\" target=\"_blank\" rel=\"noopener\">ps</a> 显示容器</li>\n<li><a href=\"http://www.runoob.com/docker/docker-inspect-command.html\" target=\"_blank\" rel=\"noopener\">inspect</a> 获取容器/镜像的元数据。返回 json 格式的数据</li>\n<li><a href=\"http://www.runoob.com/docker/docker-top-command.html\" target=\"_blank\" rel=\"noopener\">top</a> 查看容器中的进程信息</li>\n<li><a href=\"http://www.runoob.com/docker/docker-attach-command.html\" target=\"_blank\" rel=\"noopener\">attach</a> <strong>:</strong>连接到正在运行中的容器。</li>\n<li><a href=\"http://www.runoob.com/docker/docker-events-command.html\" target=\"_blank\" rel=\"noopener\">events</a> docker 相关的事件</li>\n<li><a href=\"http://www.runoob.com/docker/docker-logs-command.html\" target=\"_blank\" rel=\"noopener\">logs</a> 应该是打印到 stdout 上的日志吧！！！</li>\n<li><a href=\"http://www.runoob.com/docker/docker-wait-command.html\" target=\"_blank\" rel=\"noopener\">wait</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-export-command.html\" target=\"_blank\" rel=\"noopener\">export</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-port-command.html\" target=\"_blank\" rel=\"noopener\">port</a> 显示容器的端口映射</li>\n</ul>\n<h3 id=\"容器-rootfs-命令\"><a href=\"#容器-rootfs-命令\" class=\"headerlink\" title=\"容器 rootfs 命令\"></a>容器 rootfs 命令</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-commit-command.html\" target=\"_blank\" rel=\"noopener\">commit</a> 类似 git commit 一样修改之后保存新版本 docker commit -m “commit test” uuu fuiboom/myubuntu:v1 给运行的容器创建一个新的保存镜像（一般常用 Dockerfile 和 build 来构建镜像）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-cp-command.html\" target=\"_blank\" rel=\"noopener\">cp</a> 容器与主机的数据拷贝</li>\n<li><a href=\"http://www.runoob.com/docker/docker-diff-command.html\" target=\"_blank\" rel=\"noopener\">diff</a> 显示容器文件结构的改变（显示自己改了什么东西）</li>\n</ul>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-login-command.html\" target=\"_blank\" rel=\"noopener\">login</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-pull-command.html\" target=\"_blank\" rel=\"noopener\">pull</a> 拉取别人已经配置好的环境（非常好用的命令）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-push-command.html\" target=\"_blank\" rel=\"noopener\">push</a> push 自己的镜像，（需要登录）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-search-command.html\" target=\"_blank\" rel=\"noopener\">search</a></li>\n</ul>\n<h3 id=\"本地镜像管理\"><a href=\"#本地镜像管理\" class=\"headerlink\" title=\"本地镜像管理\"></a>本地镜像管理</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-images-command.html\" target=\"_blank\" rel=\"noopener\">images</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-rmi-command.html\" target=\"_blank\" rel=\"noopener\">rmi</a> 移除本地 image(不然占用本地磁盘空间)</li>\n<li><a href=\"http://www.runoob.com/docker/docker-tag-command.html\" target=\"_blank\" rel=\"noopener\">tag</a> 创建一个镜像的引用 docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</li>\n</ul>\n<blockquote>\n<p>docker tag mysql_client_test fuiboom/mysql_client_test 把官方的改造重新命名一下就可以 push</p>\n<p>docker push fuiboom/mysql_client_test</p>\n</blockquote>\n<ul>\n<li><a href=\"http://www.runoob.com/docker/docker-build-command.html\" target=\"_blank\" rel=\"noopener\">build</a> 根据 Dockerfile 创建一个镜像</li>\n<li><a href=\"http://www.runoob.com/docker/docker-history-command.html\" target=\"_blank\" rel=\"noopener\">history</a> 显示构建容器的历史数据</li>\n<li><a href=\"http://www.runoob.com/docker/docker-save-command.html\" target=\"_blank\" rel=\"noopener\">save</a> save 和 load 搭配</li>\n<li><a href=\"http://www.runoob.com/docker/docker-import-command.html\" target=\"_blank\" rel=\"noopener\">import</a> export 和 import 搭配</li>\n</ul>\n<h3 id=\"info-version\"><a href=\"#info-version\" class=\"headerlink\" title=\"info|version\"></a>info|version</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-info-command.html\" target=\"_blank\" rel=\"noopener\">info</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-version-command.html\" target=\"_blank\" rel=\"noopener\">version</a></li>\n</ul>\n<h3 id=\"docker-run-详细\"><a href=\"#docker-run-详细\" class=\"headerlink\" title=\"docker run 详细\"></a>docker run 详细</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>\n<p>OPTIONS 说明：</p>\n<ul>\n<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>\n<li><strong>-d:</strong> 后台运行容器，并返回容器 ID；</li>\n<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>\n<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>\n<li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li>\n<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的 DNS 服务器，默认和宿主一致；</li>\n<li><strong>–dns-search example.com:</strong> 指定容器 DNS 搜索域名，默认和宿主一致；</li>\n<li><strong>-h “mars”:</strong> 指定容器的 hostname；</li>\n<li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li>\n<li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li>\n<li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定 CPU 运行；</li>\n<li><strong>-m :</strong>设置容器使用内存最大值；</li>\n<li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>\n<li><strong>–link=[]:</strong> 添加链接到另一个容器；</li>\n<li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li>\n<li>-P 大 P 使用 expose 的端口映射到主机的随机端口（感觉不好，还是自己指定比较好）</li>\n</ul>\n<p>示例</p>\n<p>使用 docker 镜像 nginx:latest 以后台模式启动一个容器,并将容器命名为 mynginx。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像 nginx:latest 以后台模式启动一个容器,并将容器的 80 端口映射到主机随机端口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -P -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像 nginx:latest 以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录/data 映射到容器的/data。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 80:80 -v /data:/data -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像 nginx:latest 以交互模式启动一个容器,在容器内执行/bin/bash 命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker run -it nginx:latest /bin/bash</span><br><span class=\"line\">root@b8573233d675:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"docker-exec-语法\"><a href=\"#docker-exec-语法\" class=\"headerlink\" title=\"docker exec 语法\"></a>docker exec 语法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>\n<p>OPTIONS 说明：</p>\n<ul>\n<li><strong>-d :</strong>分离模式: 在后台运行</li>\n<li><strong>-i :</strong>即使没有附加也保持 STDIN 打开</li>\n<li><strong>-t :</strong>分配一个伪终端</li>\n</ul>\n<p>示例</p>\n<p>在容器 mynginx 中以交互模式执行容器内/root/runoob.sh 脚本 （用容器中的程序执行某段脚本）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker <span class=\"built_in\">exec</span> -it mynginx /bin/sh /root/runoob.sh</span><br></pre></td></tr></table></figure>\n<p>在容器 mynginx 中开启一个交互模式的终端（启动容器的一个可交互 bash 窗口）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker <span class=\"built_in\">exec</span> -i -t  mynginx /bin/bash</span><br><span class=\"line\">root@b1a0703e41e7:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>启动、停止所有容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start/stop $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><p>如何设置容器的 cpu，内存，磁盘，网络大小限制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--cpu 4</span><br><span class=\"line\">--memory 1g</span><br><span class=\"line\">--device-read-bps /dev/sda:1mb // 每秒 byte 数据</span><br><span class=\"line\">--device-read-iops /dev/sda:100 // 每秒 IO 次数</span><br></pre></td></tr></table></figure>\n<p>如何设置容器镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://a2a3a2e1.m.daocloud.io</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service</span><br><span class=\"line\">sudo sed -i <span class=\"string\">\"s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=http://a2a3a2e1.m.daocloud.io|g\"</span> /etc/systemd/system/docker.service</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sed -i <span class=\"string\">\"s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=https://pee6w651.mirror.aliyuncs.com|g\"</span> /etc/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用镜像\"><a href=\"#常用镜像\" class=\"headerlink\" title=\"常用镜像\"></a>常用镜像</h2><p>redis</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//-d 后台运行</span><br><span class=\"line\">docker run --name some-redis -d redis</span><br><span class=\"line\"></span><br><span class=\"line\">//--link A:B 连接过去(自动设置host) --rm 终端退出时自动清除容器内容(跟-d不同时用)</span><br><span class=\"line\">docker run -it --link some-redis:redis --rm redis redis-cli -h redis -p 6379</span><br><span class=\"line\"></span><br><span class=\"line\">//自定义conf配置文件</span><br><span class=\"line\">docker run -v /myredis/conf/redis.conf:/usr/<span class=\"built_in\">local</span>/etc/redis/redis.conf --name myredis redis redis-server /usr/<span class=\"built_in\">local</span>/etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n<p>mysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建mysql容器 -e 设置环境变量</span><br><span class=\"line\">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//客户端连接</span><br><span class=\"line\">docker run -it --link some-mysql:mysql --rm mysql sh -c <span class=\"string\">'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\">//mysql的客户端</span><br><span class=\"line\">docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p</span><br><span class=\"line\"></span><br><span class=\"line\">//mysql使用配置文件/my/custom/config-file.cnf ==&gt; /etc/mysql/conf.d/config-file.cnf</span><br><span class=\"line\">docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//指定外部存储目录</span><br><span class=\"line\">docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//dump数据到宿主机</span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> some-mysql sh -c <span class=\"string\">'exec mysqldump --all-databases -uroot -p\"$MYSQL_ROOT_PASSWORD\"'</span> &gt; /some/path/on/your/host/all-databases.sql</span><br></pre></td></tr></table></figure>\n<p>nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//静态页面</span><br><span class=\"line\">docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//配置文件</span><br><span class=\"line\">docker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//debug模式运行</span><br><span class=\"line\">docker run --name my-nginx -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx nginx-debug -g <span class=\"string\">'daemon off;'</span></span><br></pre></td></tr></table></figure>\n<p>kafka</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull wurstmeister/zookeeper</span><br><span class=\"line\">docker pull wurstmeister/kafka</span><br><span class=\"line\">docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</span><br><span class=\"line\">docker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.1.100:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.1.100:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写-dockerfile-文件\"><a href=\"#编写-dockerfile-文件\" class=\"headerlink\" title=\"编写 dockerfile 文件\"></a>编写 dockerfile 文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#dockerfile文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">FROM debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\">RUN buildDeps=<span class=\"string\">'gcc libc6-dev make'</span> \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y <span class=\"variable\">$buildDeps</span> \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span> \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; rm redis.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm -r /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove <span class=\"variable\">$buildDeps</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>Dockerfile</code> 文件所在目录执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t nginx:v3 .</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure>\n<p>如果在 <code>Dockerfile</code> 中这么写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY ./package.json /app/</span><br></pre></td></tr></table></figure>\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。</p>\n<p>COPY 命令</p>\n<blockquote>\n<p>源路径必须使用相对当前目录的路径</p>\n</blockquote>\n<p>从上下文路径复制文件到 镜像中某个目录</p>\n<p><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></p>\n<p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code>指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>\n<p>CMD 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [ <span class=\"string\">\"sh\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo <span class=\"variable\">$HOME</span>\"</span> ]</span><br></pre></td></tr></table></figure>\n<p>ENV 命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV NODE_VERSION 7.2.0</span><br><span class=\"line\">RUN curl -SLO <span class=\"string\">\"https://nodejs.org/dist/v<span class=\"variable\">$NODE_VERSION</span>/node-v<span class=\"variable\">$NODE_VERSION</span>-linux-x64.tar.xz\"</span></span><br><span class=\"line\"><span class=\"comment\">#后面可以使用到</span></span><br></pre></td></tr></table></figure>\n<p>下列指令可以支持环境变量展开（可以用这个环境变量）： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>。</p>\n<p>EXPOSE</p>\n<p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<p>WORKDIR</p>\n<blockquote>\n<p>下面 ENTRYPOINT 命令会在这个目录下面执行命令</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR &lt;工作目录路径&gt; <span class=\"comment\">#以后可以在某层有一个 相对路径</span></span><br></pre></td></tr></table></figure>\n<p>ENTRYPOINT 入口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [<span class=\"string\">\"/usr/sbin/nginx\"</span>,<span class=\"string\">\"-g\"</span>,<span class=\"string\">\"daemon off\"</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"命令汇总\"><a href=\"#命令汇总\" class=\"headerlink\" title=\"命令汇总\"></a>命令汇总</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a //所有</span><br><span class=\"line\">docker ps -l //最近</span><br><span class=\"line\">docker ps -n 5//最近5个</span><br><span class=\"line\">docker ps //运行中</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect xx</span><br><span class=\"line\">docker inspect -f <span class=\"string\">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> mymysql</span><br><span class=\"line\">docker top xx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">docker images ubutun_*</span><br><span class=\"line\">docker tag ubuntu:15.10 runoob/ubuntu:v3</span><br><span class=\"line\">docker build -t runoob/ubuntu:v1 .</span><br><span class=\"line\">docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3</span><br><span class=\"line\">docker import  my_ubuntu_v3.tar runoob/ubuntu:v4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> cp=<span class=\"string\">'cp -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dex=<span class=\"string\">'docker exec -i -t'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> di=<span class=\"string\">'docker images'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dip=<span class=\"string\">'docker inspect --format '</span>\\<span class=\"string\">''</span>&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;<span class=\"string\">'\\'</span><span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dkd=<span class=\"string\">'docker run -d -P'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dki=<span class=\"string\">'docker run -i -t -P'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dl=<span class=\"string\">'docker ps -l -q'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dpa=<span class=\"string\">'docker ps -a'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> dps=<span class=\"string\">'docker ps'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> drmf=<span class=\"string\">'docker stop $(docker ps -a -q) &amp;&amp; docker rm $(docker ps -a -q)'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> egrep=<span class=\"string\">'egrep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> fgrep=<span class=\"string\">'fgrep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> grep=<span class=\"string\">'grep --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> l.=<span class=\"string\">'ls -d .* --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ls=<span class=\"string\">'ls --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mv=<span class=\"string\">'mv -i'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">'rm -i'</span></span><br></pre></td></tr></table></figure>\n"},{"title":"etcd_intro","date":"2019-10-07T13:12:21.000Z","_content":"\n## etcd 笔记\n\n> 定义：分布式的 kv 存储系统\n\n## 常用 API\n\n```bash\nget key\nput key val\nxxx=lease grant 60\nput key val —lease=xxx\ndelete key\nwatch key\n```\n\n## 过期时间\n\nlease 定义一个过期时长，多个 key 都可以绑定到这个 lease 上，lease 过期后会删除所有关联的 key\n\n> keep-alive 让 lease 不过期\n","source":"_posts/framework/etcd-intro.md","raw":"---\ntitle: etcd_intro\ntags:\n  - etcd\ncategories:\n  - etcd\ndate: 2019-10-07 21:12:21\n---\n\n## etcd 笔记\n\n> 定义：分布式的 kv 存储系统\n\n## 常用 API\n\n```bash\nget key\nput key val\nxxx=lease grant 60\nput key val —lease=xxx\ndelete key\nwatch key\n```\n\n## 过期时间\n\nlease 定义一个过期时长，多个 key 都可以绑定到这个 lease 上，lease 过期后会删除所有关联的 key\n\n> keep-alive 让 lease 不过期\n","slug":"framework/etcd-intro","published":1,"updated":"2020-05-25T04:14:39.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr61000ig93838gb83nq","content":"<h2 id=\"etcd-笔记\"><a href=\"#etcd-笔记\" class=\"headerlink\" title=\"etcd 笔记\"></a>etcd 笔记</h2><blockquote>\n<p>定义：分布式的 kv 存储系统</p>\n</blockquote>\n<h2 id=\"常用-API\"><a href=\"#常用-API\" class=\"headerlink\" title=\"常用 API\"></a>常用 API</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get key</span><br><span class=\"line\">put key val</span><br><span class=\"line\">xxx=lease grant 60</span><br><span class=\"line\">put key val —lease=xxx</span><br><span class=\"line\">delete key</span><br><span class=\"line\">watch key</span><br></pre></td></tr></table></figure>\n<h2 id=\"过期时间\"><a href=\"#过期时间\" class=\"headerlink\" title=\"过期时间\"></a>过期时间</h2><p>lease 定义一个过期时长，多个 key 都可以绑定到这个 lease 上，lease 过期后会删除所有关联的 key</p>\n<blockquote>\n<p>keep-alive 让 lease 不过期</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"etcd-笔记\"><a href=\"#etcd-笔记\" class=\"headerlink\" title=\"etcd 笔记\"></a>etcd 笔记</h2><blockquote>\n<p>定义：分布式的 kv 存储系统</p>\n</blockquote>\n<h2 id=\"常用-API\"><a href=\"#常用-API\" class=\"headerlink\" title=\"常用 API\"></a>常用 API</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get key</span><br><span class=\"line\">put key val</span><br><span class=\"line\">xxx=lease grant 60</span><br><span class=\"line\">put key val —lease=xxx</span><br><span class=\"line\">delete key</span><br><span class=\"line\">watch key</span><br></pre></td></tr></table></figure>\n<h2 id=\"过期时间\"><a href=\"#过期时间\" class=\"headerlink\" title=\"过期时间\"></a>过期时间</h2><p>lease 定义一个过期时长，多个 key 都可以绑定到这个 lease 上，lease 过期后会删除所有关联的 key</p>\n<blockquote>\n<p>keep-alive 让 lease 不过期</p>\n</blockquote>\n"},{"title":"gin概览","date":"2019-04-05T15:23:09.000Z","_content":"\n## Gin 框架概览\n\n### 基本用法\n\n```go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n r.Run() // listen and serve on 0.0.0.0:8080\n}\n```\n\n### 实现 middleware\n\n```go\n//使用middleware\nr := gin.New()\nr.Use(gin.Recovery())\n\n//定义middleware\nfunc Recovery() HandlerFunc {\n\treturn func(c *Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t}\n\t\t}()\n\t\t//fmt.Print(\"before\")\n\t\tc.Next()\n\t\t//fmt.Print(\"after\")\n\n\t}\n}\n\n//核心实现，调用下一个handler\nfunc (c *Context) Next() {\n\tc.index++\n\tfor c.index < int8(len(c.handlers)) {\n\t\tc.handlers[c.index](c)\n\t\tc.index++\n\t}\n}\n\ntype RouterGroup struct {\n\tHandlers HandlersChain //添加middleware链条\n\tbasePath string //base路径\n\tengine   *Engine //引用全局engine\n\troot     bool //是否根\n}\nr.Use(gin.Recovery()) //添加middleware到Handlers链条\n接入和handler一样\ntype HandlerFunc func(*Context)\n```\n\n### 路径分组实现\n\n```go\n//使用方式\nmux = gin.New()\napi := mux.Group(\"/api/v1\")\n{\n\tapi.POST(\"/login\", controller.Login)\n\tapi.DELETE(\"/logout\", middleware.SessionCheck(), controller.Logout)\n}\n\n//实现\nfunc (group *RouterGroup) Group(relativePath string, handlers ...HandlerFunc) *RouterGroup {\n\treturn &RouterGroup{\n\t\tHandlers: group.combineHandlers(handlers),//全局的handlers+当前组的handlers\n\t\tbasePath: group.calculateAbsolutePath(relativePath),//计算相对/路径\n\t\tengine:   group.engine,//全局的engine对象\n\t}\n}\n```\n\n### 入口\n\n```go\nfunc (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tc := engine.pool.Get().(*Context)//并发：多个context\n\tc.writermem.reset(w) //resp\n\tc.Request = req //req\n\tc.reset() //重置gincontext\n\n\tengine.handleHTTPRequest(c) //执行handler链条\n\n\tengine.pool.Put(c)\n}\n```\n","source":"_posts/framework/gin概览.md","raw":"---\ntitle: gin概览\ntags:\n  - gin\ncategories:\n  - 框架\ndate: 2019-04-05 23:23:09\n---\n\n## Gin 框架概览\n\n### 基本用法\n\n```go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n r.Run() // listen and serve on 0.0.0.0:8080\n}\n```\n\n### 实现 middleware\n\n```go\n//使用middleware\nr := gin.New()\nr.Use(gin.Recovery())\n\n//定义middleware\nfunc Recovery() HandlerFunc {\n\treturn func(c *Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t}\n\t\t}()\n\t\t//fmt.Print(\"before\")\n\t\tc.Next()\n\t\t//fmt.Print(\"after\")\n\n\t}\n}\n\n//核心实现，调用下一个handler\nfunc (c *Context) Next() {\n\tc.index++\n\tfor c.index < int8(len(c.handlers)) {\n\t\tc.handlers[c.index](c)\n\t\tc.index++\n\t}\n}\n\ntype RouterGroup struct {\n\tHandlers HandlersChain //添加middleware链条\n\tbasePath string //base路径\n\tengine   *Engine //引用全局engine\n\troot     bool //是否根\n}\nr.Use(gin.Recovery()) //添加middleware到Handlers链条\n接入和handler一样\ntype HandlerFunc func(*Context)\n```\n\n### 路径分组实现\n\n```go\n//使用方式\nmux = gin.New()\napi := mux.Group(\"/api/v1\")\n{\n\tapi.POST(\"/login\", controller.Login)\n\tapi.DELETE(\"/logout\", middleware.SessionCheck(), controller.Logout)\n}\n\n//实现\nfunc (group *RouterGroup) Group(relativePath string, handlers ...HandlerFunc) *RouterGroup {\n\treturn &RouterGroup{\n\t\tHandlers: group.combineHandlers(handlers),//全局的handlers+当前组的handlers\n\t\tbasePath: group.calculateAbsolutePath(relativePath),//计算相对/路径\n\t\tengine:   group.engine,//全局的engine对象\n\t}\n}\n```\n\n### 入口\n\n```go\nfunc (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tc := engine.pool.Get().(*Context)//并发：多个context\n\tc.writermem.reset(w) //resp\n\tc.Request = req //req\n\tc.reset() //重置gincontext\n\n\tengine.handleHTTPRequest(c) //执行handler链条\n\n\tengine.pool.Put(c)\n}\n```\n","slug":"framework/gin概览","published":1,"updated":"2020-05-25T04:18:48.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr62000lg938vfi87phd","content":"<h2 id=\"Gin-框架概览\"><a href=\"#Gin-框架概览\" class=\"headerlink\" title=\"Gin 框架概览\"></a>Gin 框架概览</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.GET(<span class=\"string\">\"/ping\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"message\"</span>: <span class=\"string\">\"pong\"</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"> r.Run() <span class=\"comment\">// listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现-middleware\"><a href=\"#实现-middleware\" class=\"headerlink\" title=\"实现 middleware\"></a>实现 middleware</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用middleware</span></span><br><span class=\"line\">r := gin.New()</span><br><span class=\"line\">r.Use(gin.Recovery())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义middleware</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Recovery</span><span class=\"params\">()</span> <span class=\"title\">HandlerFunc</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"comment\">//fmt.Print(\"before\")</span></span><br><span class=\"line\">\t\tc.Next()</span><br><span class=\"line\">\t\t<span class=\"comment\">//fmt.Print(\"after\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//核心实现，调用下一个handler</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span> <span class=\"title\">Next</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.index++</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> c.index &lt; <span class=\"keyword\">int8</span>(<span class=\"built_in\">len</span>(c.handlers)) &#123;</span><br><span class=\"line\">\t\tc.handlers[c.index](c)</span><br><span class=\"line\">\t\tc.index++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RouterGroup <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tHandlers HandlersChain <span class=\"comment\">//添加middleware链条</span></span><br><span class=\"line\">\tbasePath <span class=\"keyword\">string</span> <span class=\"comment\">//base路径</span></span><br><span class=\"line\">\tengine   *Engine <span class=\"comment\">//引用全局engine</span></span><br><span class=\"line\">\troot     <span class=\"keyword\">bool</span> <span class=\"comment\">//是否根</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r.Use(gin.Recovery()) <span class=\"comment\">//添加middleware到Handlers链条</span></span><br><span class=\"line\">接入和handler一样</span><br><span class=\"line\"><span class=\"keyword\">type</span> HandlerFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*Context)</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"路径分组实现\"><a href=\"#路径分组实现\" class=\"headerlink\" title=\"路径分组实现\"></a>路径分组实现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用方式</span></span><br><span class=\"line\">mux = gin.New()</span><br><span class=\"line\">api := mux.Group(<span class=\"string\">\"/api/v1\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tapi.POST(<span class=\"string\">\"/login\"</span>, controller.Login)</span><br><span class=\"line\">\tapi.DELETE(<span class=\"string\">\"/logout\"</span>, middleware.SessionCheck(), controller.Logout)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span> <span class=\"title\">Group</span><span class=\"params\">(relativePath <span class=\"keyword\">string</span>, handlers ...HandlerFunc)</span> *<span class=\"title\">RouterGroup</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;RouterGroup&#123;</span><br><span class=\"line\">\t\tHandlers: group.combineHandlers(handlers),<span class=\"comment\">//全局的handlers+当前组的handlers</span></span><br><span class=\"line\">\t\tbasePath: group.calculateAbsolutePath(relativePath),<span class=\"comment\">//计算相对/路径</span></span><br><span class=\"line\">\t\tengine:   group.engine,<span class=\"comment\">//全局的engine对象</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(engine *Engine)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tc := engine.pool.Get().(*Context)<span class=\"comment\">//并发：多个context</span></span><br><span class=\"line\">\tc.writermem.reset(w) <span class=\"comment\">//resp</span></span><br><span class=\"line\">\tc.Request = req <span class=\"comment\">//req</span></span><br><span class=\"line\">\tc.reset() <span class=\"comment\">//重置gincontext</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.handleHTTPRequest(c) <span class=\"comment\">//执行handler链条</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.pool.Put(c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Gin-框架概览\"><a href=\"#Gin-框架概览\" class=\"headerlink\" title=\"Gin 框架概览\"></a>Gin 框架概览</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.GET(<span class=\"string\">\"/ping\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"message\"</span>: <span class=\"string\">\"pong\"</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"> r.Run() <span class=\"comment\">// listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现-middleware\"><a href=\"#实现-middleware\" class=\"headerlink\" title=\"实现 middleware\"></a>实现 middleware</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用middleware</span></span><br><span class=\"line\">r := gin.New()</span><br><span class=\"line\">r.Use(gin.Recovery())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义middleware</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Recovery</span><span class=\"params\">()</span> <span class=\"title\">HandlerFunc</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"comment\">//fmt.Print(\"before\")</span></span><br><span class=\"line\">\t\tc.Next()</span><br><span class=\"line\">\t\t<span class=\"comment\">//fmt.Print(\"after\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//核心实现，调用下一个handler</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span> <span class=\"title\">Next</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc.index++</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> c.index &lt; <span class=\"keyword\">int8</span>(<span class=\"built_in\">len</span>(c.handlers)) &#123;</span><br><span class=\"line\">\t\tc.handlers[c.index](c)</span><br><span class=\"line\">\t\tc.index++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RouterGroup <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tHandlers HandlersChain <span class=\"comment\">//添加middleware链条</span></span><br><span class=\"line\">\tbasePath <span class=\"keyword\">string</span> <span class=\"comment\">//base路径</span></span><br><span class=\"line\">\tengine   *Engine <span class=\"comment\">//引用全局engine</span></span><br><span class=\"line\">\troot     <span class=\"keyword\">bool</span> <span class=\"comment\">//是否根</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r.Use(gin.Recovery()) <span class=\"comment\">//添加middleware到Handlers链条</span></span><br><span class=\"line\">接入和handler一样</span><br><span class=\"line\"><span class=\"keyword\">type</span> HandlerFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*Context)</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"路径分组实现\"><a href=\"#路径分组实现\" class=\"headerlink\" title=\"路径分组实现\"></a>路径分组实现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用方式</span></span><br><span class=\"line\">mux = gin.New()</span><br><span class=\"line\">api := mux.Group(<span class=\"string\">\"/api/v1\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tapi.POST(<span class=\"string\">\"/login\"</span>, controller.Login)</span><br><span class=\"line\">\tapi.DELETE(<span class=\"string\">\"/logout\"</span>, middleware.SessionCheck(), controller.Logout)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span> <span class=\"title\">Group</span><span class=\"params\">(relativePath <span class=\"keyword\">string</span>, handlers ...HandlerFunc)</span> *<span class=\"title\">RouterGroup</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;RouterGroup&#123;</span><br><span class=\"line\">\t\tHandlers: group.combineHandlers(handlers),<span class=\"comment\">//全局的handlers+当前组的handlers</span></span><br><span class=\"line\">\t\tbasePath: group.calculateAbsolutePath(relativePath),<span class=\"comment\">//计算相对/路径</span></span><br><span class=\"line\">\t\tengine:   group.engine,<span class=\"comment\">//全局的engine对象</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(engine *Engine)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tc := engine.pool.Get().(*Context)<span class=\"comment\">//并发：多个context</span></span><br><span class=\"line\">\tc.writermem.reset(w) <span class=\"comment\">//resp</span></span><br><span class=\"line\">\tc.Request = req <span class=\"comment\">//req</span></span><br><span class=\"line\">\tc.reset() <span class=\"comment\">//重置gincontext</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.handleHTTPRequest(c) <span class=\"comment\">//执行handler链条</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.pool.Put(c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"k8s入门","date":"2019-02-22T02:22:20.000Z","_content":"\n## docker 虚拟化实现\n\n隔离是怎么实现的？\n\n- namespace 进程隔离，名称映射【障眼法】\n- Cgroups 限制进程使用资源，限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等。此外还可以对进程进行优先级设置、审计、进程挂起和恢复。\n\n### cgroup 隔离配置\n\n配置相关文件\n\n```bash\n$ mount -t cgroup\ncpuset on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)\ncpu on /sys/fs/cgroup/cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)\ncpuacct on /sys/fs/cgroup/cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)\nblkio on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)\nmemory on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)\n```\n\n创建一个 cgroup 配置\n\n```bash\nroot@ubuntu:/sys/fs/cgroup/cpu$ mkdir container\nroot@ubuntu:/sys/fs/cgroup/cpu$ ls container/\ncgroup.clone_children cpu.cfs_period_us cpu.rt_period_us  cpu.shares notify_on_release\ncgroup.procs      cpu.cfs_quota_us  cpu.rt_runtime_us cpu.stat  tasks\n```\n\n执行脚本，进程号 226，top 查看 CPU 占用 100%\n\n```bash\nwhile : ; do : ; done &\n[1] 226\n```\n\n因为默认配置，quota 为-1 没有限制，period 默认为 100ms(100000us)：\n\n```bash\ncat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us\n-1\ncat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us\n100000\n```\n\n向 container 组的 cfs_quota 写入 20000us\n\n```bash\necho 20000 > /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us\n```\n\n意味着这个进程只是用 20%CPU,然后写入被限制的进程 PID，使用 top 查看 CPU 占用 20%了\n\n```bash\necho 226 > /sys/fs/cgroup/cpu/container/tasks\n```\n\ndocker 运行容器时可以指定参数\n\n```bash\ndocker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash\ncat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us\n100000\ncat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us\n20000\n```\n\n说明这个容器只能占用 20%的 CPU\n\n### mount namespace\n\n挂载新的路径作为容器的根路径 rootfs\n核心流程\n\n1. 弃用 linux namespace\n2. 指定 cgroups 参数\n3. 切换进程的根目录\n\n## 问题\n\ndocker 和 KVM 虚拟机区别？\n\n- docker 本身不占用资源，KVM 本身占用 200M 内存\n- KVM 虚拟化拦截，性能有损耗，docker 直接使用宿主机的进程，性能更好\n- docker 隔离不是很彻底，linux 内核中很多对象和资源是不能被 namespace 化，如时间 宿主机改了容器也会改\n\n容器是一个单进程吗？\n\n> 是，一个容器本质就是一个进程，用户的应用进程实际上就是容器里 PID 为 1 的进程，也是后续创建的进程的父进程。所以没办法在一个容器运行两个不同的应用。\n\n解决容器类 top 查看到宿主机信息问题？\n\n> top 是从/proc 下面获取数据的，所以把宿主机的 /var/lib/lxcfs/proc/文件挂载到容器的/proc/就可以通过 lxcfs 读取到对应容器的内存，CPU 等限制\n","source":"_posts/docker_k8s/k8s入门.md","raw":"---\ntitle: k8s入门\ntags:\n  - k8s\ncategories:\n  - docker\ndate: 2019-02-22 10:22:20\n---\n\n## docker 虚拟化实现\n\n隔离是怎么实现的？\n\n- namespace 进程隔离，名称映射【障眼法】\n- Cgroups 限制进程使用资源，限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等。此外还可以对进程进行优先级设置、审计、进程挂起和恢复。\n\n### cgroup 隔离配置\n\n配置相关文件\n\n```bash\n$ mount -t cgroup\ncpuset on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)\ncpu on /sys/fs/cgroup/cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)\ncpuacct on /sys/fs/cgroup/cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)\nblkio on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)\nmemory on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)\n```\n\n创建一个 cgroup 配置\n\n```bash\nroot@ubuntu:/sys/fs/cgroup/cpu$ mkdir container\nroot@ubuntu:/sys/fs/cgroup/cpu$ ls container/\ncgroup.clone_children cpu.cfs_period_us cpu.rt_period_us  cpu.shares notify_on_release\ncgroup.procs      cpu.cfs_quota_us  cpu.rt_runtime_us cpu.stat  tasks\n```\n\n执行脚本，进程号 226，top 查看 CPU 占用 100%\n\n```bash\nwhile : ; do : ; done &\n[1] 226\n```\n\n因为默认配置，quota 为-1 没有限制，period 默认为 100ms(100000us)：\n\n```bash\ncat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us\n-1\ncat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us\n100000\n```\n\n向 container 组的 cfs_quota 写入 20000us\n\n```bash\necho 20000 > /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us\n```\n\n意味着这个进程只是用 20%CPU,然后写入被限制的进程 PID，使用 top 查看 CPU 占用 20%了\n\n```bash\necho 226 > /sys/fs/cgroup/cpu/container/tasks\n```\n\ndocker 运行容器时可以指定参数\n\n```bash\ndocker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash\ncat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us\n100000\ncat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us\n20000\n```\n\n说明这个容器只能占用 20%的 CPU\n\n### mount namespace\n\n挂载新的路径作为容器的根路径 rootfs\n核心流程\n\n1. 弃用 linux namespace\n2. 指定 cgroups 参数\n3. 切换进程的根目录\n\n## 问题\n\ndocker 和 KVM 虚拟机区别？\n\n- docker 本身不占用资源，KVM 本身占用 200M 内存\n- KVM 虚拟化拦截，性能有损耗，docker 直接使用宿主机的进程，性能更好\n- docker 隔离不是很彻底，linux 内核中很多对象和资源是不能被 namespace 化，如时间 宿主机改了容器也会改\n\n容器是一个单进程吗？\n\n> 是，一个容器本质就是一个进程，用户的应用进程实际上就是容器里 PID 为 1 的进程，也是后续创建的进程的父进程。所以没办法在一个容器运行两个不同的应用。\n\n解决容器类 top 查看到宿主机信息问题？\n\n> top 是从/proc 下面获取数据的，所以把宿主机的 /var/lib/lxcfs/proc/文件挂载到容器的/proc/就可以通过 lxcfs 读取到对应容器的内存，CPU 等限制\n","slug":"docker_k8s/k8s入门","published":1,"updated":"2020-05-25T04:11:53.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr65000pg93831qedfre","content":"<h2 id=\"docker-虚拟化实现\"><a href=\"#docker-虚拟化实现\" class=\"headerlink\" title=\"docker 虚拟化实现\"></a>docker 虚拟化实现</h2><p>隔离是怎么实现的？</p>\n<ul>\n<li>namespace 进程隔离，名称映射【障眼法】</li>\n<li>Cgroups 限制进程使用资源，限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等。此外还可以对进程进行优先级设置、审计、进程挂起和恢复。</li>\n</ul>\n<h3 id=\"cgroup-隔离配置\"><a href=\"#cgroup-隔离配置\" class=\"headerlink\" title=\"cgroup 隔离配置\"></a>cgroup 隔离配置</h3><p>配置相关文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mount -t cgroup</span><br><span class=\"line\">cpuset on /sys/fs/cgroup/cpuset <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)</span><br><span class=\"line\">cpu on /sys/fs/cgroup/cpu <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,cpu)</span><br><span class=\"line\">cpuacct on /sys/fs/cgroup/cpuacct <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)</span><br><span class=\"line\">blkio on /sys/fs/cgroup/blkio <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,blkio)</span><br><span class=\"line\">memory on /sys/fs/cgroup/memory <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,memory)</span><br></pre></td></tr></table></figure>\n<p>创建一个 cgroup 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/sys/fs/cgroup/cpu$ mkdir container</span><br><span class=\"line\">root@ubuntu:/sys/fs/cgroup/cpu$ ls container/</span><br><span class=\"line\">cgroup.clone_children cpu.cfs_period_us cpu.rt_period_us  cpu.shares notify_on_release</span><br><span class=\"line\">cgroup.procs      cpu.cfs_quota_us  cpu.rt_runtime_us cpu.stat  tasks</span><br></pre></td></tr></table></figure>\n<p>执行脚本，进程号 226，top 查看 CPU 占用 100%</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> : ; <span class=\"keyword\">do</span> : ; <span class=\"keyword\">done</span> &amp;</span><br><span class=\"line\">[1] 226</span><br></pre></td></tr></table></figure>\n<p>因为默认配置，quota 为-1 没有限制，period 默认为 100ms(100000us)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us</span><br><span class=\"line\">-1</span><br><span class=\"line\">cat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us</span><br><span class=\"line\">100000</span><br></pre></td></tr></table></figure>\n<p>向 container 组的 cfs_quota 写入 20000us</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 20000 &gt; /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us</span><br></pre></td></tr></table></figure>\n<p>意味着这个进程只是用 20%CPU,然后写入被限制的进程 PID，使用 top 查看 CPU 占用 20%了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 226 &gt; /sys/fs/cgroup/cpu/container/tasks</span><br></pre></td></tr></table></figure>\n<p>docker 运行容器时可以指定参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash</span><br><span class=\"line\">cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us</span><br><span class=\"line\">100000</span><br><span class=\"line\">cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us</span><br><span class=\"line\">20000</span><br></pre></td></tr></table></figure>\n<p>说明这个容器只能占用 20%的 CPU</p>\n<h3 id=\"mount-namespace\"><a href=\"#mount-namespace\" class=\"headerlink\" title=\"mount namespace\"></a>mount namespace</h3><p>挂载新的路径作为容器的根路径 rootfs<br>核心流程</p>\n<ol>\n<li>弃用 linux namespace</li>\n<li>指定 cgroups 参数</li>\n<li>切换进程的根目录</li>\n</ol>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>docker 和 KVM 虚拟机区别？</p>\n<ul>\n<li>docker 本身不占用资源，KVM 本身占用 200M 内存</li>\n<li>KVM 虚拟化拦截，性能有损耗，docker 直接使用宿主机的进程，性能更好</li>\n<li>docker 隔离不是很彻底，linux 内核中很多对象和资源是不能被 namespace 化，如时间 宿主机改了容器也会改</li>\n</ul>\n<p>容器是一个单进程吗？</p>\n<blockquote>\n<p>是，一个容器本质就是一个进程，用户的应用进程实际上就是容器里 PID 为 1 的进程，也是后续创建的进程的父进程。所以没办法在一个容器运行两个不同的应用。</p>\n</blockquote>\n<p>解决容器类 top 查看到宿主机信息问题？</p>\n<blockquote>\n<p>top 是从/proc 下面获取数据的，所以把宿主机的 /var/lib/lxcfs/proc/文件挂载到容器的/proc/就可以通过 lxcfs 读取到对应容器的内存，CPU 等限制</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker-虚拟化实现\"><a href=\"#docker-虚拟化实现\" class=\"headerlink\" title=\"docker 虚拟化实现\"></a>docker 虚拟化实现</h2><p>隔离是怎么实现的？</p>\n<ul>\n<li>namespace 进程隔离，名称映射【障眼法】</li>\n<li>Cgroups 限制进程使用资源，限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等。此外还可以对进程进行优先级设置、审计、进程挂起和恢复。</li>\n</ul>\n<h3 id=\"cgroup-隔离配置\"><a href=\"#cgroup-隔离配置\" class=\"headerlink\" title=\"cgroup 隔离配置\"></a>cgroup 隔离配置</h3><p>配置相关文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mount -t cgroup</span><br><span class=\"line\">cpuset on /sys/fs/cgroup/cpuset <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)</span><br><span class=\"line\">cpu on /sys/fs/cgroup/cpu <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,cpu)</span><br><span class=\"line\">cpuacct on /sys/fs/cgroup/cpuacct <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)</span><br><span class=\"line\">blkio on /sys/fs/cgroup/blkio <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,blkio)</span><br><span class=\"line\">memory on /sys/fs/cgroup/memory <span class=\"built_in\">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,memory)</span><br></pre></td></tr></table></figure>\n<p>创建一个 cgroup 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/sys/fs/cgroup/cpu$ mkdir container</span><br><span class=\"line\">root@ubuntu:/sys/fs/cgroup/cpu$ ls container/</span><br><span class=\"line\">cgroup.clone_children cpu.cfs_period_us cpu.rt_period_us  cpu.shares notify_on_release</span><br><span class=\"line\">cgroup.procs      cpu.cfs_quota_us  cpu.rt_runtime_us cpu.stat  tasks</span><br></pre></td></tr></table></figure>\n<p>执行脚本，进程号 226，top 查看 CPU 占用 100%</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> : ; <span class=\"keyword\">do</span> : ; <span class=\"keyword\">done</span> &amp;</span><br><span class=\"line\">[1] 226</span><br></pre></td></tr></table></figure>\n<p>因为默认配置，quota 为-1 没有限制，period 默认为 100ms(100000us)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us</span><br><span class=\"line\">-1</span><br><span class=\"line\">cat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us</span><br><span class=\"line\">100000</span><br></pre></td></tr></table></figure>\n<p>向 container 组的 cfs_quota 写入 20000us</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 20000 &gt; /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us</span><br></pre></td></tr></table></figure>\n<p>意味着这个进程只是用 20%CPU,然后写入被限制的进程 PID，使用 top 查看 CPU 占用 20%了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 226 &gt; /sys/fs/cgroup/cpu/container/tasks</span><br></pre></td></tr></table></figure>\n<p>docker 运行容器时可以指定参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash</span><br><span class=\"line\">cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us</span><br><span class=\"line\">100000</span><br><span class=\"line\">cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us</span><br><span class=\"line\">20000</span><br></pre></td></tr></table></figure>\n<p>说明这个容器只能占用 20%的 CPU</p>\n<h3 id=\"mount-namespace\"><a href=\"#mount-namespace\" class=\"headerlink\" title=\"mount namespace\"></a>mount namespace</h3><p>挂载新的路径作为容器的根路径 rootfs<br>核心流程</p>\n<ol>\n<li>弃用 linux namespace</li>\n<li>指定 cgroups 参数</li>\n<li>切换进程的根目录</li>\n</ol>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>docker 和 KVM 虚拟机区别？</p>\n<ul>\n<li>docker 本身不占用资源，KVM 本身占用 200M 内存</li>\n<li>KVM 虚拟化拦截，性能有损耗，docker 直接使用宿主机的进程，性能更好</li>\n<li>docker 隔离不是很彻底，linux 内核中很多对象和资源是不能被 namespace 化，如时间 宿主机改了容器也会改</li>\n</ul>\n<p>容器是一个单进程吗？</p>\n<blockquote>\n<p>是，一个容器本质就是一个进程，用户的应用进程实际上就是容器里 PID 为 1 的进程，也是后续创建的进程的父进程。所以没办法在一个容器运行两个不同的应用。</p>\n</blockquote>\n<p>解决容器类 top 查看到宿主机信息问题？</p>\n<blockquote>\n<p>top 是从/proc 下面获取数据的，所以把宿主机的 /var/lib/lxcfs/proc/文件挂载到容器的/proc/就可以通过 lxcfs 读取到对应容器的内存，CPU 等限制</p>\n</blockquote>\n"},{"title":"thrift_intro","date":"2019-10-07T12:40:13.000Z","_content":"\n## thrift 笔记\n\n> Thrift 实际上是实现了 C/S 模式，通过代码生成工具将接口定义文件生成服务器端和客户端代码（可以为不同语言），从而实现服务端和客户端跨语言的支持。用户在 Thirft 描述文件中声明自己的服务，这些服务经过编译后会生成相应语言的代码文件，然后用户实现服务（客户端调用服务，服务器端提服务）便可以了。其中 protocol（协议层, 定义数据传输格式，可以为二进制或者 XML 等）和 transport（传输层，定义数据传输方式，可以为 TCP/IP 传输，内存共享或者文件共享等）被用作运行时库。\n\nThrift 的网络栈如下所示：\n\n![网络栈](../../images/thrit-network.png)\n\n### Transport\n\nTransport 层提供了一个简单的网络读写抽象层。这使得 thrift 底层的 transport 从系统其它部分（如：序列化/反序列化）解耦。以下是一些 Transport 接口提供的方法：\n\n除了以上几个接口，Thrift 使用 ServerTransport 接口接受或者创建原始 transport 对象。正如名字暗示的那样，ServerTransport 用在 server 端，为到来的连接创建 Transport 对象。\n\n### Protocol\n\nProtocol 抽象层定义了一种将内存中数据结构映射成可传输格式的机制。换句话说，Protocol 定义了 datatype 怎样使用底层的 Transport 对自己进行编解码。因此，Protocol 的实现要给出编码机制并负责对数据进行序列化。\n\nProtocol 接口的定义如下：\n\n下面是一些对大部分 thrift 支持的语言均可用的 protocol：\n\n(1) binary：简单的二进制编码\n\n(2) Compact：具体见 THRIFT-11\n\n(3) Json\n\n### Processor\n\nProcessor 封装了从输入数据流中读数据和向数据数据流中写数据的操作。读写数据流用 Protocol 对象表示。Processor 的结构体非常简单:\n\n与服务相关的 processor 实现由编译器产生。Processor 主要工作流程如下：从连接中读取数据（使用输入 protocol），将处理授权给 handler（由用户实现），最后将结果写到连接上（使用输出 protocol）。\n\n### Server\n\nServer 将以上所有特性集成在一起：\n\n（1） 创建一个 transport 对象\n\n（2） 为 transport 对象创建输入输出 protocol\n\n（3） 基于输入输出 protocol 创建 processor\n\n（4） 等待连接请求并将之交给 processor 处理\n","source":"_posts/framework/thrift-intro.md","raw":"---\ntitle: thrift_intro\ntags:\n  - thrift\ncategories:\n  - rpc\ndate: 2019-10-07 20:40:13\n---\n\n## thrift 笔记\n\n> Thrift 实际上是实现了 C/S 模式，通过代码生成工具将接口定义文件生成服务器端和客户端代码（可以为不同语言），从而实现服务端和客户端跨语言的支持。用户在 Thirft 描述文件中声明自己的服务，这些服务经过编译后会生成相应语言的代码文件，然后用户实现服务（客户端调用服务，服务器端提服务）便可以了。其中 protocol（协议层, 定义数据传输格式，可以为二进制或者 XML 等）和 transport（传输层，定义数据传输方式，可以为 TCP/IP 传输，内存共享或者文件共享等）被用作运行时库。\n\nThrift 的网络栈如下所示：\n\n![网络栈](../../images/thrit-network.png)\n\n### Transport\n\nTransport 层提供了一个简单的网络读写抽象层。这使得 thrift 底层的 transport 从系统其它部分（如：序列化/反序列化）解耦。以下是一些 Transport 接口提供的方法：\n\n除了以上几个接口，Thrift 使用 ServerTransport 接口接受或者创建原始 transport 对象。正如名字暗示的那样，ServerTransport 用在 server 端，为到来的连接创建 Transport 对象。\n\n### Protocol\n\nProtocol 抽象层定义了一种将内存中数据结构映射成可传输格式的机制。换句话说，Protocol 定义了 datatype 怎样使用底层的 Transport 对自己进行编解码。因此，Protocol 的实现要给出编码机制并负责对数据进行序列化。\n\nProtocol 接口的定义如下：\n\n下面是一些对大部分 thrift 支持的语言均可用的 protocol：\n\n(1) binary：简单的二进制编码\n\n(2) Compact：具体见 THRIFT-11\n\n(3) Json\n\n### Processor\n\nProcessor 封装了从输入数据流中读数据和向数据数据流中写数据的操作。读写数据流用 Protocol 对象表示。Processor 的结构体非常简单:\n\n与服务相关的 processor 实现由编译器产生。Processor 主要工作流程如下：从连接中读取数据（使用输入 protocol），将处理授权给 handler（由用户实现），最后将结果写到连接上（使用输出 protocol）。\n\n### Server\n\nServer 将以上所有特性集成在一起：\n\n（1） 创建一个 transport 对象\n\n（2） 为 transport 对象创建输入输出 protocol\n\n（3） 基于输入输出 protocol 创建 processor\n\n（4） 等待连接请求并将之交给 processor 处理\n","slug":"framework/thrift-intro","published":1,"updated":"2020-05-25T04:21:11.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr66000rg938e9to3xbt","content":"<h2 id=\"thrift-笔记\"><a href=\"#thrift-笔记\" class=\"headerlink\" title=\"thrift 笔记\"></a>thrift 笔记</h2><blockquote>\n<p>Thrift 实际上是实现了 C/S 模式，通过代码生成工具将接口定义文件生成服务器端和客户端代码（可以为不同语言），从而实现服务端和客户端跨语言的支持。用户在 Thirft 描述文件中声明自己的服务，这些服务经过编译后会生成相应语言的代码文件，然后用户实现服务（客户端调用服务，服务器端提服务）便可以了。其中 protocol（协议层, 定义数据传输格式，可以为二进制或者 XML 等）和 transport（传输层，定义数据传输方式，可以为 TCP/IP 传输，内存共享或者文件共享等）被用作运行时库。</p>\n</blockquote>\n<p>Thrift 的网络栈如下所示：</p>\n<p><img src=\"../../images/thrit-network.png\" alt=\"网络栈\"></p>\n<h3 id=\"Transport\"><a href=\"#Transport\" class=\"headerlink\" title=\"Transport\"></a>Transport</h3><p>Transport 层提供了一个简单的网络读写抽象层。这使得 thrift 底层的 transport 从系统其它部分（如：序列化/反序列化）解耦。以下是一些 Transport 接口提供的方法：</p>\n<p>除了以上几个接口，Thrift 使用 ServerTransport 接口接受或者创建原始 transport 对象。正如名字暗示的那样，ServerTransport 用在 server 端，为到来的连接创建 Transport 对象。</p>\n<h3 id=\"Protocol\"><a href=\"#Protocol\" class=\"headerlink\" title=\"Protocol\"></a>Protocol</h3><p>Protocol 抽象层定义了一种将内存中数据结构映射成可传输格式的机制。换句话说，Protocol 定义了 datatype 怎样使用底层的 Transport 对自己进行编解码。因此，Protocol 的实现要给出编码机制并负责对数据进行序列化。</p>\n<p>Protocol 接口的定义如下：</p>\n<p>下面是一些对大部分 thrift 支持的语言均可用的 protocol：</p>\n<p>(1) binary：简单的二进制编码</p>\n<p>(2) Compact：具体见 THRIFT-11</p>\n<p>(3) Json</p>\n<h3 id=\"Processor\"><a href=\"#Processor\" class=\"headerlink\" title=\"Processor\"></a>Processor</h3><p>Processor 封装了从输入数据流中读数据和向数据数据流中写数据的操作。读写数据流用 Protocol 对象表示。Processor 的结构体非常简单:</p>\n<p>与服务相关的 processor 实现由编译器产生。Processor 主要工作流程如下：从连接中读取数据（使用输入 protocol），将处理授权给 handler（由用户实现），最后将结果写到连接上（使用输出 protocol）。</p>\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><p>Server 将以上所有特性集成在一起：</p>\n<p>（1） 创建一个 transport 对象</p>\n<p>（2） 为 transport 对象创建输入输出 protocol</p>\n<p>（3） 基于输入输出 protocol 创建 processor</p>\n<p>（4） 等待连接请求并将之交给 processor 处理</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"thrift-笔记\"><a href=\"#thrift-笔记\" class=\"headerlink\" title=\"thrift 笔记\"></a>thrift 笔记</h2><blockquote>\n<p>Thrift 实际上是实现了 C/S 模式，通过代码生成工具将接口定义文件生成服务器端和客户端代码（可以为不同语言），从而实现服务端和客户端跨语言的支持。用户在 Thirft 描述文件中声明自己的服务，这些服务经过编译后会生成相应语言的代码文件，然后用户实现服务（客户端调用服务，服务器端提服务）便可以了。其中 protocol（协议层, 定义数据传输格式，可以为二进制或者 XML 等）和 transport（传输层，定义数据传输方式，可以为 TCP/IP 传输，内存共享或者文件共享等）被用作运行时库。</p>\n</blockquote>\n<p>Thrift 的网络栈如下所示：</p>\n<p><img src=\"../../images/thrit-network.png\" alt=\"网络栈\"></p>\n<h3 id=\"Transport\"><a href=\"#Transport\" class=\"headerlink\" title=\"Transport\"></a>Transport</h3><p>Transport 层提供了一个简单的网络读写抽象层。这使得 thrift 底层的 transport 从系统其它部分（如：序列化/反序列化）解耦。以下是一些 Transport 接口提供的方法：</p>\n<p>除了以上几个接口，Thrift 使用 ServerTransport 接口接受或者创建原始 transport 对象。正如名字暗示的那样，ServerTransport 用在 server 端，为到来的连接创建 Transport 对象。</p>\n<h3 id=\"Protocol\"><a href=\"#Protocol\" class=\"headerlink\" title=\"Protocol\"></a>Protocol</h3><p>Protocol 抽象层定义了一种将内存中数据结构映射成可传输格式的机制。换句话说，Protocol 定义了 datatype 怎样使用底层的 Transport 对自己进行编解码。因此，Protocol 的实现要给出编码机制并负责对数据进行序列化。</p>\n<p>Protocol 接口的定义如下：</p>\n<p>下面是一些对大部分 thrift 支持的语言均可用的 protocol：</p>\n<p>(1) binary：简单的二进制编码</p>\n<p>(2) Compact：具体见 THRIFT-11</p>\n<p>(3) Json</p>\n<h3 id=\"Processor\"><a href=\"#Processor\" class=\"headerlink\" title=\"Processor\"></a>Processor</h3><p>Processor 封装了从输入数据流中读数据和向数据数据流中写数据的操作。读写数据流用 Protocol 对象表示。Processor 的结构体非常简单:</p>\n<p>与服务相关的 processor 实现由编译器产生。Processor 主要工作流程如下：从连接中读取数据（使用输入 protocol），将处理授权给 handler（由用户实现），最后将结果写到连接上（使用输出 protocol）。</p>\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><p>Server 将以上所有特性集成在一起：</p>\n<p>（1） 创建一个 transport 对象</p>\n<p>（2） 为 transport 对象创建输入输出 protocol</p>\n<p>（3） 基于输入输出 protocol 创建 processor</p>\n<p>（4） 等待连接请求并将之交给 processor 处理</p>\n"},{"title":"go-bytes.Buffer","date":"2018-09-19T07:46:07.000Z","_content":"\n## bytes.Buffer\n\n### java StringBuilder\n\n```java\nStringBuilder sb = new StringBuilder();\nsb.append(\"hello\");\nsb.append(\",world\");\nSystem.out.println(sb.toString());\n```\n\n### go bytes.Buffer\n\n```go\nvar bb bytes.Buffer\nbb.WriteString(\"[\")\nbb.WriteString(\"]\")\nfmt.Println(bb.String())\n```\n","source":"_posts/golang/go-bytes-Buffer.md","raw":"---\ntitle: go-bytes.Buffer\ntags:\n  - buffer\ncategories:\n  - go\ndate: 2018-09-19 15:46:07\n---\n\n## bytes.Buffer\n\n### java StringBuilder\n\n```java\nStringBuilder sb = new StringBuilder();\nsb.append(\"hello\");\nsb.append(\",world\");\nSystem.out.println(sb.toString());\n```\n\n### go bytes.Buffer\n\n```go\nvar bb bytes.Buffer\nbb.WriteString(\"[\")\nbb.WriteString(\"]\")\nfmt.Println(bb.String())\n```\n","slug":"golang/go-bytes-Buffer","published":1,"updated":"2020-05-25T05:01:48.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr68000vg9388u6vpisf","content":"<h2 id=\"bytes-Buffer\"><a href=\"#bytes-Buffer\" class=\"headerlink\" title=\"bytes.Buffer\"></a>bytes.Buffer</h2><h3 id=\"java-StringBuilder\"><a href=\"#java-StringBuilder\" class=\"headerlink\" title=\"java StringBuilder\"></a>java StringBuilder</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\",world\"</span>);</span><br><span class=\"line\">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>\n<h3 id=\"go-bytes-Buffer\"><a href=\"#go-bytes-Buffer\" class=\"headerlink\" title=\"go bytes.Buffer\"></a>go bytes.Buffer</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bb bytes.Buffer</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"[\"</span>)</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"]\"</span>)</span><br><span class=\"line\">fmt.Println(bb.String())</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"bytes-Buffer\"><a href=\"#bytes-Buffer\" class=\"headerlink\" title=\"bytes.Buffer\"></a>bytes.Buffer</h2><h3 id=\"java-StringBuilder\"><a href=\"#java-StringBuilder\" class=\"headerlink\" title=\"java StringBuilder\"></a>java StringBuilder</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\",world\"</span>);</span><br><span class=\"line\">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>\n<h3 id=\"go-bytes-Buffer\"><a href=\"#go-bytes-Buffer\" class=\"headerlink\" title=\"go bytes.Buffer\"></a>go bytes.Buffer</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bb bytes.Buffer</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"[\"</span>)</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"]\"</span>)</span><br><span class=\"line\">fmt.Println(bb.String())</span><br></pre></td></tr></table></figure>\n"},{"title":"boltdb使用","date":"2019-04-19T05:46:16.000Z","_content":"\n## golang boltdb 的学习和实践\n\n## 1. 安装\n\n```go\ngo get github.com/boltdb/bolt\n```\n\n## 2.创建和启动数据库\n\n```go\ndb, err := bolt.Open(\"my.db\", 0600, nil)\n```\n\n其中`open`的第一个参数为路径,如果数据库不存在则会创建名为 my.db 的数据库， 第二个为文件操作，第三个参数是可选参数， 内部可以配置只读和超时时间等，\n特别需要注意的地方就是因为 boltdb 是文件操作类型的数据库，所以只能单点写入和读取，如果多个同时操作的话后者会被挂起直到前者关闭操作为止， boltdb 一次只允许一个读写事务，但一次允许多个只读事务。所以数据具有较强的一致性。\n\n因此单个事务和从它们创建的所有对象（例如桶、键）都不是线程安全的。与数据在多个概念你必须为每一个或使用锁机制来保证只有一个 goroutine 里操作改变数据。\n只读事务和读写事物通常不应该在同一个 goroutine 里同时打开。由于读写事务需要周期性地重新映射数据文件，这可能导致死锁。\n\n## 3.读写事务\n\nboltdb 的读写事务操作我们可以使用`DB.Update()`来完成形如：\n\n```go\nerr := db.Update(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n在闭包 fun 中,在结束时返回 nil 来提交事务。您还可以通过返回一个错误在任何点回滚事务。所有数据库操作都允许在读写事务中进行。\n始终要关注 err 返回，因为它将报告导致您的事务不能完成的所有磁盘故障。\n\n## 4.批量读写事物\n\n每一次新的事物都需要等待上一次事物的结束，这种开销我们可以通过`DB.Batch()`批处理来完成\n\n```go\nerr := db.Batch(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n在批处理过程中如果某个事务失败了,批处理会多次调用这个函数函数返回成功则成功。如果中途失败了，则整个事务会回滚。\n\n## 5.只读事务\n\n只读事务可以使用`DB.View()`来完成\n\n```go\nerr := db.View(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n不改变数据的操作都可以通过只读事务来完成， 您只能检索桶、检索值，或在只读事务中复制数据库。\n\n## 6.启动事务\n\n`DB.Begin()`启动函数包含在 db.update 和 db.batch 中,该函数启动事务开始执行事务并返回结果关闭事务，这是 boltdb 推荐的方式，有时候你可能需要手动启动事物你可以使用`Tx.Begin()`来开始，切记不要忘记关闭事务。\n\n```go\n// Start a writable transaction.\ntx, err := db.Begin(true)\nif err != nil {\n    return err\n}\ndefer tx.Rollback()\n\n// Use the transaction...\n_, err := tx.CreateBucket([]byte(\"MyBucket\"))\nif err != nil {\n    return err\n}\n\n// Commit the transaction and check for error.\nif err := tx.Commit(); err != nil {\n    return err\n}\n```\n\n## 7.使用桶\n\n桶是数据库中键/值对的集合。桶中的所有键必须是唯一的。您可以使用`DB.CreateBucket()`创建一个桶：\n\n```go\ndb.Update(func(tx *bolt.Tx) error {\n    b, err := tx.CreateBucket([]byte(\"MyBucket\"))\n    if err != nil {\n        return fmt.Errorf(\"create bucket: %s\", err)\n    }\n    return nil\n})\n```\n\n你也可以是实用`Tx.CreateBucketIfNotExists()`来创建桶，该函数会先判断是否已经存在该桶不存在即创建， 删除桶可以使用`Tx.DeleteBucket()`来完成\n\n## 8.使用 k-v 对\n\n存储键值对到桶里可以使用`Bucket.Put()`来完成：\n\n```go\ndb.Update(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyFriendsBucket\"))\n    err := b.Put([]byte(\"one\"), []byte(\"zhangsan\"))\n    return err\n})\n```\n\n获取键值`Bucket.Get()`：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyFriendsBucket\"))\n    v := b.Get([]byte(\"one\"))\n    fmt.Printf(\"The answer is: %s\\n\", v)\n    return nil\n})\n```\n\n`get()`函数不返回一个错误，因为它的运行是保证工作（除非有某种系统故障）。如果键存在，那么它将返回它的值。如果它不存在，那么它将返回 nil。\n还需要注意的是当事务打开都 get 返回的值时唯一有效的，如果你需要将该值用于其他事务，你可以通过`copy`拷贝到其他的 byte slice 中\n\n## 9.桶的自增\n\n利用`nextsequence()`功能，你可以让 boltdb 生成序列作为你键值对的唯一标识。见下面的示例。\n\n```go\nfunc (s *Store) CreateUser(u *User) error {\n    return s.db.Update(func(tx *bolt.Tx) error {\n        // 创建users桶\n        b := tx.Bucket([]byte(\"users\"))\n\n        // 生成自增序列\n        id, _ = b.NextSequence()\n        u.ID = int(id)\n\n        // Marshal user data into bytes.\n        buf, err := json.Marshal(u)\n        if err != nil {\n            return err\n        }\n\n        // Persist bytes to users bucket.\n        return b.Put(itob(u.ID), buf)\n    })\n}\n\n// itob returns an 8-byte big endian representation of v.\nfunc itob(v int) []byte {\n    b := make([]byte, 8)\n    binary.BigEndian.PutUint64(b, uint64(v))\n    return b\n}\n\ntype User struct {\n    ID int\n    ...\n}\n```\n\n## 10. 迭代键\n\nboltdb 以桶中的字节排序顺序存储键。这使得在这些键上的顺序迭代非常快。要遍历键，我们将使用游标`Cursor()`：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    c := b.Cursor()\n\n    for k, v := c.First(); k != nil; k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n游标`Cursor()`允许您移动到键列表中的特定点，并一次一个地通过操作键前进或后退。\n光标上有以下函数：\n\n```go\nFirst()  移动到第一个健.\nLast()   移动到最后一个健.\nSeek()   移动到特定的一个健.\nNext()   移动到下一个健.\nPrev()   移动到上一个健.\n```\n\n这些函数中的每一个都返回一个包含(key []byte, value []byte)的签名。当你有光标迭代结束，next()将返回一个 nil。在调用 next()或 prev()之前，你必须寻求一个位置使用 first()，last()，或 seek()。如果您不寻求位置，则这些函数将返回一个 nil 键。\n在迭代过程中，如果键为非零，但值为 0，则意味着键指向一个桶而不是一个值。用桶.bucket()访问子桶。\n\n## 11.前缀扫描\n\n遍历一个 key 的前缀，你可以结合`seek()`和`bytes.hasprefix()`：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    c := tx.Bucket([]byte(\"MyBucket\")).Cursor()\n\n    prefix := []byte(\"1234\")\n    for k, v := c.Seek(prefix); bytes.HasPrefix(k, prefix); k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n## 12.范围扫描\n\n另一个常见的用例是扫描范围，例如时间范围。如果你使用一个合适的时间编码，如 rfc3339 然后可以查询特定日期范围的数据：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    // Assume our events bucket exists and has RFC3339 encoded time keys.\n    c := tx.Bucket([]byte(\"Events\")).Cursor()\n\n    // Our time range spans the 90's decade.\n    min := []byte(\"1990-01-01T00:00:00Z\")\n    max := []byte(\"2000-01-01T00:00:00Z\")\n\n    // Iterate over the 90's.\n    for k, v := c.Seek(min); k != nil && bytes.Compare(k, max) <= 0; k, v = c.Next() {\n        fmt.Printf(\"%s: %s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n## 13.循环遍历每一个\n\n如果你知道所在桶中拥有键，你也可以使用`ForEach()`来迭代：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    b.ForEach(func(k, v []byte) error {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n        return nil\n    })\n    return nil\n})\n```\n\n## 14.嵌套桶\n\n还可以在一个键中存储一个桶，以创建嵌套的桶：\n\n```go\nfunc (*Bucket) CreateBucket(key []byte) (*Bucket, error)\nfunc (*Bucket) CreateBucketIfNotExists(key []byte) (*Bucket, error)\nfunc (*Bucket) DeleteBucket(key []byte) error\n```\n\n## 15.数据库备份\n\nboltdb 是一个单一的文件，所以很容易备份。你可以使用`TX.writeto()`函数写一致的数据库。如果从只读事务调用这个函数，它将执行热备份，而不会阻塞其他数据库的读写操作。\n默认情况下，它将使用一个常规文件句柄，该句柄将利用操作系统的页面缓存。有关优化大于 RAM 数据集的信息，请参见`Tx`文档。\n一个常见的用例是在 HTTP 上进行备份，这样您就可以使用像`cURL`这样的工具来进行数据库备份：\n\n```go\nfunc BackupHandleFunc(w http.ResponseWriter, req *http.Request) {\n    err := db.View(func(tx *bolt.Tx) error {\n        w.Header().Set(\"Content-Type\", \"application/octet-stream\")\n        w.Header().Set(\"Content-Disposition\", `attachment; filename=\"my.db\"`)\n        w.Header().Set(\"Content-Length\", strconv.Itoa(int(tx.Size())))\n        _, err := tx.WriteTo(w)\n        return err\n    })\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n    }\n}\n```\n\n然后您可以使用此命令进行备份：\n`$ curl http://localhost/backup > my.db`\n或者你可以打开你的浏览器以<http://localhost/backup>，它会自动下载。\n如果你想备份到另一个文件，你可以使用`TX.copyfile()`辅助功能。\n\n## 16.统计\n\n数据库对运行的许多内部操作保持一个运行计数，这样您就可以更好地了解发生了什么。通过捕捉这些数据的快照，我们可以看到在这个时间范围内执行了哪些操作。\n例如，我们可以开始一个 goroutine 里记录统计每 10 秒：\n\n```go\ngo func() {\n    // Grab the initial stats.\n    prev := db.Stats()\n\n    for {\n        // Wait for 10s.\n        time.Sleep(10 * time.Second)\n\n        // Grab the current stats and diff them.\n        stats := db.Stats()\n        diff := stats.Sub(&prev)\n\n        // Encode stats to JSON and print to STDERR.\n        json.NewEncoder(os.Stderr).Encode(diff)\n\n        // Save stats for the next loop.\n        prev = stats\n    }\n```\n\n## 17.只读模式\n\n有时创建一个共享的只读 boltdb 数据库是有用的。对此，设置 options.readonly 国旗打开数据库时。只读模式使用共享锁允许多个进程从数据库中读取，但它将阻塞任何以读写方式打开数据库的进程。\n\n```go\ndb, err := bolt.Open(\"my.db\", 0666, &bolt.Options{ReadOnly: true})\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n## 18.移动端支持（ios/android）\n\nboltdb 能够运行在移动设备上利用的工具结合特征 GoMobile。创建一个结构体，包含您的数据库逻辑和参考一个 bolt.db 与初始化 contstructor 需要在文件路径，数据库文件将存储。使用这种方法，Android 和 iOS 都不需要额外的权限或清理。\n\n```go\nfunc NewBoltDB(filepath string) *BoltDB {\n    db, err := bolt.Open(filepath+\"/demo.db\", 0600, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    return &BoltDB{db}\n}\n\ntype BoltDB struct {\n    db *bolt.DB\n    ...\n}\n\nfunc (b *BoltDB) Path() string {\n    return b.db.Path()\n}\n\nfunc (b *BoltDB) Close() {\n    b.db.Close()\n}\n```\n\n数据库逻辑应定义为此包装器结构中的方法。\n要从本机语言初始化此结构（两个平台现在都将本地存储与云同步）。这些片段禁用数据库文件的功能）：\nAndroid\n\n```go\nString path;\nif (android.os.Build.VERSION.SDK_INT >=android.os.Build.VERSION_CODES.LOLLIPOP){\n    path = getNoBackupFilesDir().getAbsolutePath();\n} else{\n    path = getFilesDir().getAbsolutePath();\n}\nBoltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)\n```\n\nIOS\n\n```go\n- (void)demo {\n    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,\n                                                          NSUserDomainMask,\n                                                          YES) objectAtIndex:0];\n    GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);\n    [self addSkipBackupAttributeToItemAtPath:demo.path];\n    //Some DB Logic would go here\n    [demo close];\n}\n\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n```\n\n## 19.查看工具\n\n1.下载工具\n`go get github.com/boltdb/boltd`\n然后编译 cmd 下的 main 文件生成可执行文件改名为 boltd\n拷贝 boltd 到 \\*.db 同级目录，执行如下：`boltd my.db`\n\n2.命令行工具\n<https://github.com/hasit/bolter>\n\n`bolter -f my.db`\n\nboltdb 源码解析 TODO\n","source":"_posts/framework/boltdb使用.md","raw":"---\ntitle: boltdb使用\ntags:\n  - boltdb\ncategories:\n  - boltdb\ndate: 2019-04-19 13:46:16\n---\n\n## golang boltdb 的学习和实践\n\n## 1. 安装\n\n```go\ngo get github.com/boltdb/bolt\n```\n\n## 2.创建和启动数据库\n\n```go\ndb, err := bolt.Open(\"my.db\", 0600, nil)\n```\n\n其中`open`的第一个参数为路径,如果数据库不存在则会创建名为 my.db 的数据库， 第二个为文件操作，第三个参数是可选参数， 内部可以配置只读和超时时间等，\n特别需要注意的地方就是因为 boltdb 是文件操作类型的数据库，所以只能单点写入和读取，如果多个同时操作的话后者会被挂起直到前者关闭操作为止， boltdb 一次只允许一个读写事务，但一次允许多个只读事务。所以数据具有较强的一致性。\n\n因此单个事务和从它们创建的所有对象（例如桶、键）都不是线程安全的。与数据在多个概念你必须为每一个或使用锁机制来保证只有一个 goroutine 里操作改变数据。\n只读事务和读写事物通常不应该在同一个 goroutine 里同时打开。由于读写事务需要周期性地重新映射数据文件，这可能导致死锁。\n\n## 3.读写事务\n\nboltdb 的读写事务操作我们可以使用`DB.Update()`来完成形如：\n\n```go\nerr := db.Update(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n在闭包 fun 中,在结束时返回 nil 来提交事务。您还可以通过返回一个错误在任何点回滚事务。所有数据库操作都允许在读写事务中进行。\n始终要关注 err 返回，因为它将报告导致您的事务不能完成的所有磁盘故障。\n\n## 4.批量读写事物\n\n每一次新的事物都需要等待上一次事物的结束，这种开销我们可以通过`DB.Batch()`批处理来完成\n\n```go\nerr := db.Batch(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n在批处理过程中如果某个事务失败了,批处理会多次调用这个函数函数返回成功则成功。如果中途失败了，则整个事务会回滚。\n\n## 5.只读事务\n\n只读事务可以使用`DB.View()`来完成\n\n```go\nerr := db.View(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n不改变数据的操作都可以通过只读事务来完成， 您只能检索桶、检索值，或在只读事务中复制数据库。\n\n## 6.启动事务\n\n`DB.Begin()`启动函数包含在 db.update 和 db.batch 中,该函数启动事务开始执行事务并返回结果关闭事务，这是 boltdb 推荐的方式，有时候你可能需要手动启动事物你可以使用`Tx.Begin()`来开始，切记不要忘记关闭事务。\n\n```go\n// Start a writable transaction.\ntx, err := db.Begin(true)\nif err != nil {\n    return err\n}\ndefer tx.Rollback()\n\n// Use the transaction...\n_, err := tx.CreateBucket([]byte(\"MyBucket\"))\nif err != nil {\n    return err\n}\n\n// Commit the transaction and check for error.\nif err := tx.Commit(); err != nil {\n    return err\n}\n```\n\n## 7.使用桶\n\n桶是数据库中键/值对的集合。桶中的所有键必须是唯一的。您可以使用`DB.CreateBucket()`创建一个桶：\n\n```go\ndb.Update(func(tx *bolt.Tx) error {\n    b, err := tx.CreateBucket([]byte(\"MyBucket\"))\n    if err != nil {\n        return fmt.Errorf(\"create bucket: %s\", err)\n    }\n    return nil\n})\n```\n\n你也可以是实用`Tx.CreateBucketIfNotExists()`来创建桶，该函数会先判断是否已经存在该桶不存在即创建， 删除桶可以使用`Tx.DeleteBucket()`来完成\n\n## 8.使用 k-v 对\n\n存储键值对到桶里可以使用`Bucket.Put()`来完成：\n\n```go\ndb.Update(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyFriendsBucket\"))\n    err := b.Put([]byte(\"one\"), []byte(\"zhangsan\"))\n    return err\n})\n```\n\n获取键值`Bucket.Get()`：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyFriendsBucket\"))\n    v := b.Get([]byte(\"one\"))\n    fmt.Printf(\"The answer is: %s\\n\", v)\n    return nil\n})\n```\n\n`get()`函数不返回一个错误，因为它的运行是保证工作（除非有某种系统故障）。如果键存在，那么它将返回它的值。如果它不存在，那么它将返回 nil。\n还需要注意的是当事务打开都 get 返回的值时唯一有效的，如果你需要将该值用于其他事务，你可以通过`copy`拷贝到其他的 byte slice 中\n\n## 9.桶的自增\n\n利用`nextsequence()`功能，你可以让 boltdb 生成序列作为你键值对的唯一标识。见下面的示例。\n\n```go\nfunc (s *Store) CreateUser(u *User) error {\n    return s.db.Update(func(tx *bolt.Tx) error {\n        // 创建users桶\n        b := tx.Bucket([]byte(\"users\"))\n\n        // 生成自增序列\n        id, _ = b.NextSequence()\n        u.ID = int(id)\n\n        // Marshal user data into bytes.\n        buf, err := json.Marshal(u)\n        if err != nil {\n            return err\n        }\n\n        // Persist bytes to users bucket.\n        return b.Put(itob(u.ID), buf)\n    })\n}\n\n// itob returns an 8-byte big endian representation of v.\nfunc itob(v int) []byte {\n    b := make([]byte, 8)\n    binary.BigEndian.PutUint64(b, uint64(v))\n    return b\n}\n\ntype User struct {\n    ID int\n    ...\n}\n```\n\n## 10. 迭代键\n\nboltdb 以桶中的字节排序顺序存储键。这使得在这些键上的顺序迭代非常快。要遍历键，我们将使用游标`Cursor()`：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    c := b.Cursor()\n\n    for k, v := c.First(); k != nil; k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n游标`Cursor()`允许您移动到键列表中的特定点，并一次一个地通过操作键前进或后退。\n光标上有以下函数：\n\n```go\nFirst()  移动到第一个健.\nLast()   移动到最后一个健.\nSeek()   移动到特定的一个健.\nNext()   移动到下一个健.\nPrev()   移动到上一个健.\n```\n\n这些函数中的每一个都返回一个包含(key []byte, value []byte)的签名。当你有光标迭代结束，next()将返回一个 nil。在调用 next()或 prev()之前，你必须寻求一个位置使用 first()，last()，或 seek()。如果您不寻求位置，则这些函数将返回一个 nil 键。\n在迭代过程中，如果键为非零，但值为 0，则意味着键指向一个桶而不是一个值。用桶.bucket()访问子桶。\n\n## 11.前缀扫描\n\n遍历一个 key 的前缀，你可以结合`seek()`和`bytes.hasprefix()`：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    c := tx.Bucket([]byte(\"MyBucket\")).Cursor()\n\n    prefix := []byte(\"1234\")\n    for k, v := c.Seek(prefix); bytes.HasPrefix(k, prefix); k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n## 12.范围扫描\n\n另一个常见的用例是扫描范围，例如时间范围。如果你使用一个合适的时间编码，如 rfc3339 然后可以查询特定日期范围的数据：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    // Assume our events bucket exists and has RFC3339 encoded time keys.\n    c := tx.Bucket([]byte(\"Events\")).Cursor()\n\n    // Our time range spans the 90's decade.\n    min := []byte(\"1990-01-01T00:00:00Z\")\n    max := []byte(\"2000-01-01T00:00:00Z\")\n\n    // Iterate over the 90's.\n    for k, v := c.Seek(min); k != nil && bytes.Compare(k, max) <= 0; k, v = c.Next() {\n        fmt.Printf(\"%s: %s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n## 13.循环遍历每一个\n\n如果你知道所在桶中拥有键，你也可以使用`ForEach()`来迭代：\n\n```go\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    b.ForEach(func(k, v []byte) error {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n        return nil\n    })\n    return nil\n})\n```\n\n## 14.嵌套桶\n\n还可以在一个键中存储一个桶，以创建嵌套的桶：\n\n```go\nfunc (*Bucket) CreateBucket(key []byte) (*Bucket, error)\nfunc (*Bucket) CreateBucketIfNotExists(key []byte) (*Bucket, error)\nfunc (*Bucket) DeleteBucket(key []byte) error\n```\n\n## 15.数据库备份\n\nboltdb 是一个单一的文件，所以很容易备份。你可以使用`TX.writeto()`函数写一致的数据库。如果从只读事务调用这个函数，它将执行热备份，而不会阻塞其他数据库的读写操作。\n默认情况下，它将使用一个常规文件句柄，该句柄将利用操作系统的页面缓存。有关优化大于 RAM 数据集的信息，请参见`Tx`文档。\n一个常见的用例是在 HTTP 上进行备份，这样您就可以使用像`cURL`这样的工具来进行数据库备份：\n\n```go\nfunc BackupHandleFunc(w http.ResponseWriter, req *http.Request) {\n    err := db.View(func(tx *bolt.Tx) error {\n        w.Header().Set(\"Content-Type\", \"application/octet-stream\")\n        w.Header().Set(\"Content-Disposition\", `attachment; filename=\"my.db\"`)\n        w.Header().Set(\"Content-Length\", strconv.Itoa(int(tx.Size())))\n        _, err := tx.WriteTo(w)\n        return err\n    })\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n    }\n}\n```\n\n然后您可以使用此命令进行备份：\n`$ curl http://localhost/backup > my.db`\n或者你可以打开你的浏览器以<http://localhost/backup>，它会自动下载。\n如果你想备份到另一个文件，你可以使用`TX.copyfile()`辅助功能。\n\n## 16.统计\n\n数据库对运行的许多内部操作保持一个运行计数，这样您就可以更好地了解发生了什么。通过捕捉这些数据的快照，我们可以看到在这个时间范围内执行了哪些操作。\n例如，我们可以开始一个 goroutine 里记录统计每 10 秒：\n\n```go\ngo func() {\n    // Grab the initial stats.\n    prev := db.Stats()\n\n    for {\n        // Wait for 10s.\n        time.Sleep(10 * time.Second)\n\n        // Grab the current stats and diff them.\n        stats := db.Stats()\n        diff := stats.Sub(&prev)\n\n        // Encode stats to JSON and print to STDERR.\n        json.NewEncoder(os.Stderr).Encode(diff)\n\n        // Save stats for the next loop.\n        prev = stats\n    }\n```\n\n## 17.只读模式\n\n有时创建一个共享的只读 boltdb 数据库是有用的。对此，设置 options.readonly 国旗打开数据库时。只读模式使用共享锁允许多个进程从数据库中读取，但它将阻塞任何以读写方式打开数据库的进程。\n\n```go\ndb, err := bolt.Open(\"my.db\", 0666, &bolt.Options{ReadOnly: true})\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n## 18.移动端支持（ios/android）\n\nboltdb 能够运行在移动设备上利用的工具结合特征 GoMobile。创建一个结构体，包含您的数据库逻辑和参考一个 bolt.db 与初始化 contstructor 需要在文件路径，数据库文件将存储。使用这种方法，Android 和 iOS 都不需要额外的权限或清理。\n\n```go\nfunc NewBoltDB(filepath string) *BoltDB {\n    db, err := bolt.Open(filepath+\"/demo.db\", 0600, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    return &BoltDB{db}\n}\n\ntype BoltDB struct {\n    db *bolt.DB\n    ...\n}\n\nfunc (b *BoltDB) Path() string {\n    return b.db.Path()\n}\n\nfunc (b *BoltDB) Close() {\n    b.db.Close()\n}\n```\n\n数据库逻辑应定义为此包装器结构中的方法。\n要从本机语言初始化此结构（两个平台现在都将本地存储与云同步）。这些片段禁用数据库文件的功能）：\nAndroid\n\n```go\nString path;\nif (android.os.Build.VERSION.SDK_INT >=android.os.Build.VERSION_CODES.LOLLIPOP){\n    path = getNoBackupFilesDir().getAbsolutePath();\n} else{\n    path = getFilesDir().getAbsolutePath();\n}\nBoltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)\n```\n\nIOS\n\n```go\n- (void)demo {\n    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,\n                                                          NSUserDomainMask,\n                                                          YES) objectAtIndex:0];\n    GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);\n    [self addSkipBackupAttributeToItemAtPath:demo.path];\n    //Some DB Logic would go here\n    [demo close];\n}\n\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n```\n\n## 19.查看工具\n\n1.下载工具\n`go get github.com/boltdb/boltd`\n然后编译 cmd 下的 main 文件生成可执行文件改名为 boltd\n拷贝 boltd 到 \\*.db 同级目录，执行如下：`boltd my.db`\n\n2.命令行工具\n<https://github.com/hasit/bolter>\n\n`bolter -f my.db`\n\nboltdb 源码解析 TODO\n","slug":"framework/boltdb使用","published":1,"updated":"2020-05-25T04:13:56.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6a000xg938nxak0xm2","content":"<h2 id=\"golang-boltdb-的学习和实践\"><a href=\"#golang-boltdb-的学习和实践\" class=\"headerlink\" title=\"golang boltdb 的学习和实践\"></a>golang boltdb 的学习和实践</h2><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get github.com/boltdb/bolt</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建和启动数据库\"><a href=\"#2-创建和启动数据库\" class=\"headerlink\" title=\"2.创建和启动数据库\"></a>2.创建和启动数据库</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := bolt.Open(<span class=\"string\">\"my.db\"</span>, <span class=\"number\">0600</span>, <span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure>\n<p>其中<code>open</code>的第一个参数为路径,如果数据库不存在则会创建名为 my.db 的数据库， 第二个为文件操作，第三个参数是可选参数， 内部可以配置只读和超时时间等，<br>特别需要注意的地方就是因为 boltdb 是文件操作类型的数据库，所以只能单点写入和读取，如果多个同时操作的话后者会被挂起直到前者关闭操作为止， boltdb 一次只允许一个读写事务，但一次允许多个只读事务。所以数据具有较强的一致性。</p>\n<p>因此单个事务和从它们创建的所有对象（例如桶、键）都不是线程安全的。与数据在多个概念你必须为每一个或使用锁机制来保证只有一个 goroutine 里操作改变数据。<br>只读事务和读写事物通常不应该在同一个 goroutine 里同时打开。由于读写事务需要周期性地重新映射数据文件，这可能导致死锁。</p>\n<h2 id=\"3-读写事务\"><a href=\"#3-读写事务\" class=\"headerlink\" title=\"3.读写事务\"></a>3.读写事务</h2><p>boltdb 的读写事务操作我们可以使用<code>DB.Update()</code>来完成形如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.Update(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在闭包 fun 中,在结束时返回 nil 来提交事务。您还可以通过返回一个错误在任何点回滚事务。所有数据库操作都允许在读写事务中进行。<br>始终要关注 err 返回，因为它将报告导致您的事务不能完成的所有磁盘故障。</p>\n<h2 id=\"4-批量读写事物\"><a href=\"#4-批量读写事物\" class=\"headerlink\" title=\"4.批量读写事物\"></a>4.批量读写事物</h2><p>每一次新的事物都需要等待上一次事物的结束，这种开销我们可以通过<code>DB.Batch()</code>批处理来完成</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.Batch(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在批处理过程中如果某个事务失败了,批处理会多次调用这个函数函数返回成功则成功。如果中途失败了，则整个事务会回滚。</p>\n<h2 id=\"5-只读事务\"><a href=\"#5-只读事务\" class=\"headerlink\" title=\"5.只读事务\"></a>5.只读事务</h2><p>只读事务可以使用<code>DB.View()</code>来完成</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>不改变数据的操作都可以通过只读事务来完成， 您只能检索桶、检索值，或在只读事务中复制数据库。</p>\n<h2 id=\"6-启动事务\"><a href=\"#6-启动事务\" class=\"headerlink\" title=\"6.启动事务\"></a>6.启动事务</h2><p><code>DB.Begin()</code>启动函数包含在 db.update 和 db.batch 中,该函数启动事务开始执行事务并返回结果关闭事务，这是 boltdb 推荐的方式，有时候你可能需要手动启动事物你可以使用<code>Tx.Begin()</code>来开始，切记不要忘记关闭事务。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Start a writable transaction.</span></span><br><span class=\"line\">tx, err := db.Begin(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> tx.Rollback()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use the transaction...</span></span><br><span class=\"line\">_, err := tx.CreateBucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Commit the transaction and check for error.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err := tx.Commit(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-使用桶\"><a href=\"#7-使用桶\" class=\"headerlink\" title=\"7.使用桶\"></a>7.使用桶</h2><p>桶是数据库中键/值对的集合。桶中的所有键必须是唯一的。您可以使用<code>DB.CreateBucket()</code>创建一个桶：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Update(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    b, err := tx.CreateBucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"create bucket: %s\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你也可以是实用<code>Tx.CreateBucketIfNotExists()</code>来创建桶，该函数会先判断是否已经存在该桶不存在即创建， 删除桶可以使用<code>Tx.DeleteBucket()</code>来完成</p>\n<h2 id=\"8-使用-k-v-对\"><a href=\"#8-使用-k-v-对\" class=\"headerlink\" title=\"8.使用 k-v 对\"></a>8.使用 k-v 对</h2><p>存储键值对到桶里可以使用<code>Bucket.Put()</code>来完成：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Update(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyFriendsBucket\"</span>))</span><br><span class=\"line\">    err := b.Put([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"one\"</span>), []<span class=\"keyword\">byte</span>(<span class=\"string\">\"zhangsan\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>获取键值<code>Bucket.Get()</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyFriendsBucket\"</span>))</span><br><span class=\"line\">    v := b.Get([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"one\"</span>))</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"The answer is: %s\\n\"</span>, v)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>get()</code>函数不返回一个错误，因为它的运行是保证工作（除非有某种系统故障）。如果键存在，那么它将返回它的值。如果它不存在，那么它将返回 nil。<br>还需要注意的是当事务打开都 get 返回的值时唯一有效的，如果你需要将该值用于其他事务，你可以通过<code>copy</code>拷贝到其他的 byte slice 中</p>\n<h2 id=\"9-桶的自增\"><a href=\"#9-桶的自增\" class=\"headerlink\" title=\"9.桶的自增\"></a>9.桶的自增</h2><p>利用<code>nextsequence()</code>功能，你可以让 boltdb 生成序列作为你键值对的唯一标识。见下面的示例。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Store)</span> <span class=\"title\">CreateUser</span><span class=\"params\">(u *User)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.db.Update(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建users桶</span></span><br><span class=\"line\">        b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"users\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 生成自增序列</span></span><br><span class=\"line\">        id, _ = b.NextSequence()</span><br><span class=\"line\">        u.ID = <span class=\"keyword\">int</span>(id)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Marshal user data into bytes.</span></span><br><span class=\"line\">        buf, err := json.Marshal(u)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Persist bytes to users bucket.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> b.Put(itob(u.ID), buf)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// itob returns an 8-byte big endian representation of v.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">itob</span><span class=\"params\">(v <span class=\"keyword\">int</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">    b := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">    binary.BigEndian.PutUint64(b, <span class=\"keyword\">uint64</span>(v))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ID <span class=\"keyword\">int</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-迭代键\"><a href=\"#10-迭代键\" class=\"headerlink\" title=\"10. 迭代键\"></a>10. 迭代键</h2><p>boltdb 以桶中的字节排序顺序存储键。这使得在这些键上的顺序迭代非常快。要遍历键，我们将使用游标<code>Cursor()</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Assume bucket exists and has keys</span></span><br><span class=\"line\">    b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    c := b.Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := c.First(); k != <span class=\"literal\">nil</span>; k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"key=%s, value=%s\\n\"</span>, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>游标<code>Cursor()</code>允许您移动到键列表中的特定点，并一次一个地通过操作键前进或后退。<br>光标上有以下函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First()  移动到第一个健.</span><br><span class=\"line\">Last()   移动到最后一个健.</span><br><span class=\"line\">Seek()   移动到特定的一个健.</span><br><span class=\"line\">Next()   移动到下一个健.</span><br><span class=\"line\">Prev()   移动到上一个健.</span><br></pre></td></tr></table></figure>\n<p>这些函数中的每一个都返回一个包含(key []byte, value []byte)的签名。当你有光标迭代结束，next()将返回一个 nil。在调用 next()或 prev()之前，你必须寻求一个位置使用 first()，last()，或 seek()。如果您不寻求位置，则这些函数将返回一个 nil 键。<br>在迭代过程中，如果键为非零，但值为 0，则意味着键指向一个桶而不是一个值。用桶.bucket()访问子桶。</p>\n<h2 id=\"11-前缀扫描\"><a href=\"#11-前缀扫描\" class=\"headerlink\" title=\"11.前缀扫描\"></a>11.前缀扫描</h2><p>遍历一个 key 的前缀，你可以结合<code>seek()</code>和<code>bytes.hasprefix()</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Assume bucket exists and has keys</span></span><br><span class=\"line\">    c := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>)).Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    prefix := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"1234\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := c.Seek(prefix); bytes.HasPrefix(k, prefix); k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"key=%s, value=%s\\n\"</span>, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-范围扫描\"><a href=\"#12-范围扫描\" class=\"headerlink\" title=\"12.范围扫描\"></a>12.范围扫描</h2><p>另一个常见的用例是扫描范围，例如时间范围。如果你使用一个合适的时间编码，如 rfc3339 然后可以查询特定日期范围的数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Assume our events bucket exists and has RFC3339 encoded time keys.</span></span><br><span class=\"line\">    c := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Events\"</span>)).Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Our time range spans the 90's decade.</span></span><br><span class=\"line\">    min := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"1990-01-01T00:00:00Z\"</span>)</span><br><span class=\"line\">    max := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"2000-01-01T00:00:00Z\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Iterate over the 90's.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := c.Seek(min); k != <span class=\"literal\">nil</span> &amp;&amp; bytes.Compare(k, max) &lt;= <span class=\"number\">0</span>; k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"%s: %s\\n\"</span>, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-循环遍历每一个\"><a href=\"#13-循环遍历每一个\" class=\"headerlink\" title=\"13.循环遍历每一个\"></a>13.循环遍历每一个</h2><p>如果你知道所在桶中拥有键，你也可以使用<code>ForEach()</code>来迭代：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Assume bucket exists and has keys</span></span><br><span class=\"line\">    b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    b.ForEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(k, v []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"key=%s, value=%s\\n\"</span>, k, v)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-嵌套桶\"><a href=\"#14-嵌套桶\" class=\"headerlink\" title=\"14.嵌套桶\"></a>14.嵌套桶</h2><p>还可以在一个键中存储一个桶，以创建嵌套的桶：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*Bucket)</span> <span class=\"title\">CreateBucket</span><span class=\"params\">(key []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(*Bucket, error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(*Bucket)</span> <span class=\"title\">CreateBucketIfNotExists</span><span class=\"params\">(key []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(*Bucket, error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(*Bucket)</span> <span class=\"title\">DeleteBucket</span><span class=\"params\">(key []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"15-数据库备份\"><a href=\"#15-数据库备份\" class=\"headerlink\" title=\"15.数据库备份\"></a>15.数据库备份</h2><p>boltdb 是一个单一的文件，所以很容易备份。你可以使用<code>TX.writeto()</code>函数写一致的数据库。如果从只读事务调用这个函数，它将执行热备份，而不会阻塞其他数据库的读写操作。<br>默认情况下，它将使用一个常规文件句柄，该句柄将利用操作系统的页面缓存。有关优化大于 RAM 数据集的信息，请参见<code>Tx</code>文档。<br>一个常见的用例是在 HTTP 上进行备份，这样您就可以使用像<code>cURL</code>这样的工具来进行数据库备份：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BackupHandleFunc</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    err := db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">        w.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/octet-stream\"</span>)</span><br><span class=\"line\">        w.Header().Set(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">`attachment; filename=\"my.db\"`</span>)</span><br><span class=\"line\">        w.Header().Set(<span class=\"string\">\"Content-Length\"</span>, strconv.Itoa(<span class=\"keyword\">int</span>(tx.Size())))</span><br><span class=\"line\">        _, err := tx.WriteTo(w)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后您可以使用此命令进行备份：<br><code>$ curl http://localhost/backup &gt; my.db</code><br>或者你可以打开你的浏览器以<a href=\"http://localhost/backup\" target=\"_blank\" rel=\"noopener\">http://localhost/backup</a>，它会自动下载。<br>如果你想备份到另一个文件，你可以使用<code>TX.copyfile()</code>辅助功能。</p>\n<h2 id=\"16-统计\"><a href=\"#16-统计\" class=\"headerlink\" title=\"16.统计\"></a>16.统计</h2><p>数据库对运行的许多内部操作保持一个运行计数，这样您就可以更好地了解发生了什么。通过捕捉这些数据的快照，我们可以看到在这个时间范围内执行了哪些操作。<br>例如，我们可以开始一个 goroutine 里记录统计每 10 秒：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Grab the initial stats.</span></span><br><span class=\"line\">    prev := db.Stats()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Wait for 10s.</span></span><br><span class=\"line\">        time.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Grab the current stats and diff them.</span></span><br><span class=\"line\">        stats := db.Stats()</span><br><span class=\"line\">        diff := stats.Sub(&amp;prev)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Encode stats to JSON and print to STDERR.</span></span><br><span class=\"line\">        json.NewEncoder(os.Stderr).Encode(diff)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Save stats for the next loop.</span></span><br><span class=\"line\">        prev = stats</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"17-只读模式\"><a href=\"#17-只读模式\" class=\"headerlink\" title=\"17.只读模式\"></a>17.只读模式</h2><p>有时创建一个共享的只读 boltdb 数据库是有用的。对此，设置 options.readonly 国旗打开数据库时。只读模式使用共享锁允许多个进程从数据库中读取，但它将阻塞任何以读写方式打开数据库的进程。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := bolt.Open(<span class=\"string\">\"my.db\"</span>, <span class=\"number\">0666</span>, &amp;bolt.Options&#123;ReadOnly: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"18-移动端支持（ios-android）\"><a href=\"#18-移动端支持（ios-android）\" class=\"headerlink\" title=\"18.移动端支持（ios/android）\"></a>18.移动端支持（ios/android）</h2><p>boltdb 能够运行在移动设备上利用的工具结合特征 GoMobile。创建一个结构体，包含您的数据库逻辑和参考一个 bolt.db 与初始化 contstructor 需要在文件路径，数据库文件将存储。使用这种方法，Android 和 iOS 都不需要额外的权限或清理。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewBoltDB</span><span class=\"params\">(filepath <span class=\"keyword\">string</span>)</span> *<span class=\"title\">BoltDB</span></span> &#123;</span><br><span class=\"line\">    db, err := bolt.Open(filepath+<span class=\"string\">\"/demo.db\"</span>, <span class=\"number\">0600</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;BoltDB&#123;db&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> BoltDB <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    db *bolt.DB</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *BoltDB)</span> <span class=\"title\">Path</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.db.Path()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *BoltDB)</span> <span class=\"title\">Close</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    b.db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库逻辑应定义为此包装器结构中的方法。<br>要从本机语言初始化此结构（两个平台现在都将本地存储与云同步）。这些片段禁用数据库文件的功能）：<br>Android</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String path;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (android.os.Build.VERSION.SDK_INT &gt;=android.os.Build.VERSION_CODES.LOLLIPOP)&#123;</span><br><span class=\"line\">    path = getNoBackupFilesDir().getAbsolutePath();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    path = getFilesDir().getAbsolutePath();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Boltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)</span><br></pre></td></tr></table></figure>\n<p>IOS</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)demo &#123;</span><br><span class=\"line\">    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,</span><br><span class=\"line\">                                                          NSUserDomainMask,</span><br><span class=\"line\">                                                          YES) objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">    GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);</span><br><span class=\"line\">    [self addSkipBackupAttributeToItemAtPath:demo.path];</span><br><span class=\"line\">    <span class=\"comment\">//Some DB Logic would go here</span></span><br><span class=\"line\">    [demo <span class=\"built_in\">close</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSURL* URL= [NSURL fileURLWithPath: filePathString];</span><br><span class=\"line\">    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    NSError *error = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]</span><br><span class=\"line\">                                  forKey: NSURLIsExcludedFromBackupKey error: &amp;error];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!success)&#123;</span><br><span class=\"line\">        NSLog(@<span class=\"string\">\"Error excluding %@ from backup %@\"</span>, [URL lastPathComponent], error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"19-查看工具\"><a href=\"#19-查看工具\" class=\"headerlink\" title=\"19.查看工具\"></a>19.查看工具</h2><p>1.下载工具<br><code>go get github.com/boltdb/boltd</code><br>然后编译 cmd 下的 main 文件生成可执行文件改名为 boltd<br>拷贝 boltd 到 *.db 同级目录，执行如下：<code>boltd my.db</code></p>\n<p>2.命令行工具<br><a href=\"https://github.com/hasit/bolter\" target=\"_blank\" rel=\"noopener\">https://github.com/hasit/bolter</a></p>\n<p><code>bolter -f my.db</code></p>\n<p>boltdb 源码解析 TODO</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"golang-boltdb-的学习和实践\"><a href=\"#golang-boltdb-的学习和实践\" class=\"headerlink\" title=\"golang boltdb 的学习和实践\"></a>golang boltdb 的学习和实践</h2><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get github.com/boltdb/bolt</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建和启动数据库\"><a href=\"#2-创建和启动数据库\" class=\"headerlink\" title=\"2.创建和启动数据库\"></a>2.创建和启动数据库</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := bolt.Open(<span class=\"string\">\"my.db\"</span>, <span class=\"number\">0600</span>, <span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure>\n<p>其中<code>open</code>的第一个参数为路径,如果数据库不存在则会创建名为 my.db 的数据库， 第二个为文件操作，第三个参数是可选参数， 内部可以配置只读和超时时间等，<br>特别需要注意的地方就是因为 boltdb 是文件操作类型的数据库，所以只能单点写入和读取，如果多个同时操作的话后者会被挂起直到前者关闭操作为止， boltdb 一次只允许一个读写事务，但一次允许多个只读事务。所以数据具有较强的一致性。</p>\n<p>因此单个事务和从它们创建的所有对象（例如桶、键）都不是线程安全的。与数据在多个概念你必须为每一个或使用锁机制来保证只有一个 goroutine 里操作改变数据。<br>只读事务和读写事物通常不应该在同一个 goroutine 里同时打开。由于读写事务需要周期性地重新映射数据文件，这可能导致死锁。</p>\n<h2 id=\"3-读写事务\"><a href=\"#3-读写事务\" class=\"headerlink\" title=\"3.读写事务\"></a>3.读写事务</h2><p>boltdb 的读写事务操作我们可以使用<code>DB.Update()</code>来完成形如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.Update(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在闭包 fun 中,在结束时返回 nil 来提交事务。您还可以通过返回一个错误在任何点回滚事务。所有数据库操作都允许在读写事务中进行。<br>始终要关注 err 返回，因为它将报告导致您的事务不能完成的所有磁盘故障。</p>\n<h2 id=\"4-批量读写事物\"><a href=\"#4-批量读写事物\" class=\"headerlink\" title=\"4.批量读写事物\"></a>4.批量读写事物</h2><p>每一次新的事物都需要等待上一次事物的结束，这种开销我们可以通过<code>DB.Batch()</code>批处理来完成</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.Batch(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在批处理过程中如果某个事务失败了,批处理会多次调用这个函数函数返回成功则成功。如果中途失败了，则整个事务会回滚。</p>\n<h2 id=\"5-只读事务\"><a href=\"#5-只读事务\" class=\"headerlink\" title=\"5.只读事务\"></a>5.只读事务</h2><p>只读事务可以使用<code>DB.View()</code>来完成</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>不改变数据的操作都可以通过只读事务来完成， 您只能检索桶、检索值，或在只读事务中复制数据库。</p>\n<h2 id=\"6-启动事务\"><a href=\"#6-启动事务\" class=\"headerlink\" title=\"6.启动事务\"></a>6.启动事务</h2><p><code>DB.Begin()</code>启动函数包含在 db.update 和 db.batch 中,该函数启动事务开始执行事务并返回结果关闭事务，这是 boltdb 推荐的方式，有时候你可能需要手动启动事物你可以使用<code>Tx.Begin()</code>来开始，切记不要忘记关闭事务。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Start a writable transaction.</span></span><br><span class=\"line\">tx, err := db.Begin(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> tx.Rollback()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use the transaction...</span></span><br><span class=\"line\">_, err := tx.CreateBucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Commit the transaction and check for error.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err := tx.Commit(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-使用桶\"><a href=\"#7-使用桶\" class=\"headerlink\" title=\"7.使用桶\"></a>7.使用桶</h2><p>桶是数据库中键/值对的集合。桶中的所有键必须是唯一的。您可以使用<code>DB.CreateBucket()</code>创建一个桶：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Update(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    b, err := tx.CreateBucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"create bucket: %s\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你也可以是实用<code>Tx.CreateBucketIfNotExists()</code>来创建桶，该函数会先判断是否已经存在该桶不存在即创建， 删除桶可以使用<code>Tx.DeleteBucket()</code>来完成</p>\n<h2 id=\"8-使用-k-v-对\"><a href=\"#8-使用-k-v-对\" class=\"headerlink\" title=\"8.使用 k-v 对\"></a>8.使用 k-v 对</h2><p>存储键值对到桶里可以使用<code>Bucket.Put()</code>来完成：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Update(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyFriendsBucket\"</span>))</span><br><span class=\"line\">    err := b.Put([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"one\"</span>), []<span class=\"keyword\">byte</span>(<span class=\"string\">\"zhangsan\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>获取键值<code>Bucket.Get()</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyFriendsBucket\"</span>))</span><br><span class=\"line\">    v := b.Get([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"one\"</span>))</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"The answer is: %s\\n\"</span>, v)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>get()</code>函数不返回一个错误，因为它的运行是保证工作（除非有某种系统故障）。如果键存在，那么它将返回它的值。如果它不存在，那么它将返回 nil。<br>还需要注意的是当事务打开都 get 返回的值时唯一有效的，如果你需要将该值用于其他事务，你可以通过<code>copy</code>拷贝到其他的 byte slice 中</p>\n<h2 id=\"9-桶的自增\"><a href=\"#9-桶的自增\" class=\"headerlink\" title=\"9.桶的自增\"></a>9.桶的自增</h2><p>利用<code>nextsequence()</code>功能，你可以让 boltdb 生成序列作为你键值对的唯一标识。见下面的示例。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Store)</span> <span class=\"title\">CreateUser</span><span class=\"params\">(u *User)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.db.Update(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建users桶</span></span><br><span class=\"line\">        b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"users\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 生成自增序列</span></span><br><span class=\"line\">        id, _ = b.NextSequence()</span><br><span class=\"line\">        u.ID = <span class=\"keyword\">int</span>(id)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Marshal user data into bytes.</span></span><br><span class=\"line\">        buf, err := json.Marshal(u)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Persist bytes to users bucket.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> b.Put(itob(u.ID), buf)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// itob returns an 8-byte big endian representation of v.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">itob</span><span class=\"params\">(v <span class=\"keyword\">int</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">    b := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">    binary.BigEndian.PutUint64(b, <span class=\"keyword\">uint64</span>(v))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ID <span class=\"keyword\">int</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-迭代键\"><a href=\"#10-迭代键\" class=\"headerlink\" title=\"10. 迭代键\"></a>10. 迭代键</h2><p>boltdb 以桶中的字节排序顺序存储键。这使得在这些键上的顺序迭代非常快。要遍历键，我们将使用游标<code>Cursor()</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Assume bucket exists and has keys</span></span><br><span class=\"line\">    b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    c := b.Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := c.First(); k != <span class=\"literal\">nil</span>; k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"key=%s, value=%s\\n\"</span>, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>游标<code>Cursor()</code>允许您移动到键列表中的特定点，并一次一个地通过操作键前进或后退。<br>光标上有以下函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First()  移动到第一个健.</span><br><span class=\"line\">Last()   移动到最后一个健.</span><br><span class=\"line\">Seek()   移动到特定的一个健.</span><br><span class=\"line\">Next()   移动到下一个健.</span><br><span class=\"line\">Prev()   移动到上一个健.</span><br></pre></td></tr></table></figure>\n<p>这些函数中的每一个都返回一个包含(key []byte, value []byte)的签名。当你有光标迭代结束，next()将返回一个 nil。在调用 next()或 prev()之前，你必须寻求一个位置使用 first()，last()，或 seek()。如果您不寻求位置，则这些函数将返回一个 nil 键。<br>在迭代过程中，如果键为非零，但值为 0，则意味着键指向一个桶而不是一个值。用桶.bucket()访问子桶。</p>\n<h2 id=\"11-前缀扫描\"><a href=\"#11-前缀扫描\" class=\"headerlink\" title=\"11.前缀扫描\"></a>11.前缀扫描</h2><p>遍历一个 key 的前缀，你可以结合<code>seek()</code>和<code>bytes.hasprefix()</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Assume bucket exists and has keys</span></span><br><span class=\"line\">    c := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>)).Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    prefix := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"1234\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := c.Seek(prefix); bytes.HasPrefix(k, prefix); k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"key=%s, value=%s\\n\"</span>, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-范围扫描\"><a href=\"#12-范围扫描\" class=\"headerlink\" title=\"12.范围扫描\"></a>12.范围扫描</h2><p>另一个常见的用例是扫描范围，例如时间范围。如果你使用一个合适的时间编码，如 rfc3339 然后可以查询特定日期范围的数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Assume our events bucket exists and has RFC3339 encoded time keys.</span></span><br><span class=\"line\">    c := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Events\"</span>)).Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Our time range spans the 90's decade.</span></span><br><span class=\"line\">    min := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"1990-01-01T00:00:00Z\"</span>)</span><br><span class=\"line\">    max := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"2000-01-01T00:00:00Z\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Iterate over the 90's.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := c.Seek(min); k != <span class=\"literal\">nil</span> &amp;&amp; bytes.Compare(k, max) &lt;= <span class=\"number\">0</span>; k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"%s: %s\\n\"</span>, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-循环遍历每一个\"><a href=\"#13-循环遍历每一个\" class=\"headerlink\" title=\"13.循环遍历每一个\"></a>13.循环遍历每一个</h2><p>如果你知道所在桶中拥有键，你也可以使用<code>ForEach()</code>来迭代：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Assume bucket exists and has keys</span></span><br><span class=\"line\">    b := tx.Bucket([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"MyBucket\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    b.ForEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(k, v []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"key=%s, value=%s\\n\"</span>, k, v)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-嵌套桶\"><a href=\"#14-嵌套桶\" class=\"headerlink\" title=\"14.嵌套桶\"></a>14.嵌套桶</h2><p>还可以在一个键中存储一个桶，以创建嵌套的桶：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*Bucket)</span> <span class=\"title\">CreateBucket</span><span class=\"params\">(key []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(*Bucket, error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(*Bucket)</span> <span class=\"title\">CreateBucketIfNotExists</span><span class=\"params\">(key []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(*Bucket, error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(*Bucket)</span> <span class=\"title\">DeleteBucket</span><span class=\"params\">(key []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"15-数据库备份\"><a href=\"#15-数据库备份\" class=\"headerlink\" title=\"15.数据库备份\"></a>15.数据库备份</h2><p>boltdb 是一个单一的文件，所以很容易备份。你可以使用<code>TX.writeto()</code>函数写一致的数据库。如果从只读事务调用这个函数，它将执行热备份，而不会阻塞其他数据库的读写操作。<br>默认情况下，它将使用一个常规文件句柄，该句柄将利用操作系统的页面缓存。有关优化大于 RAM 数据集的信息，请参见<code>Tx</code>文档。<br>一个常见的用例是在 HTTP 上进行备份，这样您就可以使用像<code>cURL</code>这样的工具来进行数据库备份：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BackupHandleFunc</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    err := db.View(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">        w.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/octet-stream\"</span>)</span><br><span class=\"line\">        w.Header().Set(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">`attachment; filename=\"my.db\"`</span>)</span><br><span class=\"line\">        w.Header().Set(<span class=\"string\">\"Content-Length\"</span>, strconv.Itoa(<span class=\"keyword\">int</span>(tx.Size())))</span><br><span class=\"line\">        _, err := tx.WriteTo(w)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后您可以使用此命令进行备份：<br><code>$ curl http://localhost/backup &gt; my.db</code><br>或者你可以打开你的浏览器以<a href=\"http://localhost/backup\" target=\"_blank\" rel=\"noopener\">http://localhost/backup</a>，它会自动下载。<br>如果你想备份到另一个文件，你可以使用<code>TX.copyfile()</code>辅助功能。</p>\n<h2 id=\"16-统计\"><a href=\"#16-统计\" class=\"headerlink\" title=\"16.统计\"></a>16.统计</h2><p>数据库对运行的许多内部操作保持一个运行计数，这样您就可以更好地了解发生了什么。通过捕捉这些数据的快照，我们可以看到在这个时间范围内执行了哪些操作。<br>例如，我们可以开始一个 goroutine 里记录统计每 10 秒：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Grab the initial stats.</span></span><br><span class=\"line\">    prev := db.Stats()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Wait for 10s.</span></span><br><span class=\"line\">        time.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Grab the current stats and diff them.</span></span><br><span class=\"line\">        stats := db.Stats()</span><br><span class=\"line\">        diff := stats.Sub(&amp;prev)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Encode stats to JSON and print to STDERR.</span></span><br><span class=\"line\">        json.NewEncoder(os.Stderr).Encode(diff)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Save stats for the next loop.</span></span><br><span class=\"line\">        prev = stats</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"17-只读模式\"><a href=\"#17-只读模式\" class=\"headerlink\" title=\"17.只读模式\"></a>17.只读模式</h2><p>有时创建一个共享的只读 boltdb 数据库是有用的。对此，设置 options.readonly 国旗打开数据库时。只读模式使用共享锁允许多个进程从数据库中读取，但它将阻塞任何以读写方式打开数据库的进程。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := bolt.Open(<span class=\"string\">\"my.db\"</span>, <span class=\"number\">0666</span>, &amp;bolt.Options&#123;ReadOnly: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"18-移动端支持（ios-android）\"><a href=\"#18-移动端支持（ios-android）\" class=\"headerlink\" title=\"18.移动端支持（ios/android）\"></a>18.移动端支持（ios/android）</h2><p>boltdb 能够运行在移动设备上利用的工具结合特征 GoMobile。创建一个结构体，包含您的数据库逻辑和参考一个 bolt.db 与初始化 contstructor 需要在文件路径，数据库文件将存储。使用这种方法，Android 和 iOS 都不需要额外的权限或清理。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewBoltDB</span><span class=\"params\">(filepath <span class=\"keyword\">string</span>)</span> *<span class=\"title\">BoltDB</span></span> &#123;</span><br><span class=\"line\">    db, err := bolt.Open(filepath+<span class=\"string\">\"/demo.db\"</span>, <span class=\"number\">0600</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;BoltDB&#123;db&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> BoltDB <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    db *bolt.DB</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *BoltDB)</span> <span class=\"title\">Path</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.db.Path()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *BoltDB)</span> <span class=\"title\">Close</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    b.db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库逻辑应定义为此包装器结构中的方法。<br>要从本机语言初始化此结构（两个平台现在都将本地存储与云同步）。这些片段禁用数据库文件的功能）：<br>Android</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String path;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (android.os.Build.VERSION.SDK_INT &gt;=android.os.Build.VERSION_CODES.LOLLIPOP)&#123;</span><br><span class=\"line\">    path = getNoBackupFilesDir().getAbsolutePath();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    path = getFilesDir().getAbsolutePath();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Boltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)</span><br></pre></td></tr></table></figure>\n<p>IOS</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)demo &#123;</span><br><span class=\"line\">    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,</span><br><span class=\"line\">                                                          NSUserDomainMask,</span><br><span class=\"line\">                                                          YES) objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">    GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);</span><br><span class=\"line\">    [self addSkipBackupAttributeToItemAtPath:demo.path];</span><br><span class=\"line\">    <span class=\"comment\">//Some DB Logic would go here</span></span><br><span class=\"line\">    [demo <span class=\"built_in\">close</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSURL* URL= [NSURL fileURLWithPath: filePathString];</span><br><span class=\"line\">    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    NSError *error = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]</span><br><span class=\"line\">                                  forKey: NSURLIsExcludedFromBackupKey error: &amp;error];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!success)&#123;</span><br><span class=\"line\">        NSLog(@<span class=\"string\">\"Error excluding %@ from backup %@\"</span>, [URL lastPathComponent], error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"19-查看工具\"><a href=\"#19-查看工具\" class=\"headerlink\" title=\"19.查看工具\"></a>19.查看工具</h2><p>1.下载工具<br><code>go get github.com/boltdb/boltd</code><br>然后编译 cmd 下的 main 文件生成可执行文件改名为 boltd<br>拷贝 boltd 到 *.db 同级目录，执行如下：<code>boltd my.db</code></p>\n<p>2.命令行工具<br><a href=\"https://github.com/hasit/bolter\" target=\"_blank\" rel=\"noopener\">https://github.com/hasit/bolter</a></p>\n<p><code>bolter -f my.db</code></p>\n<p>boltdb 源码解析 TODO</p>\n"},{"title":"go-context介绍","date":"2019-03-12T06:05:22.000Z","_content":"\n## context 简介\n\n### 并发控制\n\n经典的并发控制方法\n\n#### waitgroup\n\n控制多个 goroutine\n\n```go\nfunc main() {\n\tvar wg sync.WaitGroup\n\n\twg.Add(2)\n\tgo func() {\n\t\ttime.Sleep(2*time.Second)\n\t\tfmt.Println(\"1号完成\")\n\t\twg.Done()\n\t}()\n\tgo func() {\n\t\ttime.Sleep(2*time.Second)\n\t\tfmt.Println(\"2号完成\")\n\t\twg.Done()\n\t}()\n\twg.Wait()\n\tfmt.Println(\"好了，大家都干完了，放工\")\n}\n```\n\n#### chan 通知\n\n全局 chan 控制【全局变量存在并发安全问题】\n\n```go\nfunc main() {\n\tstop := make(chan bool)\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-stop:\n\t\t\t\tfmt.Println(\"监控退出，停止了...\")\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tfmt.Println(\"goroutine监控中...\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t}\n\t\t}\n\t}()\n\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tstop<- true\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n}\n\n```\n\n#### context\n\ncontext 树\n\n```go\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tgo func(ctx context.Context) {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\tfmt.Println(\"监控退出，停止了...\")\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tfmt.Println(\"goroutine监控中...\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t}\n\t\t}\n\t}(ctx)\n\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tcancel()\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n\n}\n```\n\n## context 定义\n\n```go\ntype Context interface {\n\tDeadline() (deadline time.Time, ok bool)\n\n\tDone() <-chan struct{}\n\n\tErr() error\n\n\tValue(key interface{}) interface{}\n}\n```\n\nDeadline 方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context 会自动发起取消请求；第二个返回值 ok==false 时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。\n\nDone 方法返回一个只读的 chan，类型为 struct{}，我们在 goroutine 中，如果该方法返回的 chan 可以读取，则意味着 parent context 已经发起了取消请求，我们通过 Done 方法收到这个信号后，就应该做清理操作，然后退出 goroutine，释放资源。\n\nErr 方法返回取消的错误原因，因为什么 Context 被取消。\n\nValue 方法获取该 Context 上绑定的值，是一个键值对，所以要通过一个 Key 才可以获取对应的值，这个值一般是线程安全的。\n\n常用的方法：Done()、Value()\n构建常用子类\n\n```go\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) //手动调用去掉函数\nfunc WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc) //自动超时取消\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) //自动超时取消\nfunc WithValue(parent Context, key, val interface{}) Context //附带kv context树\n```\n\n日常用法：\n\n```go\nvar key string=\"name\"\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\t//附加值\n\tvalueCtx:=context.WithValue(ctx,key,\"【监控1】\")\n\tgo watch(valueCtx)\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tcancel()\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n}\n\nfunc watch(ctx context.Context) {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t//取出值\n\t\t\tfmt.Println(ctx.Value(key),\"监控退出，停止了...\")\n\t\t\treturn\n\t\tdefault:\n\t\t\t//取出值\n\t\t\tfmt.Println(ctx.Value(key),\"goroutine监控中...\")\n\t\t\ttime.Sleep(2 * time.Second)\n\t\t}\n\t}\n}\n```\n\n## context 实现细节\n\n- 是不可变的(immutable)树节点\n- Cancel 一个节点，会连带 Cancel 其所有子节点 （从上到下）\n- Context values 是一个节点\n- Value 查找是回溯树的方式 （从下到上）\n\ncontext 树\n\n```go\npackage main\nfunc tree() {\n  ctx1 := context.Background()\n  ctx2, _ := context.WithCancel(ctx1)\n  ctx3, _ := context.WithTimeout(ctx2, time.Second * 5)\n  ctx4, _ := context.WithTimeout(ctx3, time.Second * 3)\n  ctx5, _ := context.WithTimeout(ctx3, time.Second * 6)\n  ctx6 := context.WithValue(ctx5, \"userID\", 12)\n}\n```\n\n![初始化](../../images/context-init.png)\n\n5s 超时之后\n![5s超时后](../../images/context_status.png)\n\n什么时候用 context\n\n- 任何函数可能被阻塞，或者需要很长时间来完成的，都应该有个 context.Context\n\n## 常见注意点\n\n何时取消？\n\n```go\nctx, cancel := context.WithTimeout(parentCtx, time.Second * 2)\ndefer cancel()//立即defer取消\n```\n\n为何值不变？\n\n> context.Context 从设计上就是按照 immutable （不可变的）模式设计的\n> 同样，Context.Value 也是 immutable 的\n> 不要试图在 Context.Value 里存某个可变更的值，然后改变，期望别的 Context 可以看到这个改变\n> 更别指望着在 Context.Value 里存可变的值，最后多个 goroutine 并发访问没竞争冒险啥的，因为自始至终，就是按照不可变来设计的\n> 比如设置了超时，就别以为可以改变这个设置的超时值\n\n为什么要采用树结构？\n\n> 因为需要：根节点可以控制子节点，子节点不能控制根节点【如果使用一个单独的 context 节点，里面数据变更会影响所有 context 控制的地方。采用树结构只会影响到当前这一块区域】\n\n## 深入了解\n\n- httptrace\n- errgroup\n","source":"_posts/golang/go-context介绍.md","raw":"---\ntitle: go-context介绍\ntags:\n  - golang\n  - context\ncategories:\n  - go\ndate: 2019-03-12 14:05:22\n---\n\n## context 简介\n\n### 并发控制\n\n经典的并发控制方法\n\n#### waitgroup\n\n控制多个 goroutine\n\n```go\nfunc main() {\n\tvar wg sync.WaitGroup\n\n\twg.Add(2)\n\tgo func() {\n\t\ttime.Sleep(2*time.Second)\n\t\tfmt.Println(\"1号完成\")\n\t\twg.Done()\n\t}()\n\tgo func() {\n\t\ttime.Sleep(2*time.Second)\n\t\tfmt.Println(\"2号完成\")\n\t\twg.Done()\n\t}()\n\twg.Wait()\n\tfmt.Println(\"好了，大家都干完了，放工\")\n}\n```\n\n#### chan 通知\n\n全局 chan 控制【全局变量存在并发安全问题】\n\n```go\nfunc main() {\n\tstop := make(chan bool)\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-stop:\n\t\t\t\tfmt.Println(\"监控退出，停止了...\")\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tfmt.Println(\"goroutine监控中...\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t}\n\t\t}\n\t}()\n\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tstop<- true\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n}\n\n```\n\n#### context\n\ncontext 树\n\n```go\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tgo func(ctx context.Context) {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\tfmt.Println(\"监控退出，停止了...\")\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tfmt.Println(\"goroutine监控中...\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t}\n\t\t}\n\t}(ctx)\n\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tcancel()\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n\n}\n```\n\n## context 定义\n\n```go\ntype Context interface {\n\tDeadline() (deadline time.Time, ok bool)\n\n\tDone() <-chan struct{}\n\n\tErr() error\n\n\tValue(key interface{}) interface{}\n}\n```\n\nDeadline 方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context 会自动发起取消请求；第二个返回值 ok==false 时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。\n\nDone 方法返回一个只读的 chan，类型为 struct{}，我们在 goroutine 中，如果该方法返回的 chan 可以读取，则意味着 parent context 已经发起了取消请求，我们通过 Done 方法收到这个信号后，就应该做清理操作，然后退出 goroutine，释放资源。\n\nErr 方法返回取消的错误原因，因为什么 Context 被取消。\n\nValue 方法获取该 Context 上绑定的值，是一个键值对，所以要通过一个 Key 才可以获取对应的值，这个值一般是线程安全的。\n\n常用的方法：Done()、Value()\n构建常用子类\n\n```go\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) //手动调用去掉函数\nfunc WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc) //自动超时取消\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) //自动超时取消\nfunc WithValue(parent Context, key, val interface{}) Context //附带kv context树\n```\n\n日常用法：\n\n```go\nvar key string=\"name\"\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\t//附加值\n\tvalueCtx:=context.WithValue(ctx,key,\"【监控1】\")\n\tgo watch(valueCtx)\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tcancel()\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n}\n\nfunc watch(ctx context.Context) {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t//取出值\n\t\t\tfmt.Println(ctx.Value(key),\"监控退出，停止了...\")\n\t\t\treturn\n\t\tdefault:\n\t\t\t//取出值\n\t\t\tfmt.Println(ctx.Value(key),\"goroutine监控中...\")\n\t\t\ttime.Sleep(2 * time.Second)\n\t\t}\n\t}\n}\n```\n\n## context 实现细节\n\n- 是不可变的(immutable)树节点\n- Cancel 一个节点，会连带 Cancel 其所有子节点 （从上到下）\n- Context values 是一个节点\n- Value 查找是回溯树的方式 （从下到上）\n\ncontext 树\n\n```go\npackage main\nfunc tree() {\n  ctx1 := context.Background()\n  ctx2, _ := context.WithCancel(ctx1)\n  ctx3, _ := context.WithTimeout(ctx2, time.Second * 5)\n  ctx4, _ := context.WithTimeout(ctx3, time.Second * 3)\n  ctx5, _ := context.WithTimeout(ctx3, time.Second * 6)\n  ctx6 := context.WithValue(ctx5, \"userID\", 12)\n}\n```\n\n![初始化](../../images/context-init.png)\n\n5s 超时之后\n![5s超时后](../../images/context_status.png)\n\n什么时候用 context\n\n- 任何函数可能被阻塞，或者需要很长时间来完成的，都应该有个 context.Context\n\n## 常见注意点\n\n何时取消？\n\n```go\nctx, cancel := context.WithTimeout(parentCtx, time.Second * 2)\ndefer cancel()//立即defer取消\n```\n\n为何值不变？\n\n> context.Context 从设计上就是按照 immutable （不可变的）模式设计的\n> 同样，Context.Value 也是 immutable 的\n> 不要试图在 Context.Value 里存某个可变更的值，然后改变，期望别的 Context 可以看到这个改变\n> 更别指望着在 Context.Value 里存可变的值，最后多个 goroutine 并发访问没竞争冒险啥的，因为自始至终，就是按照不可变来设计的\n> 比如设置了超时，就别以为可以改变这个设置的超时值\n\n为什么要采用树结构？\n\n> 因为需要：根节点可以控制子节点，子节点不能控制根节点【如果使用一个单独的 context 节点，里面数据变更会影响所有 context 控制的地方。采用树结构只会影响到当前这一块区域】\n\n## 深入了解\n\n- httptrace\n- errgroup\n","slug":"golang/go-context介绍","published":1,"updated":"2020-05-25T05:08:28.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6i0010g93844gxrxd3","content":"<h2 id=\"context-简介\"><a href=\"#context-简介\" class=\"headerlink\" title=\"context 简介\"></a>context 简介</h2><h3 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h3><p>经典的并发控制方法</p>\n<h4 id=\"waitgroup\"><a href=\"#waitgroup\" class=\"headerlink\" title=\"waitgroup\"></a>waitgroup</h4><p>控制多个 goroutine</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">2</span>*time.Second)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"1号完成\"</span>)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">2</span>*time.Second)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"2号完成\"</span>)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"好了，大家都干完了，放工\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"chan-通知\"><a href=\"#chan-通知\" class=\"headerlink\" title=\"chan 通知\"></a>chan 通知</h4><p>全局 chan 控制【全局变量存在并发安全问题】</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstop := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-stop:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tstop&lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h4><p>context 树</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"context-定义\"><a href=\"#context-定义\" class=\"headerlink\" title=\"context 定义\"></a>context 定义</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tDeadline() (deadline time.Time, ok <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tErr() error</span><br><span class=\"line\"></span><br><span class=\"line\">\tValue(key <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Deadline 方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context 会自动发起取消请求；第二个返回值 ok==false 时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。</p>\n<p>Done 方法返回一个只读的 chan，类型为 struct{}，我们在 goroutine 中，如果该方法返回的 chan 可以读取，则意味着 parent context 已经发起了取消请求，我们通过 Done 方法收到这个信号后，就应该做清理操作，然后退出 goroutine，释放资源。</p>\n<p>Err 方法返回取消的错误原因，因为什么 Context 被取消。</p>\n<p>Value 方法获取该 Context 上绑定的值，是一个键值对，所以要通过一个 Key 才可以获取对应的值，这个值一般是线程安全的。</p>\n<p>常用的方法：Done()、Value()<br>构建常用子类</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithCancel</span><span class=\"params\">(parent Context)</span> <span class=\"params\">(ctx Context, cancel CancelFunc)</span> //手动调用去掉函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithDeadline</span><span class=\"params\">(parent Context, deadline time.Time)</span> <span class=\"params\">(Context, CancelFunc)</span> //自动超时取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithTimeout</span><span class=\"params\">(parent Context, timeout time.Duration)</span> <span class=\"params\">(Context, CancelFunc)</span> //自动超时取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithValue</span><span class=\"params\">(parent Context, key, val <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">Context</span> //附带<span class=\"title\">kv</span> <span class=\"title\">context</span>树</span></span><br></pre></td></tr></table></figure>\n<p>日常用法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> key <span class=\"keyword\">string</span>=<span class=\"string\">\"name\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"comment\">//附加值</span></span><br><span class=\"line\">\tvalueCtx:=context.WithValue(ctx,key,<span class=\"string\">\"【监控1】\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(valueCtx)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">watch</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出值</span></span><br><span class=\"line\">\t\t\tfmt.Println(ctx.Value(key),<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出值</span></span><br><span class=\"line\">\t\t\tfmt.Println(ctx.Value(key),<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"context-实现细节\"><a href=\"#context-实现细节\" class=\"headerlink\" title=\"context 实现细节\"></a>context 实现细节</h2><ul>\n<li>是不可变的(immutable)树节点</li>\n<li>Cancel 一个节点，会连带 Cancel 其所有子节点 （从上到下）</li>\n<li>Context values 是一个节点</li>\n<li>Value 查找是回溯树的方式 （从下到上）</li>\n</ul>\n<p>context 树</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tree</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ctx1 := context.Background()</span><br><span class=\"line\">  ctx2, _ := context.WithCancel(ctx1)</span><br><span class=\"line\">  ctx3, _ := context.WithTimeout(ctx2, time.Second * <span class=\"number\">5</span>)</span><br><span class=\"line\">  ctx4, _ := context.WithTimeout(ctx3, time.Second * <span class=\"number\">3</span>)</span><br><span class=\"line\">  ctx5, _ := context.WithTimeout(ctx3, time.Second * <span class=\"number\">6</span>)</span><br><span class=\"line\">  ctx6 := context.WithValue(ctx5, <span class=\"string\">\"userID\"</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../images/context-init.png\" alt=\"初始化\"></p>\n<p>5s 超时之后<br><img src=\"../../images/context_status.png\" alt=\"5s超时后\"></p>\n<p>什么时候用 context</p>\n<ul>\n<li>任何函数可能被阻塞，或者需要很长时间来完成的，都应该有个 context.Context</li>\n</ul>\n<h2 id=\"常见注意点\"><a href=\"#常见注意点\" class=\"headerlink\" title=\"常见注意点\"></a>常见注意点</h2><p>何时取消？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx, cancel := context.WithTimeout(parentCtx, time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> cancel()<span class=\"comment\">//立即defer取消</span></span><br></pre></td></tr></table></figure>\n<p>为何值不变？</p>\n<blockquote>\n<p>context.Context 从设计上就是按照 immutable （不可变的）模式设计的<br>同样，Context.Value 也是 immutable 的<br>不要试图在 Context.Value 里存某个可变更的值，然后改变，期望别的 Context 可以看到这个改变<br>更别指望着在 Context.Value 里存可变的值，最后多个 goroutine 并发访问没竞争冒险啥的，因为自始至终，就是按照不可变来设计的<br>比如设置了超时，就别以为可以改变这个设置的超时值</p>\n</blockquote>\n<p>为什么要采用树结构？</p>\n<blockquote>\n<p>因为需要：根节点可以控制子节点，子节点不能控制根节点【如果使用一个单独的 context 节点，里面数据变更会影响所有 context 控制的地方。采用树结构只会影响到当前这一块区域】</p>\n</blockquote>\n<h2 id=\"深入了解\"><a href=\"#深入了解\" class=\"headerlink\" title=\"深入了解\"></a>深入了解</h2><ul>\n<li>httptrace</li>\n<li>errgroup</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"context-简介\"><a href=\"#context-简介\" class=\"headerlink\" title=\"context 简介\"></a>context 简介</h2><h3 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h3><p>经典的并发控制方法</p>\n<h4 id=\"waitgroup\"><a href=\"#waitgroup\" class=\"headerlink\" title=\"waitgroup\"></a>waitgroup</h4><p>控制多个 goroutine</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">2</span>*time.Second)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"1号完成\"</span>)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">2</span>*time.Second)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"2号完成\"</span>)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"好了，大家都干完了，放工\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"chan-通知\"><a href=\"#chan-通知\" class=\"headerlink\" title=\"chan 通知\"></a>chan 通知</h4><p>全局 chan 控制【全局变量存在并发安全问题】</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstop := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-stop:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tstop&lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h4><p>context 树</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"context-定义\"><a href=\"#context-定义\" class=\"headerlink\" title=\"context 定义\"></a>context 定义</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tDeadline() (deadline time.Time, ok <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tErr() error</span><br><span class=\"line\"></span><br><span class=\"line\">\tValue(key <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Deadline 方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context 会自动发起取消请求；第二个返回值 ok==false 时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。</p>\n<p>Done 方法返回一个只读的 chan，类型为 struct{}，我们在 goroutine 中，如果该方法返回的 chan 可以读取，则意味着 parent context 已经发起了取消请求，我们通过 Done 方法收到这个信号后，就应该做清理操作，然后退出 goroutine，释放资源。</p>\n<p>Err 方法返回取消的错误原因，因为什么 Context 被取消。</p>\n<p>Value 方法获取该 Context 上绑定的值，是一个键值对，所以要通过一个 Key 才可以获取对应的值，这个值一般是线程安全的。</p>\n<p>常用的方法：Done()、Value()<br>构建常用子类</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithCancel</span><span class=\"params\">(parent Context)</span> <span class=\"params\">(ctx Context, cancel CancelFunc)</span> //手动调用去掉函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithDeadline</span><span class=\"params\">(parent Context, deadline time.Time)</span> <span class=\"params\">(Context, CancelFunc)</span> //自动超时取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithTimeout</span><span class=\"params\">(parent Context, timeout time.Duration)</span> <span class=\"params\">(Context, CancelFunc)</span> //自动超时取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithValue</span><span class=\"params\">(parent Context, key, val <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">Context</span> //附带<span class=\"title\">kv</span> <span class=\"title\">context</span>树</span></span><br></pre></td></tr></table></figure>\n<p>日常用法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> key <span class=\"keyword\">string</span>=<span class=\"string\">\"name\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"comment\">//附加值</span></span><br><span class=\"line\">\tvalueCtx:=context.WithValue(ctx,key,<span class=\"string\">\"【监控1】\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(valueCtx)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">watch</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出值</span></span><br><span class=\"line\">\t\t\tfmt.Println(ctx.Value(key),<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出值</span></span><br><span class=\"line\">\t\t\tfmt.Println(ctx.Value(key),<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"context-实现细节\"><a href=\"#context-实现细节\" class=\"headerlink\" title=\"context 实现细节\"></a>context 实现细节</h2><ul>\n<li>是不可变的(immutable)树节点</li>\n<li>Cancel 一个节点，会连带 Cancel 其所有子节点 （从上到下）</li>\n<li>Context values 是一个节点</li>\n<li>Value 查找是回溯树的方式 （从下到上）</li>\n</ul>\n<p>context 树</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tree</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ctx1 := context.Background()</span><br><span class=\"line\">  ctx2, _ := context.WithCancel(ctx1)</span><br><span class=\"line\">  ctx3, _ := context.WithTimeout(ctx2, time.Second * <span class=\"number\">5</span>)</span><br><span class=\"line\">  ctx4, _ := context.WithTimeout(ctx3, time.Second * <span class=\"number\">3</span>)</span><br><span class=\"line\">  ctx5, _ := context.WithTimeout(ctx3, time.Second * <span class=\"number\">6</span>)</span><br><span class=\"line\">  ctx6 := context.WithValue(ctx5, <span class=\"string\">\"userID\"</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../images/context-init.png\" alt=\"初始化\"></p>\n<p>5s 超时之后<br><img src=\"../../images/context_status.png\" alt=\"5s超时后\"></p>\n<p>什么时候用 context</p>\n<ul>\n<li>任何函数可能被阻塞，或者需要很长时间来完成的，都应该有个 context.Context</li>\n</ul>\n<h2 id=\"常见注意点\"><a href=\"#常见注意点\" class=\"headerlink\" title=\"常见注意点\"></a>常见注意点</h2><p>何时取消？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx, cancel := context.WithTimeout(parentCtx, time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> cancel()<span class=\"comment\">//立即defer取消</span></span><br></pre></td></tr></table></figure>\n<p>为何值不变？</p>\n<blockquote>\n<p>context.Context 从设计上就是按照 immutable （不可变的）模式设计的<br>同样，Context.Value 也是 immutable 的<br>不要试图在 Context.Value 里存某个可变更的值，然后改变，期望别的 Context 可以看到这个改变<br>更别指望着在 Context.Value 里存可变的值，最后多个 goroutine 并发访问没竞争冒险啥的，因为自始至终，就是按照不可变来设计的<br>比如设置了超时，就别以为可以改变这个设置的超时值</p>\n</blockquote>\n<p>为什么要采用树结构？</p>\n<blockquote>\n<p>因为需要：根节点可以控制子节点，子节点不能控制根节点【如果使用一个单独的 context 节点，里面数据变更会影响所有 context 控制的地方。采用树结构只会影响到当前这一块区域】</p>\n</blockquote>\n<h2 id=\"深入了解\"><a href=\"#深入了解\" class=\"headerlink\" title=\"深入了解\"></a>深入了解</h2><ul>\n<li>httptrace</li>\n<li>errgroup</li>\n</ul>\n"},{"title":"go-踩坑点","date":"2018-09-19T02:53:27.000Z","_content":"\n## go 遇到的一些问题\n\n### chan 关闭之后，还可以读写吗\n\n> 不能写，但可以读\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar ret = make(chan []int, 1000)\n\tvar wg = sync.WaitGroup{}\n\twg.Add(3)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 10; i < 20; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 20; i < 30; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\twg.Wait()\n\t//go func() {\n\t//\tfor {\n\t//\t\tret <- []int{1}\n\t//\t\ttime.Sleep(time.Second)\n\t//\t}\n\t//}()\n\t//close(ret)\n\tfor v := range ret { //0 range if v==0 break ,or panic\n\t\tfor _, v := range v {\n\t\t\tfmt.Println(v)\n\t\t}\n\t}\n}\n\n```\n\n### 并发获取数据，常见问题\n\n```go\nfor _,v:=range uids{\n\tgo func(){\n    \tfmt.Println(v)//v的值是一样的！\n    }()\n}\n==》\nfor _,v:=range uids{\n\tgo func(v int){\n    \tfmt.Println(v)//v的值正常\n    }(v)\n}\n```\n","source":"_posts/golang/go-踩坑点.md","raw":"---\ntitle: go-踩坑点\ndate: 2018-09-19 10:53:27\ncategories:\n  - go\ntags:\n  - go\n---\n\n## go 遇到的一些问题\n\n### chan 关闭之后，还可以读写吗\n\n> 不能写，但可以读\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar ret = make(chan []int, 1000)\n\tvar wg = sync.WaitGroup{}\n\twg.Add(3)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 10; i < 20; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 20; i < 30; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\twg.Wait()\n\t//go func() {\n\t//\tfor {\n\t//\t\tret <- []int{1}\n\t//\t\ttime.Sleep(time.Second)\n\t//\t}\n\t//}()\n\t//close(ret)\n\tfor v := range ret { //0 range if v==0 break ,or panic\n\t\tfor _, v := range v {\n\t\t\tfmt.Println(v)\n\t\t}\n\t}\n}\n\n```\n\n### 并发获取数据，常见问题\n\n```go\nfor _,v:=range uids{\n\tgo func(){\n    \tfmt.Println(v)//v的值是一样的！\n    }()\n}\n==》\nfor _,v:=range uids{\n\tgo func(v int){\n    \tfmt.Println(v)//v的值正常\n    }(v)\n}\n```\n","slug":"golang/go-踩坑点","published":1,"updated":"2020-05-25T04:56:35.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6j0012g9385j5b7nim","content":"<h2 id=\"go-遇到的一些问题\"><a href=\"#go-遇到的一些问题\" class=\"headerlink\" title=\"go 遇到的一些问题\"></a>go 遇到的一些问题</h2><h3 id=\"chan-关闭之后，还可以读写吗\"><a href=\"#chan-关闭之后，还可以读写吗\" class=\"headerlink\" title=\"chan 关闭之后，还可以读写吗\"></a>chan 关闭之后，还可以读写吗</h3><blockquote>\n<p>不能写，但可以读</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ret = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> []<span class=\"keyword\">int</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg = sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(<span class=\"number\">3</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"built_in\">append</span>(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">10</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"built_in\">append</span>(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">20</span>; i &lt; <span class=\"number\">30</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"built_in\">append</span>(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\t<span class=\"comment\">//go func() &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tfor &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t\tret &lt;- []int&#123;1&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t\ttime.Sleep(time.Second)</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;()</span></span><br><span class=\"line\">\t<span class=\"comment\">//close(ret)</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> v := <span class=\"keyword\">range</span> ret &#123; <span class=\"comment\">//0 range if v==0 break ,or panic</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> v &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(v)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"并发获取数据，常见问题\"><a href=\"#并发获取数据，常见问题\" class=\"headerlink\" title=\"并发获取数据，常见问题\"></a>并发获取数据，常见问题</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _,v:=<span class=\"keyword\">range</span> uids&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \tfmt.Println(v)<span class=\"comment\">//v的值是一样的！</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==》</span><br><span class=\"line\"><span class=\"keyword\">for</span> _,v:=<span class=\"keyword\">range</span> uids&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(v <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    \tfmt.Println(v)<span class=\"comment\">//v的值正常</span></span><br><span class=\"line\">    &#125;(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"go-遇到的一些问题\"><a href=\"#go-遇到的一些问题\" class=\"headerlink\" title=\"go 遇到的一些问题\"></a>go 遇到的一些问题</h2><h3 id=\"chan-关闭之后，还可以读写吗\"><a href=\"#chan-关闭之后，还可以读写吗\" class=\"headerlink\" title=\"chan 关闭之后，还可以读写吗\"></a>chan 关闭之后，还可以读写吗</h3><blockquote>\n<p>不能写，但可以读</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ret = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> []<span class=\"keyword\">int</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg = sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(<span class=\"number\">3</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"built_in\">append</span>(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">10</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"built_in\">append</span>(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">20</span>; i &lt; <span class=\"number\">30</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"built_in\">append</span>(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\t<span class=\"comment\">//go func() &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tfor &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t\tret &lt;- []int&#123;1&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t\ttime.Sleep(time.Second)</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;()</span></span><br><span class=\"line\">\t<span class=\"comment\">//close(ret)</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> v := <span class=\"keyword\">range</span> ret &#123; <span class=\"comment\">//0 range if v==0 break ,or panic</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> v &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(v)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"并发获取数据，常见问题\"><a href=\"#并发获取数据，常见问题\" class=\"headerlink\" title=\"并发获取数据，常见问题\"></a>并发获取数据，常见问题</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _,v:=<span class=\"keyword\">range</span> uids&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \tfmt.Println(v)<span class=\"comment\">//v的值是一样的！</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==》</span><br><span class=\"line\"><span class=\"keyword\">for</span> _,v:=<span class=\"keyword\">range</span> uids&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(v <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    \tfmt.Println(v)<span class=\"comment\">//v的值正常</span></span><br><span class=\"line\">    &#125;(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"go-test简介","date":"2019-03-13T03:16:46.000Z","_content":"\n## golang 测试基本用法\n\n### 入门\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"bytes\"\n)\n\nfunc StringPlus() string {\n\tvar s string\n\ts += \"昵称\" + \":\" + \"greyireland\" + \"\\n\"\n\ts += \"博客\" + \":\" + \"greyireland.com\" + \"\\n\"\n\ts += \"微信公众号\" + \":\" + \"没有\"\n\treturn s\n}\nfunc StringFmt() string {\n\treturn fmt.Sprint(\"昵称\", \":\", \"greyireland\", \"\\n\", \"博客\", \":\", \"greyireland.com\", \"\\n\", \"微信公众号\", \":\", \"没有\")\n}\nfunc StringJoin() string {\n\ts := []string{\"昵称\", \":\", \"greyireland\", \"\\n\", \"博客\", \":\", \"greyireland.com\", \"\\n\", \"微信公众号\", \":\", \"没有\"}\n\treturn strings.Join(s, \"\")\n}\n\nfunc StringBuffer() string {\n\tvar b bytes.Buffer\n\tb.WriteString(\"昵称\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"greyireland\")\n\tb.WriteString(\"\\n\")\n\tb.WriteString(\"博客\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"greyireland.com\")\n\tb.WriteString(\"\\n\")\n\tb.WriteString(\"微信公众号\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"没有\")\n\treturn b.String()\n}\n```\n\n测试源码【goland 可以使用 cmd+shift+T 快键键生成测试用例】\n\n```go\npackage main\n\nimport (\n\t\"testing\"\n)\n\nfunc BenchmarkStringPlus(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringPlus()\n\t}\n}\nfunc BenchmarkStringJoin(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringJoin()\n\t}\n}\nfunc BenchmarkStringBuffer(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringBuffer()\n\t}\n}\nfunc BenchmarkStringFmt(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringFmt()\n\t}\n}\n\nfunc TestStringJoin(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant string\n\t}{\n\t\t{\"\", \"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := StringJoin(); got != tt.want {\n\t\t\t\tt.Errorf(\"StringJoin() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestStringBuffer(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant string\n\t}{\n\t\t{\"\", \"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := StringBuffer(); got != tt.want {\n\t\t\t\tt.Errorf(\"StringBuffer() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n//基准测试参数解释\n// func setUp() *bolt.DB {\n// \tdb, _ := bolt.Open(\"my.db\", 0600, nil)\n// \treturn db\n// }\nfunc BenchmarkWriteKV(b *testing.B) {\n\t// setUp()\n\tb.ResetTimer()       //重置前面的耗时\n\tb.SetParallelism(10) //设置并发因子\n\tb.ReportAllocs()     //报告内存\n\tb.SetBytes(24004)    //设置一次执行的内存大小，评估吞吐量\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() { //一直循环执行\n\t\t\tfmt.Sprintf(\"%v\", 1)\n\t\t}\n\t})\n}\n//BenchmarkWriteKV-4      30000000                70.2 ns/op      342031.82 MB/s         0 B/op          0 allocs/op\n\n```\n\n### 常见执行命令\n\n```go\n// 基本测试\ngo test -v  //执行所有Test方法\ngo test -v -run=^TestStringBuilder$ //只执行某个函数测试\n示例：\n➜  go-test go test -v -run=^TestStringFmt$\n=== RUN   TestStringFmt\n--- PASS: TestStringFmt (0.00s)\nPASS\nok      AAA/go-test     0.008s\n\n\n//基准测试\ngo test -v bench=. -benchmem //执行所有基准测试用例\n示例：\n➜  go-test go test -v -bench=String -benchmem -cover\ngoos: darwin\ngoarch: amd64\npkg: AAA/go-test\nBenchmarkStringPlus-4           10000000               125 ns/op             144 B/op          2 allocs/op\nBenchmarkStringJoin-4           10000000               194 ns/op             160 B/op          2 allocs/op\nBenchmarkStringBuffer-4          5000000               349 ns/op             336 B/op          3 allocs/op\nBenchmarkStringFmt-4             5000000               390 ns/op              80 B/op          1 allocs/op\nPASS\ncoverage: 100.0% of statements\nok      AAA/go-test     8.019s\n\n说明：\n-benchmem显示内存使用  -cover显示代码覆盖率\n390 ns/op //一次操作耗时\n80 B/op //一次内存分配占用大小\n1 allocs/op //一次操作几次内存分配\n```\n\n最常用命令\n\n```go\ngo test -v -run=^TestStringBuilder$\ngo test -v bench=^TestStringBuilder$ -benchmem\n```\n\n### 更深入了解\n\n[assert](https://godoc.org/github.com/stretchr/testify/assert)\n","source":"_posts/golang/go-test简介.md","raw":"---\ntitle: go-test简介\ntags:\n  - test\n  - bench test\ncategories:\n  - go\ndate: 2019-03-13 11:16:46\n---\n\n## golang 测试基本用法\n\n### 入门\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"bytes\"\n)\n\nfunc StringPlus() string {\n\tvar s string\n\ts += \"昵称\" + \":\" + \"greyireland\" + \"\\n\"\n\ts += \"博客\" + \":\" + \"greyireland.com\" + \"\\n\"\n\ts += \"微信公众号\" + \":\" + \"没有\"\n\treturn s\n}\nfunc StringFmt() string {\n\treturn fmt.Sprint(\"昵称\", \":\", \"greyireland\", \"\\n\", \"博客\", \":\", \"greyireland.com\", \"\\n\", \"微信公众号\", \":\", \"没有\")\n}\nfunc StringJoin() string {\n\ts := []string{\"昵称\", \":\", \"greyireland\", \"\\n\", \"博客\", \":\", \"greyireland.com\", \"\\n\", \"微信公众号\", \":\", \"没有\"}\n\treturn strings.Join(s, \"\")\n}\n\nfunc StringBuffer() string {\n\tvar b bytes.Buffer\n\tb.WriteString(\"昵称\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"greyireland\")\n\tb.WriteString(\"\\n\")\n\tb.WriteString(\"博客\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"greyireland.com\")\n\tb.WriteString(\"\\n\")\n\tb.WriteString(\"微信公众号\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"没有\")\n\treturn b.String()\n}\n```\n\n测试源码【goland 可以使用 cmd+shift+T 快键键生成测试用例】\n\n```go\npackage main\n\nimport (\n\t\"testing\"\n)\n\nfunc BenchmarkStringPlus(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringPlus()\n\t}\n}\nfunc BenchmarkStringJoin(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringJoin()\n\t}\n}\nfunc BenchmarkStringBuffer(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringBuffer()\n\t}\n}\nfunc BenchmarkStringFmt(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringFmt()\n\t}\n}\n\nfunc TestStringJoin(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant string\n\t}{\n\t\t{\"\", \"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := StringJoin(); got != tt.want {\n\t\t\t\tt.Errorf(\"StringJoin() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestStringBuffer(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant string\n\t}{\n\t\t{\"\", \"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := StringBuffer(); got != tt.want {\n\t\t\t\tt.Errorf(\"StringBuffer() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n//基准测试参数解释\n// func setUp() *bolt.DB {\n// \tdb, _ := bolt.Open(\"my.db\", 0600, nil)\n// \treturn db\n// }\nfunc BenchmarkWriteKV(b *testing.B) {\n\t// setUp()\n\tb.ResetTimer()       //重置前面的耗时\n\tb.SetParallelism(10) //设置并发因子\n\tb.ReportAllocs()     //报告内存\n\tb.SetBytes(24004)    //设置一次执行的内存大小，评估吞吐量\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() { //一直循环执行\n\t\t\tfmt.Sprintf(\"%v\", 1)\n\t\t}\n\t})\n}\n//BenchmarkWriteKV-4      30000000                70.2 ns/op      342031.82 MB/s         0 B/op          0 allocs/op\n\n```\n\n### 常见执行命令\n\n```go\n// 基本测试\ngo test -v  //执行所有Test方法\ngo test -v -run=^TestStringBuilder$ //只执行某个函数测试\n示例：\n➜  go-test go test -v -run=^TestStringFmt$\n=== RUN   TestStringFmt\n--- PASS: TestStringFmt (0.00s)\nPASS\nok      AAA/go-test     0.008s\n\n\n//基准测试\ngo test -v bench=. -benchmem //执行所有基准测试用例\n示例：\n➜  go-test go test -v -bench=String -benchmem -cover\ngoos: darwin\ngoarch: amd64\npkg: AAA/go-test\nBenchmarkStringPlus-4           10000000               125 ns/op             144 B/op          2 allocs/op\nBenchmarkStringJoin-4           10000000               194 ns/op             160 B/op          2 allocs/op\nBenchmarkStringBuffer-4          5000000               349 ns/op             336 B/op          3 allocs/op\nBenchmarkStringFmt-4             5000000               390 ns/op              80 B/op          1 allocs/op\nPASS\ncoverage: 100.0% of statements\nok      AAA/go-test     8.019s\n\n说明：\n-benchmem显示内存使用  -cover显示代码覆盖率\n390 ns/op //一次操作耗时\n80 B/op //一次内存分配占用大小\n1 allocs/op //一次操作几次内存分配\n```\n\n最常用命令\n\n```go\ngo test -v -run=^TestStringBuilder$\ngo test -v bench=^TestStringBuilder$ -benchmem\n```\n\n### 更深入了解\n\n[assert](https://godoc.org/github.com/stretchr/testify/assert)\n","slug":"golang/go-test简介","published":1,"updated":"2020-05-25T05:10:28.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6l0014g9382fu4tug1","content":"<h2 id=\"golang-测试基本用法\"><a href=\"#golang-测试基本用法\" class=\"headerlink\" title=\"golang 测试基本用法\"></a>golang 测试基本用法</h2><h3 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringPlus</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"昵称\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"greyireland\"</span> + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"博客\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"greyireland.com\"</span> + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"微信公众号\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"没有\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringFmt</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprint(<span class=\"string\">\"昵称\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"博客\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland.com\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"微信公众号\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"没有\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringJoin</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"昵称\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"博客\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland.com\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"微信公众号\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"没有\"</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(s, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringBuffer</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b bytes.Buffer</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"昵称\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"greyireland\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"博客\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"greyireland.com\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"微信公众号\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"没有\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试源码【goland 可以使用 cmd+shift+T 快键键生成测试用例】</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringPlus</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringPlus()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringJoin</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringJoin()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringBuffer</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringBuffer()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringFmt</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringFmt()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringJoin</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ttests := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\twant <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := StringJoin(); got != tt.want &#123;</span><br><span class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"StringJoin() = %v, want %v\"</span>, got, tt.want)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringBuffer</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ttests := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\twant <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := StringBuffer(); got != tt.want &#123;</span><br><span class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"StringBuffer() = %v, want %v\"</span>, got, tt.want)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//基准测试参数解释</span></span><br><span class=\"line\"><span class=\"comment\">// func setUp() *bolt.DB &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tdb, _ := bolt.Open(\"my.db\", 0600, nil)</span></span><br><span class=\"line\"><span class=\"comment\">// \treturn db</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkWriteKV</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// setUp()</span></span><br><span class=\"line\">\tb.ResetTimer()       <span class=\"comment\">//重置前面的耗时</span></span><br><span class=\"line\">\tb.SetParallelism(<span class=\"number\">10</span>) <span class=\"comment\">//设置并发因子</span></span><br><span class=\"line\">\tb.ReportAllocs()     <span class=\"comment\">//报告内存</span></span><br><span class=\"line\">\tb.SetBytes(<span class=\"number\">24004</span>)    <span class=\"comment\">//设置一次执行的内存大小，评估吞吐量</span></span><br><span class=\"line\">\tb.RunParallel(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pb *testing.PB)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pb.Next() &#123; <span class=\"comment\">//一直循环执行</span></span><br><span class=\"line\">\t\t\tfmt.Sprintf(<span class=\"string\">\"%v\"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//BenchmarkWriteKV-4      30000000                70.2 ns/op      342031.82 MB/s         0 B/op          0 allocs/op</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"常见执行命令\"><a href=\"#常见执行命令\" class=\"headerlink\" title=\"常见执行命令\"></a>常见执行命令</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本测试</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v  <span class=\"comment\">//执行所有Test方法</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v -run=^TestStringBuilder$ <span class=\"comment\">//只执行某个函数测试</span></span><br><span class=\"line\">示例：</span><br><span class=\"line\">➜  <span class=\"keyword\">go</span>-test <span class=\"keyword\">go</span> test -v -run=^TestStringFmt$</span><br><span class=\"line\">=== RUN   TestStringFmt</span><br><span class=\"line\">--- PASS: TestStringFmt (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      AAA/<span class=\"keyword\">go</span>-test     <span class=\"number\">0.008s</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基准测试</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v bench=. -benchmem <span class=\"comment\">//执行所有基准测试用例</span></span><br><span class=\"line\">示例：</span><br><span class=\"line\">➜  <span class=\"keyword\">go</span>-test <span class=\"keyword\">go</span> test -v -bench=String -benchmem -cover</span><br><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: AAA/<span class=\"keyword\">go</span>-test</span><br><span class=\"line\">BenchmarkStringPlus<span class=\"number\">-4</span>           <span class=\"number\">10000000</span>               <span class=\"number\">125</span> ns/op             <span class=\"number\">144</span> B/op          <span class=\"number\">2</span> allocs/op</span><br><span class=\"line\">BenchmarkStringJoin<span class=\"number\">-4</span>           <span class=\"number\">10000000</span>               <span class=\"number\">194</span> ns/op             <span class=\"number\">160</span> B/op          <span class=\"number\">2</span> allocs/op</span><br><span class=\"line\">BenchmarkStringBuffer<span class=\"number\">-4</span>          <span class=\"number\">5000000</span>               <span class=\"number\">349</span> ns/op             <span class=\"number\">336</span> B/op          <span class=\"number\">3</span> allocs/op</span><br><span class=\"line\">BenchmarkStringFmt<span class=\"number\">-4</span>             <span class=\"number\">5000000</span>               <span class=\"number\">390</span> ns/op              <span class=\"number\">80</span> B/op          <span class=\"number\">1</span> allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: <span class=\"number\">100.0</span>% of statements</span><br><span class=\"line\">ok      AAA/<span class=\"keyword\">go</span>-test     <span class=\"number\">8.019s</span></span><br><span class=\"line\"></span><br><span class=\"line\">说明：</span><br><span class=\"line\">-benchmem显示内存使用  -cover显示代码覆盖率</span><br><span class=\"line\"><span class=\"number\">390</span> ns/op <span class=\"comment\">//一次操作耗时</span></span><br><span class=\"line\"><span class=\"number\">80</span> B/op <span class=\"comment\">//一次内存分配占用大小</span></span><br><span class=\"line\"><span class=\"number\">1</span> allocs/op <span class=\"comment\">//一次操作几次内存分配</span></span><br></pre></td></tr></table></figure>\n<p>最常用命令</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> test -v -run=^TestStringBuilder$</span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v bench=^TestStringBuilder$ -benchmem</span><br></pre></td></tr></table></figure>\n<h3 id=\"更深入了解\"><a href=\"#更深入了解\" class=\"headerlink\" title=\"更深入了解\"></a>更深入了解</h3><p><a href=\"https://godoc.org/github.com/stretchr/testify/assert\" target=\"_blank\" rel=\"noopener\">assert</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"golang-测试基本用法\"><a href=\"#golang-测试基本用法\" class=\"headerlink\" title=\"golang 测试基本用法\"></a>golang 测试基本用法</h2><h3 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringPlus</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"昵称\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"greyireland\"</span> + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"博客\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"greyireland.com\"</span> + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"微信公众号\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"没有\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringFmt</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprint(<span class=\"string\">\"昵称\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"博客\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland.com\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"微信公众号\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"没有\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringJoin</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"昵称\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"博客\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland.com\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"微信公众号\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"没有\"</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(s, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringBuffer</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b bytes.Buffer</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"昵称\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"greyireland\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"博客\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"greyireland.com\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"微信公众号\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"没有\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试源码【goland 可以使用 cmd+shift+T 快键键生成测试用例】</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringPlus</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringPlus()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringJoin</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringJoin()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringBuffer</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringBuffer()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringFmt</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringFmt()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringJoin</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ttests := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\twant <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := StringJoin(); got != tt.want &#123;</span><br><span class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"StringJoin() = %v, want %v\"</span>, got, tt.want)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringBuffer</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ttests := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\twant <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := StringBuffer(); got != tt.want &#123;</span><br><span class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"StringBuffer() = %v, want %v\"</span>, got, tt.want)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//基准测试参数解释</span></span><br><span class=\"line\"><span class=\"comment\">// func setUp() *bolt.DB &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tdb, _ := bolt.Open(\"my.db\", 0600, nil)</span></span><br><span class=\"line\"><span class=\"comment\">// \treturn db</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkWriteKV</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// setUp()</span></span><br><span class=\"line\">\tb.ResetTimer()       <span class=\"comment\">//重置前面的耗时</span></span><br><span class=\"line\">\tb.SetParallelism(<span class=\"number\">10</span>) <span class=\"comment\">//设置并发因子</span></span><br><span class=\"line\">\tb.ReportAllocs()     <span class=\"comment\">//报告内存</span></span><br><span class=\"line\">\tb.SetBytes(<span class=\"number\">24004</span>)    <span class=\"comment\">//设置一次执行的内存大小，评估吞吐量</span></span><br><span class=\"line\">\tb.RunParallel(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pb *testing.PB)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pb.Next() &#123; <span class=\"comment\">//一直循环执行</span></span><br><span class=\"line\">\t\t\tfmt.Sprintf(<span class=\"string\">\"%v\"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//BenchmarkWriteKV-4      30000000                70.2 ns/op      342031.82 MB/s         0 B/op          0 allocs/op</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"常见执行命令\"><a href=\"#常见执行命令\" class=\"headerlink\" title=\"常见执行命令\"></a>常见执行命令</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本测试</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v  <span class=\"comment\">//执行所有Test方法</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v -run=^TestStringBuilder$ <span class=\"comment\">//只执行某个函数测试</span></span><br><span class=\"line\">示例：</span><br><span class=\"line\">➜  <span class=\"keyword\">go</span>-test <span class=\"keyword\">go</span> test -v -run=^TestStringFmt$</span><br><span class=\"line\">=== RUN   TestStringFmt</span><br><span class=\"line\">--- PASS: TestStringFmt (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      AAA/<span class=\"keyword\">go</span>-test     <span class=\"number\">0.008s</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基准测试</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v bench=. -benchmem <span class=\"comment\">//执行所有基准测试用例</span></span><br><span class=\"line\">示例：</span><br><span class=\"line\">➜  <span class=\"keyword\">go</span>-test <span class=\"keyword\">go</span> test -v -bench=String -benchmem -cover</span><br><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: AAA/<span class=\"keyword\">go</span>-test</span><br><span class=\"line\">BenchmarkStringPlus<span class=\"number\">-4</span>           <span class=\"number\">10000000</span>               <span class=\"number\">125</span> ns/op             <span class=\"number\">144</span> B/op          <span class=\"number\">2</span> allocs/op</span><br><span class=\"line\">BenchmarkStringJoin<span class=\"number\">-4</span>           <span class=\"number\">10000000</span>               <span class=\"number\">194</span> ns/op             <span class=\"number\">160</span> B/op          <span class=\"number\">2</span> allocs/op</span><br><span class=\"line\">BenchmarkStringBuffer<span class=\"number\">-4</span>          <span class=\"number\">5000000</span>               <span class=\"number\">349</span> ns/op             <span class=\"number\">336</span> B/op          <span class=\"number\">3</span> allocs/op</span><br><span class=\"line\">BenchmarkStringFmt<span class=\"number\">-4</span>             <span class=\"number\">5000000</span>               <span class=\"number\">390</span> ns/op              <span class=\"number\">80</span> B/op          <span class=\"number\">1</span> allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: <span class=\"number\">100.0</span>% of statements</span><br><span class=\"line\">ok      AAA/<span class=\"keyword\">go</span>-test     <span class=\"number\">8.019s</span></span><br><span class=\"line\"></span><br><span class=\"line\">说明：</span><br><span class=\"line\">-benchmem显示内存使用  -cover显示代码覆盖率</span><br><span class=\"line\"><span class=\"number\">390</span> ns/op <span class=\"comment\">//一次操作耗时</span></span><br><span class=\"line\"><span class=\"number\">80</span> B/op <span class=\"comment\">//一次内存分配占用大小</span></span><br><span class=\"line\"><span class=\"number\">1</span> allocs/op <span class=\"comment\">//一次操作几次内存分配</span></span><br></pre></td></tr></table></figure>\n<p>最常用命令</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> test -v -run=^TestStringBuilder$</span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v bench=^TestStringBuilder$ -benchmem</span><br></pre></td></tr></table></figure>\n<h3 id=\"更深入了解\"><a href=\"#更深入了解\" class=\"headerlink\" title=\"更深入了解\"></a>更深入了解</h3><p><a href=\"https://godoc.org/github.com/stretchr/testify/assert\" target=\"_blank\" rel=\"noopener\">assert</a></p>\n"},{"title":"go-函数式可选项","date":"2019-03-10T13:52:22.000Z","_content":"\n## 函数式可选项\n\n通过参数创建实例，常见方式\n\n常用方式\n\n```go\nfunc NewStuffClient(conn Connection, timeout, retries int) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: timeout,\n        retries: retries,\n    }\n}\nfunc NewStuffClient(conn Connection) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: DEFAULT_TIMEOUT,\n        retries: DEFAULT_RETRIES,\n    }\n}\nfunc NewStuffClientWithOptions(conn Connection, timeout, retries int) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: timeout,\n        retries: retries,\n    }\n}\n```\n\n或者\n\n```go\ntype StuffClientOptions struct {\n    Retries int\n    Timeout int\n}\n//传入对象\nfunc NewStuffClient(conn Connection, options StuffClientOptions) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: options.Timeout,\n        retries: options.Retries,\n    }\n}\n\n```\n\n更高级的方式，通过闭包函数注入\n\n```go\ntype StuffClientOptions struct {\n    Retries int //number of times to retry the request before giving up\n    Timeout int //connection timeout in seconds\n}\ntype StuffClientOption func(*StuffClientOptions)\nfunc WithRetries(r int) StuffClientOption {\n    return func(o *StuffClientOptions) {\n        o.Retries = r\n    }\n}\nfunc WithTimeout(t int) StuffClientOption {\n    return func(o *StuffClientOptions) {\n        o.Timeout = t\n    }\n}\n\nvar defaultStuffClientOptions = StuffClientOptions{\n    Retries: 3,\n    Timeout: 2,\n}\n//使用可选函数注入选项\nfunc NewStuffClient(conn Connection, opts ...StuffClientOption) StuffClient {\n    options := defaultStuffClientOptions\n    for _, o := range opts {\n        o(&options)\n    }\n    return &stuffClient{\n        conn:    conn,\n        timeout: options.Timeout,\n        retries: options.Retries,\n    }\n}\n\n```\n\n使用方式\n\n```go\nx := NewStuffClient(Connection{})\nfmt.Println(x) // prints &{{} 2 3}\nx = NewStuffClient(\n    Connection{},\n    WithRetries(1),\n)\nfmt.Println(x) // prints &{{} 2 1}\nx = NewStuffClient(\n    Connection{},\n    WithRetries(1),\n    WithTimeout(1),\n)\nfmt.Println(x) // prints &{{} 1 1}\n\n```\n\n### 模式步骤\n\n1. 定义 options\n2. 定义 option\n3. 定义闭包函数\n4. 传入函数选项\n5. 调用函数,注入配置到选项\n\n### 实际项目使用\n\nredigo go 的 redis 连接客户端代码片段\n\n```go\n\n//1 声明options\ntype dialOptions struct {\n\treadTimeout  time.Duration\n\twriteTimeout time.Duration\n\tdialer       *net.Dialer\n\tdial         func(network, addr string) (net.Conn, error)\n\tdb           int\n\tpassword     string\n\tuseTLS       bool\n\tskipVerify   bool\n\ttlsConfig    *tls.Config\n}\n//2 声明option\ntype DialOption struct {\n\tf func(*dialOptions)\n}\n// DialReadTimeout specifies the timeout for reading a single command reply\n//3 声明闭包函数\nfunc DialReadTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.readTimeout = d\n\t}}\n}\n\n// DialWriteTimeout specifies the timeout for writing a single command.\nfunc DialWriteTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.writeTimeout = d\n\t}}\n}\n\n// DialConnectTimeout specifies the timeout for connecting to the Redis server when\n// no DialNetDial option is specified.\nfunc DialConnectTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dialer.Timeout = d\n\t}}\n}\n\n// DialKeepAlive specifies the keep-alive period for TCP connections to the Redis server\n// when no DialNetDial option is specified.\n// If zero, keep-alives are not enabled. If no DialKeepAlive option is specified then\n// the default of 5 minutes is used to ensure that half-closed TCP sessions are detected.\nfunc DialKeepAlive(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dialer.KeepAlive = d\n\t}}\n}\n\n// DialNetDial specifies a custom dial function for creating TCP\n// connections, otherwise a net.Dialer customized via the other options is used.\n// DialNetDial overrides DialConnectTimeout and DialKeepAlive.\nfunc DialNetDial(dial func(network, addr string) (net.Conn, error)) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dial = dial\n\t}}\n}\n\n// DialDatabase specifies the database to select when dialing a connection.\nfunc DialDatabase(db int) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.db = db\n\t}}\n}\n\n// DialPassword specifies the password to use when connecting to\n// the Redis server.\nfunc DialPassword(password string) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.password = password\n\t}}\n}\n\n// DialTLSConfig specifies the config to use when a TLS connection is dialed.\n// Has no effect when not dialing a TLS connection.\nfunc DialTLSConfig(c *tls.Config) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.tlsConfig = c\n\t}}\n}\n\n// DialTLSSkipVerify disables server name verification when connecting over\n// TLS. Has no effect when not dialing a TLS connection.\nfunc DialTLSSkipVerify(skip bool) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.skipVerify = skip\n\t}}\n}\n\n// DialUseTLS specifies whether TLS should be used when connecting to the\n// server. This option is ignore by DialURL.\nfunc DialUseTLS(useTLS bool) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.useTLS = useTLS\n\t}}\n}\n\n// Dial connects to the Redis server at the given network and\n// address using the specified options.\n//4传入参数\nfunc Dial(network, address string, options ...DialOption) (Conn, error) {\n\tdo := dialOptions{\n\t\tdialer: &net.Dialer{\n\t\t\tKeepAlive: time.Minute * 5,\n\t\t},\n  }\n  //5 注入\n\tfor _, option := range options {\n\t\toption.f(&do)\n\t}\n\tif do.dial == nil {\n\t\tdo.dial = do.dialer.Dial\n\t}\n\n\tnetConn, err := do.dial(network, address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif do.useTLS {\n\t\tvar tlsConfig *tls.Config\n\t\tif do.tlsConfig == nil {\n\t\t\ttlsConfig = &tls.Config{InsecureSkipVerify: do.skipVerify}\n\t\t} else {\n\t\t\ttlsConfig = cloneTLSConfig(do.tlsConfig)\n\t\t}\n\t\tif tlsConfig.ServerName == \"\" {\n\t\t\thost, _, err := net.SplitHostPort(address)\n\t\t\tif err != nil {\n\t\t\t\tnetConn.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ttlsConfig.ServerName = host\n\t\t}\n\n\t\ttlsConn := tls.Client(netConn, tlsConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\tnetConn = tlsConn\n\t}\n\n\tc := &conn{\n\t\tconn:         netConn,\n\t\tbw:           bufio.NewWriter(netConn),\n\t\tbr:           bufio.NewReader(netConn),\n\t\treadTimeout:  do.readTimeout,\n\t\twriteTimeout: do.writeTimeout,\n\t}\n\n\tif do.password != \"\" {\n\t\tif _, err := c.Do(\"AUTH\", do.password); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif do.db != 0 {\n\t\tif _, err := c.Do(\"SELECT\", do.db); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn c, nil\n}\n```\n","source":"_posts/golang/go-函数式可选项.md","raw":"---\ntitle: go-函数式可选项\ntags:\n  - go\n  - 函数式选项\ncategories:\n  - 设计模式\ndate: 2019-03-10 21:52:22\n---\n\n## 函数式可选项\n\n通过参数创建实例，常见方式\n\n常用方式\n\n```go\nfunc NewStuffClient(conn Connection, timeout, retries int) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: timeout,\n        retries: retries,\n    }\n}\nfunc NewStuffClient(conn Connection) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: DEFAULT_TIMEOUT,\n        retries: DEFAULT_RETRIES,\n    }\n}\nfunc NewStuffClientWithOptions(conn Connection, timeout, retries int) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: timeout,\n        retries: retries,\n    }\n}\n```\n\n或者\n\n```go\ntype StuffClientOptions struct {\n    Retries int\n    Timeout int\n}\n//传入对象\nfunc NewStuffClient(conn Connection, options StuffClientOptions) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: options.Timeout,\n        retries: options.Retries,\n    }\n}\n\n```\n\n更高级的方式，通过闭包函数注入\n\n```go\ntype StuffClientOptions struct {\n    Retries int //number of times to retry the request before giving up\n    Timeout int //connection timeout in seconds\n}\ntype StuffClientOption func(*StuffClientOptions)\nfunc WithRetries(r int) StuffClientOption {\n    return func(o *StuffClientOptions) {\n        o.Retries = r\n    }\n}\nfunc WithTimeout(t int) StuffClientOption {\n    return func(o *StuffClientOptions) {\n        o.Timeout = t\n    }\n}\n\nvar defaultStuffClientOptions = StuffClientOptions{\n    Retries: 3,\n    Timeout: 2,\n}\n//使用可选函数注入选项\nfunc NewStuffClient(conn Connection, opts ...StuffClientOption) StuffClient {\n    options := defaultStuffClientOptions\n    for _, o := range opts {\n        o(&options)\n    }\n    return &stuffClient{\n        conn:    conn,\n        timeout: options.Timeout,\n        retries: options.Retries,\n    }\n}\n\n```\n\n使用方式\n\n```go\nx := NewStuffClient(Connection{})\nfmt.Println(x) // prints &{{} 2 3}\nx = NewStuffClient(\n    Connection{},\n    WithRetries(1),\n)\nfmt.Println(x) // prints &{{} 2 1}\nx = NewStuffClient(\n    Connection{},\n    WithRetries(1),\n    WithTimeout(1),\n)\nfmt.Println(x) // prints &{{} 1 1}\n\n```\n\n### 模式步骤\n\n1. 定义 options\n2. 定义 option\n3. 定义闭包函数\n4. 传入函数选项\n5. 调用函数,注入配置到选项\n\n### 实际项目使用\n\nredigo go 的 redis 连接客户端代码片段\n\n```go\n\n//1 声明options\ntype dialOptions struct {\n\treadTimeout  time.Duration\n\twriteTimeout time.Duration\n\tdialer       *net.Dialer\n\tdial         func(network, addr string) (net.Conn, error)\n\tdb           int\n\tpassword     string\n\tuseTLS       bool\n\tskipVerify   bool\n\ttlsConfig    *tls.Config\n}\n//2 声明option\ntype DialOption struct {\n\tf func(*dialOptions)\n}\n// DialReadTimeout specifies the timeout for reading a single command reply\n//3 声明闭包函数\nfunc DialReadTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.readTimeout = d\n\t}}\n}\n\n// DialWriteTimeout specifies the timeout for writing a single command.\nfunc DialWriteTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.writeTimeout = d\n\t}}\n}\n\n// DialConnectTimeout specifies the timeout for connecting to the Redis server when\n// no DialNetDial option is specified.\nfunc DialConnectTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dialer.Timeout = d\n\t}}\n}\n\n// DialKeepAlive specifies the keep-alive period for TCP connections to the Redis server\n// when no DialNetDial option is specified.\n// If zero, keep-alives are not enabled. If no DialKeepAlive option is specified then\n// the default of 5 minutes is used to ensure that half-closed TCP sessions are detected.\nfunc DialKeepAlive(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dialer.KeepAlive = d\n\t}}\n}\n\n// DialNetDial specifies a custom dial function for creating TCP\n// connections, otherwise a net.Dialer customized via the other options is used.\n// DialNetDial overrides DialConnectTimeout and DialKeepAlive.\nfunc DialNetDial(dial func(network, addr string) (net.Conn, error)) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dial = dial\n\t}}\n}\n\n// DialDatabase specifies the database to select when dialing a connection.\nfunc DialDatabase(db int) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.db = db\n\t}}\n}\n\n// DialPassword specifies the password to use when connecting to\n// the Redis server.\nfunc DialPassword(password string) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.password = password\n\t}}\n}\n\n// DialTLSConfig specifies the config to use when a TLS connection is dialed.\n// Has no effect when not dialing a TLS connection.\nfunc DialTLSConfig(c *tls.Config) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.tlsConfig = c\n\t}}\n}\n\n// DialTLSSkipVerify disables server name verification when connecting over\n// TLS. Has no effect when not dialing a TLS connection.\nfunc DialTLSSkipVerify(skip bool) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.skipVerify = skip\n\t}}\n}\n\n// DialUseTLS specifies whether TLS should be used when connecting to the\n// server. This option is ignore by DialURL.\nfunc DialUseTLS(useTLS bool) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.useTLS = useTLS\n\t}}\n}\n\n// Dial connects to the Redis server at the given network and\n// address using the specified options.\n//4传入参数\nfunc Dial(network, address string, options ...DialOption) (Conn, error) {\n\tdo := dialOptions{\n\t\tdialer: &net.Dialer{\n\t\t\tKeepAlive: time.Minute * 5,\n\t\t},\n  }\n  //5 注入\n\tfor _, option := range options {\n\t\toption.f(&do)\n\t}\n\tif do.dial == nil {\n\t\tdo.dial = do.dialer.Dial\n\t}\n\n\tnetConn, err := do.dial(network, address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif do.useTLS {\n\t\tvar tlsConfig *tls.Config\n\t\tif do.tlsConfig == nil {\n\t\t\ttlsConfig = &tls.Config{InsecureSkipVerify: do.skipVerify}\n\t\t} else {\n\t\t\ttlsConfig = cloneTLSConfig(do.tlsConfig)\n\t\t}\n\t\tif tlsConfig.ServerName == \"\" {\n\t\t\thost, _, err := net.SplitHostPort(address)\n\t\t\tif err != nil {\n\t\t\t\tnetConn.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ttlsConfig.ServerName = host\n\t\t}\n\n\t\ttlsConn := tls.Client(netConn, tlsConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\tnetConn = tlsConn\n\t}\n\n\tc := &conn{\n\t\tconn:         netConn,\n\t\tbw:           bufio.NewWriter(netConn),\n\t\tbr:           bufio.NewReader(netConn),\n\t\treadTimeout:  do.readTimeout,\n\t\twriteTimeout: do.writeTimeout,\n\t}\n\n\tif do.password != \"\" {\n\t\tif _, err := c.Do(\"AUTH\", do.password); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif do.db != 0 {\n\t\tif _, err := c.Do(\"SELECT\", do.db); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn c, nil\n}\n```\n","slug":"golang/go-函数式可选项","published":1,"updated":"2020-05-25T06:29:01.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6o0017g938s8wckm6a","content":"<h2 id=\"函数式可选项\"><a href=\"#函数式可选项\" class=\"headerlink\" title=\"函数式可选项\"></a>函数式可选项</h2><p>通过参数创建实例，常见方式</p>\n<p>常用方式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, timeout, retries <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: timeout,</span><br><span class=\"line\">        retries: retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: DEFAULT_TIMEOUT,</span><br><span class=\"line\">        retries: DEFAULT_RETRIES,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClientWithOptions</span><span class=\"params\">(conn Connection, timeout, retries <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: timeout,</span><br><span class=\"line\">        retries: retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Retries <span class=\"keyword\">int</span></span><br><span class=\"line\">    Timeout <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//传入对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, options StuffClientOptions)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: options.Timeout,</span><br><span class=\"line\">        retries: options.Retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更高级的方式，通过闭包函数注入</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Retries <span class=\"keyword\">int</span> <span class=\"comment\">//number of times to retry the request before giving up</span></span><br><span class=\"line\">    Timeout <span class=\"keyword\">int</span> <span class=\"comment\">//connection timeout in seconds</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOption <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*StuffClientOptions)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithRetries</span><span class=\"params\">(r <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClientOption</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *StuffClientOptions)</span></span> &#123;</span><br><span class=\"line\">        o.Retries = r</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithTimeout</span><span class=\"params\">(t <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClientOption</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *StuffClientOptions)</span></span> &#123;</span><br><span class=\"line\">        o.Timeout = t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> defaultStuffClientOptions = StuffClientOptions&#123;</span><br><span class=\"line\">    Retries: <span class=\"number\">3</span>,</span><br><span class=\"line\">    Timeout: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用可选函数注入选项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, opts ...StuffClientOption)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    options := defaultStuffClientOptions</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, o := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">        o(&amp;options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: options.Timeout,</span><br><span class=\"line\">        retries: options.Retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用方式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x := NewStuffClient(Connection&#123;&#125;)</span><br><span class=\"line\">fmt.Println(x) <span class=\"comment\">// prints &amp;&#123;&#123;&#125; 2 3&#125;</span></span><br><span class=\"line\">x = NewStuffClient(</span><br><span class=\"line\">    Connection&#123;&#125;,</span><br><span class=\"line\">    WithRetries(<span class=\"number\">1</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(x) <span class=\"comment\">// prints &amp;&#123;&#123;&#125; 2 1&#125;</span></span><br><span class=\"line\">x = NewStuffClient(</span><br><span class=\"line\">    Connection&#123;&#125;,</span><br><span class=\"line\">    WithRetries(<span class=\"number\">1</span>),</span><br><span class=\"line\">    WithTimeout(<span class=\"number\">1</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(x) <span class=\"comment\">// prints &amp;&#123;&#123;&#125; 1 1&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模式步骤\"><a href=\"#模式步骤\" class=\"headerlink\" title=\"模式步骤\"></a>模式步骤</h3><ol>\n<li>定义 options</li>\n<li>定义 option</li>\n<li>定义闭包函数</li>\n<li>传入函数选项</li>\n<li>调用函数,注入配置到选项</li>\n</ol>\n<h3 id=\"实际项目使用\"><a href=\"#实际项目使用\" class=\"headerlink\" title=\"实际项目使用\"></a>实际项目使用</h3><p>redigo go 的 redis 连接客户端代码片段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1 声明options</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> dialOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\treadTimeout  time.Duration</span><br><span class=\"line\">\twriteTimeout time.Duration</span><br><span class=\"line\">\tdialer       *net.Dialer</span><br><span class=\"line\">\tdial         <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(network, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(net.Conn, error)</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">db</span>           <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">password</span>     <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">useTLS</span>       <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">skipVerify</span>   <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">tlsConfig</span>    *<span class=\"title\">tls</span>.<span class=\"title\">Config</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\">//2 声明<span class=\"title\">option</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">DialOption</span> <span class=\"title\">struct</span></span> &#123;</span><br><span class=\"line\">\tf <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*dialOptions)</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">DialReadTimeout</span> <span class=\"title\">specifies</span> <span class=\"title\">the</span> <span class=\"title\">timeout</span> <span class=\"title\">for</span> <span class=\"title\">reading</span> <span class=\"title\">a</span> <span class=\"title\">single</span> <span class=\"title\">command</span> <span class=\"title\">reply</span></span></span><br><span class=\"line\"><span class=\"function\">//3 声明闭包函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">DialReadTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.readTimeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialWriteTimeout specifies the timeout for writing a single command.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialWriteTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.writeTimeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialConnectTimeout specifies the timeout for connecting to the Redis server when</span></span><br><span class=\"line\"><span class=\"comment\">// no DialNetDial option is specified.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialConnectTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dialer.Timeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialKeepAlive specifies the keep-alive period for TCP connections to the Redis server</span></span><br><span class=\"line\"><span class=\"comment\">// when no DialNetDial option is specified.</span></span><br><span class=\"line\"><span class=\"comment\">// If zero, keep-alives are not enabled. If no DialKeepAlive option is specified then</span></span><br><span class=\"line\"><span class=\"comment\">// the default of 5 minutes is used to ensure that half-closed TCP sessions are detected.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialKeepAlive</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dialer.KeepAlive = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialNetDial specifies a custom dial function for creating TCP</span></span><br><span class=\"line\"><span class=\"comment\">// connections, otherwise a net.Dialer customized via the other options is used.</span></span><br><span class=\"line\"><span class=\"comment\">// DialNetDial overrides DialConnectTimeout and DialKeepAlive.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialNetDial</span><span class=\"params\">(dial <span class=\"keyword\">func</span>(network, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(net.Conn, error)</span>) <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dial = dial</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialDatabase specifies the database to select when dialing a connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialDatabase</span><span class=\"params\">(db <span class=\"keyword\">int</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.db = db</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialPassword specifies the password to use when connecting to</span></span><br><span class=\"line\"><span class=\"comment\">// the Redis server.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialPassword</span><span class=\"params\">(password <span class=\"keyword\">string</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.password = password</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialTLSConfig specifies the config to use when a TLS connection is dialed.</span></span><br><span class=\"line\"><span class=\"comment\">// Has no effect when not dialing a TLS connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialTLSConfig</span><span class=\"params\">(c *tls.Config)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.tlsConfig = c</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialTLSSkipVerify disables server name verification when connecting over</span></span><br><span class=\"line\"><span class=\"comment\">// TLS. Has no effect when not dialing a TLS connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialTLSSkipVerify</span><span class=\"params\">(skip <span class=\"keyword\">bool</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.skipVerify = skip</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialUseTLS specifies whether TLS should be used when connecting to the</span></span><br><span class=\"line\"><span class=\"comment\">// server. This option is ignore by DialURL.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialUseTLS</span><span class=\"params\">(useTLS <span class=\"keyword\">bool</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.useTLS = useTLS</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dial connects to the Redis server at the given network and</span></span><br><span class=\"line\"><span class=\"comment\">// address using the specified options.</span></span><br><span class=\"line\"><span class=\"comment\">//4传入参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Dial</span><span class=\"params\">(network, address <span class=\"keyword\">string</span>, options ...DialOption)</span> <span class=\"params\">(Conn, error)</span></span> &#123;</span><br><span class=\"line\">\tdo := dialOptions&#123;</span><br><span class=\"line\">\t\tdialer: &amp;net.Dialer&#123;</span><br><span class=\"line\">\t\t\tKeepAlive: time.Minute * <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//5 注入</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, option := <span class=\"keyword\">range</span> options &#123;</span><br><span class=\"line\">\t\toption.f(&amp;do)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.dial == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tdo.dial = do.dialer.Dial</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetConn, err := do.dial(network, address)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.useTLS &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> tlsConfig *tls.Config</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> do.tlsConfig == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\ttlsConfig = &amp;tls.Config&#123;InsecureSkipVerify: do.skipVerify&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\ttlsConfig = cloneTLSConfig(do.tlsConfig)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> tlsConfig.ServerName == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\thost, _, err := net.SplitHostPort(address)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttlsConfig.ServerName = host</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttlsConn := tls.Client(netConn, tlsConfig)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := tlsConn.Handshake(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnetConn = tlsConn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := &amp;conn&#123;</span><br><span class=\"line\">\t\tconn:         netConn,</span><br><span class=\"line\">\t\tbw:           bufio.NewWriter(netConn),</span><br><span class=\"line\">\t\tbr:           bufio.NewReader(netConn),</span><br><span class=\"line\">\t\treadTimeout:  do.readTimeout,</span><br><span class=\"line\">\t\twriteTimeout: do.writeTimeout,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.password != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := c.Do(<span class=\"string\">\"AUTH\"</span>, do.password); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.db != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := c.Do(<span class=\"string\">\"SELECT\"</span>, do.db); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数式可选项\"><a href=\"#函数式可选项\" class=\"headerlink\" title=\"函数式可选项\"></a>函数式可选项</h2><p>通过参数创建实例，常见方式</p>\n<p>常用方式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, timeout, retries <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: timeout,</span><br><span class=\"line\">        retries: retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: DEFAULT_TIMEOUT,</span><br><span class=\"line\">        retries: DEFAULT_RETRIES,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClientWithOptions</span><span class=\"params\">(conn Connection, timeout, retries <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: timeout,</span><br><span class=\"line\">        retries: retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Retries <span class=\"keyword\">int</span></span><br><span class=\"line\">    Timeout <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//传入对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, options StuffClientOptions)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: options.Timeout,</span><br><span class=\"line\">        retries: options.Retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更高级的方式，通过闭包函数注入</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Retries <span class=\"keyword\">int</span> <span class=\"comment\">//number of times to retry the request before giving up</span></span><br><span class=\"line\">    Timeout <span class=\"keyword\">int</span> <span class=\"comment\">//connection timeout in seconds</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOption <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*StuffClientOptions)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithRetries</span><span class=\"params\">(r <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClientOption</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *StuffClientOptions)</span></span> &#123;</span><br><span class=\"line\">        o.Retries = r</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithTimeout</span><span class=\"params\">(t <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClientOption</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *StuffClientOptions)</span></span> &#123;</span><br><span class=\"line\">        o.Timeout = t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> defaultStuffClientOptions = StuffClientOptions&#123;</span><br><span class=\"line\">    Retries: <span class=\"number\">3</span>,</span><br><span class=\"line\">    Timeout: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用可选函数注入选项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, opts ...StuffClientOption)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    options := defaultStuffClientOptions</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, o := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">        o(&amp;options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: options.Timeout,</span><br><span class=\"line\">        retries: options.Retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用方式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x := NewStuffClient(Connection&#123;&#125;)</span><br><span class=\"line\">fmt.Println(x) <span class=\"comment\">// prints &amp;&#123;&#123;&#125; 2 3&#125;</span></span><br><span class=\"line\">x = NewStuffClient(</span><br><span class=\"line\">    Connection&#123;&#125;,</span><br><span class=\"line\">    WithRetries(<span class=\"number\">1</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(x) <span class=\"comment\">// prints &amp;&#123;&#123;&#125; 2 1&#125;</span></span><br><span class=\"line\">x = NewStuffClient(</span><br><span class=\"line\">    Connection&#123;&#125;,</span><br><span class=\"line\">    WithRetries(<span class=\"number\">1</span>),</span><br><span class=\"line\">    WithTimeout(<span class=\"number\">1</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(x) <span class=\"comment\">// prints &amp;&#123;&#123;&#125; 1 1&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模式步骤\"><a href=\"#模式步骤\" class=\"headerlink\" title=\"模式步骤\"></a>模式步骤</h3><ol>\n<li>定义 options</li>\n<li>定义 option</li>\n<li>定义闭包函数</li>\n<li>传入函数选项</li>\n<li>调用函数,注入配置到选项</li>\n</ol>\n<h3 id=\"实际项目使用\"><a href=\"#实际项目使用\" class=\"headerlink\" title=\"实际项目使用\"></a>实际项目使用</h3><p>redigo go 的 redis 连接客户端代码片段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1 声明options</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> dialOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\treadTimeout  time.Duration</span><br><span class=\"line\">\twriteTimeout time.Duration</span><br><span class=\"line\">\tdialer       *net.Dialer</span><br><span class=\"line\">\tdial         <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(network, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(net.Conn, error)</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">db</span>           <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">password</span>     <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">useTLS</span>       <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">skipVerify</span>   <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">tlsConfig</span>    *<span class=\"title\">tls</span>.<span class=\"title\">Config</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\">//2 声明<span class=\"title\">option</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">DialOption</span> <span class=\"title\">struct</span></span> &#123;</span><br><span class=\"line\">\tf <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*dialOptions)</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">DialReadTimeout</span> <span class=\"title\">specifies</span> <span class=\"title\">the</span> <span class=\"title\">timeout</span> <span class=\"title\">for</span> <span class=\"title\">reading</span> <span class=\"title\">a</span> <span class=\"title\">single</span> <span class=\"title\">command</span> <span class=\"title\">reply</span></span></span><br><span class=\"line\"><span class=\"function\">//3 声明闭包函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">DialReadTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.readTimeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialWriteTimeout specifies the timeout for writing a single command.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialWriteTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.writeTimeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialConnectTimeout specifies the timeout for connecting to the Redis server when</span></span><br><span class=\"line\"><span class=\"comment\">// no DialNetDial option is specified.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialConnectTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dialer.Timeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialKeepAlive specifies the keep-alive period for TCP connections to the Redis server</span></span><br><span class=\"line\"><span class=\"comment\">// when no DialNetDial option is specified.</span></span><br><span class=\"line\"><span class=\"comment\">// If zero, keep-alives are not enabled. If no DialKeepAlive option is specified then</span></span><br><span class=\"line\"><span class=\"comment\">// the default of 5 minutes is used to ensure that half-closed TCP sessions are detected.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialKeepAlive</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dialer.KeepAlive = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialNetDial specifies a custom dial function for creating TCP</span></span><br><span class=\"line\"><span class=\"comment\">// connections, otherwise a net.Dialer customized via the other options is used.</span></span><br><span class=\"line\"><span class=\"comment\">// DialNetDial overrides DialConnectTimeout and DialKeepAlive.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialNetDial</span><span class=\"params\">(dial <span class=\"keyword\">func</span>(network, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(net.Conn, error)</span>) <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dial = dial</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialDatabase specifies the database to select when dialing a connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialDatabase</span><span class=\"params\">(db <span class=\"keyword\">int</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.db = db</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialPassword specifies the password to use when connecting to</span></span><br><span class=\"line\"><span class=\"comment\">// the Redis server.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialPassword</span><span class=\"params\">(password <span class=\"keyword\">string</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.password = password</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialTLSConfig specifies the config to use when a TLS connection is dialed.</span></span><br><span class=\"line\"><span class=\"comment\">// Has no effect when not dialing a TLS connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialTLSConfig</span><span class=\"params\">(c *tls.Config)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.tlsConfig = c</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialTLSSkipVerify disables server name verification when connecting over</span></span><br><span class=\"line\"><span class=\"comment\">// TLS. Has no effect when not dialing a TLS connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialTLSSkipVerify</span><span class=\"params\">(skip <span class=\"keyword\">bool</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.skipVerify = skip</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialUseTLS specifies whether TLS should be used when connecting to the</span></span><br><span class=\"line\"><span class=\"comment\">// server. This option is ignore by DialURL.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialUseTLS</span><span class=\"params\">(useTLS <span class=\"keyword\">bool</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.useTLS = useTLS</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dial connects to the Redis server at the given network and</span></span><br><span class=\"line\"><span class=\"comment\">// address using the specified options.</span></span><br><span class=\"line\"><span class=\"comment\">//4传入参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Dial</span><span class=\"params\">(network, address <span class=\"keyword\">string</span>, options ...DialOption)</span> <span class=\"params\">(Conn, error)</span></span> &#123;</span><br><span class=\"line\">\tdo := dialOptions&#123;</span><br><span class=\"line\">\t\tdialer: &amp;net.Dialer&#123;</span><br><span class=\"line\">\t\t\tKeepAlive: time.Minute * <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//5 注入</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, option := <span class=\"keyword\">range</span> options &#123;</span><br><span class=\"line\">\t\toption.f(&amp;do)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.dial == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tdo.dial = do.dialer.Dial</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetConn, err := do.dial(network, address)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.useTLS &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> tlsConfig *tls.Config</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> do.tlsConfig == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\ttlsConfig = &amp;tls.Config&#123;InsecureSkipVerify: do.skipVerify&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\ttlsConfig = cloneTLSConfig(do.tlsConfig)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> tlsConfig.ServerName == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\thost, _, err := net.SplitHostPort(address)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttlsConfig.ServerName = host</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttlsConn := tls.Client(netConn, tlsConfig)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := tlsConn.Handshake(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnetConn = tlsConn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := &amp;conn&#123;</span><br><span class=\"line\">\t\tconn:         netConn,</span><br><span class=\"line\">\t\tbw:           bufio.NewWriter(netConn),</span><br><span class=\"line\">\t\tbr:           bufio.NewReader(netConn),</span><br><span class=\"line\">\t\treadTimeout:  do.readTimeout,</span><br><span class=\"line\">\t\twriteTimeout: do.writeTimeout,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.password != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := c.Do(<span class=\"string\">\"AUTH\"</span>, do.password); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.db != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := c.Do(<span class=\"string\">\"SELECT\"</span>, do.db); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"go-文件io","date":"2018-09-19T02:47:35.000Z","_content":"\n## golang 文件读写\n\n### 使用 io/ioutil 进行读写文件\n\nio/ioutil 其中提到了两个方法\n\nfunc ReadFile\n\n`func ReadFile(filename string) ([]byte, error)`\n\nReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.\n\nfunc WriteFile\n\n`func WriteFile(filename string, data []byte, perm os.FileMode) error`\nWriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.\n\n读文件：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n    b, err := ioutil.ReadFile(\"test.log\")\n    if err != nil {\n        fmt.Print(err)\n    }\n    fmt.Println(b)\n    str := string(b)\n    fmt.Println(str)\n}\n```\n\n写文件：\n\n```go\npackage main\n\nimport (\n    \"io/ioutil\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    d1 := []byte(\"hello\\ngo\\n\")\n    err := ioutil.WriteFile(\"test.txt\", d1, 0644)\n    check(err)\n}\n```\n\n### 使用 os 进行读写文件\n\nos 包打开文件的方法\n\nfunc Open\n\n`func Open(name string) (*File, error)`\n\nOpen opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type \\*PathError.\n\n读文件：\n\n```go\nfile, err := os.Open(path)\nif err != nil {\n    panic(err)\n}\ndefer file.Close()\n```\n\nfunc OpenFile\n需要提供文件路径、打开模式、文件权限\n\n`func OpenFile(name string, flag int, perm FileMode) (*File, error)`\n\nOpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type \\*PathError.\n\n读文件：\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    f, err := os.OpenFile(\"notes.txt\", os.O_RDWR|os.O_CREATE, 0755)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if err := f.Close(); err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n读方法\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Open(\"/tmp/dat\")\n    check(err)\n\n    b1 := make([]byte, 5)\n    n1, err := f.Read(b1)\n\n    check(err)\n    fmt.Printf(\"%d bytes: %s\\n\", n1, string(b1))\n\n    o2, err := f.Seek(6, 0)\n    //n1, err := f.ReadAt(b1,offset)\n    check(err)\n    b2 := make([]byte, 2)\n    n2, err := f.Read(b2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n2, o2, string(b2))\n\n    o3, err := f.Seek(6, 0)\n    check(err)\n    b3 := make([]byte, 2)\n    n3, err := io.ReadAtLeast(f, b3, 2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))\n\n    _, err = f.Seek(0, 0)\n    check(err)\n\n    r4 := bufio.NewReader(f)\n    b4, err := r4.Peek(5)\n    check(err)\n    fmt.Printf(\"5 bytes: %s\\n\", string(b4))\n\n    f.Close()\n\n}\n```\n\n> 寻址取偏移量：`func (f *File) Seek(offset int64, whence int) (ret int64, err error)`\n> // Seek sets the offset for the next Read or Write on file to offset,interpreted\n> // according to whence: 0 means relative to the origin of the file, 1 means\n> // relative to the current offset, and 2 means relative to the end.\n> // It returns the new offset and an error, if any.\n> // The behavior of Seek on a file opened with O_APPEND is not specified.\n\n写方法\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Create(\"/tmp/dat2\")\n    check(err)\n\n    defer f.Close()\n\n    d2 := []byte{115, 111, 109, 101, 10}\n    n2, err := f.Write(d2)\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n2)\n\n    n3, err := f.WriteString(\"writes\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n3)\n    f.Sync()\n    w := bufio.NewWriter(f)\n    n4, err := w.WriteString(\"buffered\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n4)\n\n    w.Flush()\n\n}\n```\n\n几种读取文件方法速度比较\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n    \"time\"\n)\n\nfunc read0(path string) string {\n    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)\n    if err != nil {\n        fmt.Printf(\"%s\\n\", err)\n        panic(err)\n    }\n    return string(f)\n}\n\nfunc read1(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n\n    chunks := make([]byte, 1024, 1024)\n    buf := make([]byte, 1024)\n    for {\n        n, err := fi.Read(buf)//\b一块一块读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read2(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    r := bufio.NewReader(fi)\n\n    chunks := make([]byte, 1024, 1024)\n\n    buf := make([]byte, 1024)\n    for {\n        n, err := r.Read(buf)//缓存读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read3(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)\n    return string(fd)\n}\n\nfunc main() {\n\n    file := \"test.log\"\n\n    start := time.Now()\n\n    read0(file)\n    t0 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t0.Sub(start))\n\n    read1(file)\n    t1 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t1.Sub(t0))\n\n    read2(file)\n    t2 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t2.Sub(t1))\n\n    read3(file)\n    t3 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t3.Sub(t2))\n\n}\n```\n\n运行结果：\n\n```go\nCost time 4.0105ms\nCost time 11.5043ms\nCost time 7.0042ms\nCost time 2.4983ms\n```\n\n## 底层实现\n\n### 底层 IO\n\n```go\n//os提供的功能\nfile=os.open(path)\nfile.read(buf)\nfile.write(buf)\nfile.readAt(buf,offset)\nfile.writeAt(buf,offset)\n```\n\n### 缓冲 IO\n\n```go\nbufio.Reader/Writer\nfile=open(path)\nbufFile=bufio.NewReader(file)\nbufFile.read(buf)\n\nfile=open(path)\nbufFile = bufio.NewWriter(file)\nbufFile.Write([]byte(\"haha\"))\nw.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！\n```\n\n> 标准 IO 操作数据流向路径：数据—>进程缓冲（用户态）—>内核缓存区（内核态）—>磁盘\n>\n> 为什么包一层 buf，buf 读的时候读一大块，给你读取的时候，你只需要从 buf 里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf 写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况\n\n## 任务\n\n内存大小为 4G 的电脑给 10G 的文件排序？\n","source":"_posts/golang/go-文件io.md","raw":"---\ntitle: go-文件io\ndate: 2018-09-19 10:47:35\ncategories:\n  - go\ntags:\n  - go\n---\n\n## golang 文件读写\n\n### 使用 io/ioutil 进行读写文件\n\nio/ioutil 其中提到了两个方法\n\nfunc ReadFile\n\n`func ReadFile(filename string) ([]byte, error)`\n\nReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.\n\nfunc WriteFile\n\n`func WriteFile(filename string, data []byte, perm os.FileMode) error`\nWriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.\n\n读文件：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n    b, err := ioutil.ReadFile(\"test.log\")\n    if err != nil {\n        fmt.Print(err)\n    }\n    fmt.Println(b)\n    str := string(b)\n    fmt.Println(str)\n}\n```\n\n写文件：\n\n```go\npackage main\n\nimport (\n    \"io/ioutil\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    d1 := []byte(\"hello\\ngo\\n\")\n    err := ioutil.WriteFile(\"test.txt\", d1, 0644)\n    check(err)\n}\n```\n\n### 使用 os 进行读写文件\n\nos 包打开文件的方法\n\nfunc Open\n\n`func Open(name string) (*File, error)`\n\nOpen opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type \\*PathError.\n\n读文件：\n\n```go\nfile, err := os.Open(path)\nif err != nil {\n    panic(err)\n}\ndefer file.Close()\n```\n\nfunc OpenFile\n需要提供文件路径、打开模式、文件权限\n\n`func OpenFile(name string, flag int, perm FileMode) (*File, error)`\n\nOpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type \\*PathError.\n\n读文件：\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    f, err := os.OpenFile(\"notes.txt\", os.O_RDWR|os.O_CREATE, 0755)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if err := f.Close(); err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n读方法\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Open(\"/tmp/dat\")\n    check(err)\n\n    b1 := make([]byte, 5)\n    n1, err := f.Read(b1)\n\n    check(err)\n    fmt.Printf(\"%d bytes: %s\\n\", n1, string(b1))\n\n    o2, err := f.Seek(6, 0)\n    //n1, err := f.ReadAt(b1,offset)\n    check(err)\n    b2 := make([]byte, 2)\n    n2, err := f.Read(b2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n2, o2, string(b2))\n\n    o3, err := f.Seek(6, 0)\n    check(err)\n    b3 := make([]byte, 2)\n    n3, err := io.ReadAtLeast(f, b3, 2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))\n\n    _, err = f.Seek(0, 0)\n    check(err)\n\n    r4 := bufio.NewReader(f)\n    b4, err := r4.Peek(5)\n    check(err)\n    fmt.Printf(\"5 bytes: %s\\n\", string(b4))\n\n    f.Close()\n\n}\n```\n\n> 寻址取偏移量：`func (f *File) Seek(offset int64, whence int) (ret int64, err error)`\n> // Seek sets the offset for the next Read or Write on file to offset,interpreted\n> // according to whence: 0 means relative to the origin of the file, 1 means\n> // relative to the current offset, and 2 means relative to the end.\n> // It returns the new offset and an error, if any.\n> // The behavior of Seek on a file opened with O_APPEND is not specified.\n\n写方法\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Create(\"/tmp/dat2\")\n    check(err)\n\n    defer f.Close()\n\n    d2 := []byte{115, 111, 109, 101, 10}\n    n2, err := f.Write(d2)\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n2)\n\n    n3, err := f.WriteString(\"writes\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n3)\n    f.Sync()\n    w := bufio.NewWriter(f)\n    n4, err := w.WriteString(\"buffered\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n4)\n\n    w.Flush()\n\n}\n```\n\n几种读取文件方法速度比较\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n    \"time\"\n)\n\nfunc read0(path string) string {\n    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)\n    if err != nil {\n        fmt.Printf(\"%s\\n\", err)\n        panic(err)\n    }\n    return string(f)\n}\n\nfunc read1(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n\n    chunks := make([]byte, 1024, 1024)\n    buf := make([]byte, 1024)\n    for {\n        n, err := fi.Read(buf)//\b一块一块读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read2(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    r := bufio.NewReader(fi)\n\n    chunks := make([]byte, 1024, 1024)\n\n    buf := make([]byte, 1024)\n    for {\n        n, err := r.Read(buf)//缓存读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read3(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)\n    return string(fd)\n}\n\nfunc main() {\n\n    file := \"test.log\"\n\n    start := time.Now()\n\n    read0(file)\n    t0 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t0.Sub(start))\n\n    read1(file)\n    t1 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t1.Sub(t0))\n\n    read2(file)\n    t2 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t2.Sub(t1))\n\n    read3(file)\n    t3 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t3.Sub(t2))\n\n}\n```\n\n运行结果：\n\n```go\nCost time 4.0105ms\nCost time 11.5043ms\nCost time 7.0042ms\nCost time 2.4983ms\n```\n\n## 底层实现\n\n### 底层 IO\n\n```go\n//os提供的功能\nfile=os.open(path)\nfile.read(buf)\nfile.write(buf)\nfile.readAt(buf,offset)\nfile.writeAt(buf,offset)\n```\n\n### 缓冲 IO\n\n```go\nbufio.Reader/Writer\nfile=open(path)\nbufFile=bufio.NewReader(file)\nbufFile.read(buf)\n\nfile=open(path)\nbufFile = bufio.NewWriter(file)\nbufFile.Write([]byte(\"haha\"))\nw.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！\n```\n\n> 标准 IO 操作数据流向路径：数据—>进程缓冲（用户态）—>内核缓存区（内核态）—>磁盘\n>\n> 为什么包一层 buf，buf 读的时候读一大块，给你读取的时候，你只需要从 buf 里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf 写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况\n\n## 任务\n\n内存大小为 4G 的电脑给 10G 的文件排序？\n","slug":"golang/go-文件io","published":1,"updated":"2020-05-25T05:01:29.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6p0019g9385j7w3sco","content":"<h2 id=\"golang-文件读写\"><a href=\"#golang-文件读写\" class=\"headerlink\" title=\"golang 文件读写\"></a>golang 文件读写</h2><h3 id=\"使用-io-ioutil-进行读写文件\"><a href=\"#使用-io-ioutil-进行读写文件\" class=\"headerlink\" title=\"使用 io/ioutil 进行读写文件\"></a>使用 io/ioutil 进行读写文件</h3><p>io/ioutil 其中提到了两个方法</p>\n<p>func ReadFile</p>\n<p><code>func ReadFile(filename string) ([]byte, error)</code></p>\n<p>ReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.</p>\n<p>func WriteFile</p>\n<p><code>func WriteFile(filename string, data []byte, perm os.FileMode) error</code><br>WriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.</p>\n<p>读文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    b, err := ioutil.ReadFile(<span class=\"string\">\"test.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Print(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">    str := <span class=\"keyword\">string</span>(b)</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(e error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    d1 := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"hello\\ngo\\n\"</span>)</span><br><span class=\"line\">    err := ioutil.WriteFile(<span class=\"string\">\"test.txt\"</span>, d1, <span class=\"number\">0644</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-os-进行读写文件\"><a href=\"#使用-os-进行读写文件\" class=\"headerlink\" title=\"使用 os 进行读写文件\"></a>使用 os 进行读写文件</h3><p>os 包打开文件的方法</p>\n<p>func Open</p>\n<p><code>func Open(name string) (*File, error)</code></p>\n<p>Open opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.</p>\n<p>读文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file, err := os.Open(path)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> file.Close()</span><br></pre></td></tr></table></figure>\n<p>func OpenFile<br>需要提供文件路径、打开模式、文件权限</p>\n<p><code>func OpenFile(name string, flag int, perm FileMode) (*File, error)</code></p>\n<p>OpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.</p>\n<p>读文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    f, err := os.OpenFile(<span class=\"string\">\"notes.txt\"</span>, os.O_RDWR|os.O_CREATE, <span class=\"number\">0755</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := f.Close(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(e error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Open(<span class=\"string\">\"/tmp/dat\"</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    b1 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    n1, err := f.Read(b1)</span><br><span class=\"line\"></span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%d bytes: %s\\n\"</span>, n1, <span class=\"keyword\">string</span>(b1))</span><br><span class=\"line\"></span><br><span class=\"line\">    o2, err := f.Seek(<span class=\"number\">6</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\">//n1, err := f.ReadAt(b1,offset)</span></span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b2 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    n2, err := f.Read(b2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%d bytes @ %d: %s\\n\"</span>, n2, o2, <span class=\"keyword\">string</span>(b2))</span><br><span class=\"line\"></span><br><span class=\"line\">    o3, err := f.Seek(<span class=\"number\">6</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b3 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    n3, err := io.ReadAtLeast(f, b3, <span class=\"number\">2</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%d bytes @ %d: %s\\n\"</span>, n3, o3, <span class=\"keyword\">string</span>(b3))</span><br><span class=\"line\"></span><br><span class=\"line\">    _, err = f.Seek(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    r4 := bufio.NewReader(f)</span><br><span class=\"line\">    b4, err := r4.Peek(<span class=\"number\">5</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"5 bytes: %s\\n\"</span>, <span class=\"keyword\">string</span>(b4))</span><br><span class=\"line\"></span><br><span class=\"line\">    f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>寻址取偏移量：<code>func (f *File) Seek(offset int64, whence int) (ret int64, err error)</code><br>// Seek sets the offset for the next Read or Write on file to offset,interpreted<br>// according to whence: 0 means relative to the origin of the file, 1 means<br>// relative to the current offset, and 2 means relative to the end.<br>// It returns the new offset and an error, if any.<br>// The behavior of Seek on a file opened with O_APPEND is not specified.</p>\n</blockquote>\n<p>写方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(e error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Create(<span class=\"string\">\"/tmp/dat2\"</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    d2 := []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">115</span>, <span class=\"number\">111</span>, <span class=\"number\">109</span>, <span class=\"number\">101</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">    n2, err := f.Write(d2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"wrote %d bytes\\n\"</span>, n2)</span><br><span class=\"line\"></span><br><span class=\"line\">    n3, err := f.WriteString(<span class=\"string\">\"writes\\n\"</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"wrote %d bytes\\n\"</span>, n3)</span><br><span class=\"line\">    f.Sync()</span><br><span class=\"line\">    w := bufio.NewWriter(f)</span><br><span class=\"line\">    n4, err := w.WriteString(<span class=\"string\">\"buffered\\n\"</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"wrote %d bytes\\n\"</span>, n4)</span><br><span class=\"line\"></span><br><span class=\"line\">    w.Flush()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>几种读取文件方法速度比较</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">    <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read0</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    f, err := ioutil.ReadFile(path)<span class=\"comment\">//底层调用file.read(fileSizeBuf)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"%s\\n\"</span>, err)</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read1</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> fi.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">    buf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        n, err := fi.Read(buf)<span class=\"comment\">//\b一块一块读</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> == n &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = <span class=\"built_in\">append</span>(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read2</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> fi.Close()</span><br><span class=\"line\">    r := bufio.NewReader(fi)</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    buf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        n, err := r.Read(buf)<span class=\"comment\">//缓存读</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> == n &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = <span class=\"built_in\">append</span>(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read3</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> fi.Close()</span><br><span class=\"line\">    fd, err := ioutil.ReadAll(fi)<span class=\"comment\">//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(fd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    file := <span class=\"string\">\"test.log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    start := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">    read0(file)</span><br><span class=\"line\">    t0 := time.Now()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Cost time %v\\n\"</span>, t0.Sub(start))</span><br><span class=\"line\"></span><br><span class=\"line\">    read1(file)</span><br><span class=\"line\">    t1 := time.Now()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Cost time %v\\n\"</span>, t1.Sub(t0))</span><br><span class=\"line\"></span><br><span class=\"line\">    read2(file)</span><br><span class=\"line\">    t2 := time.Now()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Cost time %v\\n\"</span>, t2.Sub(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">    read3(file)</span><br><span class=\"line\">    t3 := time.Now()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Cost time %v\\n\"</span>, t3.Sub(t2))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cost time <span class=\"number\">4.0105</span>ms</span><br><span class=\"line\">Cost time <span class=\"number\">11.5043</span>ms</span><br><span class=\"line\">Cost time <span class=\"number\">7.0042</span>ms</span><br><span class=\"line\">Cost time <span class=\"number\">2.4983</span>ms</span><br></pre></td></tr></table></figure>\n<h2 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h2><h3 id=\"底层-IO\"><a href=\"#底层-IO\" class=\"headerlink\" title=\"底层 IO\"></a>底层 IO</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//os提供的功能</span></span><br><span class=\"line\">file=os.open(path)</span><br><span class=\"line\">file.read(buf)</span><br><span class=\"line\">file.write(buf)</span><br><span class=\"line\">file.readAt(buf,offset)</span><br><span class=\"line\">file.writeAt(buf,offset)</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓冲-IO\"><a href=\"#缓冲-IO\" class=\"headerlink\" title=\"缓冲 IO\"></a>缓冲 IO</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufio.Reader/Writer</span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile=bufio.NewReader(file)</span><br><span class=\"line\">bufFile.read(buf)</span><br><span class=\"line\"></span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile = bufio.NewWriter(file)</span><br><span class=\"line\">bufFile.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"haha\"</span>))</span><br><span class=\"line\">w.Flush()<span class=\"comment\">//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>标准 IO 操作数据流向路径：数据—&gt;进程缓冲（用户态）—&gt;内核缓存区（内核态）—&gt;磁盘</p>\n<p>为什么包一层 buf，buf 读的时候读一大块，给你读取的时候，你只需要从 buf 里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf 写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况</p>\n</blockquote>\n<h2 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h2><p>内存大小为 4G 的电脑给 10G 的文件排序？</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"golang-文件读写\"><a href=\"#golang-文件读写\" class=\"headerlink\" title=\"golang 文件读写\"></a>golang 文件读写</h2><h3 id=\"使用-io-ioutil-进行读写文件\"><a href=\"#使用-io-ioutil-进行读写文件\" class=\"headerlink\" title=\"使用 io/ioutil 进行读写文件\"></a>使用 io/ioutil 进行读写文件</h3><p>io/ioutil 其中提到了两个方法</p>\n<p>func ReadFile</p>\n<p><code>func ReadFile(filename string) ([]byte, error)</code></p>\n<p>ReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.</p>\n<p>func WriteFile</p>\n<p><code>func WriteFile(filename string, data []byte, perm os.FileMode) error</code><br>WriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.</p>\n<p>读文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    b, err := ioutil.ReadFile(<span class=\"string\">\"test.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Print(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">    str := <span class=\"keyword\">string</span>(b)</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(e error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    d1 := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"hello\\ngo\\n\"</span>)</span><br><span class=\"line\">    err := ioutil.WriteFile(<span class=\"string\">\"test.txt\"</span>, d1, <span class=\"number\">0644</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-os-进行读写文件\"><a href=\"#使用-os-进行读写文件\" class=\"headerlink\" title=\"使用 os 进行读写文件\"></a>使用 os 进行读写文件</h3><p>os 包打开文件的方法</p>\n<p>func Open</p>\n<p><code>func Open(name string) (*File, error)</code></p>\n<p>Open opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.</p>\n<p>读文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file, err := os.Open(path)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> file.Close()</span><br></pre></td></tr></table></figure>\n<p>func OpenFile<br>需要提供文件路径、打开模式、文件权限</p>\n<p><code>func OpenFile(name string, flag int, perm FileMode) (*File, error)</code></p>\n<p>OpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.</p>\n<p>读文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    f, err := os.OpenFile(<span class=\"string\">\"notes.txt\"</span>, os.O_RDWR|os.O_CREATE, <span class=\"number\">0755</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := f.Close(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(e error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Open(<span class=\"string\">\"/tmp/dat\"</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    b1 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    n1, err := f.Read(b1)</span><br><span class=\"line\"></span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%d bytes: %s\\n\"</span>, n1, <span class=\"keyword\">string</span>(b1))</span><br><span class=\"line\"></span><br><span class=\"line\">    o2, err := f.Seek(<span class=\"number\">6</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\">//n1, err := f.ReadAt(b1,offset)</span></span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b2 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    n2, err := f.Read(b2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%d bytes @ %d: %s\\n\"</span>, n2, o2, <span class=\"keyword\">string</span>(b2))</span><br><span class=\"line\"></span><br><span class=\"line\">    o3, err := f.Seek(<span class=\"number\">6</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b3 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    n3, err := io.ReadAtLeast(f, b3, <span class=\"number\">2</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%d bytes @ %d: %s\\n\"</span>, n3, o3, <span class=\"keyword\">string</span>(b3))</span><br><span class=\"line\"></span><br><span class=\"line\">    _, err = f.Seek(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    r4 := bufio.NewReader(f)</span><br><span class=\"line\">    b4, err := r4.Peek(<span class=\"number\">5</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"5 bytes: %s\\n\"</span>, <span class=\"keyword\">string</span>(b4))</span><br><span class=\"line\"></span><br><span class=\"line\">    f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>寻址取偏移量：<code>func (f *File) Seek(offset int64, whence int) (ret int64, err error)</code><br>// Seek sets the offset for the next Read or Write on file to offset,interpreted<br>// according to whence: 0 means relative to the origin of the file, 1 means<br>// relative to the current offset, and 2 means relative to the end.<br>// It returns the new offset and an error, if any.<br>// The behavior of Seek on a file opened with O_APPEND is not specified.</p>\n</blockquote>\n<p>写方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(e error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Create(<span class=\"string\">\"/tmp/dat2\"</span>)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    d2 := []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">115</span>, <span class=\"number\">111</span>, <span class=\"number\">109</span>, <span class=\"number\">101</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">    n2, err := f.Write(d2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"wrote %d bytes\\n\"</span>, n2)</span><br><span class=\"line\"></span><br><span class=\"line\">    n3, err := f.WriteString(<span class=\"string\">\"writes\\n\"</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"wrote %d bytes\\n\"</span>, n3)</span><br><span class=\"line\">    f.Sync()</span><br><span class=\"line\">    w := bufio.NewWriter(f)</span><br><span class=\"line\">    n4, err := w.WriteString(<span class=\"string\">\"buffered\\n\"</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"wrote %d bytes\\n\"</span>, n4)</span><br><span class=\"line\"></span><br><span class=\"line\">    w.Flush()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>几种读取文件方法速度比较</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\">    <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read0</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    f, err := ioutil.ReadFile(path)<span class=\"comment\">//底层调用file.read(fileSizeBuf)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"%s\\n\"</span>, err)</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read1</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> fi.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">    buf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        n, err := fi.Read(buf)<span class=\"comment\">//\b一块一块读</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> == n &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = <span class=\"built_in\">append</span>(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read2</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> fi.Close()</span><br><span class=\"line\">    r := bufio.NewReader(fi)</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    buf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        n, err := r.Read(buf)<span class=\"comment\">//缓存读</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> == n &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = <span class=\"built_in\">append</span>(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">read3</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> fi.Close()</span><br><span class=\"line\">    fd, err := ioutil.ReadAll(fi)<span class=\"comment\">//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(fd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    file := <span class=\"string\">\"test.log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    start := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">    read0(file)</span><br><span class=\"line\">    t0 := time.Now()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Cost time %v\\n\"</span>, t0.Sub(start))</span><br><span class=\"line\"></span><br><span class=\"line\">    read1(file)</span><br><span class=\"line\">    t1 := time.Now()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Cost time %v\\n\"</span>, t1.Sub(t0))</span><br><span class=\"line\"></span><br><span class=\"line\">    read2(file)</span><br><span class=\"line\">    t2 := time.Now()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Cost time %v\\n\"</span>, t2.Sub(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">    read3(file)</span><br><span class=\"line\">    t3 := time.Now()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Cost time %v\\n\"</span>, t3.Sub(t2))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cost time <span class=\"number\">4.0105</span>ms</span><br><span class=\"line\">Cost time <span class=\"number\">11.5043</span>ms</span><br><span class=\"line\">Cost time <span class=\"number\">7.0042</span>ms</span><br><span class=\"line\">Cost time <span class=\"number\">2.4983</span>ms</span><br></pre></td></tr></table></figure>\n<h2 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h2><h3 id=\"底层-IO\"><a href=\"#底层-IO\" class=\"headerlink\" title=\"底层 IO\"></a>底层 IO</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//os提供的功能</span></span><br><span class=\"line\">file=os.open(path)</span><br><span class=\"line\">file.read(buf)</span><br><span class=\"line\">file.write(buf)</span><br><span class=\"line\">file.readAt(buf,offset)</span><br><span class=\"line\">file.writeAt(buf,offset)</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓冲-IO\"><a href=\"#缓冲-IO\" class=\"headerlink\" title=\"缓冲 IO\"></a>缓冲 IO</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufio.Reader/Writer</span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile=bufio.NewReader(file)</span><br><span class=\"line\">bufFile.read(buf)</span><br><span class=\"line\"></span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile = bufio.NewWriter(file)</span><br><span class=\"line\">bufFile.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"haha\"</span>))</span><br><span class=\"line\">w.Flush()<span class=\"comment\">//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>标准 IO 操作数据流向路径：数据—&gt;进程缓冲（用户态）—&gt;内核缓存区（内核态）—&gt;磁盘</p>\n<p>为什么包一层 buf，buf 读的时候读一大块，给你读取的时候，你只需要从 buf 里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf 写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况</p>\n</blockquote>\n<h2 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h2><p>内存大小为 4G 的电脑给 10G 的文件排序？</p>\n"},{"title":"go-通道channel","date":"2018-09-19T02:52:42.000Z","_content":"\n## 通道\n\n两种配合方式：\n\n- range\n- select\n\n### range 方式\n\n```go\n//关闭之后会跳出循环\nfor v:=range c{\n\t//todo\n}\n```\n\n### select 方式\n\n```go\nfor {\n\tselect {\n    \tcase val,ok:=<-c:\n        \tif !ok{break}\n    }\n}\n```\n\n### Close(ch)含义\n\n给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。\n\n### 注意点\n\n- 从一个 nil channel 中接收数据会一直被 block。\n\n- 从一个被 close 的 channel 中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。\n\n```go\n//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。\n//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)\nx, ok := <-ch\n```\n","source":"_posts/golang/go-通道channel.md","raw":"---\ntitle: go-通道channel\ndate: 2018-09-19 10:52:42\ncategories:\n  - go\ntags:\n  - go\n---\n\n## 通道\n\n两种配合方式：\n\n- range\n- select\n\n### range 方式\n\n```go\n//关闭之后会跳出循环\nfor v:=range c{\n\t//todo\n}\n```\n\n### select 方式\n\n```go\nfor {\n\tselect {\n    \tcase val,ok:=<-c:\n        \tif !ok{break}\n    }\n}\n```\n\n### Close(ch)含义\n\n给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。\n\n### 注意点\n\n- 从一个 nil channel 中接收数据会一直被 block。\n\n- 从一个被 close 的 channel 中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。\n\n```go\n//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。\n//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)\nx, ok := <-ch\n```\n","slug":"golang/go-通道channel","published":1,"updated":"2020-05-25T04:57:13.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6q001eg938ibqv1txa","content":"<h2 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h2><p>两种配合方式：</p>\n<ul>\n<li>range</li>\n<li>select</li>\n</ul>\n<h3 id=\"range-方式\"><a href=\"#range-方式\" class=\"headerlink\" title=\"range 方式\"></a>range 方式</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//关闭之后会跳出循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> v:=<span class=\"keyword\">range</span> c&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select-方式\"><a href=\"#select-方式\" class=\"headerlink\" title=\"select 方式\"></a>select 方式</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">case</span> val,ok:=&lt;-c:</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> !ok&#123;<span class=\"keyword\">break</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Close-ch-含义\"><a href=\"#Close-ch-含义\" class=\"headerlink\" title=\"Close(ch)含义\"></a>Close(ch)含义</h3><p>给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li><p>从一个 nil channel 中接收数据会一直被 block。</p>\n</li>\n<li><p>从一个被 close 的 channel 中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</span></span><br><span class=\"line\"><span class=\"comment\">//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)</span></span><br><span class=\"line\">x, ok := &lt;-ch</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h2><p>两种配合方式：</p>\n<ul>\n<li>range</li>\n<li>select</li>\n</ul>\n<h3 id=\"range-方式\"><a href=\"#range-方式\" class=\"headerlink\" title=\"range 方式\"></a>range 方式</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//关闭之后会跳出循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> v:=<span class=\"keyword\">range</span> c&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select-方式\"><a href=\"#select-方式\" class=\"headerlink\" title=\"select 方式\"></a>select 方式</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">case</span> val,ok:=&lt;-c:</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> !ok&#123;<span class=\"keyword\">break</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Close-ch-含义\"><a href=\"#Close-ch-含义\" class=\"headerlink\" title=\"Close(ch)含义\"></a>Close(ch)含义</h3><p>给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li><p>从一个 nil channel 中接收数据会一直被 block。</p>\n</li>\n<li><p>从一个被 close 的 channel 中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</span></span><br><span class=\"line\"><span class=\"comment\">//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)</span></span><br><span class=\"line\">x, ok := &lt;-ch</span><br></pre></td></tr></table></figure>\n"},{"title":"golang入门笔记","date":"2017-10-07T13:10:08.000Z","_content":"\n## GO 笔记\n\n### 基本库和概念\n\n```go\n//*T 可以传给值接收，也可以传给指针接收，所以传入尽量*T,接收也尽量用*T呗\n//使用接口：1.定义接口 2.定义类 3.类实现接口\n//a:=[2]byte{'a','1',2}//byte ascii 1 2等这些是显示不出来的，他和'1','2'不一样，后面ascii码：31 32\n\n//传入的所有参数都是interface{}，传出的所有参数也是interface{} 所以出来的时候必须要转为所需要的类型\n```\n\n### 模块 类概念\n\ngo 的包和文件夹名是一样的（跟文件名关系不大）\n\n> java:com.alibaba.dubbo.xxx\n>\n> c++:namespace std\n>\n> go: package 包\n\n### 类\n\n继承、封装、多态\n\n```go\ntype Person struct{\n  Book //==组合继承\n  name string\n  age int\n}\n\n//构造函数-一般自己创建构造函数\nfunc NewPerson(){\n  return &Person{Book{},name:\"jack\",age:19}\n}\n\n//类函数外置\nfunc (p *Person)say(){//小写函数 包内访问==封装\n  p.name=\"jack ma\"//指针(引用)接受者和普通\n}\n\n\n//==多态\ntype Flyable interface {\n\tFly()\n}\n\ntype Duck struct{\n\tFlyable//隐式继承接口\n}\ntype Cat struct {\n\n}\n\nfunc (t *Duck)Fly()  {\n\tfmt.Println(\"duck flying\")\n}\nfunc (t *Cat)Fly()  {//隐式继承接口\n\tfmt.Println(\"cat flying\")\n}\n```\n\n### 嵌入类型\n\n包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\n\n```go\n类型\ntype 类型名字 底层类型\n1.代表类型别名，附带新方法\n2.代表新类型\n\n方法\n包方法-静态方法\n类型方法-实例方法\n```\n\n```go\nfunc main()  {\n\ta:=&A{}\n\tfmt.Println(a,)\n\tfmt.Println(a.Age)\n\tfmt.Println(a.Dd.Birth)//初始化为空对象\n\t//fmt.Println(a.Ee.Gender)//初始化为空指针，拿不到实例的熟悉，所以报错\n\ta.Ee.Efunc() //空指针可以调用方法\n}\ntype A struct{//\n\tB //嵌入B类型所有财产\n\t*C //这里和嵌入C类型区别是，指针类型不能调用其属性\n\tDd D //嵌入D类型的实例，有实例了什么都可以干(嵌入实例和嵌入指针比较多一些)\n\tEe *E //嵌入E类型的指针，有了指针天下无敌(嵌入实例和嵌入指针比较多一些)\n\tName string //本身自带的财产，自己的属性(属性一般是大写，大写导出和c一样私有字段set()get())\n  \tCheckArg func(*context.Context) error //属性的类型的是一个func，可以直接调用a.CheckArg()\n}\ntype B struct{\n\tAge int\n}\ntype C struct{\n\tEmail string\n}\n\nfunc (*C)Cfunc()  {\n\tfmt.Println(\"c func\")\n}\ntype D struct{\n\tBirth string\n}\ntype E struct{\n\tGender bool\n}\n\nfunc (*E)Efunc()  {\n\tfmt.Println(\"e func\")\n}\n```\n\n### 可变参数\n\n...interface{}，传入的当做[]interface{}切片\n\n```go\nfunc Println(vals ...interface{}){\n  fmt.Println(vals)\n}\n类似：\nfunc Println(vals []interface{}){}\n```\n\n### http.Request 请求\n\n服务端需要 Request,和 Response 往里面写数据\n\n包括：\n\n1.第一行\n\n2.请求头\n\n3.请求体（一般 post 才有）\n\n```go\nresp:=DefaultTransport.send(req)//创建一个连接，然后通过这条连接发送req数据，服务端通过这条连接读取req然后构建resp，（也通过resp可以拿到连接的标识，去某个地方获取到这条连接），然后通过连接把resp发送回去\n```\n\n### http.Response 响应\n\n客户端需要 Response 从里面读数据，读完了就关闭\n\n包括：\n\n1.第一行数据\n\n2.返回头\n\n3.返回 body\n\n4.请求实例 http.Request\n\n可拿到底层连接 net.Conn(可读可写)\n\n### 读写锁\n\n```go\nfunc (rw *RWMutex) Lock()　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则lock就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 Lock 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定\nfunc (rw *RWMutex) Unlock()　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误\n\nfunc (rw *RWMutex) RLock() 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景\n\nfunc (rw *RWMutex)RUnlock()　读锁解锁，RUnlock 撤销单次RLock 调用，它对于其它同时存在的读取器则没有效果。若 rw 并没有为读取而锁定，调用 RUnlock 就会引发一个运行时错误(注：这种说法在go1.3版本中是不对的，例如下面这个例子)。\n```\n\n### context\n\n三种 ctx\n\n```go\ntimerCtx:超时的ctx，超过某个时间就close(chan)\ncancelCtx:可取消的ctx，使用close(chan)\nvalueCtx:保存键值的ctx\n```\n\n### 并发、channel、select、sync\n\n超时控制\n\n```go\ntaskdone:=make(chan struct{},1)\n//1.任务异步做，做完发一个taskdone消息\ngo func() {\n  //dosomething\n  time.Sleep(time.Second)\n  taskdone<- struct {}{}\n}()\n//2.等待taskdone 或者等待超时\nselect {\ncase <-taskdone:\n\tfmt.Println(\"task done\")\ncase <-time.After(time.Millisecond*5000):\n\tfmt.Println(\"task timeout\")\n}\n```\n\n### scanf 扫描\n\n一行一行读取数据嘛，或者一个个字符的读取\n\n读完之后就丢弃掉数据\n\n```go\nbuf:=bytes.NewBuffer(sli)//buffer读完之后就丢弃掉数据\ndata0,_,_:=buf.ReadRune()\nfmt.Println(string(data0),buf.String())\n```\n\n### go time\n\n```go\n转为ts:t.unix()\n转为str:t.Format(layout,val)\n转为Time:time.parse(str,layout)\n```\n\n### json,xml,gob\n\n```go\nvar network bytes.Buffer\nenc:=gob.NewEncoder(&network)//编码到什么地方去\nenc.Encode(map[string]string{\"k1\": \"v1\"})//编码什么东西\nfmt.Println(network.Bytes())\n\ndec:=gob.NewDecoder(&network)//从什么地方解码\nvar m map[string]string\ndec.Decode(&m)//解码到哪里\nfmt.Println(m)\n```\n\n### 字符串拼接\n\n```go\na+=\"hello\"\nvar b bytes.Buffer\nfor condition {\n    b.WriteString(str) // 将字符串str写入缓存buffer\n}\n    return b.String()\n```\n\n### 指针\n\n**永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。**\n\n```go\nwrite(w io.Writer)//没有w *io.Writer这种\n```\n\n### 包管理\n\n```go\n自己clone\nmkdir -p github.com/user\ngit clone repo\ncd github.com/user/repo\ngo build xxx//缺啥去下载啥\n```\n\n```go\ngolang.org/x/net ，其实镜像托管在在 github.com/golang/net\n你可以用 go get github.com/golang/net 之后，到 GOPATH/src 中\nmv github.com/golang/net golang.org/x/net\n\ngolang.org/x/text\ngo get github.com/golang/text\nmv github.com/golang/text golang.org/x/text\n```\n\n```go\nmkdir -p $GOPATH/src/golang.org/x/\ncd !$\ngit clone https://github.com/golang/net.git\ngit clone https://github.com/golang/sys.git\ngit clone https://github.com/golang/tools.git\n```\n\n### http 参数解析\n\n```go\nr.ParseForm()\nuid :=r.Form.Get(\"uid\")//get post/form-data\nfmt.Println(uid)\nbody,_:=ioutil.ReadAll(r.Body)//json post\nfmt.Println(string(body))\n```\n\n### error 错误处理\n\n```go\n//1.最普通\nif err!=nil{\n  return result,err\n}\n//2.recover() panic()\ndefer func(){\n  if err:=recover();err!=nil{\n    //dosomething()\n  }\n}\npanic()\n\n//有些错误可以处理，有些选择处理\n\n```\n\n### 默认值和 nil\n\n```go\nbool      -> false\nnumbers -> 0\nstring    -> \"\"\n\npointers -> nil\nslices -> nil\nmaps -> nil\nchannels -> nil\nfunctions -> nil\ninterfaces -> nil\n\n//可以使用len(slice)==0\n```\n\n### TCP 和 UDP\n\n```go\n//tcp\nfunc ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error)\nfunc ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.Error)\nfunc DialTCP(net string, laddr, raddr *TCPAddr) (c *TCPConn, err os.Error)\nfunc (l *TCPListener) Accept() (c Conn, err os.Error)\nfunc (c *TCPConn) Write(b []byte) (n int, err os.Error)\nfunc (c *TCPConn) Read(b []byte) (n int, err os.Error)\n\n//udp\nfunc ResolveUDPAddr(net, addr string) (*UDPAddr, os.Error)\nfunc DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err os.Error)\nfunc ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err os.Error)\nfunc (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err os.Error\nfunc (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err os.Error)\n\n//通用Conn, PacketConn and Listener\nnet.Dial(\"tcp\",addr)\n```\n\n```go\nfunc main() {\n  encoder := json.NewEncoder(conn)\n  decoder := json.NewDecoder(conn)\n  for n := 0; n < 10; n++ {\n    encoder.Encode(person)//类似于write\n    var newPerson Person\n    decoder.Decode(&newPerson)//类似于read\n    fmt.Println(newPerson.String())\n  }\n}\n```\n\n```go\n/**\n* Base64\n*/\npackage main\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"fmt\"\n)\nfunc main() {\n\teightBitData := []byte{1, 2, 3, 4, 5, 6, 7, 8}\n\tbb := &bytes.Buffer{}\n\tencoder := base64.NewEncoder(base64.StdEncoding, bb)//转为base64字符串\n\tencoder.Write(eightBitData)\n\tencoder.Close()\n\tfmt.Println(bb)\n\tdbuf := make([]byte, 12)\n\tdecoder := base64.NewDecoder(base64.StdEncoding, bb)\n\tdecoder.Read(dbuf)\n\tfor _, ch := range dbuf {\n\t\tfmt.Print(ch)\n\t}\n}\n```\n\n### 细节点\n\n```go\nselect{}//阻塞\n\n```\n\n```go\nSERVE_HTTP=\":3030\" go run 43.go\naddress = os.Getenv(\"SERVE_HTTP\")//直接从上面拿\n```\n\n默认类型\n\n```go\nnil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值\n```\n\ngo 修改值全部用指针\n\n切片，map 先 make，再取地址比较好\n\n问题代码\n\n```go\n//下面是一个坑\n//for _, v := range *userInfos {\n//\tuserInfoTempMap[v.User.ID] = &v\n//}\n\n```\n\n```go\nfunc fillUserInfo(queryUids *[]int64, userInfoTempMap map[int64]*model.RUserInfo, selfU int64) {\n\tif queryUids == nil || len(*queryUids) == 0 {\n\t\treturn\n\t}\n\t//获取用户信息\n\tuserInfos, err := manager.MGetUserInfo(queryUids, selfU)\n\tif err != nil || userInfos == nil {\n\t\tlog.Errorf(\"get user info error:|%#v|\", err)\n\t\treturn\n\t}\n\t//创建临时map给后面直接使用\n\tfor i:=0;i<len(*userInfos);i++{\n\t\tuserInfoTempMap[(*userInfos)[i].User.ID] = &(*userInfos)[i]\n\t}\n\tfor _, v := range *userInfos {\n\t\tuserInfoTempMap[v.User.ID] = &v\n\t}\n\tfmt.Println(userInfoTempMap)\n}\n```\n\n## 需要掌握的点\n\n- http 请求\n- http 服务\n- json 解析\n- 日志\n- mysql 库\n- redis 库\n- list 和 map 使用\n- goroutine 使用\n- 网络框架使用\n","source":"_posts/golang/golang入门笔记.md","raw":"---\ntitle: golang入门笔记\ntags:\n  - go\ncategories:\n  - go\ndate: 2017-10-07 21:10:08\n---\n\n## GO 笔记\n\n### 基本库和概念\n\n```go\n//*T 可以传给值接收，也可以传给指针接收，所以传入尽量*T,接收也尽量用*T呗\n//使用接口：1.定义接口 2.定义类 3.类实现接口\n//a:=[2]byte{'a','1',2}//byte ascii 1 2等这些是显示不出来的，他和'1','2'不一样，后面ascii码：31 32\n\n//传入的所有参数都是interface{}，传出的所有参数也是interface{} 所以出来的时候必须要转为所需要的类型\n```\n\n### 模块 类概念\n\ngo 的包和文件夹名是一样的（跟文件名关系不大）\n\n> java:com.alibaba.dubbo.xxx\n>\n> c++:namespace std\n>\n> go: package 包\n\n### 类\n\n继承、封装、多态\n\n```go\ntype Person struct{\n  Book //==组合继承\n  name string\n  age int\n}\n\n//构造函数-一般自己创建构造函数\nfunc NewPerson(){\n  return &Person{Book{},name:\"jack\",age:19}\n}\n\n//类函数外置\nfunc (p *Person)say(){//小写函数 包内访问==封装\n  p.name=\"jack ma\"//指针(引用)接受者和普通\n}\n\n\n//==多态\ntype Flyable interface {\n\tFly()\n}\n\ntype Duck struct{\n\tFlyable//隐式继承接口\n}\ntype Cat struct {\n\n}\n\nfunc (t *Duck)Fly()  {\n\tfmt.Println(\"duck flying\")\n}\nfunc (t *Cat)Fly()  {//隐式继承接口\n\tfmt.Println(\"cat flying\")\n}\n```\n\n### 嵌入类型\n\n包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\n\n```go\n类型\ntype 类型名字 底层类型\n1.代表类型别名，附带新方法\n2.代表新类型\n\n方法\n包方法-静态方法\n类型方法-实例方法\n```\n\n```go\nfunc main()  {\n\ta:=&A{}\n\tfmt.Println(a,)\n\tfmt.Println(a.Age)\n\tfmt.Println(a.Dd.Birth)//初始化为空对象\n\t//fmt.Println(a.Ee.Gender)//初始化为空指针，拿不到实例的熟悉，所以报错\n\ta.Ee.Efunc() //空指针可以调用方法\n}\ntype A struct{//\n\tB //嵌入B类型所有财产\n\t*C //这里和嵌入C类型区别是，指针类型不能调用其属性\n\tDd D //嵌入D类型的实例，有实例了什么都可以干(嵌入实例和嵌入指针比较多一些)\n\tEe *E //嵌入E类型的指针，有了指针天下无敌(嵌入实例和嵌入指针比较多一些)\n\tName string //本身自带的财产，自己的属性(属性一般是大写，大写导出和c一样私有字段set()get())\n  \tCheckArg func(*context.Context) error //属性的类型的是一个func，可以直接调用a.CheckArg()\n}\ntype B struct{\n\tAge int\n}\ntype C struct{\n\tEmail string\n}\n\nfunc (*C)Cfunc()  {\n\tfmt.Println(\"c func\")\n}\ntype D struct{\n\tBirth string\n}\ntype E struct{\n\tGender bool\n}\n\nfunc (*E)Efunc()  {\n\tfmt.Println(\"e func\")\n}\n```\n\n### 可变参数\n\n...interface{}，传入的当做[]interface{}切片\n\n```go\nfunc Println(vals ...interface{}){\n  fmt.Println(vals)\n}\n类似：\nfunc Println(vals []interface{}){}\n```\n\n### http.Request 请求\n\n服务端需要 Request,和 Response 往里面写数据\n\n包括：\n\n1.第一行\n\n2.请求头\n\n3.请求体（一般 post 才有）\n\n```go\nresp:=DefaultTransport.send(req)//创建一个连接，然后通过这条连接发送req数据，服务端通过这条连接读取req然后构建resp，（也通过resp可以拿到连接的标识，去某个地方获取到这条连接），然后通过连接把resp发送回去\n```\n\n### http.Response 响应\n\n客户端需要 Response 从里面读数据，读完了就关闭\n\n包括：\n\n1.第一行数据\n\n2.返回头\n\n3.返回 body\n\n4.请求实例 http.Request\n\n可拿到底层连接 net.Conn(可读可写)\n\n### 读写锁\n\n```go\nfunc (rw *RWMutex) Lock()　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则lock就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 Lock 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定\nfunc (rw *RWMutex) Unlock()　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误\n\nfunc (rw *RWMutex) RLock() 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景\n\nfunc (rw *RWMutex)RUnlock()　读锁解锁，RUnlock 撤销单次RLock 调用，它对于其它同时存在的读取器则没有效果。若 rw 并没有为读取而锁定，调用 RUnlock 就会引发一个运行时错误(注：这种说法在go1.3版本中是不对的，例如下面这个例子)。\n```\n\n### context\n\n三种 ctx\n\n```go\ntimerCtx:超时的ctx，超过某个时间就close(chan)\ncancelCtx:可取消的ctx，使用close(chan)\nvalueCtx:保存键值的ctx\n```\n\n### 并发、channel、select、sync\n\n超时控制\n\n```go\ntaskdone:=make(chan struct{},1)\n//1.任务异步做，做完发一个taskdone消息\ngo func() {\n  //dosomething\n  time.Sleep(time.Second)\n  taskdone<- struct {}{}\n}()\n//2.等待taskdone 或者等待超时\nselect {\ncase <-taskdone:\n\tfmt.Println(\"task done\")\ncase <-time.After(time.Millisecond*5000):\n\tfmt.Println(\"task timeout\")\n}\n```\n\n### scanf 扫描\n\n一行一行读取数据嘛，或者一个个字符的读取\n\n读完之后就丢弃掉数据\n\n```go\nbuf:=bytes.NewBuffer(sli)//buffer读完之后就丢弃掉数据\ndata0,_,_:=buf.ReadRune()\nfmt.Println(string(data0),buf.String())\n```\n\n### go time\n\n```go\n转为ts:t.unix()\n转为str:t.Format(layout,val)\n转为Time:time.parse(str,layout)\n```\n\n### json,xml,gob\n\n```go\nvar network bytes.Buffer\nenc:=gob.NewEncoder(&network)//编码到什么地方去\nenc.Encode(map[string]string{\"k1\": \"v1\"})//编码什么东西\nfmt.Println(network.Bytes())\n\ndec:=gob.NewDecoder(&network)//从什么地方解码\nvar m map[string]string\ndec.Decode(&m)//解码到哪里\nfmt.Println(m)\n```\n\n### 字符串拼接\n\n```go\na+=\"hello\"\nvar b bytes.Buffer\nfor condition {\n    b.WriteString(str) // 将字符串str写入缓存buffer\n}\n    return b.String()\n```\n\n### 指针\n\n**永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。**\n\n```go\nwrite(w io.Writer)//没有w *io.Writer这种\n```\n\n### 包管理\n\n```go\n自己clone\nmkdir -p github.com/user\ngit clone repo\ncd github.com/user/repo\ngo build xxx//缺啥去下载啥\n```\n\n```go\ngolang.org/x/net ，其实镜像托管在在 github.com/golang/net\n你可以用 go get github.com/golang/net 之后，到 GOPATH/src 中\nmv github.com/golang/net golang.org/x/net\n\ngolang.org/x/text\ngo get github.com/golang/text\nmv github.com/golang/text golang.org/x/text\n```\n\n```go\nmkdir -p $GOPATH/src/golang.org/x/\ncd !$\ngit clone https://github.com/golang/net.git\ngit clone https://github.com/golang/sys.git\ngit clone https://github.com/golang/tools.git\n```\n\n### http 参数解析\n\n```go\nr.ParseForm()\nuid :=r.Form.Get(\"uid\")//get post/form-data\nfmt.Println(uid)\nbody,_:=ioutil.ReadAll(r.Body)//json post\nfmt.Println(string(body))\n```\n\n### error 错误处理\n\n```go\n//1.最普通\nif err!=nil{\n  return result,err\n}\n//2.recover() panic()\ndefer func(){\n  if err:=recover();err!=nil{\n    //dosomething()\n  }\n}\npanic()\n\n//有些错误可以处理，有些选择处理\n\n```\n\n### 默认值和 nil\n\n```go\nbool      -> false\nnumbers -> 0\nstring    -> \"\"\n\npointers -> nil\nslices -> nil\nmaps -> nil\nchannels -> nil\nfunctions -> nil\ninterfaces -> nil\n\n//可以使用len(slice)==0\n```\n\n### TCP 和 UDP\n\n```go\n//tcp\nfunc ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error)\nfunc ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.Error)\nfunc DialTCP(net string, laddr, raddr *TCPAddr) (c *TCPConn, err os.Error)\nfunc (l *TCPListener) Accept() (c Conn, err os.Error)\nfunc (c *TCPConn) Write(b []byte) (n int, err os.Error)\nfunc (c *TCPConn) Read(b []byte) (n int, err os.Error)\n\n//udp\nfunc ResolveUDPAddr(net, addr string) (*UDPAddr, os.Error)\nfunc DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err os.Error)\nfunc ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err os.Error)\nfunc (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err os.Error\nfunc (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err os.Error)\n\n//通用Conn, PacketConn and Listener\nnet.Dial(\"tcp\",addr)\n```\n\n```go\nfunc main() {\n  encoder := json.NewEncoder(conn)\n  decoder := json.NewDecoder(conn)\n  for n := 0; n < 10; n++ {\n    encoder.Encode(person)//类似于write\n    var newPerson Person\n    decoder.Decode(&newPerson)//类似于read\n    fmt.Println(newPerson.String())\n  }\n}\n```\n\n```go\n/**\n* Base64\n*/\npackage main\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"fmt\"\n)\nfunc main() {\n\teightBitData := []byte{1, 2, 3, 4, 5, 6, 7, 8}\n\tbb := &bytes.Buffer{}\n\tencoder := base64.NewEncoder(base64.StdEncoding, bb)//转为base64字符串\n\tencoder.Write(eightBitData)\n\tencoder.Close()\n\tfmt.Println(bb)\n\tdbuf := make([]byte, 12)\n\tdecoder := base64.NewDecoder(base64.StdEncoding, bb)\n\tdecoder.Read(dbuf)\n\tfor _, ch := range dbuf {\n\t\tfmt.Print(ch)\n\t}\n}\n```\n\n### 细节点\n\n```go\nselect{}//阻塞\n\n```\n\n```go\nSERVE_HTTP=\":3030\" go run 43.go\naddress = os.Getenv(\"SERVE_HTTP\")//直接从上面拿\n```\n\n默认类型\n\n```go\nnil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值\n```\n\ngo 修改值全部用指针\n\n切片，map 先 make，再取地址比较好\n\n问题代码\n\n```go\n//下面是一个坑\n//for _, v := range *userInfos {\n//\tuserInfoTempMap[v.User.ID] = &v\n//}\n\n```\n\n```go\nfunc fillUserInfo(queryUids *[]int64, userInfoTempMap map[int64]*model.RUserInfo, selfU int64) {\n\tif queryUids == nil || len(*queryUids) == 0 {\n\t\treturn\n\t}\n\t//获取用户信息\n\tuserInfos, err := manager.MGetUserInfo(queryUids, selfU)\n\tif err != nil || userInfos == nil {\n\t\tlog.Errorf(\"get user info error:|%#v|\", err)\n\t\treturn\n\t}\n\t//创建临时map给后面直接使用\n\tfor i:=0;i<len(*userInfos);i++{\n\t\tuserInfoTempMap[(*userInfos)[i].User.ID] = &(*userInfos)[i]\n\t}\n\tfor _, v := range *userInfos {\n\t\tuserInfoTempMap[v.User.ID] = &v\n\t}\n\tfmt.Println(userInfoTempMap)\n}\n```\n\n## 需要掌握的点\n\n- http 请求\n- http 服务\n- json 解析\n- 日志\n- mysql 库\n- redis 库\n- list 和 map 使用\n- goroutine 使用\n- 网络框架使用\n","slug":"golang/golang入门笔记","published":1,"updated":"2020-05-25T05:34:49.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6s001gg938enwdg5al","content":"<h2 id=\"GO-笔记\"><a href=\"#GO-笔记\" class=\"headerlink\" title=\"GO 笔记\"></a>GO 笔记</h2><h3 id=\"基本库和概念\"><a href=\"#基本库和概念\" class=\"headerlink\" title=\"基本库和概念\"></a>基本库和概念</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//*T 可以传给值接收，也可以传给指针接收，所以传入尽量*T,接收也尽量用*T呗</span></span><br><span class=\"line\"><span class=\"comment\">//使用接口：1.定义接口 2.定义类 3.类实现接口</span></span><br><span class=\"line\"><span class=\"comment\">//a:=[2]byte&#123;'a','1',2&#125;//byte ascii 1 2等这些是显示不出来的，他和'1','2'不一样，后面ascii码：31 32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//传入的所有参数都是interface&#123;&#125;，传出的所有参数也是interface&#123;&#125; 所以出来的时候必须要转为所需要的类型</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块-类概念\"><a href=\"#模块-类概念\" class=\"headerlink\" title=\"模块 类概念\"></a>模块 类概念</h3><p>go 的包和文件夹名是一样的（跟文件名关系不大）</p>\n<blockquote>\n<p>java:com.alibaba.dubbo.xxx</p>\n<p>c++:namespace std</p>\n<p>go: package 包</p>\n</blockquote>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>继承、封装、多态</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Book <span class=\"comment\">//==组合继承</span></span><br><span class=\"line\">  name <span class=\"keyword\">string</span></span><br><span class=\"line\">  age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造函数-一般自己创建构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPerson</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Person&#123;Book&#123;&#125;,name:<span class=\"string\">\"jack\"</span>,age:<span class=\"number\">19</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类函数外置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span><span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//小写函数 包内访问==封装</span></span><br><span class=\"line\">  p.name=<span class=\"string\">\"jack ma\"</span><span class=\"comment\">//指针(引用)接受者和普通</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==多态</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Flyable <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tFly()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Duck <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tFlyable<span class=\"comment\">//隐式继承接口</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Duck)</span><span class=\"title\">Fly</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"duck flying\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Cat)</span><span class=\"title\">Fly</span><span class=\"params\">()</span></span>  &#123;<span class=\"comment\">//隐式继承接口</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"cat flying\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入类型\"><a href=\"#嵌入类型\" class=\"headerlink\" title=\"嵌入类型\"></a>嵌入类型</h3><p>包含嵌入类型所有的财产（你是我的，你所有东西都是我的）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型</span><br><span class=\"line\"><span class=\"keyword\">type</span> 类型名字 底层类型</span><br><span class=\"line\"><span class=\"number\">1.</span>代表类型别名，附带新方法</span><br><span class=\"line\"><span class=\"number\">2.</span>代表新类型</span><br><span class=\"line\"></span><br><span class=\"line\">方法</span><br><span class=\"line\">包方法-静态方法</span><br><span class=\"line\">类型方法-实例方法</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\ta:=&amp;A&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(a,)</span><br><span class=\"line\">\tfmt.Println(a.Age)</span><br><span class=\"line\">\tfmt.Println(a.Dd.Birth)<span class=\"comment\">//初始化为空对象</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(a.Ee.Gender)//初始化为空指针，拿不到实例的熟悉，所以报错</span></span><br><span class=\"line\">\ta.Ee.Efunc() <span class=\"comment\">//空指针可以调用方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A <span class=\"keyword\">struct</span>&#123;<span class=\"comment\">//</span></span><br><span class=\"line\">\tB <span class=\"comment\">//嵌入B类型所有财产</span></span><br><span class=\"line\">\t*C <span class=\"comment\">//这里和嵌入C类型区别是，指针类型不能调用其属性</span></span><br><span class=\"line\">\tDd D <span class=\"comment\">//嵌入D类型的实例，有实例了什么都可以干(嵌入实例和嵌入指针比较多一些)</span></span><br><span class=\"line\">\tEe *E <span class=\"comment\">//嵌入E类型的指针，有了指针天下无敌(嵌入实例和嵌入指针比较多一些)</span></span><br><span class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"comment\">//本身自带的财产，自己的属性(属性一般是大写，大写导出和c一样私有字段set()get())</span></span><br><span class=\"line\">  \tCheckArg <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*context.Context)</span> <span class=\"title\">error</span> //属性的类型的是一个<span class=\"title\">func</span>，可以直接调用<span class=\"title\">a</span>.<span class=\"title\">CheckArg</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">B</span> <span class=\"title\">struct</span></span>&#123;</span><br><span class=\"line\">\tAge <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> C <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tEmail <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*C)</span><span class=\"title\">Cfunc</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"c func\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> D <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tBirth <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> E <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tGender <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*E)</span><span class=\"title\">Efunc</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"e func\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>…interface{}，传入的当做[]interface{}切片</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Println</span><span class=\"params\">(vals ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">  fmt.Println(vals)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">类似：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Println</span><span class=\"params\">(vals []<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"http-Request-请求\"><a href=\"#http-Request-请求\" class=\"headerlink\" title=\"http.Request 请求\"></a>http.Request 请求</h3><p>服务端需要 Request,和 Response 往里面写数据</p>\n<p>包括：</p>\n<p>1.第一行</p>\n<p>2.请求头</p>\n<p>3.请求体（一般 post 才有）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp:=DefaultTransport.send(req)<span class=\"comment\">//创建一个连接，然后通过这条连接发送req数据，服务端通过这条连接读取req然后构建resp，（也通过resp可以拿到连接的标识，去某个地方获取到这条连接），然后通过连接把resp发送回去</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"http-Response-响应\"><a href=\"#http-Response-响应\" class=\"headerlink\" title=\"http.Response 响应\"></a>http.Response 响应</h3><p>客户端需要 Response 从里面读数据，读完了就关闭</p>\n<p>包括：</p>\n<p>1.第一行数据</p>\n<p>2.返回头</p>\n<p>3.返回 body</p>\n<p>4.请求实例 http.Request</p>\n<p>可拿到底层连接 net.Conn(可读可写)</p>\n<h3 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span>　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则<span class=\"title\">lock</span>就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 <span class=\"title\">Lock</span> 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span>　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">RLock</span><span class=\"params\">()</span> 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span><span class=\"title\">RUnlock</span><span class=\"params\">()</span>　读锁解锁，<span class=\"title\">RUnlock</span> 撤销单次<span class=\"title\">RLock</span> 调用，它对于其它同时存在的读取器则没有效果。若 <span class=\"title\">rw</span> 并没有为读取而锁定，调用 <span class=\"title\">RUnlock</span> 就会引发一个运行时错误<span class=\"params\">(注：这种说法在go1.3版本中是不对的，例如下面这个例子)</span>。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h3><p>三种 ctx</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timerCtx:超时的ctx，超过某个时间就<span class=\"built_in\">close</span>(<span class=\"keyword\">chan</span>)</span><br><span class=\"line\">cancelCtx:可取消的ctx，使用<span class=\"built_in\">close</span>(<span class=\"keyword\">chan</span>)</span><br><span class=\"line\">valueCtx:保存键值的ctx</span><br></pre></td></tr></table></figure>\n<h3 id=\"并发、channel、select、sync\"><a href=\"#并发、channel、select、sync\" class=\"headerlink\" title=\"并发、channel、select、sync\"></a>并发、channel、select、sync</h3><p>超时控制</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskdone:=<span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//1.任务异步做，做完发一个taskdone消息</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//dosomething</span></span><br><span class=\"line\">  time.Sleep(time.Second)</span><br><span class=\"line\">  taskdone&lt;- <span class=\"keyword\">struct</span> &#123;&#125;&#123;&#125;</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//2.等待taskdone 或者等待超时</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-taskdone:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"task done\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-time.After(time.Millisecond*<span class=\"number\">5000</span>):</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"task timeout\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"scanf-扫描\"><a href=\"#scanf-扫描\" class=\"headerlink\" title=\"scanf 扫描\"></a>scanf 扫描</h3><p>一行一行读取数据嘛，或者一个个字符的读取</p>\n<p>读完之后就丢弃掉数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf:=bytes.NewBuffer(sli)<span class=\"comment\">//buffer读完之后就丢弃掉数据</span></span><br><span class=\"line\">data0,_,_:=buf.ReadRune()</span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(data0),buf.String())</span><br></pre></td></tr></table></figure>\n<h3 id=\"go-time\"><a href=\"#go-time\" class=\"headerlink\" title=\"go time\"></a>go time</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转为ts:t.unix()</span><br><span class=\"line\">转为str:t.Format(layout,val)</span><br><span class=\"line\">转为Time:time.parse(str,layout)</span><br></pre></td></tr></table></figure>\n<h3 id=\"json-xml-gob\"><a href=\"#json-xml-gob\" class=\"headerlink\" title=\"json,xml,gob\"></a>json,xml,gob</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> network bytes.Buffer</span><br><span class=\"line\">enc:=gob.NewEncoder(&amp;network)<span class=\"comment\">//编码到什么地方去</span></span><br><span class=\"line\">enc.Encode(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"k1\"</span>: <span class=\"string\">\"v1\"</span>&#125;)<span class=\"comment\">//编码什么东西</span></span><br><span class=\"line\">fmt.Println(network.Bytes())</span><br><span class=\"line\"></span><br><span class=\"line\">dec:=gob.NewDecoder(&amp;network)<span class=\"comment\">//从什么地方解码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\">dec.Decode(&amp;m)<span class=\"comment\">//解码到哪里</span></span><br><span class=\"line\">fmt.Println(m)</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a+=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b bytes.Buffer</span><br><span class=\"line\"><span class=\"keyword\">for</span> condition &#123;</span><br><span class=\"line\">    b.WriteString(str) <span class=\"comment\">// 将字符串str写入缓存buffer</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.String()</span><br></pre></td></tr></table></figure>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p><strong>永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">write(w io.Writer)<span class=\"comment\">//没有w *io.Writer这种</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自己clone</span><br><span class=\"line\">mkdir -p github.com/user</span><br><span class=\"line\">git clone repo</span><br><span class=\"line\">cd github.com/user/repo</span><br><span class=\"line\"><span class=\"keyword\">go</span> build xxx<span class=\"comment\">//缺啥去下载啥</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">golang.org/x/net ，其实镜像托管在在 github.com/golang/net</span><br><span class=\"line\">你可以用 <span class=\"keyword\">go</span> get github.com/golang/net 之后，到 GOPATH/src 中</span><br><span class=\"line\">mv github.com/golang/net golang.org/x/net</span><br><span class=\"line\"></span><br><span class=\"line\">golang.org/x/text</span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/golang/text</span><br><span class=\"line\">mv github.com/golang/text golang.org/x/text</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $GOPATH/src/golang.org/x/</span><br><span class=\"line\">cd !$</span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/golang/net.git</span></span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/golang/sys.git</span></span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/golang/tools.git</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"http-参数解析\"><a href=\"#http-参数解析\" class=\"headerlink\" title=\"http 参数解析\"></a>http 参数解析</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.ParseForm()</span><br><span class=\"line\">uid :=r.Form.Get(<span class=\"string\">\"uid\"</span>)<span class=\"comment\">//get post/form-data</span></span><br><span class=\"line\">fmt.Println(uid)</span><br><span class=\"line\">body,_:=ioutil.ReadAll(r.Body)<span class=\"comment\">//json post</span></span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(body))</span><br></pre></td></tr></table></figure>\n<h3 id=\"error-错误处理\"><a href=\"#error-错误处理\" class=\"headerlink\" title=\"error 错误处理\"></a>error 错误处理</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.最普通</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err!=<span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2.recover() panic()</span></span><br><span class=\"line\"><span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!=<span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//dosomething()</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">panic</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//有些错误可以处理，有些选择处理</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"默认值和-nil\"><a href=\"#默认值和-nil\" class=\"headerlink\" title=\"默认值和 nil\"></a>默认值和 nil</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span>      -&gt; <span class=\"literal\">false</span></span><br><span class=\"line\">numbers -&gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">string</span>    -&gt; <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">pointers -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">slices -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">maps -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">channels -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">functions -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">interfaces -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以使用len(slice)==0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"TCP-和-UDP\"><a href=\"#TCP-和-UDP\" class=\"headerlink\" title=\"TCP 和 UDP\"></a>TCP 和 UDP</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//tcp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ResolveTCPAddr</span><span class=\"params\">(net, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(*TCPAddr, os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">ListenTCP</span><span class=\"params\">(net <span class=\"keyword\">string</span>, laddr *TCPAddr)</span> <span class=\"params\">(l *TCPListener, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">DialTCP</span><span class=\"params\">(net <span class=\"keyword\">string</span>, laddr, raddr *TCPAddr)</span> <span class=\"params\">(c *TCPConn, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(l *TCPListener)</span> <span class=\"title\">Accept</span><span class=\"params\">()</span> <span class=\"params\">(c Conn, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *TCPConn)</span> <span class=\"title\">Write</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *TCPConn)</span> <span class=\"title\">Read</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">udp</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">ResolveUDPAddr</span><span class=\"params\">(net, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(*UDPAddr, os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">DialUDP</span><span class=\"params\">(net <span class=\"keyword\">string</span>, laddr, raddr *UDPAddr)</span> <span class=\"params\">(c *UDPConn, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">ListenUDP</span><span class=\"params\">(net <span class=\"keyword\">string</span>, laddr *UDPAddr)</span> <span class=\"params\">(c *UDPConn, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *UDPConn)</span> <span class=\"title\">ReadFromUDP</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, addr *UDPAddr, err os.Error</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"keyword\">func</span> (c *UDPConn)</span> <span class=\"title\">WriteToUDP</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>, addr *UDPAddr)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">//通用<span class=\"title\">Conn</span>, <span class=\"title\">PacketConn</span> <span class=\"title\">and</span> <span class=\"title\">Listener</span></span></span><br><span class=\"line\">net.Dial(\"tcp\",addr)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  encoder := json.NewEncoder(conn)</span><br><span class=\"line\">  decoder := json.NewDecoder(conn)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; <span class=\"number\">10</span>; n++ &#123;</span><br><span class=\"line\">    encoder.Encode(person)<span class=\"comment\">//类似于write</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPerson Person</span><br><span class=\"line\">    decoder.Decode(&amp;newPerson)<span class=\"comment\">//类似于read</span></span><br><span class=\"line\">    fmt.Println(newPerson.String())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Base64</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/base64\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\teightBitData := []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">\tbb := &amp;bytes.Buffer&#123;&#125;</span><br><span class=\"line\">\tencoder := base64.NewEncoder(base64.StdEncoding, bb)<span class=\"comment\">//转为base64字符串</span></span><br><span class=\"line\">\tencoder.Write(eightBitData)</span><br><span class=\"line\">\tencoder.Close()</span><br><span class=\"line\">\tfmt.Println(bb)</span><br><span class=\"line\">\tdbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">\tdecoder := base64.NewDecoder(base64.StdEncoding, bb)</span><br><span class=\"line\">\tdecoder.Read(dbuf)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, ch := <span class=\"keyword\">range</span> dbuf &#123;</span><br><span class=\"line\">\t\tfmt.Print(ch)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"细节点\"><a href=\"#细节点\" class=\"headerlink\" title=\"细节点\"></a>细节点</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>&#123;&#125;<span class=\"comment\">//阻塞</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SERVE_HTTP=<span class=\"string\">\":3030\"</span> <span class=\"keyword\">go</span> run <span class=\"number\">43.</span><span class=\"keyword\">go</span></span><br><span class=\"line\">address = os.Getenv(<span class=\"string\">\"SERVE_HTTP\"</span>)<span class=\"comment\">//直接从上面拿</span></span><br></pre></td></tr></table></figure>\n<p>默认类型</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">nil</span> 是 <span class=\"keyword\">interface</span>、function、pointer、<span class=\"keyword\">map</span>、slice 和 channel 类型变量的默认初始值</span><br></pre></td></tr></table></figure>\n<p>go 修改值全部用指针</p>\n<p>切片，map 先 make，再取地址比较好</p>\n<p>问题代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下面是一个坑</span></span><br><span class=\"line\"><span class=\"comment\">//for _, v := range *userInfos &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tuserInfoTempMap[v.User.ID] = &amp;v</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fillUserInfo</span><span class=\"params\">(queryUids *[]<span class=\"keyword\">int64</span>, userInfoTempMap <span class=\"keyword\">map</span>[<span class=\"keyword\">int64</span>]*model.RUserInfo, selfU <span class=\"keyword\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> queryUids == <span class=\"literal\">nil</span> || <span class=\"built_in\">len</span>(*queryUids) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取用户信息</span></span><br><span class=\"line\">\tuserInfos, err := manager.MGetUserInfo(queryUids, selfU)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> || userInfos == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Errorf(<span class=\"string\">\"get user info error:|%#v|\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建临时map给后面直接使用</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(*userInfos);i++&#123;</span><br><span class=\"line\">\t\tuserInfoTempMap[(*userInfos)[i].User.ID] = &amp;(*userInfos)[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> *userInfos &#123;</span><br><span class=\"line\">\t\tuserInfoTempMap[v.User.ID] = &amp;v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(userInfoTempMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"需要掌握的点\"><a href=\"#需要掌握的点\" class=\"headerlink\" title=\"需要掌握的点\"></a>需要掌握的点</h2><ul>\n<li>http 请求</li>\n<li>http 服务</li>\n<li>json 解析</li>\n<li>日志</li>\n<li>mysql 库</li>\n<li>redis 库</li>\n<li>list 和 map 使用</li>\n<li>goroutine 使用</li>\n<li>网络框架使用</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GO-笔记\"><a href=\"#GO-笔记\" class=\"headerlink\" title=\"GO 笔记\"></a>GO 笔记</h2><h3 id=\"基本库和概念\"><a href=\"#基本库和概念\" class=\"headerlink\" title=\"基本库和概念\"></a>基本库和概念</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//*T 可以传给值接收，也可以传给指针接收，所以传入尽量*T,接收也尽量用*T呗</span></span><br><span class=\"line\"><span class=\"comment\">//使用接口：1.定义接口 2.定义类 3.类实现接口</span></span><br><span class=\"line\"><span class=\"comment\">//a:=[2]byte&#123;'a','1',2&#125;//byte ascii 1 2等这些是显示不出来的，他和'1','2'不一样，后面ascii码：31 32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//传入的所有参数都是interface&#123;&#125;，传出的所有参数也是interface&#123;&#125; 所以出来的时候必须要转为所需要的类型</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模块-类概念\"><a href=\"#模块-类概念\" class=\"headerlink\" title=\"模块 类概念\"></a>模块 类概念</h3><p>go 的包和文件夹名是一样的（跟文件名关系不大）</p>\n<blockquote>\n<p>java:com.alibaba.dubbo.xxx</p>\n<p>c++:namespace std</p>\n<p>go: package 包</p>\n</blockquote>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>继承、封装、多态</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Book <span class=\"comment\">//==组合继承</span></span><br><span class=\"line\">  name <span class=\"keyword\">string</span></span><br><span class=\"line\">  age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造函数-一般自己创建构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPerson</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Person&#123;Book&#123;&#125;,name:<span class=\"string\">\"jack\"</span>,age:<span class=\"number\">19</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类函数外置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span><span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//小写函数 包内访问==封装</span></span><br><span class=\"line\">  p.name=<span class=\"string\">\"jack ma\"</span><span class=\"comment\">//指针(引用)接受者和普通</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==多态</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Flyable <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tFly()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Duck <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tFlyable<span class=\"comment\">//隐式继承接口</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Duck)</span><span class=\"title\">Fly</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"duck flying\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Cat)</span><span class=\"title\">Fly</span><span class=\"params\">()</span></span>  &#123;<span class=\"comment\">//隐式继承接口</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"cat flying\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入类型\"><a href=\"#嵌入类型\" class=\"headerlink\" title=\"嵌入类型\"></a>嵌入类型</h3><p>包含嵌入类型所有的财产（你是我的，你所有东西都是我的）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型</span><br><span class=\"line\"><span class=\"keyword\">type</span> 类型名字 底层类型</span><br><span class=\"line\"><span class=\"number\">1.</span>代表类型别名，附带新方法</span><br><span class=\"line\"><span class=\"number\">2.</span>代表新类型</span><br><span class=\"line\"></span><br><span class=\"line\">方法</span><br><span class=\"line\">包方法-静态方法</span><br><span class=\"line\">类型方法-实例方法</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\ta:=&amp;A&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(a,)</span><br><span class=\"line\">\tfmt.Println(a.Age)</span><br><span class=\"line\">\tfmt.Println(a.Dd.Birth)<span class=\"comment\">//初始化为空对象</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(a.Ee.Gender)//初始化为空指针，拿不到实例的熟悉，所以报错</span></span><br><span class=\"line\">\ta.Ee.Efunc() <span class=\"comment\">//空指针可以调用方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A <span class=\"keyword\">struct</span>&#123;<span class=\"comment\">//</span></span><br><span class=\"line\">\tB <span class=\"comment\">//嵌入B类型所有财产</span></span><br><span class=\"line\">\t*C <span class=\"comment\">//这里和嵌入C类型区别是，指针类型不能调用其属性</span></span><br><span class=\"line\">\tDd D <span class=\"comment\">//嵌入D类型的实例，有实例了什么都可以干(嵌入实例和嵌入指针比较多一些)</span></span><br><span class=\"line\">\tEe *E <span class=\"comment\">//嵌入E类型的指针，有了指针天下无敌(嵌入实例和嵌入指针比较多一些)</span></span><br><span class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"comment\">//本身自带的财产，自己的属性(属性一般是大写，大写导出和c一样私有字段set()get())</span></span><br><span class=\"line\">  \tCheckArg <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*context.Context)</span> <span class=\"title\">error</span> //属性的类型的是一个<span class=\"title\">func</span>，可以直接调用<span class=\"title\">a</span>.<span class=\"title\">CheckArg</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">B</span> <span class=\"title\">struct</span></span>&#123;</span><br><span class=\"line\">\tAge <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> C <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tEmail <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*C)</span><span class=\"title\">Cfunc</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"c func\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> D <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tBirth <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> E <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tGender <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*E)</span><span class=\"title\">Efunc</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"e func\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>…interface{}，传入的当做[]interface{}切片</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Println</span><span class=\"params\">(vals ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">  fmt.Println(vals)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">类似：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Println</span><span class=\"params\">(vals []<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"http-Request-请求\"><a href=\"#http-Request-请求\" class=\"headerlink\" title=\"http.Request 请求\"></a>http.Request 请求</h3><p>服务端需要 Request,和 Response 往里面写数据</p>\n<p>包括：</p>\n<p>1.第一行</p>\n<p>2.请求头</p>\n<p>3.请求体（一般 post 才有）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp:=DefaultTransport.send(req)<span class=\"comment\">//创建一个连接，然后通过这条连接发送req数据，服务端通过这条连接读取req然后构建resp，（也通过resp可以拿到连接的标识，去某个地方获取到这条连接），然后通过连接把resp发送回去</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"http-Response-响应\"><a href=\"#http-Response-响应\" class=\"headerlink\" title=\"http.Response 响应\"></a>http.Response 响应</h3><p>客户端需要 Response 从里面读数据，读完了就关闭</p>\n<p>包括：</p>\n<p>1.第一行数据</p>\n<p>2.返回头</p>\n<p>3.返回 body</p>\n<p>4.请求实例 http.Request</p>\n<p>可拿到底层连接 net.Conn(可读可写)</p>\n<h3 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span>　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则<span class=\"title\">lock</span>就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 <span class=\"title\">Lock</span> 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span>　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">RLock</span><span class=\"params\">()</span> 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span><span class=\"title\">RUnlock</span><span class=\"params\">()</span>　读锁解锁，<span class=\"title\">RUnlock</span> 撤销单次<span class=\"title\">RLock</span> 调用，它对于其它同时存在的读取器则没有效果。若 <span class=\"title\">rw</span> 并没有为读取而锁定，调用 <span class=\"title\">RUnlock</span> 就会引发一个运行时错误<span class=\"params\">(注：这种说法在go1.3版本中是不对的，例如下面这个例子)</span>。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h3><p>三种 ctx</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timerCtx:超时的ctx，超过某个时间就<span class=\"built_in\">close</span>(<span class=\"keyword\">chan</span>)</span><br><span class=\"line\">cancelCtx:可取消的ctx，使用<span class=\"built_in\">close</span>(<span class=\"keyword\">chan</span>)</span><br><span class=\"line\">valueCtx:保存键值的ctx</span><br></pre></td></tr></table></figure>\n<h3 id=\"并发、channel、select、sync\"><a href=\"#并发、channel、select、sync\" class=\"headerlink\" title=\"并发、channel、select、sync\"></a>并发、channel、select、sync</h3><p>超时控制</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskdone:=<span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//1.任务异步做，做完发一个taskdone消息</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//dosomething</span></span><br><span class=\"line\">  time.Sleep(time.Second)</span><br><span class=\"line\">  taskdone&lt;- <span class=\"keyword\">struct</span> &#123;&#125;&#123;&#125;</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//2.等待taskdone 或者等待超时</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-taskdone:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"task done\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-time.After(time.Millisecond*<span class=\"number\">5000</span>):</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"task timeout\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"scanf-扫描\"><a href=\"#scanf-扫描\" class=\"headerlink\" title=\"scanf 扫描\"></a>scanf 扫描</h3><p>一行一行读取数据嘛，或者一个个字符的读取</p>\n<p>读完之后就丢弃掉数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf:=bytes.NewBuffer(sli)<span class=\"comment\">//buffer读完之后就丢弃掉数据</span></span><br><span class=\"line\">data0,_,_:=buf.ReadRune()</span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(data0),buf.String())</span><br></pre></td></tr></table></figure>\n<h3 id=\"go-time\"><a href=\"#go-time\" class=\"headerlink\" title=\"go time\"></a>go time</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转为ts:t.unix()</span><br><span class=\"line\">转为str:t.Format(layout,val)</span><br><span class=\"line\">转为Time:time.parse(str,layout)</span><br></pre></td></tr></table></figure>\n<h3 id=\"json-xml-gob\"><a href=\"#json-xml-gob\" class=\"headerlink\" title=\"json,xml,gob\"></a>json,xml,gob</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> network bytes.Buffer</span><br><span class=\"line\">enc:=gob.NewEncoder(&amp;network)<span class=\"comment\">//编码到什么地方去</span></span><br><span class=\"line\">enc.Encode(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"k1\"</span>: <span class=\"string\">\"v1\"</span>&#125;)<span class=\"comment\">//编码什么东西</span></span><br><span class=\"line\">fmt.Println(network.Bytes())</span><br><span class=\"line\"></span><br><span class=\"line\">dec:=gob.NewDecoder(&amp;network)<span class=\"comment\">//从什么地方解码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\">dec.Decode(&amp;m)<span class=\"comment\">//解码到哪里</span></span><br><span class=\"line\">fmt.Println(m)</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a+=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b bytes.Buffer</span><br><span class=\"line\"><span class=\"keyword\">for</span> condition &#123;</span><br><span class=\"line\">    b.WriteString(str) <span class=\"comment\">// 将字符串str写入缓存buffer</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.String()</span><br></pre></td></tr></table></figure>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p><strong>永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">write(w io.Writer)<span class=\"comment\">//没有w *io.Writer这种</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自己clone</span><br><span class=\"line\">mkdir -p github.com/user</span><br><span class=\"line\">git clone repo</span><br><span class=\"line\">cd github.com/user/repo</span><br><span class=\"line\"><span class=\"keyword\">go</span> build xxx<span class=\"comment\">//缺啥去下载啥</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">golang.org/x/net ，其实镜像托管在在 github.com/golang/net</span><br><span class=\"line\">你可以用 <span class=\"keyword\">go</span> get github.com/golang/net 之后，到 GOPATH/src 中</span><br><span class=\"line\">mv github.com/golang/net golang.org/x/net</span><br><span class=\"line\"></span><br><span class=\"line\">golang.org/x/text</span><br><span class=\"line\"><span class=\"keyword\">go</span> get github.com/golang/text</span><br><span class=\"line\">mv github.com/golang/text golang.org/x/text</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $GOPATH/src/golang.org/x/</span><br><span class=\"line\">cd !$</span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/golang/net.git</span></span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/golang/sys.git</span></span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/golang/tools.git</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"http-参数解析\"><a href=\"#http-参数解析\" class=\"headerlink\" title=\"http 参数解析\"></a>http 参数解析</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.ParseForm()</span><br><span class=\"line\">uid :=r.Form.Get(<span class=\"string\">\"uid\"</span>)<span class=\"comment\">//get post/form-data</span></span><br><span class=\"line\">fmt.Println(uid)</span><br><span class=\"line\">body,_:=ioutil.ReadAll(r.Body)<span class=\"comment\">//json post</span></span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(body))</span><br></pre></td></tr></table></figure>\n<h3 id=\"error-错误处理\"><a href=\"#error-错误处理\" class=\"headerlink\" title=\"error 错误处理\"></a>error 错误处理</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.最普通</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err!=<span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2.recover() panic()</span></span><br><span class=\"line\"><span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!=<span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//dosomething()</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">panic</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//有些错误可以处理，有些选择处理</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"默认值和-nil\"><a href=\"#默认值和-nil\" class=\"headerlink\" title=\"默认值和 nil\"></a>默认值和 nil</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span>      -&gt; <span class=\"literal\">false</span></span><br><span class=\"line\">numbers -&gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">string</span>    -&gt; <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">pointers -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">slices -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">maps -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">channels -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">functions -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\">interfaces -&gt; <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以使用len(slice)==0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"TCP-和-UDP\"><a href=\"#TCP-和-UDP\" class=\"headerlink\" title=\"TCP 和 UDP\"></a>TCP 和 UDP</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//tcp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ResolveTCPAddr</span><span class=\"params\">(net, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(*TCPAddr, os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">ListenTCP</span><span class=\"params\">(net <span class=\"keyword\">string</span>, laddr *TCPAddr)</span> <span class=\"params\">(l *TCPListener, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">DialTCP</span><span class=\"params\">(net <span class=\"keyword\">string</span>, laddr, raddr *TCPAddr)</span> <span class=\"params\">(c *TCPConn, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(l *TCPListener)</span> <span class=\"title\">Accept</span><span class=\"params\">()</span> <span class=\"params\">(c Conn, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *TCPConn)</span> <span class=\"title\">Write</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *TCPConn)</span> <span class=\"title\">Read</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">udp</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">ResolveUDPAddr</span><span class=\"params\">(net, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(*UDPAddr, os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">DialUDP</span><span class=\"params\">(net <span class=\"keyword\">string</span>, laddr, raddr *UDPAddr)</span> <span class=\"params\">(c *UDPConn, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">ListenUDP</span><span class=\"params\">(net <span class=\"keyword\">string</span>, laddr *UDPAddr)</span> <span class=\"params\">(c *UDPConn, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *UDPConn)</span> <span class=\"title\">ReadFromUDP</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, addr *UDPAddr, err os.Error</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"keyword\">func</span> (c *UDPConn)</span> <span class=\"title\">WriteToUDP</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>, addr *UDPAddr)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err os.Error)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">//通用<span class=\"title\">Conn</span>, <span class=\"title\">PacketConn</span> <span class=\"title\">and</span> <span class=\"title\">Listener</span></span></span><br><span class=\"line\">net.Dial(\"tcp\",addr)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  encoder := json.NewEncoder(conn)</span><br><span class=\"line\">  decoder := json.NewDecoder(conn)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; <span class=\"number\">10</span>; n++ &#123;</span><br><span class=\"line\">    encoder.Encode(person)<span class=\"comment\">//类似于write</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPerson Person</span><br><span class=\"line\">    decoder.Decode(&amp;newPerson)<span class=\"comment\">//类似于read</span></span><br><span class=\"line\">    fmt.Println(newPerson.String())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Base64</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/base64\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\teightBitData := []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">\tbb := &amp;bytes.Buffer&#123;&#125;</span><br><span class=\"line\">\tencoder := base64.NewEncoder(base64.StdEncoding, bb)<span class=\"comment\">//转为base64字符串</span></span><br><span class=\"line\">\tencoder.Write(eightBitData)</span><br><span class=\"line\">\tencoder.Close()</span><br><span class=\"line\">\tfmt.Println(bb)</span><br><span class=\"line\">\tdbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">\tdecoder := base64.NewDecoder(base64.StdEncoding, bb)</span><br><span class=\"line\">\tdecoder.Read(dbuf)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, ch := <span class=\"keyword\">range</span> dbuf &#123;</span><br><span class=\"line\">\t\tfmt.Print(ch)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"细节点\"><a href=\"#细节点\" class=\"headerlink\" title=\"细节点\"></a>细节点</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>&#123;&#125;<span class=\"comment\">//阻塞</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SERVE_HTTP=<span class=\"string\">\":3030\"</span> <span class=\"keyword\">go</span> run <span class=\"number\">43.</span><span class=\"keyword\">go</span></span><br><span class=\"line\">address = os.Getenv(<span class=\"string\">\"SERVE_HTTP\"</span>)<span class=\"comment\">//直接从上面拿</span></span><br></pre></td></tr></table></figure>\n<p>默认类型</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">nil</span> 是 <span class=\"keyword\">interface</span>、function、pointer、<span class=\"keyword\">map</span>、slice 和 channel 类型变量的默认初始值</span><br></pre></td></tr></table></figure>\n<p>go 修改值全部用指针</p>\n<p>切片，map 先 make，再取地址比较好</p>\n<p>问题代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下面是一个坑</span></span><br><span class=\"line\"><span class=\"comment\">//for _, v := range *userInfos &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tuserInfoTempMap[v.User.ID] = &amp;v</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fillUserInfo</span><span class=\"params\">(queryUids *[]<span class=\"keyword\">int64</span>, userInfoTempMap <span class=\"keyword\">map</span>[<span class=\"keyword\">int64</span>]*model.RUserInfo, selfU <span class=\"keyword\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> queryUids == <span class=\"literal\">nil</span> || <span class=\"built_in\">len</span>(*queryUids) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取用户信息</span></span><br><span class=\"line\">\tuserInfos, err := manager.MGetUserInfo(queryUids, selfU)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> || userInfos == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Errorf(<span class=\"string\">\"get user info error:|%#v|\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建临时map给后面直接使用</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(*userInfos);i++&#123;</span><br><span class=\"line\">\t\tuserInfoTempMap[(*userInfos)[i].User.ID] = &amp;(*userInfos)[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> *userInfos &#123;</span><br><span class=\"line\">\t\tuserInfoTempMap[v.User.ID] = &amp;v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(userInfoTempMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"需要掌握的点\"><a href=\"#需要掌握的点\" class=\"headerlink\" title=\"需要掌握的点\"></a>需要掌握的点</h2><ul>\n<li>http 请求</li>\n<li>http 服务</li>\n<li>json 解析</li>\n<li>日志</li>\n<li>mysql 库</li>\n<li>redis 库</li>\n<li>list 和 map 使用</li>\n<li>goroutine 使用</li>\n<li>网络框架使用</li>\n</ul>\n"},{"title":"go协程调度","date":"2018-09-19T02:34:08.000Z","_content":"\n## go 协程调度\n\n### G-M 模型\n\n缺点\n\n- 单一全局互斥锁(Sched.Lock)和集中状态存储的存在导致所有 goroutine 相关操作，比如：创建、重新调度等都要上锁；\n- goroutine 传递问题：M 经常在 M 之间传递『可运行』的 goroutine，这导致调度延迟增大以及额外的性能损耗；\n- 每个 M 做内存缓存，导致内存占用过高，数据局部性较差；\n- 由于 syscall 调用而形成的剧烈的 worker thread 阻塞和解除阻塞，导致额外的性能损耗。\n\n### G-P-M 模型调度\n\nGo 调度器工作时会维护两种用来保存 G 的任务队列：一种是一个 Global 任务队列，一种是每个 P 维护的 Local 任务队列。\n\n当通过 go 关键字创建一个新的 goroutine 的时候，它会优先被放入 P 的本地队列。为了运行 goroutine，M 需要持有（绑定）一个 P，接着 M 会启动一个 OS 线程，循环从 P 的本地队列里取出一个 goroutine 并执行。当然还有上文提及的 work-stealing 调度算法：当 M 执行完了当前 P 的 Local 队列里的所有 G 后，P 也不会就这么在那躺尸啥都不干，它会先尝试从 Global 队列寻找 G 来执行，如果 Global 队列为空，它会随机挑选另外一个 P，从它的队列里中拿走一半的 G 到自己的队列中执行。\n\n如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析 goroutine 在两种例外情况下的行为。\n\nGo runtime 会在下面的 goroutine 被阻塞的情况下运行另外一个 goroutine：\n\n- blocking syscall (for example opening a file)\n- network input\n- channel operations\n- primitives in the sync package\n  这四种场景又可归类为两种类型：\n\n#### 用户态阻塞/唤醒\n\n当 goroutine 因为 channel 操作或者 network I/O 而阻塞时（实际上 golang 已经用 netpoller 实现了 goroutine 网络 I/O 阻塞不会导致 M 被阻塞，仅阻塞 G，这里仅仅是举个栗子），对应的 G 会被放置到某个 wait 队列(如 channel 的 waitq)，该 G 的状态由\\_Gruning 变为\\_Gwaitting，而 M 会跳过该 G 尝试获取并执行下一个 G，如果此时没有 runnable 的 G 供 M 运行，那么 M 将解绑 P，并进入 sleep 状态；当阻塞的 G 被另一端的 G2 唤醒时（比如 channel 的可读/写通知），G 被标记为 runnable，尝试加入 G2 所在 P 的 runnext，然后再是 P 的 Local 队列和 Global 队列。\n\n#### 系统调用阻塞\n\n当 G 被阻塞在某个系统调用上时，此时 G 会阻塞在\\_Gsyscall 状态，M 也处于 block on syscall 状态，此时的 M 可被抢占调度（可以抢占其他 M）：执行该 G 的 M 会与 P 解绑，而 P 则尝试与其它 idle 的 M 绑定，继续执行其它 G。如果没有其它 idle 的 M，但 P 的 Local 队列中仍然有 G 需要执行，则创建一个新的 M；当系统调用完成后，G 会重新尝试获取一个 idle 的 P 进入它的 Local 队列恢复执行，如果没有 idle 的 P，G 会被标记为 runnable 加入到 Global 队列。（全局队列用武之地）\n\n以上就是从宏观的角度对 Goroutine 和它的调度器进行的一些概要性的介绍，当然，Go 的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到 Go 调度器的基本调度过程，为后面自己实现一个 Goroutine Pool 提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚 Go 调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看 Go 调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M 模型的定义放在 src/runtime/runtime2.go 里面，而调度过程则放在了 src/runtime/proc.go 里。\n\n## 问题\n\ngo 协程阻塞时如何进行调度？\n\n> 在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。\n> Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。 1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当 MO 返回时，它必须尝试取得一个 context P 来运行 goroutine，一般情况下，它会从其他的 OS 线程那里 steal 偷一个 context 过来，如果没有偷到的话，它就把 goroutine 放在一个 global runqueue 里，然后自己就去睡大觉了（放入线程缓存里）。Contexts 们也会周期性的检查 global runqueue，否则 global runqueue 上的 goroutine 永远无法执行。 2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。\n\ngo 为什么要实现自己的协程调度，而不用系统调度？\n\n> 1.线程较多时，开销较大。\n> 2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。\n\nGoroutine vs OS thread 有什么区别？\n\n> 其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。\n\nsysmon 功能是什么？\n\n> 释放闲置超过 5 分钟的 span 物理内存；\n> 如果超过 2 分钟没有垃圾回收，强制执行；\n> 将长时间未处理的 netpoll 结果添加到任务队列；\n> 向长时间运行的 G 任务发出抢占调度；\n> 收回因 syscall 长时间阻塞的 P；\n","source":"_posts/golang/go协程调度.md","raw":"---\ntitle: go协程调度\ndate: 2018-09-19 10:34:08\ntags:\n  - go\ncategories:\n  - go\n---\n\n## go 协程调度\n\n### G-M 模型\n\n缺点\n\n- 单一全局互斥锁(Sched.Lock)和集中状态存储的存在导致所有 goroutine 相关操作，比如：创建、重新调度等都要上锁；\n- goroutine 传递问题：M 经常在 M 之间传递『可运行』的 goroutine，这导致调度延迟增大以及额外的性能损耗；\n- 每个 M 做内存缓存，导致内存占用过高，数据局部性较差；\n- 由于 syscall 调用而形成的剧烈的 worker thread 阻塞和解除阻塞，导致额外的性能损耗。\n\n### G-P-M 模型调度\n\nGo 调度器工作时会维护两种用来保存 G 的任务队列：一种是一个 Global 任务队列，一种是每个 P 维护的 Local 任务队列。\n\n当通过 go 关键字创建一个新的 goroutine 的时候，它会优先被放入 P 的本地队列。为了运行 goroutine，M 需要持有（绑定）一个 P，接着 M 会启动一个 OS 线程，循环从 P 的本地队列里取出一个 goroutine 并执行。当然还有上文提及的 work-stealing 调度算法：当 M 执行完了当前 P 的 Local 队列里的所有 G 后，P 也不会就这么在那躺尸啥都不干，它会先尝试从 Global 队列寻找 G 来执行，如果 Global 队列为空，它会随机挑选另外一个 P，从它的队列里中拿走一半的 G 到自己的队列中执行。\n\n如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析 goroutine 在两种例外情况下的行为。\n\nGo runtime 会在下面的 goroutine 被阻塞的情况下运行另外一个 goroutine：\n\n- blocking syscall (for example opening a file)\n- network input\n- channel operations\n- primitives in the sync package\n  这四种场景又可归类为两种类型：\n\n#### 用户态阻塞/唤醒\n\n当 goroutine 因为 channel 操作或者 network I/O 而阻塞时（实际上 golang 已经用 netpoller 实现了 goroutine 网络 I/O 阻塞不会导致 M 被阻塞，仅阻塞 G，这里仅仅是举个栗子），对应的 G 会被放置到某个 wait 队列(如 channel 的 waitq)，该 G 的状态由\\_Gruning 变为\\_Gwaitting，而 M 会跳过该 G 尝试获取并执行下一个 G，如果此时没有 runnable 的 G 供 M 运行，那么 M 将解绑 P，并进入 sleep 状态；当阻塞的 G 被另一端的 G2 唤醒时（比如 channel 的可读/写通知），G 被标记为 runnable，尝试加入 G2 所在 P 的 runnext，然后再是 P 的 Local 队列和 Global 队列。\n\n#### 系统调用阻塞\n\n当 G 被阻塞在某个系统调用上时，此时 G 会阻塞在\\_Gsyscall 状态，M 也处于 block on syscall 状态，此时的 M 可被抢占调度（可以抢占其他 M）：执行该 G 的 M 会与 P 解绑，而 P 则尝试与其它 idle 的 M 绑定，继续执行其它 G。如果没有其它 idle 的 M，但 P 的 Local 队列中仍然有 G 需要执行，则创建一个新的 M；当系统调用完成后，G 会重新尝试获取一个 idle 的 P 进入它的 Local 队列恢复执行，如果没有 idle 的 P，G 会被标记为 runnable 加入到 Global 队列。（全局队列用武之地）\n\n以上就是从宏观的角度对 Goroutine 和它的调度器进行的一些概要性的介绍，当然，Go 的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到 Go 调度器的基本调度过程，为后面自己实现一个 Goroutine Pool 提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚 Go 调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看 Go 调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M 模型的定义放在 src/runtime/runtime2.go 里面，而调度过程则放在了 src/runtime/proc.go 里。\n\n## 问题\n\ngo 协程阻塞时如何进行调度？\n\n> 在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。\n> Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。 1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当 MO 返回时，它必须尝试取得一个 context P 来运行 goroutine，一般情况下，它会从其他的 OS 线程那里 steal 偷一个 context 过来，如果没有偷到的话，它就把 goroutine 放在一个 global runqueue 里，然后自己就去睡大觉了（放入线程缓存里）。Contexts 们也会周期性的检查 global runqueue，否则 global runqueue 上的 goroutine 永远无法执行。 2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。\n\ngo 为什么要实现自己的协程调度，而不用系统调度？\n\n> 1.线程较多时，开销较大。\n> 2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。\n\nGoroutine vs OS thread 有什么区别？\n\n> 其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。\n\nsysmon 功能是什么？\n\n> 释放闲置超过 5 分钟的 span 物理内存；\n> 如果超过 2 分钟没有垃圾回收，强制执行；\n> 将长时间未处理的 netpoll 结果添加到任务队列；\n> 向长时间运行的 G 任务发出抢占调度；\n> 收回因 syscall 长时间阻塞的 P；\n","slug":"golang/go协程调度","published":1,"updated":"2020-05-25T05:16:44.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6t001kg938gp4pbver","content":"<h2 id=\"go-协程调度\"><a href=\"#go-协程调度\" class=\"headerlink\" title=\"go 协程调度\"></a>go 协程调度</h2><h3 id=\"G-M-模型\"><a href=\"#G-M-模型\" class=\"headerlink\" title=\"G-M 模型\"></a>G-M 模型</h3><p>缺点</p>\n<ul>\n<li>单一全局互斥锁(Sched.Lock)和集中状态存储的存在导致所有 goroutine 相关操作，比如：创建、重新调度等都要上锁；</li>\n<li>goroutine 传递问题：M 经常在 M 之间传递『可运行』的 goroutine，这导致调度延迟增大以及额外的性能损耗；</li>\n<li>每个 M 做内存缓存，导致内存占用过高，数据局部性较差；</li>\n<li>由于 syscall 调用而形成的剧烈的 worker thread 阻塞和解除阻塞，导致额外的性能损耗。</li>\n</ul>\n<h3 id=\"G-P-M-模型调度\"><a href=\"#G-P-M-模型调度\" class=\"headerlink\" title=\"G-P-M 模型调度\"></a>G-P-M 模型调度</h3><p>Go 调度器工作时会维护两种用来保存 G 的任务队列：一种是一个 Global 任务队列，一种是每个 P 维护的 Local 任务队列。</p>\n<p>当通过 go 关键字创建一个新的 goroutine 的时候，它会优先被放入 P 的本地队列。为了运行 goroutine，M 需要持有（绑定）一个 P，接着 M 会启动一个 OS 线程，循环从 P 的本地队列里取出一个 goroutine 并执行。当然还有上文提及的 work-stealing 调度算法：当 M 执行完了当前 P 的 Local 队列里的所有 G 后，P 也不会就这么在那躺尸啥都不干，它会先尝试从 Global 队列寻找 G 来执行，如果 Global 队列为空，它会随机挑选另外一个 P，从它的队列里中拿走一半的 G 到自己的队列中执行。</p>\n<p>如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析 goroutine 在两种例外情况下的行为。</p>\n<p>Go runtime 会在下面的 goroutine 被阻塞的情况下运行另外一个 goroutine：</p>\n<ul>\n<li>blocking syscall (for example opening a file)</li>\n<li>network input</li>\n<li>channel operations</li>\n<li>primitives in the sync package<br>这四种场景又可归类为两种类型：</li>\n</ul>\n<h4 id=\"用户态阻塞-唤醒\"><a href=\"#用户态阻塞-唤醒\" class=\"headerlink\" title=\"用户态阻塞/唤醒\"></a>用户态阻塞/唤醒</h4><p>当 goroutine 因为 channel 操作或者 network I/O 而阻塞时（实际上 golang 已经用 netpoller 实现了 goroutine 网络 I/O 阻塞不会导致 M 被阻塞，仅阻塞 G，这里仅仅是举个栗子），对应的 G 会被放置到某个 wait 队列(如 channel 的 waitq)，该 G 的状态由_Gruning 变为_Gwaitting，而 M 会跳过该 G 尝试获取并执行下一个 G，如果此时没有 runnable 的 G 供 M 运行，那么 M 将解绑 P，并进入 sleep 状态；当阻塞的 G 被另一端的 G2 唤醒时（比如 channel 的可读/写通知），G 被标记为 runnable，尝试加入 G2 所在 P 的 runnext，然后再是 P 的 Local 队列和 Global 队列。</p>\n<h4 id=\"系统调用阻塞\"><a href=\"#系统调用阻塞\" class=\"headerlink\" title=\"系统调用阻塞\"></a>系统调用阻塞</h4><p>当 G 被阻塞在某个系统调用上时，此时 G 会阻塞在_Gsyscall 状态，M 也处于 block on syscall 状态，此时的 M 可被抢占调度（可以抢占其他 M）：执行该 G 的 M 会与 P 解绑，而 P 则尝试与其它 idle 的 M 绑定，继续执行其它 G。如果没有其它 idle 的 M，但 P 的 Local 队列中仍然有 G 需要执行，则创建一个新的 M；当系统调用完成后，G 会重新尝试获取一个 idle 的 P 进入它的 Local 队列恢复执行，如果没有 idle 的 P，G 会被标记为 runnable 加入到 Global 队列。（全局队列用武之地）</p>\n<p>以上就是从宏观的角度对 Goroutine 和它的调度器进行的一些概要性的介绍，当然，Go 的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到 Go 调度器的基本调度过程，为后面自己实现一个 Goroutine Pool 提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚 Go 调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看 Go 调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M 模型的定义放在 src/runtime/runtime2.go 里面，而调度过程则放在了 src/runtime/proc.go 里。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>go 协程阻塞时如何进行调度？</p>\n<blockquote>\n<p>在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。<br>Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。 1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当 MO 返回时，它必须尝试取得一个 context P 来运行 goroutine，一般情况下，它会从其他的 OS 线程那里 steal 偷一个 context 过来，如果没有偷到的话，它就把 goroutine 放在一个 global runqueue 里，然后自己就去睡大觉了（放入线程缓存里）。Contexts 们也会周期性的检查 global runqueue，否则 global runqueue 上的 goroutine 永远无法执行。 2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。</p>\n</blockquote>\n<p>go 为什么要实现自己的协程调度，而不用系统调度？</p>\n<blockquote>\n<p>1.线程较多时，开销较大。<br>2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。</p>\n</blockquote>\n<p>Goroutine vs OS thread 有什么区别？</p>\n<blockquote>\n<p>其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。</p>\n</blockquote>\n<p>sysmon 功能是什么？</p>\n<blockquote>\n<p>释放闲置超过 5 分钟的 span 物理内存；<br>如果超过 2 分钟没有垃圾回收，强制执行；<br>将长时间未处理的 netpoll 结果添加到任务队列；<br>向长时间运行的 G 任务发出抢占调度；<br>收回因 syscall 长时间阻塞的 P；</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"go-协程调度\"><a href=\"#go-协程调度\" class=\"headerlink\" title=\"go 协程调度\"></a>go 协程调度</h2><h3 id=\"G-M-模型\"><a href=\"#G-M-模型\" class=\"headerlink\" title=\"G-M 模型\"></a>G-M 模型</h3><p>缺点</p>\n<ul>\n<li>单一全局互斥锁(Sched.Lock)和集中状态存储的存在导致所有 goroutine 相关操作，比如：创建、重新调度等都要上锁；</li>\n<li>goroutine 传递问题：M 经常在 M 之间传递『可运行』的 goroutine，这导致调度延迟增大以及额外的性能损耗；</li>\n<li>每个 M 做内存缓存，导致内存占用过高，数据局部性较差；</li>\n<li>由于 syscall 调用而形成的剧烈的 worker thread 阻塞和解除阻塞，导致额外的性能损耗。</li>\n</ul>\n<h3 id=\"G-P-M-模型调度\"><a href=\"#G-P-M-模型调度\" class=\"headerlink\" title=\"G-P-M 模型调度\"></a>G-P-M 模型调度</h3><p>Go 调度器工作时会维护两种用来保存 G 的任务队列：一种是一个 Global 任务队列，一种是每个 P 维护的 Local 任务队列。</p>\n<p>当通过 go 关键字创建一个新的 goroutine 的时候，它会优先被放入 P 的本地队列。为了运行 goroutine，M 需要持有（绑定）一个 P，接着 M 会启动一个 OS 线程，循环从 P 的本地队列里取出一个 goroutine 并执行。当然还有上文提及的 work-stealing 调度算法：当 M 执行完了当前 P 的 Local 队列里的所有 G 后，P 也不会就这么在那躺尸啥都不干，它会先尝试从 Global 队列寻找 G 来执行，如果 Global 队列为空，它会随机挑选另外一个 P，从它的队列里中拿走一半的 G 到自己的队列中执行。</p>\n<p>如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析 goroutine 在两种例外情况下的行为。</p>\n<p>Go runtime 会在下面的 goroutine 被阻塞的情况下运行另外一个 goroutine：</p>\n<ul>\n<li>blocking syscall (for example opening a file)</li>\n<li>network input</li>\n<li>channel operations</li>\n<li>primitives in the sync package<br>这四种场景又可归类为两种类型：</li>\n</ul>\n<h4 id=\"用户态阻塞-唤醒\"><a href=\"#用户态阻塞-唤醒\" class=\"headerlink\" title=\"用户态阻塞/唤醒\"></a>用户态阻塞/唤醒</h4><p>当 goroutine 因为 channel 操作或者 network I/O 而阻塞时（实际上 golang 已经用 netpoller 实现了 goroutine 网络 I/O 阻塞不会导致 M 被阻塞，仅阻塞 G，这里仅仅是举个栗子），对应的 G 会被放置到某个 wait 队列(如 channel 的 waitq)，该 G 的状态由_Gruning 变为_Gwaitting，而 M 会跳过该 G 尝试获取并执行下一个 G，如果此时没有 runnable 的 G 供 M 运行，那么 M 将解绑 P，并进入 sleep 状态；当阻塞的 G 被另一端的 G2 唤醒时（比如 channel 的可读/写通知），G 被标记为 runnable，尝试加入 G2 所在 P 的 runnext，然后再是 P 的 Local 队列和 Global 队列。</p>\n<h4 id=\"系统调用阻塞\"><a href=\"#系统调用阻塞\" class=\"headerlink\" title=\"系统调用阻塞\"></a>系统调用阻塞</h4><p>当 G 被阻塞在某个系统调用上时，此时 G 会阻塞在_Gsyscall 状态，M 也处于 block on syscall 状态，此时的 M 可被抢占调度（可以抢占其他 M）：执行该 G 的 M 会与 P 解绑，而 P 则尝试与其它 idle 的 M 绑定，继续执行其它 G。如果没有其它 idle 的 M，但 P 的 Local 队列中仍然有 G 需要执行，则创建一个新的 M；当系统调用完成后，G 会重新尝试获取一个 idle 的 P 进入它的 Local 队列恢复执行，如果没有 idle 的 P，G 会被标记为 runnable 加入到 Global 队列。（全局队列用武之地）</p>\n<p>以上就是从宏观的角度对 Goroutine 和它的调度器进行的一些概要性的介绍，当然，Go 的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到 Go 调度器的基本调度过程，为后面自己实现一个 Goroutine Pool 提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚 Go 调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看 Go 调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M 模型的定义放在 src/runtime/runtime2.go 里面，而调度过程则放在了 src/runtime/proc.go 里。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>go 协程阻塞时如何进行调度？</p>\n<blockquote>\n<p>在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。<br>Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。 1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当 MO 返回时，它必须尝试取得一个 context P 来运行 goroutine，一般情况下，它会从其他的 OS 线程那里 steal 偷一个 context 过来，如果没有偷到的话，它就把 goroutine 放在一个 global runqueue 里，然后自己就去睡大觉了（放入线程缓存里）。Contexts 们也会周期性的检查 global runqueue，否则 global runqueue 上的 goroutine 永远无法执行。 2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。</p>\n</blockquote>\n<p>go 为什么要实现自己的协程调度，而不用系统调度？</p>\n<blockquote>\n<p>1.线程较多时，开销较大。<br>2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。</p>\n</blockquote>\n<p>Goroutine vs OS thread 有什么区别？</p>\n<blockquote>\n<p>其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。</p>\n</blockquote>\n<p>sysmon 功能是什么？</p>\n<blockquote>\n<p>释放闲置超过 5 分钟的 span 物理内存；<br>如果超过 2 分钟没有垃圾回收，强制执行；<br>将长时间未处理的 netpoll 结果添加到任务队列；<br>向长时间运行的 G 任务发出抢占调度；<br>收回因 syscall 长时间阻塞的 P；</p>\n</blockquote>\n"},{"title":"golang-pprof","date":"2019-01-04T08:30:20.000Z","_content":"\n## pprof 的使用\n\n什么是 Profiling?\nProfiling 这个词比较难翻译，一般译成画像。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。\n\n在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用使用 CPU 和内存的情况。也就是说应用使用了多少 CPU 资源？都是哪些部分在使用？每个函数使用的比例是多少？有哪些函数在等待 CPU 资源？知道了这些，我们就能对应用进行规划，也能快速定位性能瓶颈。\n\ngolang 是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。\n\n在 go 语言中，主要关注的应用运行情况主要包括以下几种：\n\n- CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据\n- Memory Profile（Heap Profile）：报告程序的内存使用情况\n- Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈\n- Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的\n\n两种收集方式\n\n做 Profiling 第一步就是怎么获取应用程序的运行情况数据。go 语言提供了 runtime/pprof 和 net/http/pprof 两个库，这部分我们讲讲它们的用法以及使用场景。\n\n### 工具型应用\n\n如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用 runtime/pprof 库。\n\npprof 封装了很好的接口供我们使用，比如要想进行 CPU Profiling，可以调用 pprof.StartCPUProfile() 方法，它会对当前应用程序进行 CPU profiling，并写入到提供的参数中（w io.Writer），要停止调用 StopCPUProfile() 即可。\n\n去除错误处理只需要三行内容，一般把部分内容写在 main.go 文件中，应用程序启动之后就开始执行：\n\n```go\nf, err := os.Create(\\*cpuprofile) ... pprof.StartCPUProfile(f) defer pprof.StopCPUProfile()\n```\n\n应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。\n\n想要获得内存的数据，直接使用 WriteHeapProfile 就行，不用 start 和 stop 这两个步骤了：\n\n```go\nf, err := os.Create(\\*memprofile) pprof.WriteHeapProfile(f) f.Close()\n```\n\n### 服务型应用\n\n如果你的应用是一直运行的，比如 web 应用，那么可以使用 net/http/pprof 库，它能够在提供 HTTP 服务进行分析。\n\n如果使用了默认的 http.DefaultServeMux（通常是代码直接使用 http.ListenAndServe(\"0.0.0.0:8000\", nil)），只需要添加一行：\n\n```go\nimport \\_ \"net/http/pprof\"\n```\n\n如果你使用自定义的 Mux，则需要手动注册一些路由规则：\n\n```go\nr.HandleFunc(\"/debug/pprof/\", pprof.Index)\nr.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\nr.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\nr.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\nr.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n```\n\n不管哪种方式，你的 HTTP 服务都会多出 /debug/pprof endpoint，访问它会得到类似下面的内容：\n\n```go\n/debug/pprof/\n\nprofiles:\n0 block\n62 goroutine\n444 heap\n30 threadcreate\n\nfull goroutine stack dump\n```\n\n这个路径下还有几个子页面：\n\n```go\n/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载\n/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件\n/debug/pprof/block：block Profiling 的路径\n/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系\n```\n\ngo tool pprof 命令：获取和分析 Profiling 数据\n能通过对应的库获取想要的 Profiling 数据之后（不管是文件还是 http），下一步就是要对这些数据进行保存和分析，我们可以使用 go tool pprof 命令行工具。\n\n在后面我们会生成调用关系图和火焰图，需要安装 graphviz 软件包，在 ubuntu 系统可以使用下面的命令：\n\n```bash\nsudo apt-get install -y graphviz\n```\n\nNOTE：获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。否则如果应用处于空闲状态，得到的结果可能没有任何意义。\n\nCPU Profiling\ngo tool pprof 最简单的使用方式为 `go tool pprof [binary] [source]`，binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。比如：\n\n```go\n➜ go tool pprof ./hyperkube http://172.16.3.232:10251/debug/pprof/profile\nFetching profile from http://172.16.3.232:10251/debug/pprof/profile\nPlease wait... (30s)\nSaved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.samples.cpu.002.pb.gz Entering interactive mode (type \"help\" for commands) (pprof)\n```\n\n这个命令会进行 CPU profiling 分析，等待一段时间（默认是 30s，如果在 url 最后加上 ?seconds=60 参数可以调整采集数据的时间为 60s）之后，我们就进入了一个交互式命令行，可以对解析的结果进行查看和导出。可以通过 help 来查看支持的自命令有哪些。\n\n一个有用的命令是 topN，它列出最耗时间的地方：\n\n```go\n(pprof) top10\n```\n\n每一行表示一个函数的信息。前两列表示函数在 CPU 上运行的时间以及百分比；第三列是当前所有函数累加使用 CPU 的比例；第四列和第五列代表这个函数以及子函数运行所占用的时间和比例（也被称为累加值 cumulative），应该大于等于前两列的值；最后一列就是函数的名字。如果应用程序有性能问题，上面这些信息应该能告诉我们时间都花费在哪些函数的执行上了。\n\npprof 不仅能打印出最耗时的地方(top)，还能列出函数代码以及对应的取样数据(list)、汇编代码以及对应的取样数据(disasm)，而且能以各种样式进行输出，比如 svg、gv、callgrind、png、gif 等等。\n\n其中一个非常便利的是 web 命令，在交互模式下输入 web，就能自动生成一个 svg 文件，并跳转到浏览器打开，生成了一个函数调用图：\n\n这个调用图包含了更多的信息，而且可视化的图像能让我们更清楚地理解整个应用程序的全貌。图中每个方框对应一个函数，方框越大代表执行的时间越久（包括它调用的子函数执行时间，但并不是正比的关系）；方框之间的箭头代表着调用关系，箭头上的数字代表被调用函数的执行时间。\n\n因为原图比较大，这里只截取了其中一部分，但是能明显看到 encoding/json.(\\*decodeState).object 是这里耗时比较多的地方，而且能看到它调用了哪些函数，分别函数多少。这些更详细的信息对于定位和调优性能是非常有帮助的！\n\n要想更细致分析，就要精确到代码级别了，看看每行代码的耗时，直接定位到出现性能问题的那行代码。pprof 也能做到，list 命令后面跟着一个正则表达式，就能查看匹配函数的代码以及每行代码的耗时：\n\n```go\n(pprof) list podFitsOnNode\n```\n\n如果想要了解对应的汇编代码，可以使用 disadm <regex> 命令。这两个命令虽然强大，但是在命令行中查看代码并不是很方面，所以你可以使用 weblist 命令，用法和两者一样，但它会在浏览器打开一个页面，能够同时显示源代码和汇编代码。\n\nNOTE：更详细的 pprof 使用方法可以参考 pprof --help 或者 pprof 文档。\n\nMemory Profiling\n要想获得内存使用 Profiling 信息，只需要把数据源修改一下就行（对于 http 方式来说就是修改 url 的地址，从 /debug/pprof/profile 改成 /debug/pprof/heap）：\n\n```go\n➜ go tool pprof ./hyperkube http://172.16.3.232:10251/debug/pprof/heap\nFetching profile from http://172.16.3.232:10251/debug/pprof/heap\nSaved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.inuse_objects.inuse_space.002.pb.gz Entering interactive mode (type \"help\" for commands) (pprof)\n```\n\n和 CPU Profiling 使用一样，使用 top N 可以打印出使用内存最多的函数列表：\n\n```go\n(pprof) top\n```\n\n每一列的含义也是类似的，只不过从 CPU 使用时间变成了内存使用大小，就不多解释了。\n\n类似的，web 命令也能生成 svg 图片在浏览器中打开，从中可以看到函数调用关系，以及每个函数的内存使用多少。\n\n需要注意的是，默认情况下，统计的是内存使用大小，如果执行命令的时候加上 --inuse_objects 可以查看每个函数分配的对象数；--alloc-space 查看分配的内存空间大小。\n\n### 常用命令\n\n```go\ngo tool pprof -http=\":60000\" '127.0.0.1:27159/debug/pprof/profile'\ngo tool pprof -http=\":60001\" '127.0.0.1:27159/debug/pprof/heap'\ngo tool pprof -http=\":60002\" '127.0.0.1:36514/debug/pprof/allocs'\n```\n","source":"_posts/golang/golang-pprof.md","raw":"---\ntitle: golang-pprof\ntags:\n  - tags\ncategories:\n  - categories\ndate: 2019-01-04 16:30:20\n---\n\n## pprof 的使用\n\n什么是 Profiling?\nProfiling 这个词比较难翻译，一般译成画像。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。\n\n在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用使用 CPU 和内存的情况。也就是说应用使用了多少 CPU 资源？都是哪些部分在使用？每个函数使用的比例是多少？有哪些函数在等待 CPU 资源？知道了这些，我们就能对应用进行规划，也能快速定位性能瓶颈。\n\ngolang 是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。\n\n在 go 语言中，主要关注的应用运行情况主要包括以下几种：\n\n- CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据\n- Memory Profile（Heap Profile）：报告程序的内存使用情况\n- Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈\n- Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的\n\n两种收集方式\n\n做 Profiling 第一步就是怎么获取应用程序的运行情况数据。go 语言提供了 runtime/pprof 和 net/http/pprof 两个库，这部分我们讲讲它们的用法以及使用场景。\n\n### 工具型应用\n\n如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用 runtime/pprof 库。\n\npprof 封装了很好的接口供我们使用，比如要想进行 CPU Profiling，可以调用 pprof.StartCPUProfile() 方法，它会对当前应用程序进行 CPU profiling，并写入到提供的参数中（w io.Writer），要停止调用 StopCPUProfile() 即可。\n\n去除错误处理只需要三行内容，一般把部分内容写在 main.go 文件中，应用程序启动之后就开始执行：\n\n```go\nf, err := os.Create(\\*cpuprofile) ... pprof.StartCPUProfile(f) defer pprof.StopCPUProfile()\n```\n\n应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。\n\n想要获得内存的数据，直接使用 WriteHeapProfile 就行，不用 start 和 stop 这两个步骤了：\n\n```go\nf, err := os.Create(\\*memprofile) pprof.WriteHeapProfile(f) f.Close()\n```\n\n### 服务型应用\n\n如果你的应用是一直运行的，比如 web 应用，那么可以使用 net/http/pprof 库，它能够在提供 HTTP 服务进行分析。\n\n如果使用了默认的 http.DefaultServeMux（通常是代码直接使用 http.ListenAndServe(\"0.0.0.0:8000\", nil)），只需要添加一行：\n\n```go\nimport \\_ \"net/http/pprof\"\n```\n\n如果你使用自定义的 Mux，则需要手动注册一些路由规则：\n\n```go\nr.HandleFunc(\"/debug/pprof/\", pprof.Index)\nr.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\nr.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\nr.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\nr.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n```\n\n不管哪种方式，你的 HTTP 服务都会多出 /debug/pprof endpoint，访问它会得到类似下面的内容：\n\n```go\n/debug/pprof/\n\nprofiles:\n0 block\n62 goroutine\n444 heap\n30 threadcreate\n\nfull goroutine stack dump\n```\n\n这个路径下还有几个子页面：\n\n```go\n/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载\n/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件\n/debug/pprof/block：block Profiling 的路径\n/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系\n```\n\ngo tool pprof 命令：获取和分析 Profiling 数据\n能通过对应的库获取想要的 Profiling 数据之后（不管是文件还是 http），下一步就是要对这些数据进行保存和分析，我们可以使用 go tool pprof 命令行工具。\n\n在后面我们会生成调用关系图和火焰图，需要安装 graphviz 软件包，在 ubuntu 系统可以使用下面的命令：\n\n```bash\nsudo apt-get install -y graphviz\n```\n\nNOTE：获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。否则如果应用处于空闲状态，得到的结果可能没有任何意义。\n\nCPU Profiling\ngo tool pprof 最简单的使用方式为 `go tool pprof [binary] [source]`，binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。比如：\n\n```go\n➜ go tool pprof ./hyperkube http://172.16.3.232:10251/debug/pprof/profile\nFetching profile from http://172.16.3.232:10251/debug/pprof/profile\nPlease wait... (30s)\nSaved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.samples.cpu.002.pb.gz Entering interactive mode (type \"help\" for commands) (pprof)\n```\n\n这个命令会进行 CPU profiling 分析，等待一段时间（默认是 30s，如果在 url 最后加上 ?seconds=60 参数可以调整采集数据的时间为 60s）之后，我们就进入了一个交互式命令行，可以对解析的结果进行查看和导出。可以通过 help 来查看支持的自命令有哪些。\n\n一个有用的命令是 topN，它列出最耗时间的地方：\n\n```go\n(pprof) top10\n```\n\n每一行表示一个函数的信息。前两列表示函数在 CPU 上运行的时间以及百分比；第三列是当前所有函数累加使用 CPU 的比例；第四列和第五列代表这个函数以及子函数运行所占用的时间和比例（也被称为累加值 cumulative），应该大于等于前两列的值；最后一列就是函数的名字。如果应用程序有性能问题，上面这些信息应该能告诉我们时间都花费在哪些函数的执行上了。\n\npprof 不仅能打印出最耗时的地方(top)，还能列出函数代码以及对应的取样数据(list)、汇编代码以及对应的取样数据(disasm)，而且能以各种样式进行输出，比如 svg、gv、callgrind、png、gif 等等。\n\n其中一个非常便利的是 web 命令，在交互模式下输入 web，就能自动生成一个 svg 文件，并跳转到浏览器打开，生成了一个函数调用图：\n\n这个调用图包含了更多的信息，而且可视化的图像能让我们更清楚地理解整个应用程序的全貌。图中每个方框对应一个函数，方框越大代表执行的时间越久（包括它调用的子函数执行时间，但并不是正比的关系）；方框之间的箭头代表着调用关系，箭头上的数字代表被调用函数的执行时间。\n\n因为原图比较大，这里只截取了其中一部分，但是能明显看到 encoding/json.(\\*decodeState).object 是这里耗时比较多的地方，而且能看到它调用了哪些函数，分别函数多少。这些更详细的信息对于定位和调优性能是非常有帮助的！\n\n要想更细致分析，就要精确到代码级别了，看看每行代码的耗时，直接定位到出现性能问题的那行代码。pprof 也能做到，list 命令后面跟着一个正则表达式，就能查看匹配函数的代码以及每行代码的耗时：\n\n```go\n(pprof) list podFitsOnNode\n```\n\n如果想要了解对应的汇编代码，可以使用 disadm <regex> 命令。这两个命令虽然强大，但是在命令行中查看代码并不是很方面，所以你可以使用 weblist 命令，用法和两者一样，但它会在浏览器打开一个页面，能够同时显示源代码和汇编代码。\n\nNOTE：更详细的 pprof 使用方法可以参考 pprof --help 或者 pprof 文档。\n\nMemory Profiling\n要想获得内存使用 Profiling 信息，只需要把数据源修改一下就行（对于 http 方式来说就是修改 url 的地址，从 /debug/pprof/profile 改成 /debug/pprof/heap）：\n\n```go\n➜ go tool pprof ./hyperkube http://172.16.3.232:10251/debug/pprof/heap\nFetching profile from http://172.16.3.232:10251/debug/pprof/heap\nSaved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.inuse_objects.inuse_space.002.pb.gz Entering interactive mode (type \"help\" for commands) (pprof)\n```\n\n和 CPU Profiling 使用一样，使用 top N 可以打印出使用内存最多的函数列表：\n\n```go\n(pprof) top\n```\n\n每一列的含义也是类似的，只不过从 CPU 使用时间变成了内存使用大小，就不多解释了。\n\n类似的，web 命令也能生成 svg 图片在浏览器中打开，从中可以看到函数调用关系，以及每个函数的内存使用多少。\n\n需要注意的是，默认情况下，统计的是内存使用大小，如果执行命令的时候加上 --inuse_objects 可以查看每个函数分配的对象数；--alloc-space 查看分配的内存空间大小。\n\n### 常用命令\n\n```go\ngo tool pprof -http=\":60000\" '127.0.0.1:27159/debug/pprof/profile'\ngo tool pprof -http=\":60001\" '127.0.0.1:27159/debug/pprof/heap'\ngo tool pprof -http=\":60002\" '127.0.0.1:36514/debug/pprof/allocs'\n```\n","slug":"golang/golang-pprof","published":1,"updated":"2020-05-25T05:25:30.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6v001mg9388xivmuvl","content":"<h2 id=\"pprof-的使用\"><a href=\"#pprof-的使用\" class=\"headerlink\" title=\"pprof 的使用\"></a>pprof 的使用</h2><p>什么是 Profiling?<br>Profiling 这个词比较难翻译，一般译成画像。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。</p>\n<p>在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用使用 CPU 和内存的情况。也就是说应用使用了多少 CPU 资源？都是哪些部分在使用？每个函数使用的比例是多少？有哪些函数在等待 CPU 资源？知道了这些，我们就能对应用进行规划，也能快速定位性能瓶颈。</p>\n<p>golang 是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。</p>\n<p>在 go 语言中，主要关注的应用运行情况主要包括以下几种：</p>\n<ul>\n<li>CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据</li>\n<li>Memory Profile（Heap Profile）：报告程序的内存使用情况</li>\n<li>Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈</li>\n<li>Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的</li>\n</ul>\n<p>两种收集方式</p>\n<p>做 Profiling 第一步就是怎么获取应用程序的运行情况数据。go 语言提供了 runtime/pprof 和 net/http/pprof 两个库，这部分我们讲讲它们的用法以及使用场景。</p>\n<h3 id=\"工具型应用\"><a href=\"#工具型应用\" class=\"headerlink\" title=\"工具型应用\"></a>工具型应用</h3><p>如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用 runtime/pprof 库。</p>\n<p>pprof 封装了很好的接口供我们使用，比如要想进行 CPU Profiling，可以调用 pprof.StartCPUProfile() 方法，它会对当前应用程序进行 CPU profiling，并写入到提供的参数中（w io.Writer），要停止调用 StopCPUProfile() 即可。</p>\n<p>去除错误处理只需要三行内容，一般把部分内容写在 main.go 文件中，应用程序启动之后就开始执行：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.Create(\\*cpuprofile) ... pprof.StartCPUProfile(f) <span class=\"keyword\">defer</span> pprof.StopCPUProfile()</span><br></pre></td></tr></table></figure>\n<p>应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。</p>\n<p>想要获得内存的数据，直接使用 WriteHeapProfile 就行，不用 start 和 stop 这两个步骤了：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.Create(\\*memprofile) pprof.WriteHeapProfile(f) f.Close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务型应用\"><a href=\"#服务型应用\" class=\"headerlink\" title=\"服务型应用\"></a>服务型应用</h3><p>如果你的应用是一直运行的，比如 web 应用，那么可以使用 net/http/pprof 库，它能够在提供 HTTP 服务进行分析。</p>\n<p>如果使用了默认的 http.DefaultServeMux（通常是代码直接使用 http.ListenAndServe(“0.0.0.0:8000”, nil)），只需要添加一行：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> \\_ <span class=\"string\">\"net/http/pprof\"</span></span><br></pre></td></tr></table></figure>\n<p>如果你使用自定义的 Mux，则需要手动注册一些路由规则：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/\"</span>, pprof.Index)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/cmdline\"</span>, pprof.Cmdline)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/profile\"</span>, pprof.Profile)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/symbol\"</span>, pprof.Symbol)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/trace\"</span>, pprof.Trace)</span><br></pre></td></tr></table></figure>\n<p>不管哪种方式，你的 HTTP 服务都会多出 /debug/pprof endpoint，访问它会得到类似下面的内容：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/debug/pprof/</span><br><span class=\"line\"></span><br><span class=\"line\">profiles:</span><br><span class=\"line\"><span class=\"number\">0</span> block</span><br><span class=\"line\"><span class=\"number\">62</span> goroutine</span><br><span class=\"line\"><span class=\"number\">444</span> heap</span><br><span class=\"line\"><span class=\"number\">30</span> threadcreate</span><br><span class=\"line\"></span><br><span class=\"line\">full goroutine stack dump</span><br></pre></td></tr></table></figure>\n<p>这个路径下还有几个子页面：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 <span class=\"number\">30s</span>，并生成一个文件供下载</span><br><span class=\"line\">/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件</span><br><span class=\"line\">/debug/pprof/block：block Profiling 的路径</span><br><span class=\"line\">/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系</span><br></pre></td></tr></table></figure>\n<p>go tool pprof 命令：获取和分析 Profiling 数据<br>能通过对应的库获取想要的 Profiling 数据之后（不管是文件还是 http），下一步就是要对这些数据进行保存和分析，我们可以使用 go tool pprof 命令行工具。</p>\n<p>在后面我们会生成调用关系图和火焰图，需要安装 graphviz 软件包，在 ubuntu 系统可以使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y graphviz</span><br></pre></td></tr></table></figure>\n<p>NOTE：获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。否则如果应用处于空闲状态，得到的结果可能没有任何意义。</p>\n<p>CPU Profiling<br>go tool pprof 最简单的使用方式为 <code>go tool pprof [binary] [source]</code>，binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。比如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ <span class=\"keyword\">go</span> tool pprof ./hyperkube http:<span class=\"comment\">//172.16.3.232:10251/debug/pprof/profile</span></span><br><span class=\"line\">Fetching profile from http:<span class=\"comment\">//172.16.3.232:10251/debug/pprof/profile</span></span><br><span class=\"line\">Please wait... (<span class=\"number\">30s</span>)</span><br><span class=\"line\">Saved profile in /home/cizixs/pprof/pprof.hyperkube<span class=\"number\">.172</span><span class=\"number\">.16</span><span class=\"number\">.3</span><span class=\"number\">.232</span>:<span class=\"number\">10251.s</span>amples.cpu<span class=\"number\">.002</span>.pb.gz Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands) (pprof)</span><br></pre></td></tr></table></figure>\n<p>这个命令会进行 CPU profiling 分析，等待一段时间（默认是 30s，如果在 url 最后加上 ?seconds=60 参数可以调整采集数据的时间为 60s）之后，我们就进入了一个交互式命令行，可以对解析的结果进行查看和导出。可以通过 help 来查看支持的自命令有哪些。</p>\n<p>一个有用的命令是 topN，它列出最耗时间的地方：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(pprof) top10</span><br></pre></td></tr></table></figure>\n<p>每一行表示一个函数的信息。前两列表示函数在 CPU 上运行的时间以及百分比；第三列是当前所有函数累加使用 CPU 的比例；第四列和第五列代表这个函数以及子函数运行所占用的时间和比例（也被称为累加值 cumulative），应该大于等于前两列的值；最后一列就是函数的名字。如果应用程序有性能问题，上面这些信息应该能告诉我们时间都花费在哪些函数的执行上了。</p>\n<p>pprof 不仅能打印出最耗时的地方(top)，还能列出函数代码以及对应的取样数据(list)、汇编代码以及对应的取样数据(disasm)，而且能以各种样式进行输出，比如 svg、gv、callgrind、png、gif 等等。</p>\n<p>其中一个非常便利的是 web 命令，在交互模式下输入 web，就能自动生成一个 svg 文件，并跳转到浏览器打开，生成了一个函数调用图：</p>\n<p>这个调用图包含了更多的信息，而且可视化的图像能让我们更清楚地理解整个应用程序的全貌。图中每个方框对应一个函数，方框越大代表执行的时间越久（包括它调用的子函数执行时间，但并不是正比的关系）；方框之间的箭头代表着调用关系，箭头上的数字代表被调用函数的执行时间。</p>\n<p>因为原图比较大，这里只截取了其中一部分，但是能明显看到 encoding/json.(*decodeState).object 是这里耗时比较多的地方，而且能看到它调用了哪些函数，分别函数多少。这些更详细的信息对于定位和调优性能是非常有帮助的！</p>\n<p>要想更细致分析，就要精确到代码级别了，看看每行代码的耗时，直接定位到出现性能问题的那行代码。pprof 也能做到，list 命令后面跟着一个正则表达式，就能查看匹配函数的代码以及每行代码的耗时：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(pprof) list podFitsOnNode</span><br></pre></td></tr></table></figure>\n<p>如果想要了解对应的汇编代码，可以使用 disadm <regex> 命令。这两个命令虽然强大，但是在命令行中查看代码并不是很方面，所以你可以使用 weblist 命令，用法和两者一样，但它会在浏览器打开一个页面，能够同时显示源代码和汇编代码。</regex></p>\n<p>NOTE：更详细的 pprof 使用方法可以参考 pprof –help 或者 pprof 文档。</p>\n<p>Memory Profiling<br>要想获得内存使用 Profiling 信息，只需要把数据源修改一下就行（对于 http 方式来说就是修改 url 的地址，从 /debug/pprof/profile 改成 /debug/pprof/heap）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ <span class=\"keyword\">go</span> tool pprof ./hyperkube http:<span class=\"comment\">//172.16.3.232:10251/debug/pprof/heap</span></span><br><span class=\"line\">Fetching profile from http:<span class=\"comment\">//172.16.3.232:10251/debug/pprof/heap</span></span><br><span class=\"line\">Saved profile in /home/cizixs/pprof/pprof.hyperkube<span class=\"number\">.172</span><span class=\"number\">.16</span><span class=\"number\">.3</span><span class=\"number\">.232</span>:<span class=\"number\">10251.i</span>nuse_objects.inuse_space<span class=\"number\">.002</span>.pb.gz Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands) (pprof)</span><br></pre></td></tr></table></figure>\n<p>和 CPU Profiling 使用一样，使用 top N 可以打印出使用内存最多的函数列表：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(pprof) top</span><br></pre></td></tr></table></figure>\n<p>每一列的含义也是类似的，只不过从 CPU 使用时间变成了内存使用大小，就不多解释了。</p>\n<p>类似的，web 命令也能生成 svg 图片在浏览器中打开，从中可以看到函数调用关系，以及每个函数的内存使用多少。</p>\n<p>需要注意的是，默认情况下，统计的是内存使用大小，如果执行命令的时候加上 –inuse_objects 可以查看每个函数分配的对象数；–alloc-space 查看分配的内存空间大小。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> tool pprof -http=<span class=\"string\">\":60000\"</span> <span class=\"string\">'127.0.0.1:27159/debug/pprof/profile'</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> tool pprof -http=<span class=\"string\">\":60001\"</span> <span class=\"string\">'127.0.0.1:27159/debug/pprof/heap'</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> tool pprof -http=<span class=\"string\">\":60002\"</span> <span class=\"string\">'127.0.0.1:36514/debug/pprof/allocs'</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"pprof-的使用\"><a href=\"#pprof-的使用\" class=\"headerlink\" title=\"pprof 的使用\"></a>pprof 的使用</h2><p>什么是 Profiling?<br>Profiling 这个词比较难翻译，一般译成画像。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。</p>\n<p>在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用使用 CPU 和内存的情况。也就是说应用使用了多少 CPU 资源？都是哪些部分在使用？每个函数使用的比例是多少？有哪些函数在等待 CPU 资源？知道了这些，我们就能对应用进行规划，也能快速定位性能瓶颈。</p>\n<p>golang 是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。</p>\n<p>在 go 语言中，主要关注的应用运行情况主要包括以下几种：</p>\n<ul>\n<li>CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据</li>\n<li>Memory Profile（Heap Profile）：报告程序的内存使用情况</li>\n<li>Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈</li>\n<li>Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的</li>\n</ul>\n<p>两种收集方式</p>\n<p>做 Profiling 第一步就是怎么获取应用程序的运行情况数据。go 语言提供了 runtime/pprof 和 net/http/pprof 两个库，这部分我们讲讲它们的用法以及使用场景。</p>\n<h3 id=\"工具型应用\"><a href=\"#工具型应用\" class=\"headerlink\" title=\"工具型应用\"></a>工具型应用</h3><p>如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用 runtime/pprof 库。</p>\n<p>pprof 封装了很好的接口供我们使用，比如要想进行 CPU Profiling，可以调用 pprof.StartCPUProfile() 方法，它会对当前应用程序进行 CPU profiling，并写入到提供的参数中（w io.Writer），要停止调用 StopCPUProfile() 即可。</p>\n<p>去除错误处理只需要三行内容，一般把部分内容写在 main.go 文件中，应用程序启动之后就开始执行：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.Create(\\*cpuprofile) ... pprof.StartCPUProfile(f) <span class=\"keyword\">defer</span> pprof.StopCPUProfile()</span><br></pre></td></tr></table></figure>\n<p>应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。</p>\n<p>想要获得内存的数据，直接使用 WriteHeapProfile 就行，不用 start 和 stop 这两个步骤了：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f, err := os.Create(\\*memprofile) pprof.WriteHeapProfile(f) f.Close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务型应用\"><a href=\"#服务型应用\" class=\"headerlink\" title=\"服务型应用\"></a>服务型应用</h3><p>如果你的应用是一直运行的，比如 web 应用，那么可以使用 net/http/pprof 库，它能够在提供 HTTP 服务进行分析。</p>\n<p>如果使用了默认的 http.DefaultServeMux（通常是代码直接使用 http.ListenAndServe(“0.0.0.0:8000”, nil)），只需要添加一行：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> \\_ <span class=\"string\">\"net/http/pprof\"</span></span><br></pre></td></tr></table></figure>\n<p>如果你使用自定义的 Mux，则需要手动注册一些路由规则：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/\"</span>, pprof.Index)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/cmdline\"</span>, pprof.Cmdline)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/profile\"</span>, pprof.Profile)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/symbol\"</span>, pprof.Symbol)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/trace\"</span>, pprof.Trace)</span><br></pre></td></tr></table></figure>\n<p>不管哪种方式，你的 HTTP 服务都会多出 /debug/pprof endpoint，访问它会得到类似下面的内容：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/debug/pprof/</span><br><span class=\"line\"></span><br><span class=\"line\">profiles:</span><br><span class=\"line\"><span class=\"number\">0</span> block</span><br><span class=\"line\"><span class=\"number\">62</span> goroutine</span><br><span class=\"line\"><span class=\"number\">444</span> heap</span><br><span class=\"line\"><span class=\"number\">30</span> threadcreate</span><br><span class=\"line\"></span><br><span class=\"line\">full goroutine stack dump</span><br></pre></td></tr></table></figure>\n<p>这个路径下还有几个子页面：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 <span class=\"number\">30s</span>，并生成一个文件供下载</span><br><span class=\"line\">/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件</span><br><span class=\"line\">/debug/pprof/block：block Profiling 的路径</span><br><span class=\"line\">/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系</span><br></pre></td></tr></table></figure>\n<p>go tool pprof 命令：获取和分析 Profiling 数据<br>能通过对应的库获取想要的 Profiling 数据之后（不管是文件还是 http），下一步就是要对这些数据进行保存和分析，我们可以使用 go tool pprof 命令行工具。</p>\n<p>在后面我们会生成调用关系图和火焰图，需要安装 graphviz 软件包，在 ubuntu 系统可以使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y graphviz</span><br></pre></td></tr></table></figure>\n<p>NOTE：获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。否则如果应用处于空闲状态，得到的结果可能没有任何意义。</p>\n<p>CPU Profiling<br>go tool pprof 最简单的使用方式为 <code>go tool pprof [binary] [source]</code>，binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。比如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ <span class=\"keyword\">go</span> tool pprof ./hyperkube http:<span class=\"comment\">//172.16.3.232:10251/debug/pprof/profile</span></span><br><span class=\"line\">Fetching profile from http:<span class=\"comment\">//172.16.3.232:10251/debug/pprof/profile</span></span><br><span class=\"line\">Please wait... (<span class=\"number\">30s</span>)</span><br><span class=\"line\">Saved profile in /home/cizixs/pprof/pprof.hyperkube<span class=\"number\">.172</span><span class=\"number\">.16</span><span class=\"number\">.3</span><span class=\"number\">.232</span>:<span class=\"number\">10251.s</span>amples.cpu<span class=\"number\">.002</span>.pb.gz Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands) (pprof)</span><br></pre></td></tr></table></figure>\n<p>这个命令会进行 CPU profiling 分析，等待一段时间（默认是 30s，如果在 url 最后加上 ?seconds=60 参数可以调整采集数据的时间为 60s）之后，我们就进入了一个交互式命令行，可以对解析的结果进行查看和导出。可以通过 help 来查看支持的自命令有哪些。</p>\n<p>一个有用的命令是 topN，它列出最耗时间的地方：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(pprof) top10</span><br></pre></td></tr></table></figure>\n<p>每一行表示一个函数的信息。前两列表示函数在 CPU 上运行的时间以及百分比；第三列是当前所有函数累加使用 CPU 的比例；第四列和第五列代表这个函数以及子函数运行所占用的时间和比例（也被称为累加值 cumulative），应该大于等于前两列的值；最后一列就是函数的名字。如果应用程序有性能问题，上面这些信息应该能告诉我们时间都花费在哪些函数的执行上了。</p>\n<p>pprof 不仅能打印出最耗时的地方(top)，还能列出函数代码以及对应的取样数据(list)、汇编代码以及对应的取样数据(disasm)，而且能以各种样式进行输出，比如 svg、gv、callgrind、png、gif 等等。</p>\n<p>其中一个非常便利的是 web 命令，在交互模式下输入 web，就能自动生成一个 svg 文件，并跳转到浏览器打开，生成了一个函数调用图：</p>\n<p>这个调用图包含了更多的信息，而且可视化的图像能让我们更清楚地理解整个应用程序的全貌。图中每个方框对应一个函数，方框越大代表执行的时间越久（包括它调用的子函数执行时间，但并不是正比的关系）；方框之间的箭头代表着调用关系，箭头上的数字代表被调用函数的执行时间。</p>\n<p>因为原图比较大，这里只截取了其中一部分，但是能明显看到 encoding/json.(*decodeState).object 是这里耗时比较多的地方，而且能看到它调用了哪些函数，分别函数多少。这些更详细的信息对于定位和调优性能是非常有帮助的！</p>\n<p>要想更细致分析，就要精确到代码级别了，看看每行代码的耗时，直接定位到出现性能问题的那行代码。pprof 也能做到，list 命令后面跟着一个正则表达式，就能查看匹配函数的代码以及每行代码的耗时：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(pprof) list podFitsOnNode</span><br></pre></td></tr></table></figure>\n<p>如果想要了解对应的汇编代码，可以使用 disadm <regex> 命令。这两个命令虽然强大，但是在命令行中查看代码并不是很方面，所以你可以使用 weblist 命令，用法和两者一样，但它会在浏览器打开一个页面，能够同时显示源代码和汇编代码。</regex></p>\n<p>NOTE：更详细的 pprof 使用方法可以参考 pprof –help 或者 pprof 文档。</p>\n<p>Memory Profiling<br>要想获得内存使用 Profiling 信息，只需要把数据源修改一下就行（对于 http 方式来说就是修改 url 的地址，从 /debug/pprof/profile 改成 /debug/pprof/heap）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ <span class=\"keyword\">go</span> tool pprof ./hyperkube http:<span class=\"comment\">//172.16.3.232:10251/debug/pprof/heap</span></span><br><span class=\"line\">Fetching profile from http:<span class=\"comment\">//172.16.3.232:10251/debug/pprof/heap</span></span><br><span class=\"line\">Saved profile in /home/cizixs/pprof/pprof.hyperkube<span class=\"number\">.172</span><span class=\"number\">.16</span><span class=\"number\">.3</span><span class=\"number\">.232</span>:<span class=\"number\">10251.i</span>nuse_objects.inuse_space<span class=\"number\">.002</span>.pb.gz Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands) (pprof)</span><br></pre></td></tr></table></figure>\n<p>和 CPU Profiling 使用一样，使用 top N 可以打印出使用内存最多的函数列表：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(pprof) top</span><br></pre></td></tr></table></figure>\n<p>每一列的含义也是类似的，只不过从 CPU 使用时间变成了内存使用大小，就不多解释了。</p>\n<p>类似的，web 命令也能生成 svg 图片在浏览器中打开，从中可以看到函数调用关系，以及每个函数的内存使用多少。</p>\n<p>需要注意的是，默认情况下，统计的是内存使用大小，如果执行命令的时候加上 –inuse_objects 可以查看每个函数分配的对象数；–alloc-space 查看分配的内存空间大小。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> tool pprof -http=<span class=\"string\">\":60000\"</span> <span class=\"string\">'127.0.0.1:27159/debug/pprof/profile'</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> tool pprof -http=<span class=\"string\">\":60001\"</span> <span class=\"string\">'127.0.0.1:27159/debug/pprof/heap'</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> tool pprof -http=<span class=\"string\">\":60002\"</span> <span class=\"string\">'127.0.0.1:36514/debug/pprof/allocs'</span></span><br></pre></td></tr></table></figure>\n"},{"title":"golang闭包","date":"2019-03-16T10:54:36.000Z","_content":"\n## 闭包\n\n### 关键点\n\n- 闭包也是类，运行闭包等同于创建对象【类是数据附带行为，闭包是行为附带数据】\n- 区分全局变量和局部变量\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc add() func() int {\n\tsum := 1//全局变量\n\treturn func() int {\n\t\tvar a = 1//局部变量\n\t\tsum += a\n\t\treturn sum\n\t}\n}\n\nfunc main() {\n\tpos, neg := add(), add()\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Println(pos(), neg())\n\t}\n\n}\n\n```\n","source":"_posts/golang/golang闭包.md","raw":"---\ntitle: golang闭包\ntags:\n  - 闭包\ncategories:\n  - golang\ndate: 2019-03-16 18:54:36\n---\n\n## 闭包\n\n### 关键点\n\n- 闭包也是类，运行闭包等同于创建对象【类是数据附带行为，闭包是行为附带数据】\n- 区分全局变量和局部变量\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc add() func() int {\n\tsum := 1//全局变量\n\treturn func() int {\n\t\tvar a = 1//局部变量\n\t\tsum += a\n\t\treturn sum\n\t}\n}\n\nfunc main() {\n\tpos, neg := add(), add()\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Println(pos(), neg())\n\t}\n\n}\n\n```\n","slug":"golang/golang闭包","published":1,"updated":"2020-05-25T05:25:44.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6w001pg938378cgzvg","content":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h3><ul>\n<li>闭包也是类，运行闭包等同于创建对象【类是数据附带行为，闭包是行为附带数据】</li>\n<li>区分全局变量和局部变量</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span><span class=\"comment\">//全局变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> a = <span class=\"number\">1</span><span class=\"comment\">//局部变量</span></span><br><span class=\"line\">\t\tsum += a</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpos, neg := add(), add()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(pos(), neg())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h3><ul>\n<li>闭包也是类，运行闭包等同于创建对象【类是数据附带行为，闭包是行为附带数据】</li>\n<li>区分全局变量和局部变量</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span><span class=\"comment\">//全局变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> a = <span class=\"number\">1</span><span class=\"comment\">//局部变量</span></span><br><span class=\"line\">\t\tsum += a</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpos, neg := add(), add()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(pos(), neg())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"go错误和日志","date":"2019-10-16T02:19:05.000Z","_content":"\n## 错误处理\n\n在 Go 语言中声明 error 可以有多种方式：\n\n- errors.New 声明包含简单静态字符串的 error\n- fmt.Errorf 格式化 error string\n\n- 其他自定义类型使用了 Error() 方法\n- 使用 \"pkg/errors\".Wrap\n\n当要把 error 作为返回值的时候，可以考虑如下的处理方式\n\n- 是不是不需要额外信息，如果是，errors.New 就足够了。（4 星）\n- client 需要检测和处理返回的 error 吗？如果是，最好使用实现了 Error() 方法的自定义类型，这样可以包含更多的信息。（3 星）\n- error 是不是从下游函数传递过来的？如果是，考虑一下 error wrap。（5 星）\n- 其他情况，fmt.Errorf 一般足够了。（5 星）\n\n另外：在直接暴露自定义的 error 类型的时候，最好 export 配套的检测自定义 error 类型的函数。\n\n```go\ntype errNotFound struct {\n  file string\n}\n\nfunc (e errNotFound) Error() string {\n  return fmt.Sprintf(\"file %q not found\", e.file)\n}\n\nfunc IsNotFoundError(err error) bool {\n  _, ok := err.(errNotFound)\n  return ok\n}\n\nfunc Open(file string) error {\n  return errNotFound{file: file}\n}\n\n// package bar\n\nif err := foo.Open(\"foo\"); err != nil {\n  if foo.IsNotFoundError(err) {\n    // handle\n  } else {\n    panic(\"unknown error\")\n  }\n}\n```\n\n## 日志处理\n\n```go\nfmt.Errorf(\"unsupported signing method: %T\", opts.SignMethod)\nlog.Warn(\"unknown JWT options\", zap.Strings(\"keys\", keys))\nlog.Errorf(\"problem loading JWT options: %s\", err)\nlog.Infof(\"deleting token %s for user %s\", tk, username)\nlog.Errorf(\"failed to hash password: %s\", err)\n\n```\n","source":"_posts/golang/go错误和日志.md","raw":"---\ntitle: go错误和日志\ntags:\n  - go\n  - error\n  - log\ncategories:\n  - go\ndate: 2019-10-16 10:19:05\n---\n\n## 错误处理\n\n在 Go 语言中声明 error 可以有多种方式：\n\n- errors.New 声明包含简单静态字符串的 error\n- fmt.Errorf 格式化 error string\n\n- 其他自定义类型使用了 Error() 方法\n- 使用 \"pkg/errors\".Wrap\n\n当要把 error 作为返回值的时候，可以考虑如下的处理方式\n\n- 是不是不需要额外信息，如果是，errors.New 就足够了。（4 星）\n- client 需要检测和处理返回的 error 吗？如果是，最好使用实现了 Error() 方法的自定义类型，这样可以包含更多的信息。（3 星）\n- error 是不是从下游函数传递过来的？如果是，考虑一下 error wrap。（5 星）\n- 其他情况，fmt.Errorf 一般足够了。（5 星）\n\n另外：在直接暴露自定义的 error 类型的时候，最好 export 配套的检测自定义 error 类型的函数。\n\n```go\ntype errNotFound struct {\n  file string\n}\n\nfunc (e errNotFound) Error() string {\n  return fmt.Sprintf(\"file %q not found\", e.file)\n}\n\nfunc IsNotFoundError(err error) bool {\n  _, ok := err.(errNotFound)\n  return ok\n}\n\nfunc Open(file string) error {\n  return errNotFound{file: file}\n}\n\n// package bar\n\nif err := foo.Open(\"foo\"); err != nil {\n  if foo.IsNotFoundError(err) {\n    // handle\n  } else {\n    panic(\"unknown error\")\n  }\n}\n```\n\n## 日志处理\n\n```go\nfmt.Errorf(\"unsupported signing method: %T\", opts.SignMethod)\nlog.Warn(\"unknown JWT options\", zap.Strings(\"keys\", keys))\nlog.Errorf(\"problem loading JWT options: %s\", err)\nlog.Infof(\"deleting token %s for user %s\", tk, username)\nlog.Errorf(\"failed to hash password: %s\", err)\n\n```\n","slug":"golang/go错误和日志","published":1,"updated":"2020-05-25T05:11:31.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6y001sg9385l0a5zm2","content":"<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>在 Go 语言中声明 error 可以有多种方式：</p>\n<ul>\n<li>errors.New 声明包含简单静态字符串的 error</li>\n<li><p>fmt.Errorf 格式化 error string</p>\n</li>\n<li><p>其他自定义类型使用了 Error() 方法</p>\n</li>\n<li>使用 “pkg/errors”.Wrap</li>\n</ul>\n<p>当要把 error 作为返回值的时候，可以考虑如下的处理方式</p>\n<ul>\n<li>是不是不需要额外信息，如果是，errors.New 就足够了。（4 星）</li>\n<li>client 需要检测和处理返回的 error 吗？如果是，最好使用实现了 Error() 方法的自定义类型，这样可以包含更多的信息。（3 星）</li>\n<li>error 是不是从下游函数传递过来的？如果是，考虑一下 error wrap。（5 星）</li>\n<li>其他情况，fmt.Errorf 一般足够了。（5 星）</li>\n</ul>\n<p>另外：在直接暴露自定义的 error 类型的时候，最好 export 配套的检测自定义 error 类型的函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> errNotFound <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  file <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e errNotFound)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"file %q not found\"</span>, e.file)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">IsNotFoundError</span><span class=\"params\">(err error)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  _, ok := err.(errNotFound)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ok</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Open</span><span class=\"params\">(file <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> errNotFound&#123;file: file&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// package bar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> err := foo.Open(<span class=\"string\">\"foo\"</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> foo.IsNotFoundError(err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"unknown error\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"日志处理\"><a href=\"#日志处理\" class=\"headerlink\" title=\"日志处理\"></a>日志处理</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Errorf(<span class=\"string\">\"unsupported signing method: %T\"</span>, opts.SignMethod)</span><br><span class=\"line\">log.Warn(<span class=\"string\">\"unknown JWT options\"</span>, zap.Strings(<span class=\"string\">\"keys\"</span>, keys))</span><br><span class=\"line\">log.Errorf(<span class=\"string\">\"problem loading JWT options: %s\"</span>, err)</span><br><span class=\"line\">log.Infof(<span class=\"string\">\"deleting token %s for user %s\"</span>, tk, username)</span><br><span class=\"line\">log.Errorf(<span class=\"string\">\"failed to hash password: %s\"</span>, err)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>在 Go 语言中声明 error 可以有多种方式：</p>\n<ul>\n<li>errors.New 声明包含简单静态字符串的 error</li>\n<li><p>fmt.Errorf 格式化 error string</p>\n</li>\n<li><p>其他自定义类型使用了 Error() 方法</p>\n</li>\n<li>使用 “pkg/errors”.Wrap</li>\n</ul>\n<p>当要把 error 作为返回值的时候，可以考虑如下的处理方式</p>\n<ul>\n<li>是不是不需要额外信息，如果是，errors.New 就足够了。（4 星）</li>\n<li>client 需要检测和处理返回的 error 吗？如果是，最好使用实现了 Error() 方法的自定义类型，这样可以包含更多的信息。（3 星）</li>\n<li>error 是不是从下游函数传递过来的？如果是，考虑一下 error wrap。（5 星）</li>\n<li>其他情况，fmt.Errorf 一般足够了。（5 星）</li>\n</ul>\n<p>另外：在直接暴露自定义的 error 类型的时候，最好 export 配套的检测自定义 error 类型的函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> errNotFound <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  file <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e errNotFound)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"file %q not found\"</span>, e.file)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">IsNotFoundError</span><span class=\"params\">(err error)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  _, ok := err.(errNotFound)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ok</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Open</span><span class=\"params\">(file <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> errNotFound&#123;file: file&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// package bar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> err := foo.Open(<span class=\"string\">\"foo\"</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> foo.IsNotFoundError(err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"unknown error\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"日志处理\"><a href=\"#日志处理\" class=\"headerlink\" title=\"日志处理\"></a>日志处理</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Errorf(<span class=\"string\">\"unsupported signing method: %T\"</span>, opts.SignMethod)</span><br><span class=\"line\">log.Warn(<span class=\"string\">\"unknown JWT options\"</span>, zap.Strings(<span class=\"string\">\"keys\"</span>, keys))</span><br><span class=\"line\">log.Errorf(<span class=\"string\">\"problem loading JWT options: %s\"</span>, err)</span><br><span class=\"line\">log.Infof(<span class=\"string\">\"deleting token %s for user %s\"</span>, tk, username)</span><br><span class=\"line\">log.Errorf(<span class=\"string\">\"failed to hash password: %s\"</span>, err)</span><br></pre></td></tr></table></figure>\n"},{"title":"es6","date":"2018-12-19T08:13:42.000Z","_content":"\n## ES6\n\n### Babel\n\n是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码\n\nBabel 的配置文件是`.babelrc`，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。Babel 使用`babel-cli`工具，用于命令行转码。\n\n```js\n// 转码前\ninput.map((item) => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n\n### let 和 const\n\n```js\nlet 局部作用域，var全局作用域，const静态变量\n直接使用未声明，输出为：undefined\n```\n\n### 变量解析\n\n变量的解构赋值用途很多。\n\n交换变量的值\n\n```js\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n从函数返回多个值\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```js\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2,\n  };\n}\nlet { foo, bar } = example();\n```\n\n函数参数的定义\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```js\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n提取 JSON 数据\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```js\nlet jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309],\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n函数参数的默认值\n\n```js\njQuery.ajax = function (\n  url,\n  {\n    async = true,\n    beforeSend = function () {},\n    cache = true,\n    complete = function () {},\n    crossDomain = false,\n    global = true,\n    // ... more config\n  } = {}\n) {\n  // ... do stuff\n};\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n遍历 Map 结构\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```js\nconst map = new Map();\nmap.set(\"first\", \"hello\");\nmap.set(\"second\", \"world\");\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```js\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [, value] of map) {\n  // ...\n}\n```\n\n输入模块的指定方法\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```js\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```\n\n### 字符串使用\n\nUnicode 表示\n\n```js\n\"z\" === \"z\"; // true\n\"\\172\" === \"z\"; // true\n\"\\x7A\" === \"z\"; // true\n\"\\u007A\" === \"z\"; // true\n\"\\u{7A}\" === \"z\"; // true\n```\n\ncodePointAt()\n\n```js\nvar s = \"𠮷\";\n\ns.length; // 2\ns.charAt(0); // ''\ns.charAt(1); // ''\ns.charCodeAt(0); // 55362\ns.charCodeAt(1); // 57271\n```\n\nString.fromCodePoint()\n\n```js\nString.fromCodePoint(0x20bb7);\n// \"𠮷\"\nString.fromCodePoint(0x78, 0x1f680, 0x79) === \"x\\uD83D\\uDE80y\";\n// true\n```\n\n遍历 for let i of x\n\n```js\nfor (let codePoint of \"foo\") {\n  console.log(codePoint);\n}\n// \"f\"\n// \"o\"\n// \"o\"\n```\n\n字符串常用函数\n\n```js\nincludes()\nstartsWitch()\nendsWith()\nrepeat()\nmatchAll()\nmatch()、replace()、search()、split()\n```\n\n### 函数\n\n```js\n//默认值\nfunction log(x, y = \"World\") {\n  console.log(x, y);\n}\n\nlog(\"Hello\"); // Hello World\nlog(\"Hello\", \"China\"); // Hello China\nlog(\"Hello\", \"\"); // Hello\n\n//...函数[和golang差不多]\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3); // 10\nadd(...numbers);\n\n//lamda表达式\nvar sum = (num1, num2) => {\n  return num1 + num2;\n};\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function (num1, num2) {\n  return num1 + num2;\n};\n```\n\n### 数组\n\n```js\n//Array.from()\nlet arrayLike = {\n  \"0\": \"a\",\n  \"1\": \"b\",\n  \"2\": \"c\",\n  length: 3,\n};\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n//Array.of()\nArray.of(3, 11, 8); // [3,11,8]\n\n//遍历数组\nfor (let [index, elem] of [\"a\", \"b\"].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n### SET\n\n```js\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set];\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size; // 5\n```\n\n### class\n\n```js\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return \"(\" + this.x + \", \" + this.y + \")\";\n  }\n}\n```\n\n### 模块加载\n\n```js\n// ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。\nexport var firstName = \"Michael\";\nexport var lastName = \"Jackson\";\nexport var year = 1958;\nimport { stat, exists, readFile } from \"fs\";\nexport { area as circleArea } from \"circle\";\n```\n","source":"_posts/javascript/es6.md","raw":"---\ntitle: es6\ntags:\n  - ES6\ncategories:\n  - front-end\ndate: 2018-12-19 16:13:42\n---\n\n## ES6\n\n### Babel\n\n是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码\n\nBabel 的配置文件是`.babelrc`，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。Babel 使用`babel-cli`工具，用于命令行转码。\n\n```js\n// 转码前\ninput.map((item) => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n\n### let 和 const\n\n```js\nlet 局部作用域，var全局作用域，const静态变量\n直接使用未声明，输出为：undefined\n```\n\n### 变量解析\n\n变量的解构赋值用途很多。\n\n交换变量的值\n\n```js\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n从函数返回多个值\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```js\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2,\n  };\n}\nlet { foo, bar } = example();\n```\n\n函数参数的定义\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```js\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n提取 JSON 数据\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```js\nlet jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309],\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n函数参数的默认值\n\n```js\njQuery.ajax = function (\n  url,\n  {\n    async = true,\n    beforeSend = function () {},\n    cache = true,\n    complete = function () {},\n    crossDomain = false,\n    global = true,\n    // ... more config\n  } = {}\n) {\n  // ... do stuff\n};\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n遍历 Map 结构\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```js\nconst map = new Map();\nmap.set(\"first\", \"hello\");\nmap.set(\"second\", \"world\");\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```js\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [, value] of map) {\n  // ...\n}\n```\n\n输入模块的指定方法\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```js\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```\n\n### 字符串使用\n\nUnicode 表示\n\n```js\n\"z\" === \"z\"; // true\n\"\\172\" === \"z\"; // true\n\"\\x7A\" === \"z\"; // true\n\"\\u007A\" === \"z\"; // true\n\"\\u{7A}\" === \"z\"; // true\n```\n\ncodePointAt()\n\n```js\nvar s = \"𠮷\";\n\ns.length; // 2\ns.charAt(0); // ''\ns.charAt(1); // ''\ns.charCodeAt(0); // 55362\ns.charCodeAt(1); // 57271\n```\n\nString.fromCodePoint()\n\n```js\nString.fromCodePoint(0x20bb7);\n// \"𠮷\"\nString.fromCodePoint(0x78, 0x1f680, 0x79) === \"x\\uD83D\\uDE80y\";\n// true\n```\n\n遍历 for let i of x\n\n```js\nfor (let codePoint of \"foo\") {\n  console.log(codePoint);\n}\n// \"f\"\n// \"o\"\n// \"o\"\n```\n\n字符串常用函数\n\n```js\nincludes()\nstartsWitch()\nendsWith()\nrepeat()\nmatchAll()\nmatch()、replace()、search()、split()\n```\n\n### 函数\n\n```js\n//默认值\nfunction log(x, y = \"World\") {\n  console.log(x, y);\n}\n\nlog(\"Hello\"); // Hello World\nlog(\"Hello\", \"China\"); // Hello China\nlog(\"Hello\", \"\"); // Hello\n\n//...函数[和golang差不多]\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3); // 10\nadd(...numbers);\n\n//lamda表达式\nvar sum = (num1, num2) => {\n  return num1 + num2;\n};\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function (num1, num2) {\n  return num1 + num2;\n};\n```\n\n### 数组\n\n```js\n//Array.from()\nlet arrayLike = {\n  \"0\": \"a\",\n  \"1\": \"b\",\n  \"2\": \"c\",\n  length: 3,\n};\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n//Array.of()\nArray.of(3, 11, 8); // [3,11,8]\n\n//遍历数组\nfor (let [index, elem] of [\"a\", \"b\"].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n### SET\n\n```js\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set];\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size; // 5\n```\n\n### class\n\n```js\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return \"(\" + this.x + \", \" + this.y + \")\";\n  }\n}\n```\n\n### 模块加载\n\n```js\n// ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。\nexport var firstName = \"Michael\";\nexport var lastName = \"Jackson\";\nexport var year = 1958;\nimport { stat, exists, readFile } from \"fs\";\nexport { area as circleArea } from \"circle\";\n```\n","slug":"javascript/es6","published":1,"updated":"2020-05-25T05:41:55.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr6z001vg93867bp03xa","content":"<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码</p>\n<p>Babel 的配置文件是<code>.babelrc</code>，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。Babel 使用<code>babel-cli</code>工具，用于命令行转码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转码前</span></span><br><span class=\"line\">input.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转码后</span></span><br><span class=\"line\">input.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"let-和-const\"><a href=\"#let-和-const\" class=\"headerlink\" title=\"let 和 const\"></a>let 和 const</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> 局部作用域，<span class=\"keyword\">var</span>全局作用域，<span class=\"keyword\">const</span>静态变量</span><br><span class=\"line\">直接使用未声明，输出为：<span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"变量解析\"><a href=\"#变量解析\" class=\"headerlink\" title=\"变量解析\"></a>变量解析</h3><p>变量的解构赋值用途很多。</p>\n<p>交换变量的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p>从函数返回多个值</p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n<p>函数参数的定义</p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>提取 JSON 数据</p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p>函数参数的默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  url,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    async = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class=\"line\">    cache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    crossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    global = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ... more config</span></span><br><span class=\"line\">  &#125; = &#123;&#125;</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p>遍历 Map 结构</p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">\"first\"</span>, <span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">\"second\"</span>, <span class=\"string\">\"world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输入模块的指定方法</p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串使用\"><a href=\"#字符串使用\" class=\"headerlink\" title=\"字符串使用\"></a>字符串使用</h3><p>Unicode 表示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"z\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"\\172\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"\\x7A\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"\\u007A\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"\\u&#123;7A&#125;\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>codePointAt()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"𠮷\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.length; <span class=\"comment\">// 2</span></span><br><span class=\"line\">s.charAt(<span class=\"number\">0</span>); <span class=\"comment\">// ''</span></span><br><span class=\"line\">s.charAt(<span class=\"number\">1</span>); <span class=\"comment\">// ''</span></span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">0</span>); <span class=\"comment\">// 55362</span></span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">1</span>); <span class=\"comment\">// 57271</span></span><br></pre></td></tr></table></figure>\n<p>String.fromCodePoint()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20bb7</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x78</span>, <span class=\"number\">0x1f680</span>, <span class=\"number\">0x79</span>) === <span class=\"string\">\"x\\uD83D\\uDE80y\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>遍历 for let i of x</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> codePoint <span class=\"keyword\">of</span> <span class=\"string\">\"foo\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(codePoint);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"f\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n<p>字符串常用函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">includes()</span><br><span class=\"line\">startsWitch()</span><br><span class=\"line\">endsWith()</span><br><span class=\"line\">repeat()</span><br><span class=\"line\">matchAll()</span><br><span class=\"line\">match()、replace()、search()、split()</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">\"World\"</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">\"Hello\"</span>); <span class=\"comment\">// Hello World</span></span><br><span class=\"line\">log(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"China\"</span>); <span class=\"comment\">// Hello China</span></span><br><span class=\"line\">log(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"\"</span>); <span class=\"comment\">// Hello</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...函数[和golang差不多]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 10</span></span><br><span class=\"line\">add(...numbers);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//lamda表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Array.from()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"0\"</span>: <span class=\"string\">\"a\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"1\"</span>: <span class=\"string\">\"b\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"2\"</span>: <span class=\"string\">\"c\"</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"built_in\">Array</span>.from(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br><span class=\"line\"><span class=\"comment\">//Array.of()</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>); <span class=\"comment\">// [3,11,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// 1 \"b\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]);</span><br><span class=\"line\">[...set];</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> items = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">items.size; <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">\", \"</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块加载\"><a href=\"#模块加载\" class=\"headerlink\" title=\"模块加载\"></a>模块加载</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">\"Michael\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">\"Jackson\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; stat, exists, readFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"fs\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; area <span class=\"keyword\">as</span> circleArea &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"circle\"</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码</p>\n<p>Babel 的配置文件是<code>.babelrc</code>，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。Babel 使用<code>babel-cli</code>工具，用于命令行转码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转码前</span></span><br><span class=\"line\">input.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转码后</span></span><br><span class=\"line\">input.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"let-和-const\"><a href=\"#let-和-const\" class=\"headerlink\" title=\"let 和 const\"></a>let 和 const</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> 局部作用域，<span class=\"keyword\">var</span>全局作用域，<span class=\"keyword\">const</span>静态变量</span><br><span class=\"line\">直接使用未声明，输出为：<span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"变量解析\"><a href=\"#变量解析\" class=\"headerlink\" title=\"变量解析\"></a>变量解析</h3><p>变量的解构赋值用途很多。</p>\n<p>交换变量的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p>从函数返回多个值</p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n<p>函数参数的定义</p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>提取 JSON 数据</p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p>函数参数的默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  url,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    async = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class=\"line\">    cache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    crossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    global = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ... more config</span></span><br><span class=\"line\">  &#125; = &#123;&#125;</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p>遍历 Map 结构</p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">\"first\"</span>, <span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">\"second\"</span>, <span class=\"string\">\"world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输入模块的指定方法</p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串使用\"><a href=\"#字符串使用\" class=\"headerlink\" title=\"字符串使用\"></a>字符串使用</h3><p>Unicode 表示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"z\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"\\172\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"\\x7A\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"\\u007A\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"\\u&#123;7A&#125;\"</span> === <span class=\"string\">\"z\"</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>codePointAt()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"𠮷\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.length; <span class=\"comment\">// 2</span></span><br><span class=\"line\">s.charAt(<span class=\"number\">0</span>); <span class=\"comment\">// ''</span></span><br><span class=\"line\">s.charAt(<span class=\"number\">1</span>); <span class=\"comment\">// ''</span></span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">0</span>); <span class=\"comment\">// 55362</span></span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">1</span>); <span class=\"comment\">// 57271</span></span><br></pre></td></tr></table></figure>\n<p>String.fromCodePoint()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20bb7</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x78</span>, <span class=\"number\">0x1f680</span>, <span class=\"number\">0x79</span>) === <span class=\"string\">\"x\\uD83D\\uDE80y\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>遍历 for let i of x</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> codePoint <span class=\"keyword\">of</span> <span class=\"string\">\"foo\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(codePoint);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"f\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n<p>字符串常用函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">includes()</span><br><span class=\"line\">startsWitch()</span><br><span class=\"line\">endsWith()</span><br><span class=\"line\">repeat()</span><br><span class=\"line\">matchAll()</span><br><span class=\"line\">match()、replace()、search()、split()</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">\"World\"</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log(<span class=\"string\">\"Hello\"</span>); <span class=\"comment\">// Hello World</span></span><br><span class=\"line\">log(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"China\"</span>); <span class=\"comment\">// Hello China</span></span><br><span class=\"line\">log(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"\"</span>); <span class=\"comment\">// Hello</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...函数[和golang差不多]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 10</span></span><br><span class=\"line\">add(...numbers);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//lamda表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Array.from()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"0\"</span>: <span class=\"string\">\"a\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"1\"</span>: <span class=\"string\">\"b\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"2\"</span>: <span class=\"string\">\"c\"</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"built_in\">Array</span>.from(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br><span class=\"line\"><span class=\"comment\">//Array.of()</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>); <span class=\"comment\">// [3,11,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// 1 \"b\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]);</span><br><span class=\"line\">[...set];</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> items = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">items.size; <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">\", \"</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块加载\"><a href=\"#模块加载\" class=\"headerlink\" title=\"模块加载\"></a>模块加载</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">\"Michael\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">\"Jackson\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; stat, exists, readFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"fs\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; area <span class=\"keyword\">as</span> circleArea &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"circle\"</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"net/http包关键点解析","date":"2019-03-03T05:23:19.000Z","_content":"\n## net/http 包关键点解析\n\n### Go 创建一个 http server\n\n如何创建 http server 服务端\n\n核心\n\n1.保存 path 和 handler 的对应关系\n\n2.请求过来时，查找 path 对应的 handler，然后调用 handler 的 ServeHTTP(w, r)方法\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n)\n\nfunc SayHello(w http.ResponseWriter, req *http.Request) {\n    w.Write([]byte(\"Hello\"))\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", SayHello)\n    http.ListenAndServe(\":8001\", nil)\n\n}\n\n```\n\n首先调用 Http.HandleFunc\n\n按顺序做了几件事：\n\n1. 调用了 DefaultServerMux 的 HandleFunc\n2. 调用了 DefaultServerMux 的 Handle\n3. 往 DefaultServeMux 的 map[string]muxEntry 中增加对应的 handler 和路由规则\n\n其次调用 http.ListenAndServe(“:8001”, nil)\n按顺序做了几件事情：\n\n- 实例化 Server\n- 调用 Server 的 ListenAndServe()\n- 调用 net.Listen(“tcp”, addr)监听端口\n- 启动一个 for 循环，在循环体中 Accept 请求\n  对每个请求实例化一个 Conn，并且开启一个 goroutine 为这个请求进行服务 go c.serve()\n  读取每个请求的内容 w, err := c.readRequest()\n- 判断 header 是否为空，如果没有设置 handler（这个例子就没有设置 handler），handler 就设置为 DefaultServeMux 调用 handler 的 ServeHttp\n  下面就进入到 DefaultServerMux.ServeHttp\n- 根据 request 选择 handler，并且进入到这个 handler 的 ServeHTTP mux.handler(r).ServeHTTP(w, r)选择 handler： - 判断是否有路由能满足这个 request（循环历 ServerMux 的 muxEntry）\n- 如果有路由满足，调用这个路由 handler 的 ServeHttp\n- 如果没有路由满足，调用 NotFoundHandler 的 ServeHttp\n\n### Go 发送 http 请求\n\n步骤\n\n1. 创建 request\n2. 创建一个 Client 将 request 发送出去，依赖底层 RT 实现，可以是默认的 Transport，也可以是 Mock 的 Transport 或者带缓存的 Transport\n\n```go\nfunc httpDo() {\n    //默认的往返车RT,RoundTripper ，http.Transport默认的网络传输器net.Conn读写\n    tr := &http.Transport{\n    MaxIdleConns:       10,\n    IdleConnTimeout:    30 * time.Second,\n    DisableCompression: true,\n  }\n    client := &http.Client{Transport: tr}\n\n    req, err := http.NewRequest(\"POST\", \"http://www.baidu.com\", strings.NewReader(\"name=cjb\"))\n    if err != nil {\n        // handle error\n    }\n    req.Header.Set(\"Cookie\", \"name=anny\")\n\n    resp, err := client.Do(req)\n\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        // handle error\n    }\n\n    fmt.Println(string(body))\n}\n```\n\n```go\n//带缓存的传输器\nfunc (c *cacheTransport) RoundTrip(r *http.Request) (*http.Response, error) {\n\n    // Check if we have the response cached..\n    // If yes, we don't have to hit the server\n    // We just return it as is from the cache store.\n    if val, err := c.Get(r); err == nil {\n        fmt.Println(\"Fetching the response from the cache\")\n        return cachedResponse([]byte(val), r)\n    }\n\n    // Ok, we don't have the response cached, the store was probably cleared.\n    // Make the request to the server.\n    resp, err := c.originalTransport.RoundTrip(r)\n\n    if err != nil {\n        return nil, err\n    }\n\n    // Get the body of the response so we can save it in the cache for the next request.\n    buf, err := httputil.DumpResponse(resp, true)\n\n    if err != nil {\n        return nil, err\n    }\n\n    // Saving it to the cache store\n    c.Set(r, string(buf))\n\n    fmt.Println(\"Fetching the data from the real source\")\n    return resp, nil\n}\n//使用：\ncachedTransport := newTransport()\n// cachedTransport 是自定义实现http.RoundTripper接口的 Transport\nclient := &http.Client{\n    Transport: cachedTransport,\n    Timeout:   time.Second * 5,\n}\n\n```\n\n## 问题\n\nnet/http 相关类介绍？\n\n```go\nServer： 服务器类，接收请求后起协程 处理请求：go srv.newConn(rw).serve(ctx)\n\nconn：server的连接实例，负责解析请求，构建Request和Response，并将参数传递给路由Mux处理\n\nDefaultServerMux：默认路由，负责根据path找对应的handler执行，对应的ServeHTTP(w,r)\n\nHandler：业务自己写的逻辑函数，包含一个ServeHTTP(w,r)方法\n\nRequest：请求体，包含请求头和请求体等各种参数\n\nResponse：返回体，包含请求体，返回的conn实例\n\nClient：客户端client，调用底层传输器发送请求\n\nTransport：Http默认传输器，发送网络请求\n\n\n```\n\n函数 HandlerFunc 如何变成 handler?\n\n> 设计模式之适配器模式\n\n```go\ntype Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n\n//适配器模式，函数是一个类，也可以拥有函数\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n\tf(w, r)\n}\n\n```\n\nDefaultServerMux 可以替换吗？\n\n> 可以，如使用 httprouter 替换默认的 DefaultServerMux 路由\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/julienschmidt/httprouter\"\n    \"net/http\"\n    \"log\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n    fmt.Fprint(w, \"Welcome!\\n\")\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    fmt.Fprintf(w, \"hello, %s!\\n\", ps.ByName(\"name\"))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\"/\", Index)\n    router.GET(\"/hello/:name\", Hello)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n\n```\n","source":"_posts/golang/net-http包关键点解析.md","raw":"---\ntitle: net/http包关键点解析\ntags:\n  - net/http\ncategories:\n  - go\ndate: 2019-03-03 13:23:19\n---\n\n## net/http 包关键点解析\n\n### Go 创建一个 http server\n\n如何创建 http server 服务端\n\n核心\n\n1.保存 path 和 handler 的对应关系\n\n2.请求过来时，查找 path 对应的 handler，然后调用 handler 的 ServeHTTP(w, r)方法\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n)\n\nfunc SayHello(w http.ResponseWriter, req *http.Request) {\n    w.Write([]byte(\"Hello\"))\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", SayHello)\n    http.ListenAndServe(\":8001\", nil)\n\n}\n\n```\n\n首先调用 Http.HandleFunc\n\n按顺序做了几件事：\n\n1. 调用了 DefaultServerMux 的 HandleFunc\n2. 调用了 DefaultServerMux 的 Handle\n3. 往 DefaultServeMux 的 map[string]muxEntry 中增加对应的 handler 和路由规则\n\n其次调用 http.ListenAndServe(“:8001”, nil)\n按顺序做了几件事情：\n\n- 实例化 Server\n- 调用 Server 的 ListenAndServe()\n- 调用 net.Listen(“tcp”, addr)监听端口\n- 启动一个 for 循环，在循环体中 Accept 请求\n  对每个请求实例化一个 Conn，并且开启一个 goroutine 为这个请求进行服务 go c.serve()\n  读取每个请求的内容 w, err := c.readRequest()\n- 判断 header 是否为空，如果没有设置 handler（这个例子就没有设置 handler），handler 就设置为 DefaultServeMux 调用 handler 的 ServeHttp\n  下面就进入到 DefaultServerMux.ServeHttp\n- 根据 request 选择 handler，并且进入到这个 handler 的 ServeHTTP mux.handler(r).ServeHTTP(w, r)选择 handler： - 判断是否有路由能满足这个 request（循环历 ServerMux 的 muxEntry）\n- 如果有路由满足，调用这个路由 handler 的 ServeHttp\n- 如果没有路由满足，调用 NotFoundHandler 的 ServeHttp\n\n### Go 发送 http 请求\n\n步骤\n\n1. 创建 request\n2. 创建一个 Client 将 request 发送出去，依赖底层 RT 实现，可以是默认的 Transport，也可以是 Mock 的 Transport 或者带缓存的 Transport\n\n```go\nfunc httpDo() {\n    //默认的往返车RT,RoundTripper ，http.Transport默认的网络传输器net.Conn读写\n    tr := &http.Transport{\n    MaxIdleConns:       10,\n    IdleConnTimeout:    30 * time.Second,\n    DisableCompression: true,\n  }\n    client := &http.Client{Transport: tr}\n\n    req, err := http.NewRequest(\"POST\", \"http://www.baidu.com\", strings.NewReader(\"name=cjb\"))\n    if err != nil {\n        // handle error\n    }\n    req.Header.Set(\"Cookie\", \"name=anny\")\n\n    resp, err := client.Do(req)\n\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        // handle error\n    }\n\n    fmt.Println(string(body))\n}\n```\n\n```go\n//带缓存的传输器\nfunc (c *cacheTransport) RoundTrip(r *http.Request) (*http.Response, error) {\n\n    // Check if we have the response cached..\n    // If yes, we don't have to hit the server\n    // We just return it as is from the cache store.\n    if val, err := c.Get(r); err == nil {\n        fmt.Println(\"Fetching the response from the cache\")\n        return cachedResponse([]byte(val), r)\n    }\n\n    // Ok, we don't have the response cached, the store was probably cleared.\n    // Make the request to the server.\n    resp, err := c.originalTransport.RoundTrip(r)\n\n    if err != nil {\n        return nil, err\n    }\n\n    // Get the body of the response so we can save it in the cache for the next request.\n    buf, err := httputil.DumpResponse(resp, true)\n\n    if err != nil {\n        return nil, err\n    }\n\n    // Saving it to the cache store\n    c.Set(r, string(buf))\n\n    fmt.Println(\"Fetching the data from the real source\")\n    return resp, nil\n}\n//使用：\ncachedTransport := newTransport()\n// cachedTransport 是自定义实现http.RoundTripper接口的 Transport\nclient := &http.Client{\n    Transport: cachedTransport,\n    Timeout:   time.Second * 5,\n}\n\n```\n\n## 问题\n\nnet/http 相关类介绍？\n\n```go\nServer： 服务器类，接收请求后起协程 处理请求：go srv.newConn(rw).serve(ctx)\n\nconn：server的连接实例，负责解析请求，构建Request和Response，并将参数传递给路由Mux处理\n\nDefaultServerMux：默认路由，负责根据path找对应的handler执行，对应的ServeHTTP(w,r)\n\nHandler：业务自己写的逻辑函数，包含一个ServeHTTP(w,r)方法\n\nRequest：请求体，包含请求头和请求体等各种参数\n\nResponse：返回体，包含请求体，返回的conn实例\n\nClient：客户端client，调用底层传输器发送请求\n\nTransport：Http默认传输器，发送网络请求\n\n\n```\n\n函数 HandlerFunc 如何变成 handler?\n\n> 设计模式之适配器模式\n\n```go\ntype Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n\n//适配器模式，函数是一个类，也可以拥有函数\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n\tf(w, r)\n}\n\n```\n\nDefaultServerMux 可以替换吗？\n\n> 可以，如使用 httprouter 替换默认的 DefaultServerMux 路由\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/julienschmidt/httprouter\"\n    \"net/http\"\n    \"log\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n    fmt.Fprint(w, \"Welcome!\\n\")\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    fmt.Fprintf(w, \"hello, %s!\\n\", ps.ByName(\"name\"))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\"/\", Index)\n    router.GET(\"/hello/:name\", Hello)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n\n```\n","slug":"golang/net-http包关键点解析","published":1,"updated":"2020-05-25T05:38:37.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr70001zg9384r13yn8q","content":"<h2 id=\"net-http-包关键点解析\"><a href=\"#net-http-包关键点解析\" class=\"headerlink\" title=\"net/http 包关键点解析\"></a>net/http 包关键点解析</h2><h3 id=\"Go-创建一个-http-server\"><a href=\"#Go-创建一个-http-server\" class=\"headerlink\" title=\"Go 创建一个 http server\"></a>Go 创建一个 http server</h3><p>如何创建 http server 服务端</p>\n<p>核心</p>\n<p>1.保存 path 和 handler 的对应关系</p>\n<p>2.请求过来时，查找 path 对应的 handler，然后调用 handler 的 ServeHTTP(w, r)方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SayHello</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Hello\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/hello\"</span>, SayHello)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8001\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先调用 Http.HandleFunc</p>\n<p>按顺序做了几件事：</p>\n<ol>\n<li>调用了 DefaultServerMux 的 HandleFunc</li>\n<li>调用了 DefaultServerMux 的 Handle</li>\n<li>往 DefaultServeMux 的 map[string]muxEntry 中增加对应的 handler 和路由规则</li>\n</ol>\n<p>其次调用 http.ListenAndServe(“:8001”, nil)<br>按顺序做了几件事情：</p>\n<ul>\n<li>实例化 Server</li>\n<li>调用 Server 的 ListenAndServe()</li>\n<li>调用 net.Listen(“tcp”, addr)监听端口</li>\n<li>启动一个 for 循环，在循环体中 Accept 请求<br>对每个请求实例化一个 Conn，并且开启一个 goroutine 为这个请求进行服务 go c.serve()<br>读取每个请求的内容 w, err := c.readRequest()</li>\n<li>判断 header 是否为空，如果没有设置 handler（这个例子就没有设置 handler），handler 就设置为 DefaultServeMux 调用 handler 的 ServeHttp<br>下面就进入到 DefaultServerMux.ServeHttp</li>\n<li>根据 request 选择 handler，并且进入到这个 handler 的 ServeHTTP mux.handler(r).ServeHTTP(w, r)选择 handler： - 判断是否有路由能满足这个 request（循环历 ServerMux 的 muxEntry）</li>\n<li>如果有路由满足，调用这个路由 handler 的 ServeHttp</li>\n<li>如果没有路由满足，调用 NotFoundHandler 的 ServeHttp</li>\n</ul>\n<h3 id=\"Go-发送-http-请求\"><a href=\"#Go-发送-http-请求\" class=\"headerlink\" title=\"Go 发送 http 请求\"></a>Go 发送 http 请求</h3><p>步骤</p>\n<ol>\n<li>创建 request</li>\n<li>创建一个 Client 将 request 发送出去，依赖底层 RT 实现，可以是默认的 Transport，也可以是 Mock 的 Transport 或者带缓存的 Transport</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">httpDo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认的往返车RT,RoundTripper ，http.Transport默认的网络传输器net.Conn读写</span></span><br><span class=\"line\">    tr := &amp;http.Transport&#123;</span><br><span class=\"line\">    MaxIdleConns:       <span class=\"number\">10</span>,</span><br><span class=\"line\">    IdleConnTimeout:    <span class=\"number\">30</span> * time.Second,</span><br><span class=\"line\">    DisableCompression: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    client := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    req, err := http.NewRequest(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"http://www.baidu.com\"</span>, strings.NewReader(<span class=\"string\">\"name=cjb\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    req.Header.Set(<span class=\"string\">\"Cookie\"</span>, <span class=\"string\">\"name=anny\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    resp, err := client.Do(req)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> resp.Body.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(body))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//带缓存的传输器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *cacheTransport)</span> <span class=\"title\">RoundTrip</span><span class=\"params\">(r *http.Request)</span> <span class=\"params\">(*http.Response, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if we have the response cached..</span></span><br><span class=\"line\">    <span class=\"comment\">// If yes, we don't have to hit the server</span></span><br><span class=\"line\">    <span class=\"comment\">// We just return it as is from the cache store.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> val, err := c.Get(r); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"Fetching the response from the cache\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedResponse([]<span class=\"keyword\">byte</span>(val), r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ok, we don't have the response cached, the store was probably cleared.</span></span><br><span class=\"line\">    <span class=\"comment\">// Make the request to the server.</span></span><br><span class=\"line\">    resp, err := c.originalTransport.RoundTrip(r)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get the body of the response so we can save it in the cache for the next request.</span></span><br><span class=\"line\">    buf, err := httputil.DumpResponse(resp, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Saving it to the cache store</span></span><br><span class=\"line\">    c.Set(r, <span class=\"keyword\">string</span>(buf))</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Fetching the data from the real source\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用：</span></span><br><span class=\"line\">cachedTransport := newTransport()</span><br><span class=\"line\"><span class=\"comment\">// cachedTransport 是自定义实现http.RoundTripper接口的 Transport</span></span><br><span class=\"line\">client := &amp;http.Client&#123;</span><br><span class=\"line\">    Transport: cachedTransport,</span><br><span class=\"line\">    Timeout:   time.Second * <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>net/http 相关类介绍？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server： 服务器类，接收请求后起协程 处理请求：<span class=\"keyword\">go</span> srv.newConn(rw).serve(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">conn：server的连接实例，负责解析请求，构建Request和Response，并将参数传递给路由Mux处理</span><br><span class=\"line\"></span><br><span class=\"line\">DefaultServerMux：默认路由，负责根据path找对应的handler执行，对应的ServeHTTP(w,r)</span><br><span class=\"line\"></span><br><span class=\"line\">Handler：业务自己写的逻辑函数，包含一个ServeHTTP(w,r)方法</span><br><span class=\"line\"></span><br><span class=\"line\">Request：请求体，包含请求头和请求体等各种参数</span><br><span class=\"line\"></span><br><span class=\"line\">Response：返回体，包含请求体，返回的conn实例</span><br><span class=\"line\"></span><br><span class=\"line\">Client：客户端client，调用底层传输器发送请求</span><br><span class=\"line\"></span><br><span class=\"line\">Transport：Http默认传输器，发送网络请求</span><br></pre></td></tr></table></figure>\n<p>函数 HandlerFunc 如何变成 handler?</p>\n<blockquote>\n<p>设计模式之适配器模式</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Handler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServeHTTP(ResponseWriter, *Request)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//适配器模式，函数是一个类，也可以拥有函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f HandlerFunc)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class=\"line\">\tf(w, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DefaultServerMux 可以替换吗？</p>\n<blockquote>\n<p>可以，如使用 httprouter 替换默认的 DefaultServerMux 路由</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/julienschmidt/httprouter\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprint(w, <span class=\"string\">\"Welcome!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintf(w, <span class=\"string\">\"hello, %s!\\n\"</span>, ps.ByName(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    router := httprouter.New()</span><br><span class=\"line\">    router.GET(<span class=\"string\">\"/\"</span>, Index)</span><br><span class=\"line\">    router.GET(<span class=\"string\">\"/hello/:name\"</span>, Hello)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"net-http-包关键点解析\"><a href=\"#net-http-包关键点解析\" class=\"headerlink\" title=\"net/http 包关键点解析\"></a>net/http 包关键点解析</h2><h3 id=\"Go-创建一个-http-server\"><a href=\"#Go-创建一个-http-server\" class=\"headerlink\" title=\"Go 创建一个 http server\"></a>Go 创建一个 http server</h3><p>如何创建 http server 服务端</p>\n<p>核心</p>\n<p>1.保存 path 和 handler 的对应关系</p>\n<p>2.请求过来时，查找 path 对应的 handler，然后调用 handler 的 ServeHTTP(w, r)方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SayHello</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Hello\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/hello\"</span>, SayHello)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8001\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先调用 Http.HandleFunc</p>\n<p>按顺序做了几件事：</p>\n<ol>\n<li>调用了 DefaultServerMux 的 HandleFunc</li>\n<li>调用了 DefaultServerMux 的 Handle</li>\n<li>往 DefaultServeMux 的 map[string]muxEntry 中增加对应的 handler 和路由规则</li>\n</ol>\n<p>其次调用 http.ListenAndServe(“:8001”, nil)<br>按顺序做了几件事情：</p>\n<ul>\n<li>实例化 Server</li>\n<li>调用 Server 的 ListenAndServe()</li>\n<li>调用 net.Listen(“tcp”, addr)监听端口</li>\n<li>启动一个 for 循环，在循环体中 Accept 请求<br>对每个请求实例化一个 Conn，并且开启一个 goroutine 为这个请求进行服务 go c.serve()<br>读取每个请求的内容 w, err := c.readRequest()</li>\n<li>判断 header 是否为空，如果没有设置 handler（这个例子就没有设置 handler），handler 就设置为 DefaultServeMux 调用 handler 的 ServeHttp<br>下面就进入到 DefaultServerMux.ServeHttp</li>\n<li>根据 request 选择 handler，并且进入到这个 handler 的 ServeHTTP mux.handler(r).ServeHTTP(w, r)选择 handler： - 判断是否有路由能满足这个 request（循环历 ServerMux 的 muxEntry）</li>\n<li>如果有路由满足，调用这个路由 handler 的 ServeHttp</li>\n<li>如果没有路由满足，调用 NotFoundHandler 的 ServeHttp</li>\n</ul>\n<h3 id=\"Go-发送-http-请求\"><a href=\"#Go-发送-http-请求\" class=\"headerlink\" title=\"Go 发送 http 请求\"></a>Go 发送 http 请求</h3><p>步骤</p>\n<ol>\n<li>创建 request</li>\n<li>创建一个 Client 将 request 发送出去，依赖底层 RT 实现，可以是默认的 Transport，也可以是 Mock 的 Transport 或者带缓存的 Transport</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">httpDo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认的往返车RT,RoundTripper ，http.Transport默认的网络传输器net.Conn读写</span></span><br><span class=\"line\">    tr := &amp;http.Transport&#123;</span><br><span class=\"line\">    MaxIdleConns:       <span class=\"number\">10</span>,</span><br><span class=\"line\">    IdleConnTimeout:    <span class=\"number\">30</span> * time.Second,</span><br><span class=\"line\">    DisableCompression: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    client := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    req, err := http.NewRequest(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"http://www.baidu.com\"</span>, strings.NewReader(<span class=\"string\">\"name=cjb\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    req.Header.Set(<span class=\"string\">\"Cookie\"</span>, <span class=\"string\">\"name=anny\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    resp, err := client.Do(req)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> resp.Body.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(body))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//带缓存的传输器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *cacheTransport)</span> <span class=\"title\">RoundTrip</span><span class=\"params\">(r *http.Request)</span> <span class=\"params\">(*http.Response, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if we have the response cached..</span></span><br><span class=\"line\">    <span class=\"comment\">// If yes, we don't have to hit the server</span></span><br><span class=\"line\">    <span class=\"comment\">// We just return it as is from the cache store.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> val, err := c.Get(r); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"Fetching the response from the cache\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedResponse([]<span class=\"keyword\">byte</span>(val), r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ok, we don't have the response cached, the store was probably cleared.</span></span><br><span class=\"line\">    <span class=\"comment\">// Make the request to the server.</span></span><br><span class=\"line\">    resp, err := c.originalTransport.RoundTrip(r)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get the body of the response so we can save it in the cache for the next request.</span></span><br><span class=\"line\">    buf, err := httputil.DumpResponse(resp, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Saving it to the cache store</span></span><br><span class=\"line\">    c.Set(r, <span class=\"keyword\">string</span>(buf))</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Fetching the data from the real source\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用：</span></span><br><span class=\"line\">cachedTransport := newTransport()</span><br><span class=\"line\"><span class=\"comment\">// cachedTransport 是自定义实现http.RoundTripper接口的 Transport</span></span><br><span class=\"line\">client := &amp;http.Client&#123;</span><br><span class=\"line\">    Transport: cachedTransport,</span><br><span class=\"line\">    Timeout:   time.Second * <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>net/http 相关类介绍？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server： 服务器类，接收请求后起协程 处理请求：<span class=\"keyword\">go</span> srv.newConn(rw).serve(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">conn：server的连接实例，负责解析请求，构建Request和Response，并将参数传递给路由Mux处理</span><br><span class=\"line\"></span><br><span class=\"line\">DefaultServerMux：默认路由，负责根据path找对应的handler执行，对应的ServeHTTP(w,r)</span><br><span class=\"line\"></span><br><span class=\"line\">Handler：业务自己写的逻辑函数，包含一个ServeHTTP(w,r)方法</span><br><span class=\"line\"></span><br><span class=\"line\">Request：请求体，包含请求头和请求体等各种参数</span><br><span class=\"line\"></span><br><span class=\"line\">Response：返回体，包含请求体，返回的conn实例</span><br><span class=\"line\"></span><br><span class=\"line\">Client：客户端client，调用底层传输器发送请求</span><br><span class=\"line\"></span><br><span class=\"line\">Transport：Http默认传输器，发送网络请求</span><br></pre></td></tr></table></figure>\n<p>函数 HandlerFunc 如何变成 handler?</p>\n<blockquote>\n<p>设计模式之适配器模式</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Handler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServeHTTP(ResponseWriter, *Request)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//适配器模式，函数是一个类，也可以拥有函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f HandlerFunc)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class=\"line\">\tf(w, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DefaultServerMux 可以替换吗？</p>\n<blockquote>\n<p>可以，如使用 httprouter 替换默认的 DefaultServerMux 路由</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/julienschmidt/httprouter\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprint(w, <span class=\"string\">\"Welcome!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintf(w, <span class=\"string\">\"hello, %s!\\n\"</span>, ps.ByName(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    router := httprouter.New()</span><br><span class=\"line\">    router.GET(<span class=\"string\">\"/\"</span>, Index)</span><br><span class=\"line\">    router.GET(<span class=\"string\">\"/hello/:name\"</span>, Hello)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"async和await","date":"2017-12-04T07:41:49.000Z","_content":"\n## async和await示例\n\n为什么异步执行？  \n> 不影响UI渲染  \n\n为什么await？  \n> 函数执行前后顺序保证\n\n```js\nfunction resolveAfter2Seconds() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('3.resolved');\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log('1.calling');\n  // 阻塞等待resolveAfter2Seconds函数返回的Promise解析完成\n  var result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: 'resolved'\n}\n\nasyncCall(); // 直接调用\nconsole.log(\"2.hello\");\n\n// 等待所有任务执行完成才结束 exit(0)\n```\n","source":"_posts/javascript/async和await.md","raw":"---\ntitle: async和await\ntags:\n  - await\n  - async\ncategories:\n  - js\ndate: 2017-12-04 15:41:49\n---\n\n## async和await示例\n\n为什么异步执行？  \n> 不影响UI渲染  \n\n为什么await？  \n> 函数执行前后顺序保证\n\n```js\nfunction resolveAfter2Seconds() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('3.resolved');\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log('1.calling');\n  // 阻塞等待resolveAfter2Seconds函数返回的Promise解析完成\n  var result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: 'resolved'\n}\n\nasyncCall(); // 直接调用\nconsole.log(\"2.hello\");\n\n// 等待所有任务执行完成才结束 exit(0)\n```\n","slug":"javascript/async和await","published":1,"updated":"2020-05-25T06:33:45.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr720021g938sx8aq7mp","content":"<h2 id=\"async和await示例\"><a href=\"#async和await示例\" class=\"headerlink\" title=\"async和await示例\"></a>async和await示例</h2><p>为什么异步执行？  </p>\n<blockquote>\n<p>不影响UI渲染  </p>\n</blockquote>\n<p>为什么await？  </p>\n<blockquote>\n<p>函数执行前后顺序保证</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAfter2Seconds</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">'3.resolved'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncCall</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1.calling'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 阻塞等待resolveAfter2Seconds函数返回的Promise解析完成</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> resolveAfter2Seconds();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"comment\">// expected output: 'resolved'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">asyncCall(); <span class=\"comment\">// 直接调用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"2.hello\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等待所有任务执行完成才结束 exit(0)</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"async和await示例\"><a href=\"#async和await示例\" class=\"headerlink\" title=\"async和await示例\"></a>async和await示例</h2><p>为什么异步执行？  </p>\n<blockquote>\n<p>不影响UI渲染  </p>\n</blockquote>\n<p>为什么await？  </p>\n<blockquote>\n<p>函数执行前后顺序保证</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAfter2Seconds</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">'3.resolved'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncCall</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'1.calling'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 阻塞等待resolveAfter2Seconds函数返回的Promise解析完成</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> resolveAfter2Seconds();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"comment\">// expected output: 'resolved'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">asyncCall(); <span class=\"comment\">// 直接调用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"2.hello\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等待所有任务执行完成才结束 exit(0)</span></span><br></pre></td></tr></table></figure>\n"},{"title":"nodejs问题","date":"2019-10-07T12:59:21.000Z","_content":"\n## Nodejs 注意点\n\n执行函数后面记得加分号结束;\n\n```js\nfunction hello(uid,callback)\nhello(uid,function(){});//一定要加;\n```\n\n判断条件\n\n```js\na = [];\nb = \"\";\nc = {};\nd = 0;\nf = false;\ng = \"0\";\nh = undefined;\ni = null;\n//{}对象\nif (a) {\n  console.info(\"a\");\n}\nif (a.length) {\n  console.info(\"a.length\");\n}\nif (b) {\n  console.info(\"b\");\n}\nif (b.length) {\n  console.info(\"b.length\");\n}\n//[]也是对象\nif (c) {\n  console.info(\"c\");\n}\n\nif (d) {\n  console.info(\"d\");\n}\nif (d.length) {\n  console.info(\"d.length\");\n}\n\nif (f) {\n  console.info(\"f\");\n}\nif (f.length) {\n  console.info(\"f.length\");\n}\n//字符串\nif (g) {\n  console.info(\"g\");\n}\n//转为0了\nif (parseInt(g)) {\n  console.info(\"parseInt g\");\n}\nif (h) {\n  console.info(\"h\");\n}\nif (i) {\n  console.info(\"i\");\n}\n\n//a\n//c\n//g\n```\n","source":"_posts/javascript/nodejs问题.md","raw":"---\ntitle: nodejs问题\ntags:\n  - tags\ncategories:\n  - categories\ndate: 2019-10-07 20:59:21\n---\n\n## Nodejs 注意点\n\n执行函数后面记得加分号结束;\n\n```js\nfunction hello(uid,callback)\nhello(uid,function(){});//一定要加;\n```\n\n判断条件\n\n```js\na = [];\nb = \"\";\nc = {};\nd = 0;\nf = false;\ng = \"0\";\nh = undefined;\ni = null;\n//{}对象\nif (a) {\n  console.info(\"a\");\n}\nif (a.length) {\n  console.info(\"a.length\");\n}\nif (b) {\n  console.info(\"b\");\n}\nif (b.length) {\n  console.info(\"b.length\");\n}\n//[]也是对象\nif (c) {\n  console.info(\"c\");\n}\n\nif (d) {\n  console.info(\"d\");\n}\nif (d.length) {\n  console.info(\"d.length\");\n}\n\nif (f) {\n  console.info(\"f\");\n}\nif (f.length) {\n  console.info(\"f.length\");\n}\n//字符串\nif (g) {\n  console.info(\"g\");\n}\n//转为0了\nif (parseInt(g)) {\n  console.info(\"parseInt g\");\n}\nif (h) {\n  console.info(\"h\");\n}\nif (i) {\n  console.info(\"i\");\n}\n\n//a\n//c\n//g\n```\n","slug":"javascript/nodejs问题","published":1,"updated":"2020-05-25T05:42:40.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr730025g938r46zr8yy","content":"<h2 id=\"Nodejs-注意点\"><a href=\"#Nodejs-注意点\" class=\"headerlink\" title=\"Nodejs 注意点\"></a>Nodejs 注意点</h2><p>执行函数后面记得加分号结束;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">uid,callback</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hello</span>(<span class=\"params\">uid,function(</span>)</span>&#123;&#125;);<span class=\"comment\">//一定要加;</span></span><br></pre></td></tr></table></figure>\n<p>判断条件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [];</span><br><span class=\"line\">b = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">c = &#123;&#125;;</span><br><span class=\"line\">d = <span class=\"number\">0</span>;</span><br><span class=\"line\">f = <span class=\"literal\">false</span>;</span><br><span class=\"line\">g = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">h = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">i = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//&#123;&#125;对象</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a.length) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"a.length\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (b) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (b.length) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"b.length\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[]也是对象</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (c) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (d) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (d.length) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"d.length\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (f) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"f\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (f.length) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"f.length\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (g) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"g\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转为0了</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(g)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"parseInt g\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (h) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"h\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"comment\">//c</span></span><br><span class=\"line\"><span class=\"comment\">//g</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Nodejs-注意点\"><a href=\"#Nodejs-注意点\" class=\"headerlink\" title=\"Nodejs 注意点\"></a>Nodejs 注意点</h2><p>执行函数后面记得加分号结束;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">uid,callback</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hello</span>(<span class=\"params\">uid,function(</span>)</span>&#123;&#125;);<span class=\"comment\">//一定要加;</span></span><br></pre></td></tr></table></figure>\n<p>判断条件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [];</span><br><span class=\"line\">b = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">c = &#123;&#125;;</span><br><span class=\"line\">d = <span class=\"number\">0</span>;</span><br><span class=\"line\">f = <span class=\"literal\">false</span>;</span><br><span class=\"line\">g = <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">h = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">i = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//&#123;&#125;对象</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a.length) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"a.length\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (b) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (b.length) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"b.length\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[]也是对象</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (c) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (d) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (d.length) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"d.length\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (f) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"f\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (f.length) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"f.length\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (g) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"g\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转为0了</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(g)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"parseInt g\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (h) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"h\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"comment\">//c</span></span><br><span class=\"line\"><span class=\"comment\">//g</span></span><br></pre></td></tr></table></figure>\n"},{"title":"sig信号","date":"2019-10-07T12:33:55.000Z","_content":"\n## signal 信号\n\n1.信号的处理方式？\n\n> 信号（signal）-- 进程之间通讯的方式，是一种软件中断。一个进程一旦接收到信号就会打断原来的程序执行流程来处理信号。\n\n```py\nsingnal.signal(signalnum, handler)#\n\nimport signal\nimport time\ndef myHandler(signum, frame):\n    print('I received: ', signum)\nif __name__ == \"__main__\":\n    signal.signal(signal.SIGALRM, myHandler)//信号注册\n    while True:\n        signal.alarm(1)//发送信号\n        time.sleep(1)\n```\n\n2.进程与线程的区别?\n\n> 进程独享进程空间 fork 全部复制一份，线程共享进程空间，栈上的东西独享\n","source":"_posts/linux/signal信号.md","raw":"---\ntitle: sig信号\ntags:\n  - signal\ncategories:\n  - linux\ndate: 2019-10-07 20:33:55\n---\n\n## signal 信号\n\n1.信号的处理方式？\n\n> 信号（signal）-- 进程之间通讯的方式，是一种软件中断。一个进程一旦接收到信号就会打断原来的程序执行流程来处理信号。\n\n```py\nsingnal.signal(signalnum, handler)#\n\nimport signal\nimport time\ndef myHandler(signum, frame):\n    print('I received: ', signum)\nif __name__ == \"__main__\":\n    signal.signal(signal.SIGALRM, myHandler)//信号注册\n    while True:\n        signal.alarm(1)//发送信号\n        time.sleep(1)\n```\n\n2.进程与线程的区别?\n\n> 进程独享进程空间 fork 全部复制一份，线程共享进程空间，栈上的东西独享\n","slug":"linux/signal信号","published":1,"updated":"2020-05-25T05:45:29.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr740027g9389qmb2n0y","content":"<h2 id=\"signal-信号\"><a href=\"#signal-信号\" class=\"headerlink\" title=\"signal 信号\"></a>signal 信号</h2><p>1.信号的处理方式？</p>\n<blockquote>\n<p>信号（signal）– 进程之间通讯的方式，是一种软件中断。一个进程一旦接收到信号就会打断原来的程序执行流程来处理信号。</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singnal.signal(signalnum, handler)<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> signal</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myHandler</span><span class=\"params\">(signum, frame)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'I received: '</span>, signum)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    signal.signal(signal.SIGALRM, myHandler)//信号注册</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        signal.alarm(<span class=\"number\">1</span>)//发送信号</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>2.进程与线程的区别?</p>\n<blockquote>\n<p>进程独享进程空间 fork 全部复制一份，线程共享进程空间，栈上的东西独享</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"signal-信号\"><a href=\"#signal-信号\" class=\"headerlink\" title=\"signal 信号\"></a>signal 信号</h2><p>1.信号的处理方式？</p>\n<blockquote>\n<p>信号（signal）– 进程之间通讯的方式，是一种软件中断。一个进程一旦接收到信号就会打断原来的程序执行流程来处理信号。</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singnal.signal(signalnum, handler)<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> signal</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myHandler</span><span class=\"params\">(signum, frame)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'I received: '</span>, signum)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    signal.signal(signal.SIGALRM, myHandler)//信号注册</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        signal.alarm(<span class=\"number\">1</span>)//发送信号</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>2.进程与线程的区别?</p>\n<blockquote>\n<p>进程独享进程空间 fork 全部复制一份，线程共享进程空间，栈上的东西独享</p>\n</blockquote>\n"},{"title":"gorm源码分析","date":"2019-10-07T13:06:26.000Z","_content":"\n## gorm 源码解析\n\ngorm 使用示例\n\n```go\npackage main\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\ntype Product struct {\n\tgorm.Model\n\tCode  string\n\tPrice uint\n}\n\nfunc main() {\n\tdb, err := gorm.Open(\"sqlite3\", \"test.db\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdefer db.Close()\n\tdb.AutoMigrate(&Product{})\n\tdb.Create(&Product{Code: \"L1212\", Price: 1000})\n\tvar product Product\n\tdb.First(&product, 1)\n\tdb.First(&product, \"code = ?\", \"L1212\")\n\tdb.Model(&product).Update(\"Price\", 2000)\n\tdb.Delete(&product)\n}\n```\n\ngorm 一般的初始化方式\n\n```go\ndb, err := gorm.Open(\"mysql\", \"user:password@/dbname?charset=utf8&parseTime=True&loc=Local\")\n```\n\ngorm 中 DB 结构体的定义：\n\n```go\n// DB的结构体\ntype DB struct {\n    sync.RWMutex                       // 锁\n    Value        interface{}           // 一般传入实际操作的表所对应的结构体\n    Error        error                 // DB操作失败的error\n    RowsAffected int64                 // 操作影响的行数\n\n    // single db\n    db                SQLCommon        // SQL接口，包括（Exec、Prepare、Query、QueryRow）\n    blockGlobalUpdate bool             // 为true时，可以在update在没有where条件是报错，避免全局更新\n    logMode           logModeValue     // 日志模式，gorm提供了三种\n    logger            logger           // 内部日志实例\n    search            *search          // 查询相关的条件\n    values            sync.Map         // value Map\n\n    // global db\n    parent        *DB                  // 父db，为了保存一个空的初始化后的db，也为了保存curd注册的的callback方法\n    callbacks     *Callback            // callback方法\n    dialect       Dialect              // 不同类型数据库对应的不同实现的相同接口\n    singularTable bool                 // 表名是否为复数形式，true时为user，false时为users\n}\n```\n\nSQLCommon 定义基本的查询接口\n\n```go\n// SQLCommon is the minimal database connection functionality gorm requires.  Implemented by *sql.DB.\ntype SQLCommon interface {\n\tExec(query string, args ...interface{}) (sql.Result, error)\n\tPrepare(query string) (*sql.Stmt, error)\n\tQuery(query string, args ...interface{}) (*sql.Rows, error)\n\tQueryRow(query string, args ...interface{}) *sql.Row\n}\n```\n\ngorm 的 Open 方法：\n\n```go\nfunc Open(dialect string, args ...interface{}) (db *DB, err error) {\n    if len(args) == 0 {\n        err = errors.New(\"invalid database source\")\n        return nil, err\n    }\n    var source string\n    var dbSQL SQLCommon\n    var ownDbSQL bool\n\n    switch value := args[0].(type) {\n    case string:\n        var driver = dialect\n        if len(args) == 1 {\n            source = value\n        } else if len(args) >= 2 {\n            driver = value\n            source = args[1].(string)\n        }\n        // 调用go基础库的Open方法获得db的connention附给dbSQL，\n        // 此时还没有真正连接数据库\n        dbSQL, err = sql.Open(driver, source)\n        ownDbSQL = true\n    case SQLCommon:\n        dbSQL = value\n        ownDbSQL = false\n    default:\n        return nil, fmt.Errorf(\"invalid database source: %v is not a valid type\", value)\n    }\n    // 初始化DB\n    db = &DB{\n        db:        dbSQL,\n        logger:    defaultLogger,\n        callbacks: DefaultCallback,\n        dialect:   newDialect(dialect, dbSQL),\n    }\n    // 将初始化的DB保存到db.parent中\n    db.parent = db\n    if err != nil {\n        return\n    }\n    // 调用go基础库的Ping方法检测数据库connention是否可以连通\n    if d, ok := dbSQL.(*sql.DB); ok {\n        if err = d.Ping(); err != nil && ownDbSQL {\n            d.Close()\n        }\n    }\n    return\n}\n```\n\ngorm 是通过多个 callbsck 方法来实现 curd 的，具体流程以一个查询为例：\n\n```go\nDBEngine.Table(entry.TableName).\n    Select(entry.Select).\n    Where(entry.sql, entry.values).\n    Order(entry.order).\n    Find(entry.result)\n```\n\n执行步骤：\n\n1.执行 Table 方法，添加 tablename 条件：\n\n```go\nfunc (s *DB) Table(name string) *DB {\n    clone := s.clone()        // 执行clone方法也就是从新的db中赋值一个空的，避免交叉影响\n    clone.search.Table(name)  // 赋值table name\n    clone.Value = nil         // 附空\n    return clone\n}\n```\n\n2.执行 Where 方法，添加 where 条件：\n\n```go\n// 首先也是调用clone方法，然后调用search的Where方法\nfunc (s *DB) Where(query interface{}, args ...interface{}) *DB {\n    return s.clone().search.Where(query, args...).db\n}\n\n// search的Where方法是将传进来的条件进行拼接，存入search.whereConditions\nfunc (s *search) Where(query interface{}, values ...interface{}) *search {\n    s.whereConditions = append(s.whereConditions, map[string]interface{}{\"query\": query, \"args\": values})\n    return s\n}\n```\n\n3.执行 Order 方法，添加 order 条件：\n\n```go\n// 类似Where，reorder为true会强制刷掉gorm默认的order by\nfunc (s *DB) Order(value interface{}, reorder ...bool) *DB {\n    return s.clone().search.Order(value, reorder...).db\n}\n\nfunc (s *search) Order(value interface{}, reorder ...bool) *search {\n    // 如果为true，先清除s.orders\n    if len(reorder) > 0 && reorder[0] {\n        s.orders = []interface{}{}\n    }\n    // 将value拼接，存入s.orders\n    if value != nil && value != \"\" {\n        s.orders = append(s.orders, value)\n    }\n    return s\n}\n```\n\n4.执行 Find 方法，真正实现查询：\n\n```go\n// 首先先创建一个scope（可以理解成只针对本次数据库操作有效的一个环境），再调用inlineCondition内部方法，最后执行callcallbacks一系列方法实现真正的查询操作，并将db返回\nfunc (s *DB) Find(out interface{}, where ...interface{}) *DB {\n    return s.NewScope(out).inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db\n}\n\n// NewScope方法就是初始化一个scope\nfunc (s *DB) NewScope(value interface{}) *Scope {\n    dbClone := s.clone()\n    // 此时赋值value\n    dbClone.Value = value\n    scope := &Scope{db: dbClone, Value: value}\n    if s.search != nil {\n        scope.Search = s.search.clone()\n    } else {\n        scope.Search = &search{}\n    }\n    return scope\n}\n\n// inlineCondition方法是执行scope.Search.Where\nfunc (scope *Scope) inlineCondition(values ...interface{}) *Scope {\n    if len(values) > 0 {\n        scope.Search.Where(values[0], values[1:]...)\n    }\n    return scope\n}\n// scope.Search.Where实际上也是执行条件拼接，由于我们在调用的时候没有在Find中传入条件，所以这个方法不会被执行\nfunc (s *search) Where(query interface{}, values ...interface{}) *search {\n    s.whereConditions = append(s.whereConditions, map[string]interface{}{\"query\": query, \"args\": values})\n    return s\n}\n\n// 最重要的就是callcallbacks方法，是真正执行的地方\nfunc (scope *Scope) callCallbacks(funcs []*func(s *Scope)) *Scope {\n    defer func() {\n        if err := recover(); err != nil {\n            if db, ok := scope.db.db.(sqlTx); ok {\n                db.Rollback()\n            }\n            panic(err)\n        }\n    }()\n    // 循环里面所有的注册的funcs\n    for _, f := range funcs {\n        (*f)(scope)\n        if scope.skipLeft {\n            break\n        }\n    }\n    return scope\n}\n\n// 这里的funcs实在程序启动时init方法注册的\nfunc init() {\n    DefaultCallback.Query().Register(\"gorm:query\", queryCallback)\n    DefaultCallback.Query().Register(\"gorm:preload\", preloadCallback)\n    DefaultCallback.Query().Register(\"gorm:after_query\", afterQueryCallback)\n}\n\n// 比如afterQueryCallback方法还提供了反射调用结构体的AfterFind方法，如果在查询前结构体实现了AfterFind方法就会被调用，这个机制比了灵活\nfunc afterQueryCallback(scope *Scope) {\n    if !scope.HasError() {\n        scope.CallMethod(\"AfterFind\")\n    }\n}\n```\n","source":"_posts/mysql/gorm源码分析.md","raw":"---\ntitle: gorm源码分析\ntags:\n  - gorm\ncategories:\n  - gorm\ndate: 2019-10-07 21:06:26\n---\n\n## gorm 源码解析\n\ngorm 使用示例\n\n```go\npackage main\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\ntype Product struct {\n\tgorm.Model\n\tCode  string\n\tPrice uint\n}\n\nfunc main() {\n\tdb, err := gorm.Open(\"sqlite3\", \"test.db\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdefer db.Close()\n\tdb.AutoMigrate(&Product{})\n\tdb.Create(&Product{Code: \"L1212\", Price: 1000})\n\tvar product Product\n\tdb.First(&product, 1)\n\tdb.First(&product, \"code = ?\", \"L1212\")\n\tdb.Model(&product).Update(\"Price\", 2000)\n\tdb.Delete(&product)\n}\n```\n\ngorm 一般的初始化方式\n\n```go\ndb, err := gorm.Open(\"mysql\", \"user:password@/dbname?charset=utf8&parseTime=True&loc=Local\")\n```\n\ngorm 中 DB 结构体的定义：\n\n```go\n// DB的结构体\ntype DB struct {\n    sync.RWMutex                       // 锁\n    Value        interface{}           // 一般传入实际操作的表所对应的结构体\n    Error        error                 // DB操作失败的error\n    RowsAffected int64                 // 操作影响的行数\n\n    // single db\n    db                SQLCommon        // SQL接口，包括（Exec、Prepare、Query、QueryRow）\n    blockGlobalUpdate bool             // 为true时，可以在update在没有where条件是报错，避免全局更新\n    logMode           logModeValue     // 日志模式，gorm提供了三种\n    logger            logger           // 内部日志实例\n    search            *search          // 查询相关的条件\n    values            sync.Map         // value Map\n\n    // global db\n    parent        *DB                  // 父db，为了保存一个空的初始化后的db，也为了保存curd注册的的callback方法\n    callbacks     *Callback            // callback方法\n    dialect       Dialect              // 不同类型数据库对应的不同实现的相同接口\n    singularTable bool                 // 表名是否为复数形式，true时为user，false时为users\n}\n```\n\nSQLCommon 定义基本的查询接口\n\n```go\n// SQLCommon is the minimal database connection functionality gorm requires.  Implemented by *sql.DB.\ntype SQLCommon interface {\n\tExec(query string, args ...interface{}) (sql.Result, error)\n\tPrepare(query string) (*sql.Stmt, error)\n\tQuery(query string, args ...interface{}) (*sql.Rows, error)\n\tQueryRow(query string, args ...interface{}) *sql.Row\n}\n```\n\ngorm 的 Open 方法：\n\n```go\nfunc Open(dialect string, args ...interface{}) (db *DB, err error) {\n    if len(args) == 0 {\n        err = errors.New(\"invalid database source\")\n        return nil, err\n    }\n    var source string\n    var dbSQL SQLCommon\n    var ownDbSQL bool\n\n    switch value := args[0].(type) {\n    case string:\n        var driver = dialect\n        if len(args) == 1 {\n            source = value\n        } else if len(args) >= 2 {\n            driver = value\n            source = args[1].(string)\n        }\n        // 调用go基础库的Open方法获得db的connention附给dbSQL，\n        // 此时还没有真正连接数据库\n        dbSQL, err = sql.Open(driver, source)\n        ownDbSQL = true\n    case SQLCommon:\n        dbSQL = value\n        ownDbSQL = false\n    default:\n        return nil, fmt.Errorf(\"invalid database source: %v is not a valid type\", value)\n    }\n    // 初始化DB\n    db = &DB{\n        db:        dbSQL,\n        logger:    defaultLogger,\n        callbacks: DefaultCallback,\n        dialect:   newDialect(dialect, dbSQL),\n    }\n    // 将初始化的DB保存到db.parent中\n    db.parent = db\n    if err != nil {\n        return\n    }\n    // 调用go基础库的Ping方法检测数据库connention是否可以连通\n    if d, ok := dbSQL.(*sql.DB); ok {\n        if err = d.Ping(); err != nil && ownDbSQL {\n            d.Close()\n        }\n    }\n    return\n}\n```\n\ngorm 是通过多个 callbsck 方法来实现 curd 的，具体流程以一个查询为例：\n\n```go\nDBEngine.Table(entry.TableName).\n    Select(entry.Select).\n    Where(entry.sql, entry.values).\n    Order(entry.order).\n    Find(entry.result)\n```\n\n执行步骤：\n\n1.执行 Table 方法，添加 tablename 条件：\n\n```go\nfunc (s *DB) Table(name string) *DB {\n    clone := s.clone()        // 执行clone方法也就是从新的db中赋值一个空的，避免交叉影响\n    clone.search.Table(name)  // 赋值table name\n    clone.Value = nil         // 附空\n    return clone\n}\n```\n\n2.执行 Where 方法，添加 where 条件：\n\n```go\n// 首先也是调用clone方法，然后调用search的Where方法\nfunc (s *DB) Where(query interface{}, args ...interface{}) *DB {\n    return s.clone().search.Where(query, args...).db\n}\n\n// search的Where方法是将传进来的条件进行拼接，存入search.whereConditions\nfunc (s *search) Where(query interface{}, values ...interface{}) *search {\n    s.whereConditions = append(s.whereConditions, map[string]interface{}{\"query\": query, \"args\": values})\n    return s\n}\n```\n\n3.执行 Order 方法，添加 order 条件：\n\n```go\n// 类似Where，reorder为true会强制刷掉gorm默认的order by\nfunc (s *DB) Order(value interface{}, reorder ...bool) *DB {\n    return s.clone().search.Order(value, reorder...).db\n}\n\nfunc (s *search) Order(value interface{}, reorder ...bool) *search {\n    // 如果为true，先清除s.orders\n    if len(reorder) > 0 && reorder[0] {\n        s.orders = []interface{}{}\n    }\n    // 将value拼接，存入s.orders\n    if value != nil && value != \"\" {\n        s.orders = append(s.orders, value)\n    }\n    return s\n}\n```\n\n4.执行 Find 方法，真正实现查询：\n\n```go\n// 首先先创建一个scope（可以理解成只针对本次数据库操作有效的一个环境），再调用inlineCondition内部方法，最后执行callcallbacks一系列方法实现真正的查询操作，并将db返回\nfunc (s *DB) Find(out interface{}, where ...interface{}) *DB {\n    return s.NewScope(out).inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db\n}\n\n// NewScope方法就是初始化一个scope\nfunc (s *DB) NewScope(value interface{}) *Scope {\n    dbClone := s.clone()\n    // 此时赋值value\n    dbClone.Value = value\n    scope := &Scope{db: dbClone, Value: value}\n    if s.search != nil {\n        scope.Search = s.search.clone()\n    } else {\n        scope.Search = &search{}\n    }\n    return scope\n}\n\n// inlineCondition方法是执行scope.Search.Where\nfunc (scope *Scope) inlineCondition(values ...interface{}) *Scope {\n    if len(values) > 0 {\n        scope.Search.Where(values[0], values[1:]...)\n    }\n    return scope\n}\n// scope.Search.Where实际上也是执行条件拼接，由于我们在调用的时候没有在Find中传入条件，所以这个方法不会被执行\nfunc (s *search) Where(query interface{}, values ...interface{}) *search {\n    s.whereConditions = append(s.whereConditions, map[string]interface{}{\"query\": query, \"args\": values})\n    return s\n}\n\n// 最重要的就是callcallbacks方法，是真正执行的地方\nfunc (scope *Scope) callCallbacks(funcs []*func(s *Scope)) *Scope {\n    defer func() {\n        if err := recover(); err != nil {\n            if db, ok := scope.db.db.(sqlTx); ok {\n                db.Rollback()\n            }\n            panic(err)\n        }\n    }()\n    // 循环里面所有的注册的funcs\n    for _, f := range funcs {\n        (*f)(scope)\n        if scope.skipLeft {\n            break\n        }\n    }\n    return scope\n}\n\n// 这里的funcs实在程序启动时init方法注册的\nfunc init() {\n    DefaultCallback.Query().Register(\"gorm:query\", queryCallback)\n    DefaultCallback.Query().Register(\"gorm:preload\", preloadCallback)\n    DefaultCallback.Query().Register(\"gorm:after_query\", afterQueryCallback)\n}\n\n// 比如afterQueryCallback方法还提供了反射调用结构体的AfterFind方法，如果在查询前结构体实现了AfterFind方法就会被调用，这个机制比了灵活\nfunc afterQueryCallback(scope *Scope) {\n    if !scope.HasError() {\n        scope.CallMethod(\"AfterFind\")\n    }\n}\n```\n","slug":"mysql/gorm源码分析","published":1,"updated":"2020-05-25T05:46:58.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr76002cg938f3m9htyo","content":"<h2 id=\"gorm-源码解析\"><a href=\"#gorm-源码解析\" class=\"headerlink\" title=\"gorm 源码解析\"></a>gorm 源码解析</h2><p>gorm 使用示例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/jinzhu/gorm\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/jinzhu/gorm/dialects/sqlite\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Product <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tCode  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tPrice <span class=\"keyword\">uint</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdb, err := gorm.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\"test.db\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"failed to connect database\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">\tdb.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class=\"line\">\tdb.Create(&amp;Product&#123;Code: <span class=\"string\">\"L1212\"</span>, Price: <span class=\"number\">1000</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> product Product</span><br><span class=\"line\">\tdb.First(&amp;product, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tdb.First(&amp;product, <span class=\"string\">\"code = ?\"</span>, <span class=\"string\">\"L1212\"</span>)</span><br><span class=\"line\">\tdb.Model(&amp;product).Update(<span class=\"string\">\"Price\"</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">\tdb.Delete(&amp;product)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm 一般的初始化方式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := gorm.Open(<span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"user:password@/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local\"</span>)</span><br></pre></td></tr></table></figure>\n<p>gorm 中 DB 结构体的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DB的结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DB <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    sync.RWMutex                       <span class=\"comment\">// 锁</span></span><br><span class=\"line\">    Value        <span class=\"keyword\">interface</span>&#123;&#125;           <span class=\"comment\">// 一般传入实际操作的表所对应的结构体</span></span><br><span class=\"line\">    Error        error                 <span class=\"comment\">// DB操作失败的error</span></span><br><span class=\"line\">    RowsAffected <span class=\"keyword\">int64</span>                 <span class=\"comment\">// 操作影响的行数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// single db</span></span><br><span class=\"line\">    db                SQLCommon        <span class=\"comment\">// SQL接口，包括（Exec、Prepare、Query、QueryRow）</span></span><br><span class=\"line\">    blockGlobalUpdate <span class=\"keyword\">bool</span>             <span class=\"comment\">// 为true时，可以在update在没有where条件是报错，避免全局更新</span></span><br><span class=\"line\">    logMode           logModeValue     <span class=\"comment\">// 日志模式，gorm提供了三种</span></span><br><span class=\"line\">    logger            logger           <span class=\"comment\">// 内部日志实例</span></span><br><span class=\"line\">    search            *search          <span class=\"comment\">// 查询相关的条件</span></span><br><span class=\"line\">    values            sync.Map         <span class=\"comment\">// value Map</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// global db</span></span><br><span class=\"line\">    parent        *DB                  <span class=\"comment\">// 父db，为了保存一个空的初始化后的db，也为了保存curd注册的的callback方法</span></span><br><span class=\"line\">    callbacks     *Callback            <span class=\"comment\">// callback方法</span></span><br><span class=\"line\">    dialect       Dialect              <span class=\"comment\">// 不同类型数据库对应的不同实现的相同接口</span></span><br><span class=\"line\">    singularTable <span class=\"keyword\">bool</span>                 <span class=\"comment\">// 表名是否为复数形式，true时为user，false时为users</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SQLCommon 定义基本的查询接口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SQLCommon is the minimal database connection functionality gorm requires.  Implemented by *sql.DB.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SQLCommon <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tExec(query <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;) (sql.Result, error)</span><br><span class=\"line\">\tPrepare(query <span class=\"keyword\">string</span>) (*sql.Stmt, error)</span><br><span class=\"line\">\tQuery(query <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;) (*sql.Rows, error)</span><br><span class=\"line\">\tQueryRow(query <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;) *sql.Row</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm 的 Open 方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Open</span><span class=\"params\">(dialect <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(db *DB, err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        err = errors.New(<span class=\"string\">\"invalid database source\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> source <span class=\"keyword\">string</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dbSQL SQLCommon</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ownDbSQL <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> value := args[<span class=\"number\">0</span>].(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> driver = dialect</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            source = value</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt;= <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">            driver = value</span><br><span class=\"line\">            source = args[<span class=\"number\">1</span>].(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 调用go基础库的Open方法获得db的connention附给dbSQL，</span></span><br><span class=\"line\">        <span class=\"comment\">// 此时还没有真正连接数据库</span></span><br><span class=\"line\">        dbSQL, err = sql.Open(driver, source)</span><br><span class=\"line\">        ownDbSQL = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> SQLCommon:</span><br><span class=\"line\">        dbSQL = value</span><br><span class=\"line\">        ownDbSQL = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"invalid database source: %v is not a valid type\"</span>, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化DB</span></span><br><span class=\"line\">    db = &amp;DB&#123;</span><br><span class=\"line\">        db:        dbSQL,</span><br><span class=\"line\">        logger:    defaultLogger,</span><br><span class=\"line\">        callbacks: DefaultCallback,</span><br><span class=\"line\">        dialect:   newDialect(dialect, dbSQL),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将初始化的DB保存到db.parent中</span></span><br><span class=\"line\">    db.parent = db</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用go基础库的Ping方法检测数据库connention是否可以连通</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> d, ok := dbSQL.(*sql.DB); ok &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err = d.Ping(); err != <span class=\"literal\">nil</span> &amp;&amp; ownDbSQL &#123;</span><br><span class=\"line\">            d.Close()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm 是通过多个 callbsck 方法来实现 curd 的，具体流程以一个查询为例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBEngine.Table(entry.TableName).</span><br><span class=\"line\">    Select(entry.Select).</span><br><span class=\"line\">    Where(entry.sql, entry.values).</span><br><span class=\"line\">    Order(entry.order).</span><br><span class=\"line\">    Find(entry.result)</span><br></pre></td></tr></table></figure>\n<p>执行步骤：</p>\n<p>1.执行 Table 方法，添加 tablename 条件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">Table</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> *<span class=\"title\">DB</span></span> &#123;</span><br><span class=\"line\">    clone := s.clone()        <span class=\"comment\">// 执行clone方法也就是从新的db中赋值一个空的，避免交叉影响</span></span><br><span class=\"line\">    clone.search.Table(name)  <span class=\"comment\">// 赋值table name</span></span><br><span class=\"line\">    clone.Value = <span class=\"literal\">nil</span>         <span class=\"comment\">// 附空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> clone</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.执行 Where 方法，添加 where 条件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先也是调用clone方法，然后调用search的Where方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">Where</span><span class=\"params\">(query <span class=\"keyword\">interface</span>&#123;&#125;, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">DB</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.clone().search.Where(query, args...).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// search的Where方法是将传进来的条件进行拼接，存入search.whereConditions</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *search)</span> <span class=\"title\">Where</span><span class=\"params\">(query <span class=\"keyword\">interface</span>&#123;&#125;, values ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">search</span></span> &#123;</span><br><span class=\"line\">    s.whereConditions = <span class=\"built_in\">append</span>(s.whereConditions, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"query\"</span>: query, <span class=\"string\">\"args\"</span>: values&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.执行 Order 方法，添加 order 条件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类似Where，reorder为true会强制刷掉gorm默认的order by</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">Order</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;, reorder ...<span class=\"keyword\">bool</span>)</span> *<span class=\"title\">DB</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.clone().search.Order(value, reorder...).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *search)</span> <span class=\"title\">Order</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;, reorder ...<span class=\"keyword\">bool</span>)</span> *<span class=\"title\">search</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果为true，先清除s.orders</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(reorder) &gt; <span class=\"number\">0</span> &amp;&amp; reorder[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">        s.orders = []<span class=\"keyword\">interface</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将value拼接，存入s.orders</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> value != <span class=\"literal\">nil</span> &amp;&amp; value != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">        s.orders = <span class=\"built_in\">append</span>(s.orders, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.执行 Find 方法，真正实现查询：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先先创建一个scope（可以理解成只针对本次数据库操作有效的一个环境），再调用inlineCondition内部方法，最后执行callcallbacks一系列方法实现真正的查询操作，并将db返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">Find</span><span class=\"params\">(out <span class=\"keyword\">interface</span>&#123;&#125;, where ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">DB</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.NewScope(out).inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewScope方法就是初始化一个scope</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">NewScope</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">Scope</span></span> &#123;</span><br><span class=\"line\">    dbClone := s.clone()</span><br><span class=\"line\">    <span class=\"comment\">// 此时赋值value</span></span><br><span class=\"line\">    dbClone.Value = value</span><br><span class=\"line\">    scope := &amp;Scope&#123;db: dbClone, Value: value&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s.search != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        scope.Search = s.search.clone()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        scope.Search = &amp;search&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// inlineCondition方法是执行scope.Search.Where</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(scope *Scope)</span> <span class=\"title\">inlineCondition</span><span class=\"params\">(values ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">Scope</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(values) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        scope.Search.Where(values[<span class=\"number\">0</span>], values[<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// scope.Search.Where实际上也是执行条件拼接，由于我们在调用的时候没有在Find中传入条件，所以这个方法不会被执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *search)</span> <span class=\"title\">Where</span><span class=\"params\">(query <span class=\"keyword\">interface</span>&#123;&#125;, values ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">search</span></span> &#123;</span><br><span class=\"line\">    s.whereConditions = <span class=\"built_in\">append</span>(s.whereConditions, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"query\"</span>: query, <span class=\"string\">\"args\"</span>: values&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最重要的就是callcallbacks方法，是真正执行的地方</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(scope *Scope)</span> <span class=\"title\">callCallbacks</span><span class=\"params\">(funcs []*<span class=\"keyword\">func</span>(s *Scope)</span>) *<span class=\"title\">Scope</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> db, ok := scope.db.db.(sqlTx); ok &#123;</span><br><span class=\"line\">                db.Rollback()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"comment\">// 循环里面所有的注册的funcs</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> funcs &#123;</span><br><span class=\"line\">        (*f)(scope)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> scope.skipLeft &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里的funcs实在程序启动时init方法注册的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    DefaultCallback.Query().Register(<span class=\"string\">\"gorm:query\"</span>, queryCallback)</span><br><span class=\"line\">    DefaultCallback.Query().Register(<span class=\"string\">\"gorm:preload\"</span>, preloadCallback)</span><br><span class=\"line\">    DefaultCallback.Query().Register(<span class=\"string\">\"gorm:after_query\"</span>, afterQueryCallback)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比如afterQueryCallback方法还提供了反射调用结构体的AfterFind方法，如果在查询前结构体实现了AfterFind方法就会被调用，这个机制比了灵活</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">afterQueryCallback</span><span class=\"params\">(scope *Scope)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !scope.HasError() &#123;</span><br><span class=\"line\">        scope.CallMethod(<span class=\"string\">\"AfterFind\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"gorm-源码解析\"><a href=\"#gorm-源码解析\" class=\"headerlink\" title=\"gorm 源码解析\"></a>gorm 源码解析</h2><p>gorm 使用示例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/jinzhu/gorm\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/jinzhu/gorm/dialects/sqlite\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Product <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tCode  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tPrice <span class=\"keyword\">uint</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdb, err := gorm.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\"test.db\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"failed to connect database\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\">\tdb.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class=\"line\">\tdb.Create(&amp;Product&#123;Code: <span class=\"string\">\"L1212\"</span>, Price: <span class=\"number\">1000</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> product Product</span><br><span class=\"line\">\tdb.First(&amp;product, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tdb.First(&amp;product, <span class=\"string\">\"code = ?\"</span>, <span class=\"string\">\"L1212\"</span>)</span><br><span class=\"line\">\tdb.Model(&amp;product).Update(<span class=\"string\">\"Price\"</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">\tdb.Delete(&amp;product)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm 一般的初始化方式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := gorm.Open(<span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"user:password@/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local\"</span>)</span><br></pre></td></tr></table></figure>\n<p>gorm 中 DB 结构体的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DB的结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DB <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    sync.RWMutex                       <span class=\"comment\">// 锁</span></span><br><span class=\"line\">    Value        <span class=\"keyword\">interface</span>&#123;&#125;           <span class=\"comment\">// 一般传入实际操作的表所对应的结构体</span></span><br><span class=\"line\">    Error        error                 <span class=\"comment\">// DB操作失败的error</span></span><br><span class=\"line\">    RowsAffected <span class=\"keyword\">int64</span>                 <span class=\"comment\">// 操作影响的行数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// single db</span></span><br><span class=\"line\">    db                SQLCommon        <span class=\"comment\">// SQL接口，包括（Exec、Prepare、Query、QueryRow）</span></span><br><span class=\"line\">    blockGlobalUpdate <span class=\"keyword\">bool</span>             <span class=\"comment\">// 为true时，可以在update在没有where条件是报错，避免全局更新</span></span><br><span class=\"line\">    logMode           logModeValue     <span class=\"comment\">// 日志模式，gorm提供了三种</span></span><br><span class=\"line\">    logger            logger           <span class=\"comment\">// 内部日志实例</span></span><br><span class=\"line\">    search            *search          <span class=\"comment\">// 查询相关的条件</span></span><br><span class=\"line\">    values            sync.Map         <span class=\"comment\">// value Map</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// global db</span></span><br><span class=\"line\">    parent        *DB                  <span class=\"comment\">// 父db，为了保存一个空的初始化后的db，也为了保存curd注册的的callback方法</span></span><br><span class=\"line\">    callbacks     *Callback            <span class=\"comment\">// callback方法</span></span><br><span class=\"line\">    dialect       Dialect              <span class=\"comment\">// 不同类型数据库对应的不同实现的相同接口</span></span><br><span class=\"line\">    singularTable <span class=\"keyword\">bool</span>                 <span class=\"comment\">// 表名是否为复数形式，true时为user，false时为users</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SQLCommon 定义基本的查询接口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SQLCommon is the minimal database connection functionality gorm requires.  Implemented by *sql.DB.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SQLCommon <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tExec(query <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;) (sql.Result, error)</span><br><span class=\"line\">\tPrepare(query <span class=\"keyword\">string</span>) (*sql.Stmt, error)</span><br><span class=\"line\">\tQuery(query <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;) (*sql.Rows, error)</span><br><span class=\"line\">\tQueryRow(query <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;) *sql.Row</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm 的 Open 方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Open</span><span class=\"params\">(dialect <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(db *DB, err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        err = errors.New(<span class=\"string\">\"invalid database source\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> source <span class=\"keyword\">string</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dbSQL SQLCommon</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ownDbSQL <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> value := args[<span class=\"number\">0</span>].(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> driver = dialect</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            source = value</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt;= <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">            driver = value</span><br><span class=\"line\">            source = args[<span class=\"number\">1</span>].(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 调用go基础库的Open方法获得db的connention附给dbSQL，</span></span><br><span class=\"line\">        <span class=\"comment\">// 此时还没有真正连接数据库</span></span><br><span class=\"line\">        dbSQL, err = sql.Open(driver, source)</span><br><span class=\"line\">        ownDbSQL = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> SQLCommon:</span><br><span class=\"line\">        dbSQL = value</span><br><span class=\"line\">        ownDbSQL = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">\"invalid database source: %v is not a valid type\"</span>, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化DB</span></span><br><span class=\"line\">    db = &amp;DB&#123;</span><br><span class=\"line\">        db:        dbSQL,</span><br><span class=\"line\">        logger:    defaultLogger,</span><br><span class=\"line\">        callbacks: DefaultCallback,</span><br><span class=\"line\">        dialect:   newDialect(dialect, dbSQL),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将初始化的DB保存到db.parent中</span></span><br><span class=\"line\">    db.parent = db</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用go基础库的Ping方法检测数据库connention是否可以连通</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> d, ok := dbSQL.(*sql.DB); ok &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err = d.Ping(); err != <span class=\"literal\">nil</span> &amp;&amp; ownDbSQL &#123;</span><br><span class=\"line\">            d.Close()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm 是通过多个 callbsck 方法来实现 curd 的，具体流程以一个查询为例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBEngine.Table(entry.TableName).</span><br><span class=\"line\">    Select(entry.Select).</span><br><span class=\"line\">    Where(entry.sql, entry.values).</span><br><span class=\"line\">    Order(entry.order).</span><br><span class=\"line\">    Find(entry.result)</span><br></pre></td></tr></table></figure>\n<p>执行步骤：</p>\n<p>1.执行 Table 方法，添加 tablename 条件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">Table</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> *<span class=\"title\">DB</span></span> &#123;</span><br><span class=\"line\">    clone := s.clone()        <span class=\"comment\">// 执行clone方法也就是从新的db中赋值一个空的，避免交叉影响</span></span><br><span class=\"line\">    clone.search.Table(name)  <span class=\"comment\">// 赋值table name</span></span><br><span class=\"line\">    clone.Value = <span class=\"literal\">nil</span>         <span class=\"comment\">// 附空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> clone</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.执行 Where 方法，添加 where 条件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先也是调用clone方法，然后调用search的Where方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">Where</span><span class=\"params\">(query <span class=\"keyword\">interface</span>&#123;&#125;, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">DB</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.clone().search.Where(query, args...).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// search的Where方法是将传进来的条件进行拼接，存入search.whereConditions</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *search)</span> <span class=\"title\">Where</span><span class=\"params\">(query <span class=\"keyword\">interface</span>&#123;&#125;, values ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">search</span></span> &#123;</span><br><span class=\"line\">    s.whereConditions = <span class=\"built_in\">append</span>(s.whereConditions, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"query\"</span>: query, <span class=\"string\">\"args\"</span>: values&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.执行 Order 方法，添加 order 条件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类似Where，reorder为true会强制刷掉gorm默认的order by</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">Order</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;, reorder ...<span class=\"keyword\">bool</span>)</span> *<span class=\"title\">DB</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.clone().search.Order(value, reorder...).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *search)</span> <span class=\"title\">Order</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;, reorder ...<span class=\"keyword\">bool</span>)</span> *<span class=\"title\">search</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果为true，先清除s.orders</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(reorder) &gt; <span class=\"number\">0</span> &amp;&amp; reorder[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">        s.orders = []<span class=\"keyword\">interface</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将value拼接，存入s.orders</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> value != <span class=\"literal\">nil</span> &amp;&amp; value != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">        s.orders = <span class=\"built_in\">append</span>(s.orders, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.执行 Find 方法，真正实现查询：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先先创建一个scope（可以理解成只针对本次数据库操作有效的一个环境），再调用inlineCondition内部方法，最后执行callcallbacks一系列方法实现真正的查询操作，并将db返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">Find</span><span class=\"params\">(out <span class=\"keyword\">interface</span>&#123;&#125;, where ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">DB</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.NewScope(out).inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewScope方法就是初始化一个scope</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DB)</span> <span class=\"title\">NewScope</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">Scope</span></span> &#123;</span><br><span class=\"line\">    dbClone := s.clone()</span><br><span class=\"line\">    <span class=\"comment\">// 此时赋值value</span></span><br><span class=\"line\">    dbClone.Value = value</span><br><span class=\"line\">    scope := &amp;Scope&#123;db: dbClone, Value: value&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s.search != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        scope.Search = s.search.clone()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        scope.Search = &amp;search&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// inlineCondition方法是执行scope.Search.Where</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(scope *Scope)</span> <span class=\"title\">inlineCondition</span><span class=\"params\">(values ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">Scope</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(values) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        scope.Search.Where(values[<span class=\"number\">0</span>], values[<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// scope.Search.Where实际上也是执行条件拼接，由于我们在调用的时候没有在Find中传入条件，所以这个方法不会被执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *search)</span> <span class=\"title\">Where</span><span class=\"params\">(query <span class=\"keyword\">interface</span>&#123;&#125;, values ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">search</span></span> &#123;</span><br><span class=\"line\">    s.whereConditions = <span class=\"built_in\">append</span>(s.whereConditions, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"query\"</span>: query, <span class=\"string\">\"args\"</span>: values&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最重要的就是callcallbacks方法，是真正执行的地方</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(scope *Scope)</span> <span class=\"title\">callCallbacks</span><span class=\"params\">(funcs []*<span class=\"keyword\">func</span>(s *Scope)</span>) *<span class=\"title\">Scope</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> db, ok := scope.db.db.(sqlTx); ok &#123;</span><br><span class=\"line\">                db.Rollback()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"comment\">// 循环里面所有的注册的funcs</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> funcs &#123;</span><br><span class=\"line\">        (*f)(scope)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> scope.skipLeft &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里的funcs实在程序启动时init方法注册的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    DefaultCallback.Query().Register(<span class=\"string\">\"gorm:query\"</span>, queryCallback)</span><br><span class=\"line\">    DefaultCallback.Query().Register(<span class=\"string\">\"gorm:preload\"</span>, preloadCallback)</span><br><span class=\"line\">    DefaultCallback.Query().Register(<span class=\"string\">\"gorm:after_query\"</span>, afterQueryCallback)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比如afterQueryCallback方法还提供了反射调用结构体的AfterFind方法，如果在查询前结构体实现了AfterFind方法就会被调用，这个机制比了灵活</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">afterQueryCallback</span><span class=\"params\">(scope *Scope)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !scope.HasError() &#123;</span><br><span class=\"line\">        scope.CallMethod(<span class=\"string\">\"AfterFind\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql常见问题","date":"2019-10-07T13:03:03.000Z","_content":"\n## mysql 原理\n\n### 事务 ACID 如何实现\n\nredo log 重做日志其实保障的是事务的持久性和一致性，而 undo log 撤销日志则保障了事务的原子性，锁保证隔离性。\n一个事务写操作对另一个事务写操作的影响：锁机制保证隔离性\n一个事务写操作对另一个事务读操作的影响：MVCC 保证隔离性\n\n- 原子性：使用 undo log ，从而达到回滚\n- 持久性：使用 redo log，从而达到故障后恢复\n- 隔离性：使用锁以及 MVCC,运用的优化思想有读写分离，读读并行，读写并行\n- 一致性：通过回滚，以及恢复，和在并发环境下的隔离做到一致性。\n\n### 索引如何存储\n\nB+树，每一个节点为一页，IO 次数约等于树高度\n\n### mysql 笔记\n\n- uid 使用 bigint 长度 20 和 primary key 和 auto_increment\n- create_time 使用 timestamp 默认值 CURRENT_TIMESTAMP\n- update_time 使用 timestamp 默认值 CURRENT_TIMESTAMP 加 on_update\n- 一般用 varchar 长度 64，128，512 最大 65535\n- 超大用 text\n\n### 总结点\n\nmysql\n\n- 索引\n  - B+树\n  - 查找页+二分查找\n- 锁\n  - 分类：SX 读写锁\n  - 算法\n    - record lock 记录锁\n    - gap lock 间隙锁\n    - next-key lock 记录间隙锁\n- 事务\n  - A 原子性\n    - redo、undo\n  - C 一致性\n    - redo、undo、记录间隙锁+MVCC\n  - I 隔离性\n    - 记录间隙锁+MVCC\n  - D 持久性\n    - redo、undo\n- 隔离级别\n  - 未提交读\n  - 提交读\n  - 重复读\n    - 解决重复数据读取不一致\n  - 串行化\n    - 解决幻读（两次读 出现数据增多 insert 进来的数据）\n- 性能调优\n  - 表结构优化\n  - 索引优化\n  - 查询语句优化\n  - 配置文件优化\n  - 机器优化\n\n### 其他\n\n查询数据库磁盘占用\n\n```sql\nselect TABLE_SCHEMA, concat(truncate(sum(data_length)/1024/1024,2),' MB') as data_size,\nconcat(truncate(sum(index_length)/1024/1024,2),'MB') as index_size\nfrom information_schema.tables\ngroup by TABLE_SCHEMA\norder by data_length desc;\n```\n\n查询某个数据库每个表磁盘占用\n\n```sql\nselect TABLE_NAME, concat(truncate(data_length/1024/1024,2),' MB') as data_size,\nconcat(truncate(index_length/1024/1024,2),' MB') as index_size\nfrom information_schema.tables where TABLE_SCHEMA = 'red_packet'\ngroup by TABLE_NAME\norder by data_length desc;\n```\n","source":"_posts/mysql/mysql常见问题.md","raw":"---\ntitle: mysql常见问题\ntags:\n  - mysql\ncategories:\n  - mysql\ndate: 2019-10-07 21:03:03\n---\n\n## mysql 原理\n\n### 事务 ACID 如何实现\n\nredo log 重做日志其实保障的是事务的持久性和一致性，而 undo log 撤销日志则保障了事务的原子性，锁保证隔离性。\n一个事务写操作对另一个事务写操作的影响：锁机制保证隔离性\n一个事务写操作对另一个事务读操作的影响：MVCC 保证隔离性\n\n- 原子性：使用 undo log ，从而达到回滚\n- 持久性：使用 redo log，从而达到故障后恢复\n- 隔离性：使用锁以及 MVCC,运用的优化思想有读写分离，读读并行，读写并行\n- 一致性：通过回滚，以及恢复，和在并发环境下的隔离做到一致性。\n\n### 索引如何存储\n\nB+树，每一个节点为一页，IO 次数约等于树高度\n\n### mysql 笔记\n\n- uid 使用 bigint 长度 20 和 primary key 和 auto_increment\n- create_time 使用 timestamp 默认值 CURRENT_TIMESTAMP\n- update_time 使用 timestamp 默认值 CURRENT_TIMESTAMP 加 on_update\n- 一般用 varchar 长度 64，128，512 最大 65535\n- 超大用 text\n\n### 总结点\n\nmysql\n\n- 索引\n  - B+树\n  - 查找页+二分查找\n- 锁\n  - 分类：SX 读写锁\n  - 算法\n    - record lock 记录锁\n    - gap lock 间隙锁\n    - next-key lock 记录间隙锁\n- 事务\n  - A 原子性\n    - redo、undo\n  - C 一致性\n    - redo、undo、记录间隙锁+MVCC\n  - I 隔离性\n    - 记录间隙锁+MVCC\n  - D 持久性\n    - redo、undo\n- 隔离级别\n  - 未提交读\n  - 提交读\n  - 重复读\n    - 解决重复数据读取不一致\n  - 串行化\n    - 解决幻读（两次读 出现数据增多 insert 进来的数据）\n- 性能调优\n  - 表结构优化\n  - 索引优化\n  - 查询语句优化\n  - 配置文件优化\n  - 机器优化\n\n### 其他\n\n查询数据库磁盘占用\n\n```sql\nselect TABLE_SCHEMA, concat(truncate(sum(data_length)/1024/1024,2),' MB') as data_size,\nconcat(truncate(sum(index_length)/1024/1024,2),'MB') as index_size\nfrom information_schema.tables\ngroup by TABLE_SCHEMA\norder by data_length desc;\n```\n\n查询某个数据库每个表磁盘占用\n\n```sql\nselect TABLE_NAME, concat(truncate(data_length/1024/1024,2),' MB') as data_size,\nconcat(truncate(index_length/1024/1024,2),' MB') as index_size\nfrom information_schema.tables where TABLE_SCHEMA = 'red_packet'\ngroup by TABLE_NAME\norder by data_length desc;\n```\n","slug":"mysql/mysql常见问题","published":1,"updated":"2020-05-25T05:50:59.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr78002fg938849keykj","content":"<h2 id=\"mysql-原理\"><a href=\"#mysql-原理\" class=\"headerlink\" title=\"mysql 原理\"></a>mysql 原理</h2><h3 id=\"事务-ACID-如何实现\"><a href=\"#事务-ACID-如何实现\" class=\"headerlink\" title=\"事务 ACID 如何实现\"></a>事务 ACID 如何实现</h3><p>redo log 重做日志其实保障的是事务的持久性和一致性，而 undo log 撤销日志则保障了事务的原子性，锁保证隔离性。<br>一个事务写操作对另一个事务写操作的影响：锁机制保证隔离性<br>一个事务写操作对另一个事务读操作的影响：MVCC 保证隔离性</p>\n<ul>\n<li>原子性：使用 undo log ，从而达到回滚</li>\n<li>持久性：使用 redo log，从而达到故障后恢复</li>\n<li>隔离性：使用锁以及 MVCC,运用的优化思想有读写分离，读读并行，读写并行</li>\n<li>一致性：通过回滚，以及恢复，和在并发环境下的隔离做到一致性。</li>\n</ul>\n<h3 id=\"索引如何存储\"><a href=\"#索引如何存储\" class=\"headerlink\" title=\"索引如何存储\"></a>索引如何存储</h3><p>B+树，每一个节点为一页，IO 次数约等于树高度</p>\n<h3 id=\"mysql-笔记\"><a href=\"#mysql-笔记\" class=\"headerlink\" title=\"mysql 笔记\"></a>mysql 笔记</h3><ul>\n<li>uid 使用 bigint 长度 20 和 primary key 和 auto_increment</li>\n<li>create_time 使用 timestamp 默认值 CURRENT_TIMESTAMP</li>\n<li>update_time 使用 timestamp 默认值 CURRENT_TIMESTAMP 加 on_update</li>\n<li>一般用 varchar 长度 64，128，512 最大 65535</li>\n<li>超大用 text</li>\n</ul>\n<h3 id=\"总结点\"><a href=\"#总结点\" class=\"headerlink\" title=\"总结点\"></a>总结点</h3><p>mysql</p>\n<ul>\n<li>索引<ul>\n<li>B+树</li>\n<li>查找页+二分查找</li>\n</ul>\n</li>\n<li>锁<ul>\n<li>分类：SX 读写锁</li>\n<li>算法<ul>\n<li>record lock 记录锁</li>\n<li>gap lock 间隙锁</li>\n<li>next-key lock 记录间隙锁</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事务<ul>\n<li>A 原子性<ul>\n<li>redo、undo</li>\n</ul>\n</li>\n<li>C 一致性<ul>\n<li>redo、undo、记录间隙锁+MVCC</li>\n</ul>\n</li>\n<li>I 隔离性<ul>\n<li>记录间隙锁+MVCC</li>\n</ul>\n</li>\n<li>D 持久性<ul>\n<li>redo、undo</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>隔离级别<ul>\n<li>未提交读</li>\n<li>提交读</li>\n<li>重复读<ul>\n<li>解决重复数据读取不一致</li>\n</ul>\n</li>\n<li>串行化<ul>\n<li>解决幻读（两次读 出现数据增多 insert 进来的数据）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>性能调优<ul>\n<li>表结构优化</li>\n<li>索引优化</li>\n<li>查询语句优化</li>\n<li>配置文件优化</li>\n<li>机器优化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>查询数据库磁盘占用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> TABLE_SCHEMA, <span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(<span class=\"keyword\">sum</span>(data_length)/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> data_size,</span><br><span class=\"line\"><span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(<span class=\"keyword\">sum</span>(index_length)/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">'MB'</span>) <span class=\"keyword\">as</span> index_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TABLE_SCHEMA</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> data_length <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n<p>查询某个数据库每个表磁盘占用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> TABLE_NAME, <span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(data_length/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> data_size,</span><br><span class=\"line\"><span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(index_length/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> index_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> TABLE_SCHEMA = <span class=\"string\">'red_packet'</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TABLE_NAME</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> data_length <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mysql-原理\"><a href=\"#mysql-原理\" class=\"headerlink\" title=\"mysql 原理\"></a>mysql 原理</h2><h3 id=\"事务-ACID-如何实现\"><a href=\"#事务-ACID-如何实现\" class=\"headerlink\" title=\"事务 ACID 如何实现\"></a>事务 ACID 如何实现</h3><p>redo log 重做日志其实保障的是事务的持久性和一致性，而 undo log 撤销日志则保障了事务的原子性，锁保证隔离性。<br>一个事务写操作对另一个事务写操作的影响：锁机制保证隔离性<br>一个事务写操作对另一个事务读操作的影响：MVCC 保证隔离性</p>\n<ul>\n<li>原子性：使用 undo log ，从而达到回滚</li>\n<li>持久性：使用 redo log，从而达到故障后恢复</li>\n<li>隔离性：使用锁以及 MVCC,运用的优化思想有读写分离，读读并行，读写并行</li>\n<li>一致性：通过回滚，以及恢复，和在并发环境下的隔离做到一致性。</li>\n</ul>\n<h3 id=\"索引如何存储\"><a href=\"#索引如何存储\" class=\"headerlink\" title=\"索引如何存储\"></a>索引如何存储</h3><p>B+树，每一个节点为一页，IO 次数约等于树高度</p>\n<h3 id=\"mysql-笔记\"><a href=\"#mysql-笔记\" class=\"headerlink\" title=\"mysql 笔记\"></a>mysql 笔记</h3><ul>\n<li>uid 使用 bigint 长度 20 和 primary key 和 auto_increment</li>\n<li>create_time 使用 timestamp 默认值 CURRENT_TIMESTAMP</li>\n<li>update_time 使用 timestamp 默认值 CURRENT_TIMESTAMP 加 on_update</li>\n<li>一般用 varchar 长度 64，128，512 最大 65535</li>\n<li>超大用 text</li>\n</ul>\n<h3 id=\"总结点\"><a href=\"#总结点\" class=\"headerlink\" title=\"总结点\"></a>总结点</h3><p>mysql</p>\n<ul>\n<li>索引<ul>\n<li>B+树</li>\n<li>查找页+二分查找</li>\n</ul>\n</li>\n<li>锁<ul>\n<li>分类：SX 读写锁</li>\n<li>算法<ul>\n<li>record lock 记录锁</li>\n<li>gap lock 间隙锁</li>\n<li>next-key lock 记录间隙锁</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事务<ul>\n<li>A 原子性<ul>\n<li>redo、undo</li>\n</ul>\n</li>\n<li>C 一致性<ul>\n<li>redo、undo、记录间隙锁+MVCC</li>\n</ul>\n</li>\n<li>I 隔离性<ul>\n<li>记录间隙锁+MVCC</li>\n</ul>\n</li>\n<li>D 持久性<ul>\n<li>redo、undo</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>隔离级别<ul>\n<li>未提交读</li>\n<li>提交读</li>\n<li>重复读<ul>\n<li>解决重复数据读取不一致</li>\n</ul>\n</li>\n<li>串行化<ul>\n<li>解决幻读（两次读 出现数据增多 insert 进来的数据）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>性能调优<ul>\n<li>表结构优化</li>\n<li>索引优化</li>\n<li>查询语句优化</li>\n<li>配置文件优化</li>\n<li>机器优化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>查询数据库磁盘占用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> TABLE_SCHEMA, <span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(<span class=\"keyword\">sum</span>(data_length)/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> data_size,</span><br><span class=\"line\"><span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(<span class=\"keyword\">sum</span>(index_length)/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">'MB'</span>) <span class=\"keyword\">as</span> index_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TABLE_SCHEMA</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> data_length <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n<p>查询某个数据库每个表磁盘占用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> TABLE_NAME, <span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(data_length/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> data_size,</span><br><span class=\"line\"><span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(index_length/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> index_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> TABLE_SCHEMA = <span class=\"string\">'red_packet'</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TABLE_NAME</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> data_length <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"linux 服务器常用命令整理","date":"2018-07-21T13:24:15.000Z","_content":"\n## linux 服务器常用命令整理\n\n### 目录\n\n- **网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload**\n- **网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc**\n- **抓包工具 - charles**\n- **内存检查 - free \\ meminfo**\n- **系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat**\n- **系统调用追踪 - strace \\ gcore**\n- **文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate**\n- **开发效率 - tmux**\n\n### 常见命令\n\n#### tcpdump\n\n1. tcp:用来过滤数据报的类型\n2. -i eth1 : 只抓经过接口 eth1 的包\n3. -t : 不显示时间戳\n4. -s 0 : 抓取数据包时默认抓取长度为 68 字节, 加上-S 0 后可以抓到完整的数据包\n5. -c 100 : 只抓取 100 个数据包\n6. dst port !22: 不抓取目标端口是 22 数据包\n7. src net 10.99.184.0/24 : 数据包的源网络地址为 10.99.184.0/24\n8. -A：显示数据包内容\n\n示例：\n\n`tcpdump -i any -v port 8888`\n\n`tcpdump -i any -A port 8888`\n\nsudo tcpdump port 17280 -i lo0 -X\n\n#### netstat\n\n查看所有连接\n\n`netstat -autnp`\n\n查看监听的 tcp 服务\n\n`netstat -altnp`\n\n看 tcp 端口\n\n`netstat -ltnp`\n\n#### ss\n\n- `ss -pl` 查看每个进程及其监听的端口\n- `ss -t -a` 查看所有的 tcp 连接\n- `ss -u -a` 查看所有的 udp 连接\n\n#### lsof\n\n- `lsof -i :8888` 查看端口 8888 进程信息\n- `lsof -p 7915` 查看进程 7915 打开的 fd 信息\n\n#### scp\n\n- `scp -r src remote:/tmp` 本地拷贝到远端\n- `scp -r remote:/tmp/src .` 远端拷贝到本地\n- `scp -3 remote:/tmp/a.tar remote2:/tmp/` 以本地为跳板机，将 remote 机器上文件拷贝到 remote2\n\n#### rsync\n\n- `rsync -av /home/mail/ 192.168.11.12:/home/mail/`\n- `rsync -av 192.168.11.11:/home/mail/ /home/mail/`\n\n#### nc\n\n- `nc -l 8888` 本地启动 8888 端口\n- `nc -l 8888 > a.tgz` 接收文件\n- `nc ali-a-bpc-userdevelop01.bj:8888 < a.tgz` 发送文件到远端\n\n#### vmstat\n\n- `vmstat 1 10`对内存监控，重点关注 swpd、free、si、so。一般系统不繁忙的状态下，swpd、so 的值不会持续很高，经常为 0。如果 swpd 过高，那么就是系统内存经常不够用。\n- 对 CPU 监控，我们可以查看 r（运行进程数）、us、sy、id（CPU 空闲），如果 r 的数字大于系统 CPU 个数，则面临 CPU 不够用的危险，通过 id 分析，如果过小，则可以判断是 CPU 不足。\n\n#### iostat\n\n- `iostat -x` 一般情况下，%util 应该越小越好，10%以下正常，30%IO 比较繁忙。50%以上一般是有问题的\n\n#### top\n\n- 1 按 CPU 核数查看\n- P\n- M\n- c 查看完整进程命令\n- top -Hp pid 查看线程数\n\n#### ps\n\n- `ps -eo “pid,cmd,lstart” | grep pid` 查看进程启动时间\n- `ps -ef f` 查看最近进程（常用）\n\n#### find\n\n- `find . -type f -mtime +3` 修改时间大于 3 天的文件\n- `find . -type f -mtime +3 | xargs rm -rf` 查找并删除\n\n#### du\n\n- `du -sk * | sort -n | cut -f2 | xargs -d '\\n' du -sh` 按文件大小排序显示\n- `du -hs` 常用\n\n#### awk\n\n`grep 'update_profile.*Android' access-20180131.log |awk -F 'POST' '{print $2}'|awk -F '&' '{print $26}'|awk -F ' ' '{print $1}'|awk -F '=' '{print $2}'|sort -n|uniq -c|sort -nr|head -100`\n\n-F 以空格分割\n\n#### xargs\n\n```bash\n# xargs 使用\n//查询redis members里面的值\nredis-cli smembers myset|awk '{print $1}'|xargs -I {} redis-cli get {}\n```\n\n#### 查看进程监听的端口\n\n```bash\n\n查看程序对应进程号：ps –ef|grep 进程名\n\nREDHAT :查看进程号所占用的端口号：netstat –nltp|grep 进程号\n\nubuntu:查看进程占用端口号：netstat -anp|grep pid\n\nLinux下查看端口号所使用的进程号：\n\n使用lsof命令： lsof –i:端口号\n\n```\n\n#### 其他\n\n```bash\nvim 块注释\nctrl+v\n选择\n大写I\n输入注释符号\nESC 等一秒\n\n抓包\ntcpdump -i lo0 port 1234 -A\n```\n","source":"_posts/linux/linux常用命令.md","raw":"---\ntitle: linux 服务器常用命令整理\ndate: 2018-07-21 21:24:15\ncategories:\n  - linux\ntags:\n  - linux\n  - cmd\n---\n\n## linux 服务器常用命令整理\n\n### 目录\n\n- **网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload**\n- **网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc**\n- **抓包工具 - charles**\n- **内存检查 - free \\ meminfo**\n- **系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat**\n- **系统调用追踪 - strace \\ gcore**\n- **文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate**\n- **开发效率 - tmux**\n\n### 常见命令\n\n#### tcpdump\n\n1. tcp:用来过滤数据报的类型\n2. -i eth1 : 只抓经过接口 eth1 的包\n3. -t : 不显示时间戳\n4. -s 0 : 抓取数据包时默认抓取长度为 68 字节, 加上-S 0 后可以抓到完整的数据包\n5. -c 100 : 只抓取 100 个数据包\n6. dst port !22: 不抓取目标端口是 22 数据包\n7. src net 10.99.184.0/24 : 数据包的源网络地址为 10.99.184.0/24\n8. -A：显示数据包内容\n\n示例：\n\n`tcpdump -i any -v port 8888`\n\n`tcpdump -i any -A port 8888`\n\nsudo tcpdump port 17280 -i lo0 -X\n\n#### netstat\n\n查看所有连接\n\n`netstat -autnp`\n\n查看监听的 tcp 服务\n\n`netstat -altnp`\n\n看 tcp 端口\n\n`netstat -ltnp`\n\n#### ss\n\n- `ss -pl` 查看每个进程及其监听的端口\n- `ss -t -a` 查看所有的 tcp 连接\n- `ss -u -a` 查看所有的 udp 连接\n\n#### lsof\n\n- `lsof -i :8888` 查看端口 8888 进程信息\n- `lsof -p 7915` 查看进程 7915 打开的 fd 信息\n\n#### scp\n\n- `scp -r src remote:/tmp` 本地拷贝到远端\n- `scp -r remote:/tmp/src .` 远端拷贝到本地\n- `scp -3 remote:/tmp/a.tar remote2:/tmp/` 以本地为跳板机，将 remote 机器上文件拷贝到 remote2\n\n#### rsync\n\n- `rsync -av /home/mail/ 192.168.11.12:/home/mail/`\n- `rsync -av 192.168.11.11:/home/mail/ /home/mail/`\n\n#### nc\n\n- `nc -l 8888` 本地启动 8888 端口\n- `nc -l 8888 > a.tgz` 接收文件\n- `nc ali-a-bpc-userdevelop01.bj:8888 < a.tgz` 发送文件到远端\n\n#### vmstat\n\n- `vmstat 1 10`对内存监控，重点关注 swpd、free、si、so。一般系统不繁忙的状态下，swpd、so 的值不会持续很高，经常为 0。如果 swpd 过高，那么就是系统内存经常不够用。\n- 对 CPU 监控，我们可以查看 r（运行进程数）、us、sy、id（CPU 空闲），如果 r 的数字大于系统 CPU 个数，则面临 CPU 不够用的危险，通过 id 分析，如果过小，则可以判断是 CPU 不足。\n\n#### iostat\n\n- `iostat -x` 一般情况下，%util 应该越小越好，10%以下正常，30%IO 比较繁忙。50%以上一般是有问题的\n\n#### top\n\n- 1 按 CPU 核数查看\n- P\n- M\n- c 查看完整进程命令\n- top -Hp pid 查看线程数\n\n#### ps\n\n- `ps -eo “pid,cmd,lstart” | grep pid` 查看进程启动时间\n- `ps -ef f` 查看最近进程（常用）\n\n#### find\n\n- `find . -type f -mtime +3` 修改时间大于 3 天的文件\n- `find . -type f -mtime +3 | xargs rm -rf` 查找并删除\n\n#### du\n\n- `du -sk * | sort -n | cut -f2 | xargs -d '\\n' du -sh` 按文件大小排序显示\n- `du -hs` 常用\n\n#### awk\n\n`grep 'update_profile.*Android' access-20180131.log |awk -F 'POST' '{print $2}'|awk -F '&' '{print $26}'|awk -F ' ' '{print $1}'|awk -F '=' '{print $2}'|sort -n|uniq -c|sort -nr|head -100`\n\n-F 以空格分割\n\n#### xargs\n\n```bash\n# xargs 使用\n//查询redis members里面的值\nredis-cli smembers myset|awk '{print $1}'|xargs -I {} redis-cli get {}\n```\n\n#### 查看进程监听的端口\n\n```bash\n\n查看程序对应进程号：ps –ef|grep 进程名\n\nREDHAT :查看进程号所占用的端口号：netstat –nltp|grep 进程号\n\nubuntu:查看进程占用端口号：netstat -anp|grep pid\n\nLinux下查看端口号所使用的进程号：\n\n使用lsof命令： lsof –i:端口号\n\n```\n\n#### 其他\n\n```bash\nvim 块注释\nctrl+v\n选择\n大写I\n输入注释符号\nESC 等一秒\n\n抓包\ntcpdump -i lo0 port 1234 -A\n```\n","slug":"linux/linux常用命令","published":1,"updated":"2020-05-25T05:44:55.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr79002ig938ly8jyqj1","content":"<h2 id=\"linux-服务器常用命令整理\"><a href=\"#linux-服务器常用命令整理\" class=\"headerlink\" title=\"linux 服务器常用命令整理\"></a>linux 服务器常用命令整理</h2><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><strong>网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload</strong></li>\n<li><strong>网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc</strong></li>\n<li><strong>抓包工具 - charles</strong></li>\n<li><strong>内存检查 - free \\ meminfo</strong></li>\n<li><strong>系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat</strong></li>\n<li><strong>系统调用追踪 - strace \\ gcore</strong></li>\n<li><strong>文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate</strong></li>\n<li><strong>开发效率 - tmux</strong></li>\n</ul>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><h4 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h4><ol>\n<li>tcp:用来过滤数据报的类型</li>\n<li>-i eth1 : 只抓经过接口 eth1 的包</li>\n<li>-t : 不显示时间戳</li>\n<li>-s 0 : 抓取数据包时默认抓取长度为 68 字节, 加上-S 0 后可以抓到完整的数据包</li>\n<li>-c 100 : 只抓取 100 个数据包</li>\n<li>dst port !22: 不抓取目标端口是 22 数据包</li>\n<li>src net 10.99.184.0/24 : 数据包的源网络地址为 10.99.184.0/24</li>\n<li>-A：显示数据包内容</li>\n</ol>\n<p>示例：</p>\n<p><code>tcpdump -i any -v port 8888</code></p>\n<p><code>tcpdump -i any -A port 8888</code></p>\n<p>sudo tcpdump port 17280 -i lo0 -X</p>\n<h4 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h4><p>查看所有连接</p>\n<p><code>netstat -autnp</code></p>\n<p>查看监听的 tcp 服务</p>\n<p><code>netstat -altnp</code></p>\n<p>看 tcp 端口</p>\n<p><code>netstat -ltnp</code></p>\n<h4 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h4><ul>\n<li><code>ss -pl</code> 查看每个进程及其监听的端口</li>\n<li><code>ss -t -a</code> 查看所有的 tcp 连接</li>\n<li><code>ss -u -a</code> 查看所有的 udp 连接</li>\n</ul>\n<h4 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h4><ul>\n<li><code>lsof -i :8888</code> 查看端口 8888 进程信息</li>\n<li><code>lsof -p 7915</code> 查看进程 7915 打开的 fd 信息</li>\n</ul>\n<h4 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h4><ul>\n<li><code>scp -r src remote:/tmp</code> 本地拷贝到远端</li>\n<li><code>scp -r remote:/tmp/src .</code> 远端拷贝到本地</li>\n<li><code>scp -3 remote:/tmp/a.tar remote2:/tmp/</code> 以本地为跳板机，将 remote 机器上文件拷贝到 remote2</li>\n</ul>\n<h4 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h4><ul>\n<li><code>rsync -av /home/mail/ 192.168.11.12:/home/mail/</code></li>\n<li><code>rsync -av 192.168.11.11:/home/mail/ /home/mail/</code></li>\n</ul>\n<h4 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h4><ul>\n<li><code>nc -l 8888</code> 本地启动 8888 端口</li>\n<li><code>nc -l 8888 &gt; a.tgz</code> 接收文件</li>\n<li><code>nc ali-a-bpc-userdevelop01.bj:8888 &lt; a.tgz</code> 发送文件到远端</li>\n</ul>\n<h4 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h4><ul>\n<li><code>vmstat 1 10</code>对内存监控，重点关注 swpd、free、si、so。一般系统不繁忙的状态下，swpd、so 的值不会持续很高，经常为 0。如果 swpd 过高，那么就是系统内存经常不够用。</li>\n<li>对 CPU 监控，我们可以查看 r（运行进程数）、us、sy、id（CPU 空闲），如果 r 的数字大于系统 CPU 个数，则面临 CPU 不够用的危险，通过 id 分析，如果过小，则可以判断是 CPU 不足。</li>\n</ul>\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><ul>\n<li><code>iostat -x</code> 一般情况下，%util 应该越小越好，10%以下正常，30%IO 比较繁忙。50%以上一般是有问题的</li>\n</ul>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><ul>\n<li>1 按 CPU 核数查看</li>\n<li>P</li>\n<li>M</li>\n<li>c 查看完整进程命令</li>\n<li>top -Hp pid 查看线程数</li>\n</ul>\n<h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><ul>\n<li><code>ps -eo “pid,cmd,lstart” | grep pid</code> 查看进程启动时间</li>\n<li><code>ps -ef f</code> 查看最近进程（常用）</li>\n</ul>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><ul>\n<li><code>find . -type f -mtime +3</code> 修改时间大于 3 天的文件</li>\n<li><code>find . -type f -mtime +3 | xargs rm -rf</code> 查找并删除</li>\n</ul>\n<h4 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h4><ul>\n<li><code>du -sk * | sort -n | cut -f2 | xargs -d &#39;\\n&#39; du -sh</code> 按文件大小排序显示</li>\n<li><code>du -hs</code> 常用</li>\n</ul>\n<h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><p><code>grep &#39;update_profile.*Android&#39; access-20180131.log |awk -F &#39;POST&#39; &#39;{print $2}&#39;|awk -F &#39;&amp;&#39; &#39;{print $26}&#39;|awk -F &#39; &#39; &#39;{print $1}&#39;|awk -F &#39;=&#39; &#39;{print $2}&#39;|sort -n|uniq -c|sort -nr|head -100</code></p>\n<p>-F 以空格分割</p>\n<h4 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xargs 使用</span></span><br><span class=\"line\">//查询redis members里面的值</span><br><span class=\"line\">redis-cli smembers myset|awk <span class=\"string\">'&#123;print $1&#125;'</span>|xargs -I &#123;&#125; redis-cli get &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看进程监听的端口\"><a href=\"#查看进程监听的端口\" class=\"headerlink\" title=\"查看进程监听的端口\"></a>查看进程监听的端口</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">查看程序对应进程号：ps –ef|grep 进程名</span><br><span class=\"line\"></span><br><span class=\"line\">REDHAT :查看进程号所占用的端口号：netstat –nltp|grep 进程号</span><br><span class=\"line\"></span><br><span class=\"line\">ubuntu:查看进程占用端口号：netstat -anp|grep pid</span><br><span class=\"line\"></span><br><span class=\"line\">Linux下查看端口号所使用的进程号：</span><br><span class=\"line\"></span><br><span class=\"line\">使用lsof命令： lsof –i:端口号</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim 块注释</span><br><span class=\"line\">ctrl+v</span><br><span class=\"line\">选择</span><br><span class=\"line\">大写I</span><br><span class=\"line\">输入注释符号</span><br><span class=\"line\">ESC 等一秒</span><br><span class=\"line\"></span><br><span class=\"line\">抓包</span><br><span class=\"line\">tcpdump -i lo0 port 1234 -A</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"linux-服务器常用命令整理\"><a href=\"#linux-服务器常用命令整理\" class=\"headerlink\" title=\"linux 服务器常用命令整理\"></a>linux 服务器常用命令整理</h2><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><strong>网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload</strong></li>\n<li><strong>网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc</strong></li>\n<li><strong>抓包工具 - charles</strong></li>\n<li><strong>内存检查 - free \\ meminfo</strong></li>\n<li><strong>系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat</strong></li>\n<li><strong>系统调用追踪 - strace \\ gcore</strong></li>\n<li><strong>文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate</strong></li>\n<li><strong>开发效率 - tmux</strong></li>\n</ul>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><h4 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h4><ol>\n<li>tcp:用来过滤数据报的类型</li>\n<li>-i eth1 : 只抓经过接口 eth1 的包</li>\n<li>-t : 不显示时间戳</li>\n<li>-s 0 : 抓取数据包时默认抓取长度为 68 字节, 加上-S 0 后可以抓到完整的数据包</li>\n<li>-c 100 : 只抓取 100 个数据包</li>\n<li>dst port !22: 不抓取目标端口是 22 数据包</li>\n<li>src net 10.99.184.0/24 : 数据包的源网络地址为 10.99.184.0/24</li>\n<li>-A：显示数据包内容</li>\n</ol>\n<p>示例：</p>\n<p><code>tcpdump -i any -v port 8888</code></p>\n<p><code>tcpdump -i any -A port 8888</code></p>\n<p>sudo tcpdump port 17280 -i lo0 -X</p>\n<h4 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h4><p>查看所有连接</p>\n<p><code>netstat -autnp</code></p>\n<p>查看监听的 tcp 服务</p>\n<p><code>netstat -altnp</code></p>\n<p>看 tcp 端口</p>\n<p><code>netstat -ltnp</code></p>\n<h4 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h4><ul>\n<li><code>ss -pl</code> 查看每个进程及其监听的端口</li>\n<li><code>ss -t -a</code> 查看所有的 tcp 连接</li>\n<li><code>ss -u -a</code> 查看所有的 udp 连接</li>\n</ul>\n<h4 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h4><ul>\n<li><code>lsof -i :8888</code> 查看端口 8888 进程信息</li>\n<li><code>lsof -p 7915</code> 查看进程 7915 打开的 fd 信息</li>\n</ul>\n<h4 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h4><ul>\n<li><code>scp -r src remote:/tmp</code> 本地拷贝到远端</li>\n<li><code>scp -r remote:/tmp/src .</code> 远端拷贝到本地</li>\n<li><code>scp -3 remote:/tmp/a.tar remote2:/tmp/</code> 以本地为跳板机，将 remote 机器上文件拷贝到 remote2</li>\n</ul>\n<h4 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h4><ul>\n<li><code>rsync -av /home/mail/ 192.168.11.12:/home/mail/</code></li>\n<li><code>rsync -av 192.168.11.11:/home/mail/ /home/mail/</code></li>\n</ul>\n<h4 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h4><ul>\n<li><code>nc -l 8888</code> 本地启动 8888 端口</li>\n<li><code>nc -l 8888 &gt; a.tgz</code> 接收文件</li>\n<li><code>nc ali-a-bpc-userdevelop01.bj:8888 &lt; a.tgz</code> 发送文件到远端</li>\n</ul>\n<h4 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h4><ul>\n<li><code>vmstat 1 10</code>对内存监控，重点关注 swpd、free、si、so。一般系统不繁忙的状态下，swpd、so 的值不会持续很高，经常为 0。如果 swpd 过高，那么就是系统内存经常不够用。</li>\n<li>对 CPU 监控，我们可以查看 r（运行进程数）、us、sy、id（CPU 空闲），如果 r 的数字大于系统 CPU 个数，则面临 CPU 不够用的危险，通过 id 分析，如果过小，则可以判断是 CPU 不足。</li>\n</ul>\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><ul>\n<li><code>iostat -x</code> 一般情况下，%util 应该越小越好，10%以下正常，30%IO 比较繁忙。50%以上一般是有问题的</li>\n</ul>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><ul>\n<li>1 按 CPU 核数查看</li>\n<li>P</li>\n<li>M</li>\n<li>c 查看完整进程命令</li>\n<li>top -Hp pid 查看线程数</li>\n</ul>\n<h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><ul>\n<li><code>ps -eo “pid,cmd,lstart” | grep pid</code> 查看进程启动时间</li>\n<li><code>ps -ef f</code> 查看最近进程（常用）</li>\n</ul>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><ul>\n<li><code>find . -type f -mtime +3</code> 修改时间大于 3 天的文件</li>\n<li><code>find . -type f -mtime +3 | xargs rm -rf</code> 查找并删除</li>\n</ul>\n<h4 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h4><ul>\n<li><code>du -sk * | sort -n | cut -f2 | xargs -d &#39;\\n&#39; du -sh</code> 按文件大小排序显示</li>\n<li><code>du -hs</code> 常用</li>\n</ul>\n<h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><p><code>grep &#39;update_profile.*Android&#39; access-20180131.log |awk -F &#39;POST&#39; &#39;{print $2}&#39;|awk -F &#39;&amp;&#39; &#39;{print $26}&#39;|awk -F &#39; &#39; &#39;{print $1}&#39;|awk -F &#39;=&#39; &#39;{print $2}&#39;|sort -n|uniq -c|sort -nr|head -100</code></p>\n<p>-F 以空格分割</p>\n<h4 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xargs 使用</span></span><br><span class=\"line\">//查询redis members里面的值</span><br><span class=\"line\">redis-cli smembers myset|awk <span class=\"string\">'&#123;print $1&#125;'</span>|xargs -I &#123;&#125; redis-cli get &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看进程监听的端口\"><a href=\"#查看进程监听的端口\" class=\"headerlink\" title=\"查看进程监听的端口\"></a>查看进程监听的端口</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">查看程序对应进程号：ps –ef|grep 进程名</span><br><span class=\"line\"></span><br><span class=\"line\">REDHAT :查看进程号所占用的端口号：netstat –nltp|grep 进程号</span><br><span class=\"line\"></span><br><span class=\"line\">ubuntu:查看进程占用端口号：netstat -anp|grep pid</span><br><span class=\"line\"></span><br><span class=\"line\">Linux下查看端口号所使用的进程号：</span><br><span class=\"line\"></span><br><span class=\"line\">使用lsof命令： lsof –i:端口号</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim 块注释</span><br><span class=\"line\">ctrl+v</span><br><span class=\"line\">选择</span><br><span class=\"line\">大写I</span><br><span class=\"line\">输入注释符号</span><br><span class=\"line\">ESC 等一秒</span><br><span class=\"line\"></span><br><span class=\"line\">抓包</span><br><span class=\"line\">tcpdump -i lo0 port 1234 -A</span><br></pre></td></tr></table></figure>\n"},{"title":"mongodb_intro","date":"2019-10-07T12:18:50.000Z","_content":"\n## mongodb\n\n### 概念\n\n```bash\n# 对比\nmysql  MongoDB\n数据库\t数据库Db\n表\t   集合Collection\n行\t   文档Document\n列\t   字段Key\n表     集合[{\"k1\":\"v1\",\"k2\":\"v2\"},{}]\n\n```\n\n### 优势\n\n- 格式不固定 JSON\n- MapReduce 复杂的聚合查询\n- 支持全文索引\n- 支持分片分布式存储\n\n### 缺点\n\n- 索引需要手动创建\n- 索引在内存创建（内存不够，则不会创建索引，或者删除部分索引）\n","source":"_posts/mysql/mongodb-intro.md","raw":"---\ntitle: mongodb_intro\ntags:\n  - mongo\ncategories:\n  - db\ndate: 2019-10-07 20:18:50\n---\n\n## mongodb\n\n### 概念\n\n```bash\n# 对比\nmysql  MongoDB\n数据库\t数据库Db\n表\t   集合Collection\n行\t   文档Document\n列\t   字段Key\n表     集合[{\"k1\":\"v1\",\"k2\":\"v2\"},{}]\n\n```\n\n### 优势\n\n- 格式不固定 JSON\n- MapReduce 复杂的聚合查询\n- 支持全文索引\n- 支持分片分布式存储\n\n### 缺点\n\n- 索引需要手动创建\n- 索引在内存创建（内存不够，则不会创建索引，或者删除部分索引）\n","slug":"mysql/mongodb-intro","published":1,"updated":"2020-05-25T05:47:37.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7b002mg9389hlnpp1f","content":"<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对比</span></span><br><span class=\"line\">mysql  MongoDB</span><br><span class=\"line\">数据库\t数据库Db</span><br><span class=\"line\">表\t   集合Collection</span><br><span class=\"line\">行\t   文档Document</span><br><span class=\"line\">列\t   字段Key</span><br><span class=\"line\">表     集合[&#123;<span class=\"string\">\"k1\"</span>:<span class=\"string\">\"v1\"</span>,<span class=\"string\">\"k2\"</span>:<span class=\"string\">\"v2\"</span>&#125;,&#123;&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ul>\n<li>格式不固定 JSON</li>\n<li>MapReduce 复杂的聚合查询</li>\n<li>支持全文索引</li>\n<li>支持分片分布式存储</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>索引需要手动创建</li>\n<li>索引在内存创建（内存不够，则不会创建索引，或者删除部分索引）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对比</span></span><br><span class=\"line\">mysql  MongoDB</span><br><span class=\"line\">数据库\t数据库Db</span><br><span class=\"line\">表\t   集合Collection</span><br><span class=\"line\">行\t   文档Document</span><br><span class=\"line\">列\t   字段Key</span><br><span class=\"line\">表     集合[&#123;<span class=\"string\">\"k1\"</span>:<span class=\"string\">\"v1\"</span>,<span class=\"string\">\"k2\"</span>:<span class=\"string\">\"v2\"</span>&#125;,&#123;&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ul>\n<li>格式不固定 JSON</li>\n<li>MapReduce 复杂的聚合查询</li>\n<li>支持全文索引</li>\n<li>支持分片分布式存储</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>索引需要手动创建</li>\n<li>索引在内存创建（内存不够，则不会创建索引，或者删除部分索引）</li>\n</ul>\n"},{"title":"supervisor使用","date":"2019-05-12T08:40:49.000Z","_content":"\n## linux 进程守护\n\n### 安装\n\n```bash\npip install supervisor\nsupervisord -v\n```\n\n### 命令\n\n```bash\n1.配置路径\nmkdir -p /etc/supervisor\n\n2.完整配置示例\necho_supervisord_conf > /etc/supervisor/supervisord.conf\n\n3.修改配置\nvim /etc/supervisor/supervisord.conf\n添加如下\n[include]\nfiles=/etc/supervisor/conf.d/*.conf\n\n4.添加如下配置\nmkdir -p /etc/supervisor/conf.d/\nvim /etc/supervisor/conf.d/xmysql.conf\n\n[program:myxmysql]\ncommand=xmysql -h localhost -u username -p username -d music -r 0.0.0.0 ; 运行程序的命令\ndirectory=/home/xiaodong/node-v10.15.3-linux-x64/bin/ ; 执行前要不要先cd到\n目录去，一般不用\nautorestart = true   ; 程序异常退出后自动重启\nautostart=true       ; 随着supervisord的启动而启动\nstartretries = 10     ; 启动失败自动重试次数，默认是 3\nnumprocs=1           ; 启动几个进程\nstderr_logfile=/var/log/myxmysql.err.log ; 错误日志文件\nstdout_logfile=/var/log/myxmysql.out.log ; 输出日志文件\nenvironment=A=B ; 进程环境变量\nuser=root ; 进程执行的用户身份\nstopsignal=KILL ; 用来杀死进程的\nstopsignal=INT\n\n5.启动\nsupervisord -c /etc/supervisor/supervisord.conf\n或者重新加载配置\nsupervisorctl reload\n```\n\n### 额外\n\n```bash\n把配置文件中 inet_http_server 前面的分号去掉 在Supervisor中 ;是注释的格式 默认是不开启web界面的\n\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=*:9001        ; (ip_address:port specifier, *:port for all iface)\nusername=user              ; (default is no username (open server))\npassword=123\n```\n","source":"_posts/linux/supervisor使用.md","raw":"---\ntitle: supervisor使用\ntags:\n  - linux\n  - supervisor\ncategories:\n  - linux\ndate: 2019-05-12 16:40:49\n---\n\n## linux 进程守护\n\n### 安装\n\n```bash\npip install supervisor\nsupervisord -v\n```\n\n### 命令\n\n```bash\n1.配置路径\nmkdir -p /etc/supervisor\n\n2.完整配置示例\necho_supervisord_conf > /etc/supervisor/supervisord.conf\n\n3.修改配置\nvim /etc/supervisor/supervisord.conf\n添加如下\n[include]\nfiles=/etc/supervisor/conf.d/*.conf\n\n4.添加如下配置\nmkdir -p /etc/supervisor/conf.d/\nvim /etc/supervisor/conf.d/xmysql.conf\n\n[program:myxmysql]\ncommand=xmysql -h localhost -u username -p username -d music -r 0.0.0.0 ; 运行程序的命令\ndirectory=/home/xiaodong/node-v10.15.3-linux-x64/bin/ ; 执行前要不要先cd到\n目录去，一般不用\nautorestart = true   ; 程序异常退出后自动重启\nautostart=true       ; 随着supervisord的启动而启动\nstartretries = 10     ; 启动失败自动重试次数，默认是 3\nnumprocs=1           ; 启动几个进程\nstderr_logfile=/var/log/myxmysql.err.log ; 错误日志文件\nstdout_logfile=/var/log/myxmysql.out.log ; 输出日志文件\nenvironment=A=B ; 进程环境变量\nuser=root ; 进程执行的用户身份\nstopsignal=KILL ; 用来杀死进程的\nstopsignal=INT\n\n5.启动\nsupervisord -c /etc/supervisor/supervisord.conf\n或者重新加载配置\nsupervisorctl reload\n```\n\n### 额外\n\n```bash\n把配置文件中 inet_http_server 前面的分号去掉 在Supervisor中 ;是注释的格式 默认是不开启web界面的\n\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=*:9001        ; (ip_address:port specifier, *:port for all iface)\nusername=user              ; (default is no username (open server))\npassword=123\n```\n","slug":"linux/supervisor使用","published":1,"updated":"2020-05-25T05:45:46.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7d002pg93880q4ekrm","content":"<h2 id=\"linux-进程守护\"><a href=\"#linux-进程守护\" class=\"headerlink\" title=\"linux 进程守护\"></a>linux 进程守护</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br><span class=\"line\">supervisord -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.配置路径</span><br><span class=\"line\">mkdir -p /etc/supervisor</span><br><span class=\"line\"></span><br><span class=\"line\">2.完整配置示例</span><br><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br><span class=\"line\"></span><br><span class=\"line\">3.修改配置</span><br><span class=\"line\">vim /etc/supervisor/supervisord.conf</span><br><span class=\"line\">添加如下</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files=/etc/supervisor/conf.d/*.conf</span><br><span class=\"line\"></span><br><span class=\"line\">4.添加如下配置</span><br><span class=\"line\">mkdir -p /etc/supervisor/conf.d/</span><br><span class=\"line\">vim /etc/supervisor/conf.d/xmysql.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[program:myxmysql]</span><br><span class=\"line\"><span class=\"built_in\">command</span>=xmysql -h localhost -u username -p username -d music -r 0.0.0.0 ; 运行程序的命令</span><br><span class=\"line\">directory=/home/xiaodong/node-v10.15.3-linux-x64/bin/ ; 执行前要不要先<span class=\"built_in\">cd</span>到</span><br><span class=\"line\">目录去，一般不用</span><br><span class=\"line\">autorestart = <span class=\"literal\">true</span>   ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=<span class=\"literal\">true</span>       ; 随着supervisord的启动而启动</span><br><span class=\"line\">startretries = 10     ; 启动失败自动重试次数，默认是 3</span><br><span class=\"line\">numprocs=1           ; 启动几个进程</span><br><span class=\"line\">stderr_logfile=/var/<span class=\"built_in\">log</span>/myxmysql.err.log ; 错误日志文件</span><br><span class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/myxmysql.out.log ; 输出日志文件</span><br><span class=\"line\">environment=A=B ; 进程环境变量</span><br><span class=\"line\">user=root ; 进程执行的用户身份</span><br><span class=\"line\">stopsignal=KILL ; 用来杀死进程的</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\"></span><br><span class=\"line\">5.启动</span><br><span class=\"line\">supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">或者重新加载配置</span><br><span class=\"line\">supervisorctl reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把配置文件中 inet_http_server 前面的分号去掉 在Supervisor中 ;是注释的格式 默认是不开启web界面的</span><br><span class=\"line\"></span><br><span class=\"line\">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">port=*:9001        ; (ip_address:port specifier, *:port <span class=\"keyword\">for</span> all iface)</span><br><span class=\"line\">username=user              ; (default is no username (open server))</span><br><span class=\"line\">password=123</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"linux-进程守护\"><a href=\"#linux-进程守护\" class=\"headerlink\" title=\"linux 进程守护\"></a>linux 进程守护</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br><span class=\"line\">supervisord -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.配置路径</span><br><span class=\"line\">mkdir -p /etc/supervisor</span><br><span class=\"line\"></span><br><span class=\"line\">2.完整配置示例</span><br><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br><span class=\"line\"></span><br><span class=\"line\">3.修改配置</span><br><span class=\"line\">vim /etc/supervisor/supervisord.conf</span><br><span class=\"line\">添加如下</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files=/etc/supervisor/conf.d/*.conf</span><br><span class=\"line\"></span><br><span class=\"line\">4.添加如下配置</span><br><span class=\"line\">mkdir -p /etc/supervisor/conf.d/</span><br><span class=\"line\">vim /etc/supervisor/conf.d/xmysql.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[program:myxmysql]</span><br><span class=\"line\"><span class=\"built_in\">command</span>=xmysql -h localhost -u username -p username -d music -r 0.0.0.0 ; 运行程序的命令</span><br><span class=\"line\">directory=/home/xiaodong/node-v10.15.3-linux-x64/bin/ ; 执行前要不要先<span class=\"built_in\">cd</span>到</span><br><span class=\"line\">目录去，一般不用</span><br><span class=\"line\">autorestart = <span class=\"literal\">true</span>   ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=<span class=\"literal\">true</span>       ; 随着supervisord的启动而启动</span><br><span class=\"line\">startretries = 10     ; 启动失败自动重试次数，默认是 3</span><br><span class=\"line\">numprocs=1           ; 启动几个进程</span><br><span class=\"line\">stderr_logfile=/var/<span class=\"built_in\">log</span>/myxmysql.err.log ; 错误日志文件</span><br><span class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/myxmysql.out.log ; 输出日志文件</span><br><span class=\"line\">environment=A=B ; 进程环境变量</span><br><span class=\"line\">user=root ; 进程执行的用户身份</span><br><span class=\"line\">stopsignal=KILL ; 用来杀死进程的</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\"></span><br><span class=\"line\">5.启动</span><br><span class=\"line\">supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">或者重新加载配置</span><br><span class=\"line\">supervisorctl reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把配置文件中 inet_http_server 前面的分号去掉 在Supervisor中 ;是注释的格式 默认是不开启web界面的</span><br><span class=\"line\"></span><br><span class=\"line\">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">port=*:9001        ; (ip_address:port specifier, *:port <span class=\"keyword\">for</span> all iface)</span><br><span class=\"line\">username=user              ; (default is no username (open server))</span><br><span class=\"line\">password=123</span><br></pre></td></tr></table></figure>\n"},{"title":"redis注意点","date":"2019-10-07T12:44:03.000Z","_content":"\n## redis 关键点\n\n核心点\n\n- 数据类型实现\n  - 跳跃表\n    - 层级高度\n    - 插入、删除过程\n  - hash 表\n    - rehash 过程\n- 持久化\n  - RDB\n    - BGSAVE\n  - AOF\n    - BGREWRITEAOF\n- 多机\n  - 主从模式\n    - psync 指令\n  - sentinel 主从故障转移\n    - 订阅同一个通道\n    - 心跳保活\n  - redis-cluster 集群\n    - 槽 slot 动态分配\n    - MOVE、ASK 指令转移\n","source":"_posts/mysql/redis注意点.md","raw":"---\ntitle: redis注意点\ntags:\n  - redis\ncategories:\n  - redis\ndate: 2019-10-07 20:44:03\n---\n\n## redis 关键点\n\n核心点\n\n- 数据类型实现\n  - 跳跃表\n    - 层级高度\n    - 插入、删除过程\n  - hash 表\n    - rehash 过程\n- 持久化\n  - RDB\n    - BGSAVE\n  - AOF\n    - BGREWRITEAOF\n- 多机\n  - 主从模式\n    - psync 指令\n  - sentinel 主从故障转移\n    - 订阅同一个通道\n    - 心跳保活\n  - redis-cluster 集群\n    - 槽 slot 动态分配\n    - MOVE、ASK 指令转移\n","slug":"mysql/redis注意点","published":1,"updated":"2020-05-25T05:52:39.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7f002rg938r3h9v0q9","content":"<h2 id=\"redis-关键点\"><a href=\"#redis-关键点\" class=\"headerlink\" title=\"redis 关键点\"></a>redis 关键点</h2><p>核心点</p>\n<ul>\n<li>数据类型实现<ul>\n<li>跳跃表<ul>\n<li>层级高度</li>\n<li>插入、删除过程</li>\n</ul>\n</li>\n<li>hash 表<ul>\n<li>rehash 过程</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>持久化<ul>\n<li>RDB<ul>\n<li>BGSAVE</li>\n</ul>\n</li>\n<li>AOF<ul>\n<li>BGREWRITEAOF</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多机<ul>\n<li>主从模式<ul>\n<li>psync 指令</li>\n</ul>\n</li>\n<li>sentinel 主从故障转移<ul>\n<li>订阅同一个通道</li>\n<li>心跳保活</li>\n</ul>\n</li>\n<li>redis-cluster 集群<ul>\n<li>槽 slot 动态分配</li>\n<li>MOVE、ASK 指令转移</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"redis-关键点\"><a href=\"#redis-关键点\" class=\"headerlink\" title=\"redis 关键点\"></a>redis 关键点</h2><p>核心点</p>\n<ul>\n<li>数据类型实现<ul>\n<li>跳跃表<ul>\n<li>层级高度</li>\n<li>插入、删除过程</li>\n</ul>\n</li>\n<li>hash 表<ul>\n<li>rehash 过程</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>持久化<ul>\n<li>RDB<ul>\n<li>BGSAVE</li>\n</ul>\n</li>\n<li>AOF<ul>\n<li>BGREWRITEAOF</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多机<ul>\n<li>主从模式<ul>\n<li>psync 指令</li>\n</ul>\n</li>\n<li>sentinel 主从故障转移<ul>\n<li>订阅同一个通道</li>\n<li>心跳保活</li>\n</ul>\n</li>\n<li>redis-cluster 集群<ul>\n<li>槽 slot 动态分配</li>\n<li>MOVE、ASK 指令转移</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"php_intro.md","date":"2017-11-09T06:03:26.000Z","_content":"\n## php 入门\n\nphp 简单入门\n\n- 安装 php、php-fpm\n- 安装 nginx\n- 安装 mysql\n- 安装 composer(包管理工具)\n\n运行 php-fpm:`php-fpm --fpm-config /usr/local/etc/php-fpm.conf --prefix /usr/local/var`\n\n入门 helloworld.php\n\n```php\n<?php\necho \"Hello World!\";\n?>\n```\n\n运行：php helloworld.php\n\n## php 概念\n\n[简单教程](https://www.runoob.com/php/php-tutorial.html)\n\n## php-nginx 配置\n\n```nginx\nevents{}\nhttp {\n  server {\n    listen 8080;\n    server_name localhost;\n    root         /Users/xiaodong/PhpstormProjects/;\n    location ~ \\.php$ {\n        # 设置监听端口\n        fastcgi_pass   127.0.0.1:9000;\n        # 设置nginx的默认首页文件(上面已经设置过了，可以删除)\n        fastcgi_index  index.php;\n        # 设置脚本文件请求的路径\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        # 引入fastcgi的配置文件\n        include        fastcgi_params;\n    }\n  }\n}\n\n```\n\n## 其他项目\n\n一些框架\n\n- thinkphp\n- yii\n- Laravel\n\n## 问题记录\n\n[mac 遇到问题](https://app.yinxiang.com/shard/s9/nl/16492052/663ce6a0-0aac-4da8-8f60-4f464a790fad?title=mac%20%E5%90%AF%E5%8A%A8php-fpm%20-%20%E9%83%AD%E8%83%9C%E9%BE%99%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%20-%20%E5%8D%9A%E5%AE%A2%E9%A2%91%E9%81%93%20-%20CSDN.NET)\n","source":"_posts/other/php-intro-md.md","raw":"---\ntitle: php_intro.md\ntags:\n  - php\n  - php-fpm\ncategories:\n  - php\ndate: 2017-11-09 14:03:26\n---\n\n## php 入门\n\nphp 简单入门\n\n- 安装 php、php-fpm\n- 安装 nginx\n- 安装 mysql\n- 安装 composer(包管理工具)\n\n运行 php-fpm:`php-fpm --fpm-config /usr/local/etc/php-fpm.conf --prefix /usr/local/var`\n\n入门 helloworld.php\n\n```php\n<?php\necho \"Hello World!\";\n?>\n```\n\n运行：php helloworld.php\n\n## php 概念\n\n[简单教程](https://www.runoob.com/php/php-tutorial.html)\n\n## php-nginx 配置\n\n```nginx\nevents{}\nhttp {\n  server {\n    listen 8080;\n    server_name localhost;\n    root         /Users/xiaodong/PhpstormProjects/;\n    location ~ \\.php$ {\n        # 设置监听端口\n        fastcgi_pass   127.0.0.1:9000;\n        # 设置nginx的默认首页文件(上面已经设置过了，可以删除)\n        fastcgi_index  index.php;\n        # 设置脚本文件请求的路径\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        # 引入fastcgi的配置文件\n        include        fastcgi_params;\n    }\n  }\n}\n\n```\n\n## 其他项目\n\n一些框架\n\n- thinkphp\n- yii\n- Laravel\n\n## 问题记录\n\n[mac 遇到问题](https://app.yinxiang.com/shard/s9/nl/16492052/663ce6a0-0aac-4da8-8f60-4f464a790fad?title=mac%20%E5%90%AF%E5%8A%A8php-fpm%20-%20%E9%83%AD%E8%83%9C%E9%BE%99%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%20-%20%E5%8D%9A%E5%AE%A2%E9%A2%91%E9%81%93%20-%20CSDN.NET)\n","slug":"other/php-intro-md","published":1,"updated":"2020-05-25T06:33:06.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7h002vg938kchevjdl","content":"<h2 id=\"php-入门\"><a href=\"#php-入门\" class=\"headerlink\" title=\"php 入门\"></a>php 入门</h2><p>php 简单入门</p>\n<ul>\n<li>安装 php、php-fpm</li>\n<li>安装 nginx</li>\n<li>安装 mysql</li>\n<li>安装 composer(包管理工具)</li>\n</ul>\n<p>运行 php-fpm:<code>php-fpm --fpm-config /usr/local/etc/php-fpm.conf --prefix /usr/local/var</code></p>\n<p>入门 helloworld.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行：php helloworld.php</p>\n<h2 id=\"php-概念\"><a href=\"#php-概念\" class=\"headerlink\" title=\"php 概念\"></a>php 概念</h2><p><a href=\"https://www.runoob.com/php/php-tutorial.html\" target=\"_blank\" rel=\"noopener\">简单教程</a></p>\n<h2 id=\"php-nginx-配置\"><a href=\"#php-nginx-配置\" class=\"headerlink\" title=\"php-nginx 配置\"></a>php-nginx 配置</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events&#123;&#125;</span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">    <span class=\"attribute\">root</span>         /Users/xiaodong/PhpstormProjects/;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 设置监听端口</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_pass</span>   <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">        <span class=\"comment\"># 设置nginx的默认首页文件(上面已经设置过了，可以删除)</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">        <span class=\"comment\"># 设置脚本文件请求的路径</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        <span class=\"comment\"># 引入fastcgi的配置文件</span></span><br><span class=\"line\">        <span class=\"attribute\">include</span>        fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h2><p>一些框架</p>\n<ul>\n<li>thinkphp</li>\n<li>yii</li>\n<li>Laravel</li>\n</ul>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><p><a href=\"https://app.yinxiang.com/shard/s9/nl/16492052/663ce6a0-0aac-4da8-8f60-4f464a790fad?title=mac%20%E5%90%AF%E5%8A%A8php-fpm%20-%20%E9%83%AD%E8%83%9C%E9%BE%99%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%20-%20%E5%8D%9A%E5%AE%A2%E9%A2%91%E9%81%93%20-%20CSDN.NET\" target=\"_blank\" rel=\"noopener\">mac 遇到问题</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"php-入门\"><a href=\"#php-入门\" class=\"headerlink\" title=\"php 入门\"></a>php 入门</h2><p>php 简单入门</p>\n<ul>\n<li>安装 php、php-fpm</li>\n<li>安装 nginx</li>\n<li>安装 mysql</li>\n<li>安装 composer(包管理工具)</li>\n</ul>\n<p>运行 php-fpm:<code>php-fpm --fpm-config /usr/local/etc/php-fpm.conf --prefix /usr/local/var</code></p>\n<p>入门 helloworld.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行：php helloworld.php</p>\n<h2 id=\"php-概念\"><a href=\"#php-概念\" class=\"headerlink\" title=\"php 概念\"></a>php 概念</h2><p><a href=\"https://www.runoob.com/php/php-tutorial.html\" target=\"_blank\" rel=\"noopener\">简单教程</a></p>\n<h2 id=\"php-nginx-配置\"><a href=\"#php-nginx-配置\" class=\"headerlink\" title=\"php-nginx 配置\"></a>php-nginx 配置</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events&#123;&#125;</span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">  <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">    <span class=\"attribute\">root</span>         /Users/xiaodong/PhpstormProjects/;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 设置监听端口</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_pass</span>   <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">        <span class=\"comment\"># 设置nginx的默认首页文件(上面已经设置过了，可以删除)</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">        <span class=\"comment\"># 设置脚本文件请求的路径</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        <span class=\"comment\"># 引入fastcgi的配置文件</span></span><br><span class=\"line\">        <span class=\"attribute\">include</span>        fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h2><p>一些框架</p>\n<ul>\n<li>thinkphp</li>\n<li>yii</li>\n<li>Laravel</li>\n</ul>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><p><a href=\"https://app.yinxiang.com/shard/s9/nl/16492052/663ce6a0-0aac-4da8-8f60-4f464a790fad?title=mac%20%E5%90%AF%E5%8A%A8php-fpm%20-%20%E9%83%AD%E8%83%9C%E9%BE%99%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%20-%20%E5%8D%9A%E5%AE%A2%E9%A2%91%E9%81%93%20-%20CSDN.NET\" target=\"_blank\" rel=\"noopener\">mac 遇到问题</a></p>\n"},{"title":"python常见问题","date":"2019-10-07T12:48:01.000Z","_content":"\n## python 常见问题\n\n### 安装\n\n`virtualenv -p /usr/bin/python2.7 venv`\n\n### python 常用函数\n\n```py\n# str\ns1 = str()\n# in python `''` or `\"\"` is the same\ns2 = \"shaunwei\" # 'shaunwei'\ns2len = len(s2)\n# last 3 chars\ns2[-3:] # wei\ns2[5:8] # wei\ns3 = s2[:5] # shaun\ns3 += 'wei' # return 'shaunwei'\n# list in python is same as ArrayList in java\ns2list = list(s3)\n# string at index 4\ns2[4] # 'n'\n# find index at first\ns2.index('w') # return 5, if not found, throw ValueError\ns2.find('w') # return 5, if not found, return -1\n\n# 链表\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass DListNode:\n    def __init__(self, val):\n        self.val = val\n        self.prev = self.next = None\n    def reverse(self, head):\n        curt = None\n        while head:\n            curt = head\n            head = curt.next\n            curt.next = curt.prev\n            curt.prev = head\n        return curt\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\nqueue = [] # same as list()\nsize = len(queue)\nqueue.append(1)\nqueue.append(2)\nqueue.pop(0) # return 1\nqueue[0] # return 2 examine the first element\n\n\ns = set()\ns1 = {1, 2, 3}\ns.add('shaunwei')\n'shaun' in s # return true\ns.remove('shaunwei')\n\n# map 在 python 中是一个keyword\nhash_map = {} # or dict()\nhash_map['shaun'] = 98\nhash_map['wei'] = 99\nexist = 'wei' in hash_map # check existence\npoint = hash_map['shaun'] # get value by key\npoint = hash_map.pop('shaun') # remove by key, return value\nkeys = hash_map.keys() # return key list\n# iterate dictionary(map)\nfor key, value in hash_map.items():\n    # do something with k, v\n    pass\n\nclass Person(object):\n    def __init__(self,name,age):\n        self.name=name\n        self.age=age\n\n    def hello(self):\n        print 'hello:'+self.name+\":\"+str(self.age)\n\n\n\nclass Tom(Person):\n    def __init__(self,name):\n        super(Tom,self).__init__(name,18)\n    def hello2(self):#只要子类有重复的名字就会覆盖\n        pass\n        #print 'child say hello'\nt=Tom('tom')\nt.hello()\n```\n\n### 注意点\n\n1. Python 有七个序列类型： 字符串、 Unicode 字符串、 列表、 元组、 字节数组、 缓冲区和 xrange 对象。序列类型 — str、unicode、list、 tuple、 bytearray、buffer、xrange\n2. if and 执行逻辑\n\n```py\ndef is_a():\n    print 'a'\n    return False\ndef is_b():\n    print 'b'\n    return False\n\n\nif __name__=='__main__':\n    #第一个条件如果为False,and后面的就直接不执行了\n    if is_a() and is_b():\n        print 'if中有先后顺序的'\n```\n\n### 问题\n\n#### tornado 框架\n\n1）异步 async+await 配合，2）效果和 yield 差不多，3）也可以使用 callback\n\n```py\nfrom tornado import gen\n\n@gen.coroutine\ndef fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = yield http_client.fetch(url)\n    # In Python versions prior to 3.3, returning a value from\n    # a generator is not allowed and you must use\n    #   raise gen.Return(response.body)\n    # instead.\n    return response.body\n```\n\n```py\nasync def fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = await http_client.fetch(url)\n    return response.body\n```\n\n#### 装饰器\n\n何时执行装饰器：导入模块时\n\n用处：将函数添加到中央注册处，url-》相应函数\n\n- 装饰器将函数替换成新的函数(添加一个记时功能给函数)：\n\n```py\n@clock\ndef haha():\n\txxxxx\n\n\ndef clock(func):\n\tdef clocked(*arg):\n\t\tfunc(*arg)\n\treturn clocked #返回新的函数了，替换掉原来的haha()\n```\n\n- == a.\\_\\_eq--(b)和比较值 Java 中：equals，is 比较对象标识（地址）Java 中：==\n- Copy.deepcopy(obj)会记住循环引用，优雅处理\n- @classmethod 最常见的用法是构建备选的构造方法\n\n#### 重试函数\n\n```py\n#encoding=utf8\n\n#有参数，必须再包一层（最外层的变量大家都可以访问）\ndef retry(times=1,exceptions=None):\n   exceptions = exceptions if exceptions is not None else Exception\n\n   # 包一层,传入对应的函数\n   def wrapper(func):\n      #替换函数\n      def wrapper(*args,**kwargs):\n         last_exception =None\n         for _ in range(times):\n            try:\n               return func(*args, **kwargs)\n            except exceptions as e:\n               last_exception = e\n         raise last_exception\n      return wrapper\n   return wrapper\n\nif __name__==\"__main__\":\n   @retry(5)\n   def test(uid,name):\n      print(\"do something\",uid,name)\n      raise Exception\n   test('123','tome')\n```\n\n#### 回调函数 callback 调用\n\n```py\nclass Callback:\n    def run_callback(self,fn,*args,**kwargs):\n        print 'call function',fn.__name__\n        print args,kwargs\n        #fn(args)相当于传入一个元组参数\n        #fn(*args)会把元组拆开，给对应的参数赋值\n        fn(*args)\n\n\n    def hi(self,name,age):\n        print 'hello,',name,age\n\n\n    @classmethod\n    def start(cls):\n        cls().run_callback(cls().hi,'tome',18)\n\nCallback.start()\n```\n","source":"_posts/python/python常见问题.md","raw":"---\ntitle: python常见问题\ntags:\n  - python\ncategories:\n  - python\ndate: 2019-10-07 20:48:01\n---\n\n## python 常见问题\n\n### 安装\n\n`virtualenv -p /usr/bin/python2.7 venv`\n\n### python 常用函数\n\n```py\n# str\ns1 = str()\n# in python `''` or `\"\"` is the same\ns2 = \"shaunwei\" # 'shaunwei'\ns2len = len(s2)\n# last 3 chars\ns2[-3:] # wei\ns2[5:8] # wei\ns3 = s2[:5] # shaun\ns3 += 'wei' # return 'shaunwei'\n# list in python is same as ArrayList in java\ns2list = list(s3)\n# string at index 4\ns2[4] # 'n'\n# find index at first\ns2.index('w') # return 5, if not found, throw ValueError\ns2.find('w') # return 5, if not found, return -1\n\n# 链表\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass DListNode:\n    def __init__(self, val):\n        self.val = val\n        self.prev = self.next = None\n    def reverse(self, head):\n        curt = None\n        while head:\n            curt = head\n            head = curt.next\n            curt.next = curt.prev\n            curt.prev = head\n        return curt\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\nqueue = [] # same as list()\nsize = len(queue)\nqueue.append(1)\nqueue.append(2)\nqueue.pop(0) # return 1\nqueue[0] # return 2 examine the first element\n\n\ns = set()\ns1 = {1, 2, 3}\ns.add('shaunwei')\n'shaun' in s # return true\ns.remove('shaunwei')\n\n# map 在 python 中是一个keyword\nhash_map = {} # or dict()\nhash_map['shaun'] = 98\nhash_map['wei'] = 99\nexist = 'wei' in hash_map # check existence\npoint = hash_map['shaun'] # get value by key\npoint = hash_map.pop('shaun') # remove by key, return value\nkeys = hash_map.keys() # return key list\n# iterate dictionary(map)\nfor key, value in hash_map.items():\n    # do something with k, v\n    pass\n\nclass Person(object):\n    def __init__(self,name,age):\n        self.name=name\n        self.age=age\n\n    def hello(self):\n        print 'hello:'+self.name+\":\"+str(self.age)\n\n\n\nclass Tom(Person):\n    def __init__(self,name):\n        super(Tom,self).__init__(name,18)\n    def hello2(self):#只要子类有重复的名字就会覆盖\n        pass\n        #print 'child say hello'\nt=Tom('tom')\nt.hello()\n```\n\n### 注意点\n\n1. Python 有七个序列类型： 字符串、 Unicode 字符串、 列表、 元组、 字节数组、 缓冲区和 xrange 对象。序列类型 — str、unicode、list、 tuple、 bytearray、buffer、xrange\n2. if and 执行逻辑\n\n```py\ndef is_a():\n    print 'a'\n    return False\ndef is_b():\n    print 'b'\n    return False\n\n\nif __name__=='__main__':\n    #第一个条件如果为False,and后面的就直接不执行了\n    if is_a() and is_b():\n        print 'if中有先后顺序的'\n```\n\n### 问题\n\n#### tornado 框架\n\n1）异步 async+await 配合，2）效果和 yield 差不多，3）也可以使用 callback\n\n```py\nfrom tornado import gen\n\n@gen.coroutine\ndef fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = yield http_client.fetch(url)\n    # In Python versions prior to 3.3, returning a value from\n    # a generator is not allowed and you must use\n    #   raise gen.Return(response.body)\n    # instead.\n    return response.body\n```\n\n```py\nasync def fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = await http_client.fetch(url)\n    return response.body\n```\n\n#### 装饰器\n\n何时执行装饰器：导入模块时\n\n用处：将函数添加到中央注册处，url-》相应函数\n\n- 装饰器将函数替换成新的函数(添加一个记时功能给函数)：\n\n```py\n@clock\ndef haha():\n\txxxxx\n\n\ndef clock(func):\n\tdef clocked(*arg):\n\t\tfunc(*arg)\n\treturn clocked #返回新的函数了，替换掉原来的haha()\n```\n\n- == a.\\_\\_eq--(b)和比较值 Java 中：equals，is 比较对象标识（地址）Java 中：==\n- Copy.deepcopy(obj)会记住循环引用，优雅处理\n- @classmethod 最常见的用法是构建备选的构造方法\n\n#### 重试函数\n\n```py\n#encoding=utf8\n\n#有参数，必须再包一层（最外层的变量大家都可以访问）\ndef retry(times=1,exceptions=None):\n   exceptions = exceptions if exceptions is not None else Exception\n\n   # 包一层,传入对应的函数\n   def wrapper(func):\n      #替换函数\n      def wrapper(*args,**kwargs):\n         last_exception =None\n         for _ in range(times):\n            try:\n               return func(*args, **kwargs)\n            except exceptions as e:\n               last_exception = e\n         raise last_exception\n      return wrapper\n   return wrapper\n\nif __name__==\"__main__\":\n   @retry(5)\n   def test(uid,name):\n      print(\"do something\",uid,name)\n      raise Exception\n   test('123','tome')\n```\n\n#### 回调函数 callback 调用\n\n```py\nclass Callback:\n    def run_callback(self,fn,*args,**kwargs):\n        print 'call function',fn.__name__\n        print args,kwargs\n        #fn(args)相当于传入一个元组参数\n        #fn(*args)会把元组拆开，给对应的参数赋值\n        fn(*args)\n\n\n    def hi(self,name,age):\n        print 'hello,',name,age\n\n\n    @classmethod\n    def start(cls):\n        cls().run_callback(cls().hi,'tome',18)\n\nCallback.start()\n```\n","slug":"python/python常见问题","published":1,"updated":"2020-05-25T05:59:56.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7l002xg938d5trg7bl","content":"<h2 id=\"python-常见问题\"><a href=\"#python-常见问题\" class=\"headerlink\" title=\"python 常见问题\"></a>python 常见问题</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><code>virtualenv -p /usr/bin/python2.7 venv</code></p>\n<h3 id=\"python-常用函数\"><a href=\"#python-常用函数\" class=\"headerlink\" title=\"python 常用函数\"></a>python 常用函数</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># str</span></span><br><span class=\"line\">s1 = str()</span><br><span class=\"line\"><span class=\"comment\"># in python `''` or `\"\"` is the same</span></span><br><span class=\"line\">s2 = <span class=\"string\">\"shaunwei\"</span> <span class=\"comment\"># 'shaunwei'</span></span><br><span class=\"line\">s2len = len(s2)</span><br><span class=\"line\"><span class=\"comment\"># last 3 chars</span></span><br><span class=\"line\">s2[<span class=\"number\">-3</span>:] <span class=\"comment\"># wei</span></span><br><span class=\"line\">s2[<span class=\"number\">5</span>:<span class=\"number\">8</span>] <span class=\"comment\"># wei</span></span><br><span class=\"line\">s3 = s2[:<span class=\"number\">5</span>] <span class=\"comment\"># shaun</span></span><br><span class=\"line\">s3 += <span class=\"string\">'wei'</span> <span class=\"comment\"># return 'shaunwei'</span></span><br><span class=\"line\"><span class=\"comment\"># list in python is same as ArrayList in java</span></span><br><span class=\"line\">s2list = list(s3)</span><br><span class=\"line\"><span class=\"comment\"># string at index 4</span></span><br><span class=\"line\">s2[<span class=\"number\">4</span>] <span class=\"comment\"># 'n'</span></span><br><span class=\"line\"><span class=\"comment\"># find index at first</span></span><br><span class=\"line\">s2.index(<span class=\"string\">'w'</span>) <span class=\"comment\"># return 5, if not found, throw ValueError</span></span><br><span class=\"line\">s2.find(<span class=\"string\">'w'</span>) <span class=\"comment\"># return 5, if not found, return -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.next = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DListNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.prev = self.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">        curt = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            curt = head</span><br><span class=\"line\">            head = curt.next</span><br><span class=\"line\">            curt.next = curt.prev</span><br><span class=\"line\">            curt.prev = head</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.left, self.right = <span class=\"keyword\">None</span>, <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">queue = [] <span class=\"comment\"># same as list()</span></span><br><span class=\"line\">size = len(queue)</span><br><span class=\"line\">queue.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.pop(<span class=\"number\">0</span>) <span class=\"comment\"># return 1</span></span><br><span class=\"line\">queue[<span class=\"number\">0</span>] <span class=\"comment\"># return 2 examine the first element</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s = set()</span><br><span class=\"line\">s1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">s.add(<span class=\"string\">'shaunwei'</span>)</span><br><span class=\"line\"><span class=\"string\">'shaun'</span> <span class=\"keyword\">in</span> s <span class=\"comment\"># return true</span></span><br><span class=\"line\">s.remove(<span class=\"string\">'shaunwei'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># map 在 python 中是一个keyword</span></span><br><span class=\"line\">hash_map = &#123;&#125; <span class=\"comment\"># or dict()</span></span><br><span class=\"line\">hash_map[<span class=\"string\">'shaun'</span>] = <span class=\"number\">98</span></span><br><span class=\"line\">hash_map[<span class=\"string\">'wei'</span>] = <span class=\"number\">99</span></span><br><span class=\"line\">exist = <span class=\"string\">'wei'</span> <span class=\"keyword\">in</span> hash_map <span class=\"comment\"># check existence</span></span><br><span class=\"line\">point = hash_map[<span class=\"string\">'shaun'</span>] <span class=\"comment\"># get value by key</span></span><br><span class=\"line\">point = hash_map.pop(<span class=\"string\">'shaun'</span>) <span class=\"comment\"># remove by key, return value</span></span><br><span class=\"line\">keys = hash_map.keys() <span class=\"comment\"># return key list</span></span><br><span class=\"line\"><span class=\"comment\"># iterate dictionary(map)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> hash_map.items():</span><br><span class=\"line\">    <span class=\"comment\"># do something with k, v</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></span><br><span class=\"line\">        self.name=name</span><br><span class=\"line\">        self.age=age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello:'</span>+self.name+<span class=\"string\">\":\"</span>+str(self.age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tom</span><span class=\"params\">(Person)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        super(Tom,self).__init__(name,<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello2</span><span class=\"params\">(self)</span>:</span><span class=\"comment\">#只要子类有重复的名字就会覆盖</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"comment\">#print 'child say hello'</span></span><br><span class=\"line\">t=Tom(<span class=\"string\">'tom'</span>)</span><br><span class=\"line\">t.hello()</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ol>\n<li>Python 有七个序列类型： 字符串、 Unicode 字符串、 列表、 元组、 字节数组、 缓冲区和 xrange 对象。序列类型 — str、unicode、list、 tuple、 bytearray、buffer、xrange</li>\n<li>if and 执行逻辑</li>\n</ol>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_a</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_b</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#第一个条件如果为False,and后面的就直接不执行了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_a() <span class=\"keyword\">and</span> is_b():</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'if中有先后顺序的'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><h4 id=\"tornado-框架\"><a href=\"#tornado-框架\" class=\"headerlink\" title=\"tornado 框架\"></a>tornado 框架</h4><p>1）异步 async+await 配合，2）效果和 yield 差不多，3）也可以使用 callback</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tornado <span class=\"keyword\">import</span> gen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@gen.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_coroutine</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = <span class=\"keyword\">yield</span> http_client.fetch(url)</span><br><span class=\"line\">    <span class=\"comment\"># In Python versions prior to 3.3, returning a value from</span></span><br><span class=\"line\">    <span class=\"comment\"># a generator is not allowed and you must use</span></span><br><span class=\"line\">    <span class=\"comment\">#   raise gen.Return(response.body)</span></span><br><span class=\"line\">    <span class=\"comment\"># instead.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.body</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_coroutine</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> http_client.fetch(url)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.body</span><br></pre></td></tr></table></figure>\n<h4 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h4><p>何时执行装饰器：导入模块时</p>\n<p>用处：将函数添加到中央注册处，url-》相应函数</p>\n<ul>\n<li>装饰器将函数替换成新的函数(添加一个记时功能给函数)：</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">haha</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\txxxxx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*arg)</span>:</span></span><br><span class=\"line\">\t\tfunc(*arg)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> clocked <span class=\"comment\">#返回新的函数了，替换掉原来的haha()</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>== a.__eq–(b)和比较值 Java 中：equals，is 比较对象标识（地址）Java 中：==</li>\n<li>Copy.deepcopy(obj)会记住循环引用，优雅处理</li>\n<li>@classmethod 最常见的用法是构建备选的构造方法</li>\n</ul>\n<h4 id=\"重试函数\"><a href=\"#重试函数\" class=\"headerlink\" title=\"重试函数\"></a>重试函数</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#encoding=utf8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#有参数，必须再包一层（最外层的变量大家都可以访问）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">retry</span><span class=\"params\">(times=<span class=\"number\">1</span>,exceptions=None)</span>:</span></span><br><span class=\"line\">   exceptions = exceptions <span class=\"keyword\">if</span> exceptions <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">else</span> Exception</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 包一层,传入对应的函数</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">      <span class=\"comment\">#替换函数</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args,**kwargs)</span>:</span></span><br><span class=\"line\">         last_exception =<span class=\"keyword\">None</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(times):</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">               <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> exceptions <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">               last_exception = e</span><br><span class=\"line\">         <span class=\"keyword\">raise</span> last_exception</span><br><span class=\"line\">      <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">   <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\"><span class=\"meta\">   @retry(5)</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(uid,name)</span>:</span></span><br><span class=\"line\">      print(<span class=\"string\">\"do something\"</span>,uid,name)</span><br><span class=\"line\">      <span class=\"keyword\">raise</span> Exception</span><br><span class=\"line\">   test(<span class=\"string\">'123'</span>,<span class=\"string\">'tome'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"回调函数-callback-调用\"><a href=\"#回调函数-callback-调用\" class=\"headerlink\" title=\"回调函数 callback 调用\"></a>回调函数 callback 调用</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Callback</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_callback</span><span class=\"params\">(self,fn,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'call function'</span>,fn.__name__</span><br><span class=\"line\">        <span class=\"keyword\">print</span> args,kwargs</span><br><span class=\"line\">        <span class=\"comment\">#fn(args)相当于传入一个元组参数</span></span><br><span class=\"line\">        <span class=\"comment\">#fn(*args)会把元组拆开，给对应的参数赋值</span></span><br><span class=\"line\">        fn(*args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hi</span><span class=\"params\">(self,name,age)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,'</span>,name,age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        cls().run_callback(cls().hi,<span class=\"string\">'tome'</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Callback.start()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python-常见问题\"><a href=\"#python-常见问题\" class=\"headerlink\" title=\"python 常见问题\"></a>python 常见问题</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><code>virtualenv -p /usr/bin/python2.7 venv</code></p>\n<h3 id=\"python-常用函数\"><a href=\"#python-常用函数\" class=\"headerlink\" title=\"python 常用函数\"></a>python 常用函数</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># str</span></span><br><span class=\"line\">s1 = str()</span><br><span class=\"line\"><span class=\"comment\"># in python `''` or `\"\"` is the same</span></span><br><span class=\"line\">s2 = <span class=\"string\">\"shaunwei\"</span> <span class=\"comment\"># 'shaunwei'</span></span><br><span class=\"line\">s2len = len(s2)</span><br><span class=\"line\"><span class=\"comment\"># last 3 chars</span></span><br><span class=\"line\">s2[<span class=\"number\">-3</span>:] <span class=\"comment\"># wei</span></span><br><span class=\"line\">s2[<span class=\"number\">5</span>:<span class=\"number\">8</span>] <span class=\"comment\"># wei</span></span><br><span class=\"line\">s3 = s2[:<span class=\"number\">5</span>] <span class=\"comment\"># shaun</span></span><br><span class=\"line\">s3 += <span class=\"string\">'wei'</span> <span class=\"comment\"># return 'shaunwei'</span></span><br><span class=\"line\"><span class=\"comment\"># list in python is same as ArrayList in java</span></span><br><span class=\"line\">s2list = list(s3)</span><br><span class=\"line\"><span class=\"comment\"># string at index 4</span></span><br><span class=\"line\">s2[<span class=\"number\">4</span>] <span class=\"comment\"># 'n'</span></span><br><span class=\"line\"><span class=\"comment\"># find index at first</span></span><br><span class=\"line\">s2.index(<span class=\"string\">'w'</span>) <span class=\"comment\"># return 5, if not found, throw ValueError</span></span><br><span class=\"line\">s2.find(<span class=\"string\">'w'</span>) <span class=\"comment\"># return 5, if not found, return -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.next = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DListNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.prev = self.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">        curt = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            curt = head</span><br><span class=\"line\">            head = curt.next</span><br><span class=\"line\">            curt.next = curt.prev</span><br><span class=\"line\">            curt.prev = head</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.left, self.right = <span class=\"keyword\">None</span>, <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">queue = [] <span class=\"comment\"># same as list()</span></span><br><span class=\"line\">size = len(queue)</span><br><span class=\"line\">queue.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.pop(<span class=\"number\">0</span>) <span class=\"comment\"># return 1</span></span><br><span class=\"line\">queue[<span class=\"number\">0</span>] <span class=\"comment\"># return 2 examine the first element</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s = set()</span><br><span class=\"line\">s1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">s.add(<span class=\"string\">'shaunwei'</span>)</span><br><span class=\"line\"><span class=\"string\">'shaun'</span> <span class=\"keyword\">in</span> s <span class=\"comment\"># return true</span></span><br><span class=\"line\">s.remove(<span class=\"string\">'shaunwei'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># map 在 python 中是一个keyword</span></span><br><span class=\"line\">hash_map = &#123;&#125; <span class=\"comment\"># or dict()</span></span><br><span class=\"line\">hash_map[<span class=\"string\">'shaun'</span>] = <span class=\"number\">98</span></span><br><span class=\"line\">hash_map[<span class=\"string\">'wei'</span>] = <span class=\"number\">99</span></span><br><span class=\"line\">exist = <span class=\"string\">'wei'</span> <span class=\"keyword\">in</span> hash_map <span class=\"comment\"># check existence</span></span><br><span class=\"line\">point = hash_map[<span class=\"string\">'shaun'</span>] <span class=\"comment\"># get value by key</span></span><br><span class=\"line\">point = hash_map.pop(<span class=\"string\">'shaun'</span>) <span class=\"comment\"># remove by key, return value</span></span><br><span class=\"line\">keys = hash_map.keys() <span class=\"comment\"># return key list</span></span><br><span class=\"line\"><span class=\"comment\"># iterate dictionary(map)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> hash_map.items():</span><br><span class=\"line\">    <span class=\"comment\"># do something with k, v</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></span><br><span class=\"line\">        self.name=name</span><br><span class=\"line\">        self.age=age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello:'</span>+self.name+<span class=\"string\">\":\"</span>+str(self.age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tom</span><span class=\"params\">(Person)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        super(Tom,self).__init__(name,<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello2</span><span class=\"params\">(self)</span>:</span><span class=\"comment\">#只要子类有重复的名字就会覆盖</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"comment\">#print 'child say hello'</span></span><br><span class=\"line\">t=Tom(<span class=\"string\">'tom'</span>)</span><br><span class=\"line\">t.hello()</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ol>\n<li>Python 有七个序列类型： 字符串、 Unicode 字符串、 列表、 元组、 字节数组、 缓冲区和 xrange 对象。序列类型 — str、unicode、list、 tuple、 bytearray、buffer、xrange</li>\n<li>if and 执行逻辑</li>\n</ol>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_a</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_b</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\">#第一个条件如果为False,and后面的就直接不执行了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_a() <span class=\"keyword\">and</span> is_b():</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'if中有先后顺序的'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><h4 id=\"tornado-框架\"><a href=\"#tornado-框架\" class=\"headerlink\" title=\"tornado 框架\"></a>tornado 框架</h4><p>1）异步 async+await 配合，2）效果和 yield 差不多，3）也可以使用 callback</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tornado <span class=\"keyword\">import</span> gen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@gen.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_coroutine</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = <span class=\"keyword\">yield</span> http_client.fetch(url)</span><br><span class=\"line\">    <span class=\"comment\"># In Python versions prior to 3.3, returning a value from</span></span><br><span class=\"line\">    <span class=\"comment\"># a generator is not allowed and you must use</span></span><br><span class=\"line\">    <span class=\"comment\">#   raise gen.Return(response.body)</span></span><br><span class=\"line\">    <span class=\"comment\"># instead.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.body</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_coroutine</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> http_client.fetch(url)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.body</span><br></pre></td></tr></table></figure>\n<h4 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h4><p>何时执行装饰器：导入模块时</p>\n<p>用处：将函数添加到中央注册处，url-》相应函数</p>\n<ul>\n<li>装饰器将函数替换成新的函数(添加一个记时功能给函数)：</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">haha</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\txxxxx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*arg)</span>:</span></span><br><span class=\"line\">\t\tfunc(*arg)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> clocked <span class=\"comment\">#返回新的函数了，替换掉原来的haha()</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>== a.__eq–(b)和比较值 Java 中：equals，is 比较对象标识（地址）Java 中：==</li>\n<li>Copy.deepcopy(obj)会记住循环引用，优雅处理</li>\n<li>@classmethod 最常见的用法是构建备选的构造方法</li>\n</ul>\n<h4 id=\"重试函数\"><a href=\"#重试函数\" class=\"headerlink\" title=\"重试函数\"></a>重试函数</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#encoding=utf8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#有参数，必须再包一层（最外层的变量大家都可以访问）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">retry</span><span class=\"params\">(times=<span class=\"number\">1</span>,exceptions=None)</span>:</span></span><br><span class=\"line\">   exceptions = exceptions <span class=\"keyword\">if</span> exceptions <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">else</span> Exception</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 包一层,传入对应的函数</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">      <span class=\"comment\">#替换函数</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args,**kwargs)</span>:</span></span><br><span class=\"line\">         last_exception =<span class=\"keyword\">None</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(times):</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">               <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> exceptions <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">               last_exception = e</span><br><span class=\"line\">         <span class=\"keyword\">raise</span> last_exception</span><br><span class=\"line\">      <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">   <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\"><span class=\"meta\">   @retry(5)</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(uid,name)</span>:</span></span><br><span class=\"line\">      print(<span class=\"string\">\"do something\"</span>,uid,name)</span><br><span class=\"line\">      <span class=\"keyword\">raise</span> Exception</span><br><span class=\"line\">   test(<span class=\"string\">'123'</span>,<span class=\"string\">'tome'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"回调函数-callback-调用\"><a href=\"#回调函数-callback-调用\" class=\"headerlink\" title=\"回调函数 callback 调用\"></a>回调函数 callback 调用</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Callback</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_callback</span><span class=\"params\">(self,fn,*args,**kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'call function'</span>,fn.__name__</span><br><span class=\"line\">        <span class=\"keyword\">print</span> args,kwargs</span><br><span class=\"line\">        <span class=\"comment\">#fn(args)相当于传入一个元组参数</span></span><br><span class=\"line\">        <span class=\"comment\">#fn(*args)会把元组拆开，给对应的参数赋值</span></span><br><span class=\"line\">        fn(*args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hi</span><span class=\"params\">(self,name,age)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,'</span>,name,age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        cls().run_callback(cls().hi,<span class=\"string\">'tome'</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Callback.start()</span><br></pre></td></tr></table></figure>\n"},{"title":"私信系统设计","date":"2019-02-21T03:15:41.000Z","_content":"\n## 私信系统设计\n\n## 整体设计\n\n分两种类型的表\n\n- 联系人表\n- 私信消息表\n\n通过长连接或者 push 消息推送实现实时聊天\n\n### 表结构设计[分库分表]\n\n```sql\nDROP TABLE IF EXISTS `contact_%v`;\nCREATE TABLE `contact_%v` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增id,主键',\n  `owner_id` bigint(20) unsigned NOT NULL COMMENT '私信发送者',\n  `peer_id` bigint(20) unsigned NOT NULL COMMENT '私信接收者',\n  `peer_type` tinyint(4) NOT NULL COMMENT '联系人类型：0普通/100系统/101群',\n  `peer_ack` tinyint(4) NOT NULL COMMENT 'peer是否给owner发过消息：0未发过/1发过',\n  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '联系人状态：0正常/1代表被删除; 默认值为0',\n  `last_msg_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '最新一次发送的私信id,默认值为0',\n  `last_del_msg_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '最后一次删除联系人时的私信id,默认值为0',\n  `version_id` bigint(20) unsigned NOT NULL COMMENT '版本号',\n  `sort_key` bigint(20) unsigned NOT NULL COMMENT '排序字段',\n  `labels` varchar(512) DEFAULT NULL COMMENT '标签,json串',\n  `created_at` timestamp NULL DEFAULT NULL,\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `idx_owner_id_peer_id` (`owner_id`,`peer_id`),\n  KEY `idx_owner_id_version_id` (`owner_id`,`version_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nDROP TABLE IF EXISTS `message_%v`;\nCREATE TABLE `message_%v` (\n  `msg_id` bigint(20) unsigned NOT NULL COMMENT '私信id',\n  `session_id` varchar(128) NOT NULL COMMENT '会话id,生成规则：uid小的在前大的在后用冒号连接；群消息和系统消息时为0:群号',\n  `send_id` bigint(20) unsigned NOT NULL COMMENT '私信发送者id',\n  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '私信状态：0正常/1代表被审核删除/2代表撤销; 默认值为0',\n  `has_read` tinyint(4) NOT NULL DEFAULT '0' COMMENT '私信接收者消息已读/未读状态：0未读/1已读; 默认值为0',\n  `seq_id` bigint(20) unsigned NOT NULL COMMENT '客户端本地私信序列id',\n  `version_id` bigint(20) unsigned NOT NULL COMMENT '版本号',\n  `sort_key` bigint(20) unsigned NOT NULL COMMENT '排序字段',\n  `msg_type` tinyint(4) NOT NULL COMMENT '私信类型',\n  `content` varchar(2048) NOT NULL COMMENT '私信内容',\n  `invisible_list` varchar(2048) DEFAULT NULL COMMENT '此msg对哪些用户不可见',\n  `created_at` timestamp NULL DEFAULT NULL,\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`msg_id`),\n  KEY `idx_session_id_msg_id` (`session_id`, `version_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n### 缓存设计\n\n### 详细设计\n\n1. 发送，写联系人表，写消息表\n2. 拉取联系人，拉取消息\n3. 删除私信【自己不可见】 撤销私信【全部不可见】\n4. 置顶会话 排序为设为最大\n5. 清空未读\n   6.\b 发系统私信\n\n### \b 问题\n\n系统消息怎么处理？\n","source":"_posts/system_design/私信系统设计.md","raw":"---\ntitle: 私信系统设计\ntags:\n  - 私信系统\ncategories:\n  - system design\ndate: 2019-02-21 11:15:41\n---\n\n## 私信系统设计\n\n## 整体设计\n\n分两种类型的表\n\n- 联系人表\n- 私信消息表\n\n通过长连接或者 push 消息推送实现实时聊天\n\n### 表结构设计[分库分表]\n\n```sql\nDROP TABLE IF EXISTS `contact_%v`;\nCREATE TABLE `contact_%v` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增id,主键',\n  `owner_id` bigint(20) unsigned NOT NULL COMMENT '私信发送者',\n  `peer_id` bigint(20) unsigned NOT NULL COMMENT '私信接收者',\n  `peer_type` tinyint(4) NOT NULL COMMENT '联系人类型：0普通/100系统/101群',\n  `peer_ack` tinyint(4) NOT NULL COMMENT 'peer是否给owner发过消息：0未发过/1发过',\n  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '联系人状态：0正常/1代表被删除; 默认值为0',\n  `last_msg_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '最新一次发送的私信id,默认值为0',\n  `last_del_msg_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '最后一次删除联系人时的私信id,默认值为0',\n  `version_id` bigint(20) unsigned NOT NULL COMMENT '版本号',\n  `sort_key` bigint(20) unsigned NOT NULL COMMENT '排序字段',\n  `labels` varchar(512) DEFAULT NULL COMMENT '标签,json串',\n  `created_at` timestamp NULL DEFAULT NULL,\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `idx_owner_id_peer_id` (`owner_id`,`peer_id`),\n  KEY `idx_owner_id_version_id` (`owner_id`,`version_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nDROP TABLE IF EXISTS `message_%v`;\nCREATE TABLE `message_%v` (\n  `msg_id` bigint(20) unsigned NOT NULL COMMENT '私信id',\n  `session_id` varchar(128) NOT NULL COMMENT '会话id,生成规则：uid小的在前大的在后用冒号连接；群消息和系统消息时为0:群号',\n  `send_id` bigint(20) unsigned NOT NULL COMMENT '私信发送者id',\n  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '私信状态：0正常/1代表被审核删除/2代表撤销; 默认值为0',\n  `has_read` tinyint(4) NOT NULL DEFAULT '0' COMMENT '私信接收者消息已读/未读状态：0未读/1已读; 默认值为0',\n  `seq_id` bigint(20) unsigned NOT NULL COMMENT '客户端本地私信序列id',\n  `version_id` bigint(20) unsigned NOT NULL COMMENT '版本号',\n  `sort_key` bigint(20) unsigned NOT NULL COMMENT '排序字段',\n  `msg_type` tinyint(4) NOT NULL COMMENT '私信类型',\n  `content` varchar(2048) NOT NULL COMMENT '私信内容',\n  `invisible_list` varchar(2048) DEFAULT NULL COMMENT '此msg对哪些用户不可见',\n  `created_at` timestamp NULL DEFAULT NULL,\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`msg_id`),\n  KEY `idx_session_id_msg_id` (`session_id`, `version_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n### 缓存设计\n\n### 详细设计\n\n1. 发送，写联系人表，写消息表\n2. 拉取联系人，拉取消息\n3. 删除私信【自己不可见】 撤销私信【全部不可见】\n4. 置顶会话 排序为设为最大\n5. 清空未读\n   6.\b 发系统私信\n\n### \b 问题\n\n系统消息怎么处理？\n","slug":"system_design/私信系统设计","published":1,"updated":"2020-05-25T06:00:29.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7m0030g9383477ig4m","content":"<h2 id=\"私信系统设计\"><a href=\"#私信系统设计\" class=\"headerlink\" title=\"私信系统设计\"></a>私信系统设计</h2><h2 id=\"整体设计\"><a href=\"#整体设计\" class=\"headerlink\" title=\"整体设计\"></a>整体设计</h2><p>分两种类型的表</p>\n<ul>\n<li>联系人表</li>\n<li>私信消息表</li>\n</ul>\n<p>通过长连接或者 push 消息推送实现实时聊天</p>\n<h3 id=\"表结构设计-分库分表\"><a href=\"#表结构设计-分库分表\" class=\"headerlink\" title=\"表结构设计[分库分表]\"></a>表结构设计[分库分表]</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`contact_%v`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`contact_%v`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'自增id,主键'</span>,</span><br><span class=\"line\">  <span class=\"string\">`owner_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信发送者'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信接收者'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_type`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'联系人类型：0普通/100系统/101群'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_ack`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'peer是否给owner发过消息：0未发过/1发过'</span>,</span><br><span class=\"line\">  <span class=\"string\">`status`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'联系人状态：0正常/1代表被删除; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`last_msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'最新一次发送的私信id,默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`last_del_msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'最后一次删除联系人时的私信id,默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'版本号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`sort_key`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'排序字段'</span>,</span><br><span class=\"line\">  <span class=\"string\">`labels`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">512</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'标签,json串'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`updated_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_owner_id_peer_id`</span> (<span class=\"string\">`owner_id`</span>,<span class=\"string\">`peer_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_owner_id_version_id`</span> (<span class=\"string\">`owner_id`</span>,<span class=\"string\">`version_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`message_%v`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`message_%v`</span> (</span><br><span class=\"line\">  <span class=\"string\">`msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`session_id`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'会话id,生成规则：uid小的在前大的在后用冒号连接；群消息和系统消息时为0:群号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`send_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信发送者id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`status`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信状态：0正常/1代表被审核删除/2代表撤销; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`has_read`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信接收者消息已读/未读状态：0未读/1已读; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`seq_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'客户端本地私信序列id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'版本号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`sort_key`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'排序字段'</span>,</span><br><span class=\"line\">  <span class=\"string\">`msg_type`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信类型'</span>,</span><br><span class=\"line\">  <span class=\"string\">`content`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">2048</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信内容'</span>,</span><br><span class=\"line\">  <span class=\"string\">`invisible_list`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">2048</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'此msg对哪些用户不可见'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`updated_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`msg_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_session_id_msg_id`</span> (<span class=\"string\">`session_id`</span>, <span class=\"string\">`version_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存设计\"><a href=\"#缓存设计\" class=\"headerlink\" title=\"缓存设计\"></a>缓存设计</h3><h3 id=\"详细设计\"><a href=\"#详细设计\" class=\"headerlink\" title=\"详细设计\"></a>详细设计</h3><ol>\n<li>发送，写联系人表，写消息表</li>\n<li>拉取联系人，拉取消息</li>\n<li>删除私信【自己不可见】 撤销私信【全部不可见】</li>\n<li>置顶会话 排序为设为最大</li>\n<li>清空未读<br>6.\b 发系统私信</li>\n</ol>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"\b 问题\"></a>\b 问题</h3><p>系统消息怎么处理？</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"私信系统设计\"><a href=\"#私信系统设计\" class=\"headerlink\" title=\"私信系统设计\"></a>私信系统设计</h2><h2 id=\"整体设计\"><a href=\"#整体设计\" class=\"headerlink\" title=\"整体设计\"></a>整体设计</h2><p>分两种类型的表</p>\n<ul>\n<li>联系人表</li>\n<li>私信消息表</li>\n</ul>\n<p>通过长连接或者 push 消息推送实现实时聊天</p>\n<h3 id=\"表结构设计-分库分表\"><a href=\"#表结构设计-分库分表\" class=\"headerlink\" title=\"表结构设计[分库分表]\"></a>表结构设计[分库分表]</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`contact_%v`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`contact_%v`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'自增id,主键'</span>,</span><br><span class=\"line\">  <span class=\"string\">`owner_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信发送者'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信接收者'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_type`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'联系人类型：0普通/100系统/101群'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_ack`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'peer是否给owner发过消息：0未发过/1发过'</span>,</span><br><span class=\"line\">  <span class=\"string\">`status`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'联系人状态：0正常/1代表被删除; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`last_msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'最新一次发送的私信id,默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`last_del_msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'最后一次删除联系人时的私信id,默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'版本号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`sort_key`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'排序字段'</span>,</span><br><span class=\"line\">  <span class=\"string\">`labels`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">512</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'标签,json串'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`updated_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_owner_id_peer_id`</span> (<span class=\"string\">`owner_id`</span>,<span class=\"string\">`peer_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_owner_id_version_id`</span> (<span class=\"string\">`owner_id`</span>,<span class=\"string\">`version_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`message_%v`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`message_%v`</span> (</span><br><span class=\"line\">  <span class=\"string\">`msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`session_id`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'会话id,生成规则：uid小的在前大的在后用冒号连接；群消息和系统消息时为0:群号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`send_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信发送者id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`status`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信状态：0正常/1代表被审核删除/2代表撤销; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`has_read`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信接收者消息已读/未读状态：0未读/1已读; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`seq_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'客户端本地私信序列id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'版本号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`sort_key`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'排序字段'</span>,</span><br><span class=\"line\">  <span class=\"string\">`msg_type`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信类型'</span>,</span><br><span class=\"line\">  <span class=\"string\">`content`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">2048</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信内容'</span>,</span><br><span class=\"line\">  <span class=\"string\">`invisible_list`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">2048</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'此msg对哪些用户不可见'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`updated_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`msg_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_session_id_msg_id`</span> (<span class=\"string\">`session_id`</span>, <span class=\"string\">`version_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存设计\"><a href=\"#缓存设计\" class=\"headerlink\" title=\"缓存设计\"></a>缓存设计</h3><h3 id=\"详细设计\"><a href=\"#详细设计\" class=\"headerlink\" title=\"详细设计\"></a>详细设计</h3><ol>\n<li>发送，写联系人表，写消息表</li>\n<li>拉取联系人，拉取消息</li>\n<li>删除私信【自己不可见】 撤销私信【全部不可见】</li>\n<li>置顶会话 排序为设为最大</li>\n<li>清空未读<br>6.\b 发系统私信</li>\n</ol>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"\b 问题\"></a>\b 问题</h3><p>系统消息怎么处理？</p>\n"},{"title":"git cheatcheet","date":"2018-09-19T08:12:32.000Z","_content":"\n## 常用命令\n\n```bash\ngit add . //ga\ngit status //gs\ngit diff //gd\ngit commit -m \"desc\" //gcm\ngit push //gp\ngit checkout -b feature/comment //gcb\ngit pull origin master //gpom\n```\n\n## 偶尔用到\n\n```bash\ngit push --set-upstream origin dev_2\ngit stash\ngit log\ngit cherry-pick xxx\ngit init\ngit clone\n```\n\n### 很少用到\n\n```bash\ngit config --global user.name \"muName\"\ngit config --global user.email \"myEmail\"\n```\n\n### 其他\n\n#### 比对 diff\n\n```bash\n# 显示暂存区和工作区的代码差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\ngit diff HEAD^ 比对当前内容和倒数第二次提交。\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n```\n\n```bash\n# 从暂存区移除一个文件\ngit rm file\n# 从暂存区移除所有文件\ngit reset .\n```\n\n#### rebase\n\n为了提交好看\n\n#### gitnore\n\n```bash\nfilename  //递归 忽略当前目录下所有包含此文件名的文件\ndir/      //递归 忽略目录和子目录\n!filename //递归 不忽略文件名\n\n```\n\n## 实现原理\n\n![添加暂存区](../../images/git_add.gif)\n![提交](../../images/git_commit.gif)\n\n所有的操作都是在操作下面这些元素\n![整体元素](../../images/git_object.png)\n\n流程\ngit add .\n\n- 把修改文件添加到 Git object 存储\n- 把索引指向更新\n\ngit commit -m 'update'\n\n- 创建一个新的提交\n- 将 HEAD 指向这个新的提交点\n","source":"_posts/tool/git-cheatcheet.md","raw":"---\ntitle: git cheatcheet\ntags:\n  - git\ncategories:\n  - tool\ndate: 2018-09-19 16:12:32\n---\n\n## 常用命令\n\n```bash\ngit add . //ga\ngit status //gs\ngit diff //gd\ngit commit -m \"desc\" //gcm\ngit push //gp\ngit checkout -b feature/comment //gcb\ngit pull origin master //gpom\n```\n\n## 偶尔用到\n\n```bash\ngit push --set-upstream origin dev_2\ngit stash\ngit log\ngit cherry-pick xxx\ngit init\ngit clone\n```\n\n### 很少用到\n\n```bash\ngit config --global user.name \"muName\"\ngit config --global user.email \"myEmail\"\n```\n\n### 其他\n\n#### 比对 diff\n\n```bash\n# 显示暂存区和工作区的代码差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\ngit diff HEAD^ 比对当前内容和倒数第二次提交。\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n```\n\n```bash\n# 从暂存区移除一个文件\ngit rm file\n# 从暂存区移除所有文件\ngit reset .\n```\n\n#### rebase\n\n为了提交好看\n\n#### gitnore\n\n```bash\nfilename  //递归 忽略当前目录下所有包含此文件名的文件\ndir/      //递归 忽略目录和子目录\n!filename //递归 不忽略文件名\n\n```\n\n## 实现原理\n\n![添加暂存区](../../images/git_add.gif)\n![提交](../../images/git_commit.gif)\n\n所有的操作都是在操作下面这些元素\n![整体元素](../../images/git_object.png)\n\n流程\ngit add .\n\n- 把修改文件添加到 Git object 存储\n- 把索引指向更新\n\ngit commit -m 'update'\n\n- 创建一个新的提交\n- 将 HEAD 指向这个新的提交点\n","slug":"tool/git-cheatcheet","published":1,"updated":"2020-05-25T06:10:37.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7o0032g938lo2u2vya","content":"<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . //ga</span><br><span class=\"line\">git status //gs</span><br><span class=\"line\">git diff //gd</span><br><span class=\"line\">git commit -m <span class=\"string\">\"desc\"</span> //gcm</span><br><span class=\"line\">git push //gp</span><br><span class=\"line\">git checkout -b feature/comment //gcb</span><br><span class=\"line\">git pull origin master //gpom</span><br></pre></td></tr></table></figure>\n<h2 id=\"偶尔用到\"><a href=\"#偶尔用到\" class=\"headerlink\" title=\"偶尔用到\"></a>偶尔用到</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --<span class=\"built_in\">set</span>-upstream origin dev_2</span><br><span class=\"line\">git stash</span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\">git cherry-pick xxx</span><br><span class=\"line\">git init</span><br><span class=\"line\">git <span class=\"built_in\">clone</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"很少用到\"><a href=\"#很少用到\" class=\"headerlink\" title=\"很少用到\"></a>很少用到</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"muName\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"myEmail\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"比对-diff\"><a href=\"#比对-diff\" class=\"headerlink\" title=\"比对 diff\"></a>比对 diff</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的代码差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\">git diff HEAD^ 比对当前内容和倒数第二次提交。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从暂存区移除一个文件</span></span><br><span class=\"line\">git rm file</span><br><span class=\"line\"><span class=\"comment\"># 从暂存区移除所有文件</span></span><br><span class=\"line\">git reset .</span><br></pre></td></tr></table></figure>\n<h4 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h4><p>为了提交好看</p>\n<h4 id=\"gitnore\"><a href=\"#gitnore\" class=\"headerlink\" title=\"gitnore\"></a>gitnore</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename  //递归 忽略当前目录下所有包含此文件名的文件</span><br><span class=\"line\">dir/      //递归 忽略目录和子目录</span><br><span class=\"line\">!filename //递归 不忽略文件名</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p><img src=\"../../images/git_add.gif\" alt=\"添加暂存区\"><br><img src=\"../../images/git_commit.gif\" alt=\"提交\"></p>\n<p>所有的操作都是在操作下面这些元素<br><img src=\"../../images/git_object.png\" alt=\"整体元素\"></p>\n<p>流程<br>git add .</p>\n<ul>\n<li>把修改文件添加到 Git object 存储</li>\n<li>把索引指向更新</li>\n</ul>\n<p>git commit -m ‘update’</p>\n<ul>\n<li>创建一个新的提交</li>\n<li>将 HEAD 指向这个新的提交点</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . //ga</span><br><span class=\"line\">git status //gs</span><br><span class=\"line\">git diff //gd</span><br><span class=\"line\">git commit -m <span class=\"string\">\"desc\"</span> //gcm</span><br><span class=\"line\">git push //gp</span><br><span class=\"line\">git checkout -b feature/comment //gcb</span><br><span class=\"line\">git pull origin master //gpom</span><br></pre></td></tr></table></figure>\n<h2 id=\"偶尔用到\"><a href=\"#偶尔用到\" class=\"headerlink\" title=\"偶尔用到\"></a>偶尔用到</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --<span class=\"built_in\">set</span>-upstream origin dev_2</span><br><span class=\"line\">git stash</span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\">git cherry-pick xxx</span><br><span class=\"line\">git init</span><br><span class=\"line\">git <span class=\"built_in\">clone</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"很少用到\"><a href=\"#很少用到\" class=\"headerlink\" title=\"很少用到\"></a>很少用到</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"muName\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"myEmail\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"比对-diff\"><a href=\"#比对-diff\" class=\"headerlink\" title=\"比对 diff\"></a>比对 diff</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的代码差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\">git diff HEAD^ 比对当前内容和倒数第二次提交。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从暂存区移除一个文件</span></span><br><span class=\"line\">git rm file</span><br><span class=\"line\"><span class=\"comment\"># 从暂存区移除所有文件</span></span><br><span class=\"line\">git reset .</span><br></pre></td></tr></table></figure>\n<h4 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h4><p>为了提交好看</p>\n<h4 id=\"gitnore\"><a href=\"#gitnore\" class=\"headerlink\" title=\"gitnore\"></a>gitnore</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename  //递归 忽略当前目录下所有包含此文件名的文件</span><br><span class=\"line\">dir/      //递归 忽略目录和子目录</span><br><span class=\"line\">!filename //递归 不忽略文件名</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p><img src=\"../../images/git_add.gif\" alt=\"添加暂存区\"><br><img src=\"../../images/git_commit.gif\" alt=\"提交\"></p>\n<p>所有的操作都是在操作下面这些元素<br><img src=\"../../images/git_object.png\" alt=\"整体元素\"></p>\n<p>流程<br>git add .</p>\n<ul>\n<li>把修改文件添加到 Git object 存储</li>\n<li>把索引指向更新</li>\n</ul>\n<p>git commit -m ‘update’</p>\n<ul>\n<li>创建一个新的提交</li>\n<li>将 HEAD 指向这个新的提交点</li>\n</ul>\n"},{"title":"常用工具使用","date":"2018-09-19T06:29:54.000Z","_content":"\n## 优点\n\n- 轻量\n- 可以直接打开文件夹&文件\n- 可以安装各种插件\n\n## 配置\n\n### 主题\n\natom one dark\n\n### 文件图标\n\nvscode icons/nomo dark icon theme\n\n### 插件\n\nintellij idea keybindings 插件  \nmarkdownlint 检查 markdown 语法\n\n### 对比 goland 配置\n\nColorful Dracula 主题\nconsolas 16 字体\n","source":"_posts/tool/vscode使用.md","raw":"---\ntitle: 常用工具使用\ntags:\n  - vscode\ncategories:\n  - tool\ndate: 2018-09-19 14:29:54\n---\n\n## 优点\n\n- 轻量\n- 可以直接打开文件夹&文件\n- 可以安装各种插件\n\n## 配置\n\n### 主题\n\natom one dark\n\n### 文件图标\n\nvscode icons/nomo dark icon theme\n\n### 插件\n\nintellij idea keybindings 插件  \nmarkdownlint 检查 markdown 语法\n\n### 对比 goland 配置\n\nColorful Dracula 主题\nconsolas 16 字体\n","slug":"tool/vscode使用","published":1,"updated":"2020-05-25T06:11:50.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7p0036g938zdmjct3k","content":"<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>轻量</li>\n<li>可以直接打开文件夹&amp;文件</li>\n<li>可以安装各种插件</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>atom one dark</p>\n<h3 id=\"文件图标\"><a href=\"#文件图标\" class=\"headerlink\" title=\"文件图标\"></a>文件图标</h3><p>vscode icons/nomo dark icon theme</p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>intellij idea keybindings 插件<br>markdownlint 检查 markdown 语法</p>\n<h3 id=\"对比-goland-配置\"><a href=\"#对比-goland-配置\" class=\"headerlink\" title=\"对比 goland 配置\"></a>对比 goland 配置</h3><p>Colorful Dracula 主题<br>consolas 16 字体</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>轻量</li>\n<li>可以直接打开文件夹&amp;文件</li>\n<li>可以安装各种插件</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>atom one dark</p>\n<h3 id=\"文件图标\"><a href=\"#文件图标\" class=\"headerlink\" title=\"文件图标\"></a>文件图标</h3><p>vscode icons/nomo dark icon theme</p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>intellij idea keybindings 插件<br>markdownlint 检查 markdown 语法</p>\n<h3 id=\"对比-goland-配置\"><a href=\"#对比-goland-配置\" class=\"headerlink\" title=\"对比 goland 配置\"></a>对比 goland 配置</h3><p>Colorful Dracula 主题<br>consolas 16 字体</p>\n"},{"title":"0x 定一个目标","date":"2018-07-21T13:04:44.000Z","_content":"\n## 计划\n\nARTS 是由左耳朵耗子陈皓发起的一个每周学习打卡计划。\n\n- Algorithm：至少做一个 LeetCode 的算法题。主要为了编程训练和学习。\n\n- Review ：阅读并点评至少一篇英文技术文章。主要为了学习英文，如果你英文不行，很难成为技术高手。\n\n- Tip：学习至少一个技术技巧。主要是为了总结和归纳你日常工作中所遇到的知识点。\n\n- Share：分享一篇有观点和思考的技术文章。主要为了输出你的影响力，能够输出你的价值观。\n","source":"_posts/z-summary/每周计划.md","raw":"---\ntitle: 0x 定一个目标\ndate: 2018-07-21 21:04:44\ncategories:\n  - idea\ntags:\n  - 计划\n  - 目标\n---\n\n## 计划\n\nARTS 是由左耳朵耗子陈皓发起的一个每周学习打卡计划。\n\n- Algorithm：至少做一个 LeetCode 的算法题。主要为了编程训练和学习。\n\n- Review ：阅读并点评至少一篇英文技术文章。主要为了学习英文，如果你英文不行，很难成为技术高手。\n\n- Tip：学习至少一个技术技巧。主要是为了总结和归纳你日常工作中所遇到的知识点。\n\n- Share：分享一篇有观点和思考的技术文章。主要为了输出你的影响力，能够输出你的价值观。\n","slug":"z-summary/每周计划","published":1,"updated":"2020-05-25T06:18:15.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7r0038g938cys211dw","content":"<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><p>ARTS 是由左耳朵耗子陈皓发起的一个每周学习打卡计划。</p>\n<ul>\n<li><p>Algorithm：至少做一个 LeetCode 的算法题。主要为了编程训练和学习。</p>\n</li>\n<li><p>Review ：阅读并点评至少一篇英文技术文章。主要为了学习英文，如果你英文不行，很难成为技术高手。</p>\n</li>\n<li><p>Tip：学习至少一个技术技巧。主要是为了总结和归纳你日常工作中所遇到的知识点。</p>\n</li>\n<li><p>Share：分享一篇有观点和思考的技术文章。主要为了输出你的影响力，能够输出你的价值观。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><p>ARTS 是由左耳朵耗子陈皓发起的一个每周学习打卡计划。</p>\n<ul>\n<li><p>Algorithm：至少做一个 LeetCode 的算法题。主要为了编程训练和学习。</p>\n</li>\n<li><p>Review ：阅读并点评至少一篇英文技术文章。主要为了学习英文，如果你英文不行，很难成为技术高手。</p>\n</li>\n<li><p>Tip：学习至少一个技术技巧。主要是为了总结和归纳你日常工作中所遇到的知识点。</p>\n</li>\n<li><p>Share：分享一篇有观点和思考的技术文章。主要为了输出你的影响力，能够输出你的价值观。</p>\n</li>\n</ul>\n"},{"title":"源码阅读顺序","date":"2019-03-14T06:21:36.000Z","_content":"\n## 源码阅读习惯\n\n1. 快速浏览程序文档【官方文档】，制作简单的 demo，使用一些核心功能\n\n2. 在 Google 中搜索程序的源码解析，浏览前十篇文章，记录一些关键点\n\n3. 自己下载源码，找前面的记录的一些关键点，写上自己的源码理解注释\n\n4. 发布注释后的源码到自己的 github 仓库，写上自己的心得理解到 README\n\n5. 给别人讲讲这个简单的东西！！！\n\n## 核心点\n\n基本\n\n- 是什么\n- 基本用法\n- 关键实现点\n\n进阶\n\n- 重新实现\n- 优化重构\n","source":"_posts/z-summary/源码阅读顺序.md","raw":"---\ntitle: 源码阅读顺序\ntags:\n  - 源码阅读\ncategories:\n  - 源码阅读\ndate: 2019-03-14 14:21:36\n---\n\n## 源码阅读习惯\n\n1. 快速浏览程序文档【官方文档】，制作简单的 demo，使用一些核心功能\n\n2. 在 Google 中搜索程序的源码解析，浏览前十篇文章，记录一些关键点\n\n3. 自己下载源码，找前面的记录的一些关键点，写上自己的源码理解注释\n\n4. 发布注释后的源码到自己的 github 仓库，写上自己的心得理解到 README\n\n5. 给别人讲讲这个简单的东西！！！\n\n## 核心点\n\n基本\n\n- 是什么\n- 基本用法\n- 关键实现点\n\n进阶\n\n- 重新实现\n- 优化重构\n","slug":"z-summary/源码阅读顺序","published":1,"updated":"2020-05-25T06:20:02.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckam9xr7t003dg938mpx1f4gb","content":"<h2 id=\"源码阅读习惯\"><a href=\"#源码阅读习惯\" class=\"headerlink\" title=\"源码阅读习惯\"></a>源码阅读习惯</h2><ol>\n<li><p>快速浏览程序文档【官方文档】，制作简单的 demo，使用一些核心功能</p>\n</li>\n<li><p>在 Google 中搜索程序的源码解析，浏览前十篇文章，记录一些关键点</p>\n</li>\n<li><p>自己下载源码，找前面的记录的一些关键点，写上自己的源码理解注释</p>\n</li>\n<li><p>发布注释后的源码到自己的 github 仓库，写上自己的心得理解到 README</p>\n</li>\n<li><p>给别人讲讲这个简单的东西！！！</p>\n</li>\n</ol>\n<h2 id=\"核心点\"><a href=\"#核心点\" class=\"headerlink\" title=\"核心点\"></a>核心点</h2><p>基本</p>\n<ul>\n<li>是什么</li>\n<li>基本用法</li>\n<li>关键实现点</li>\n</ul>\n<p>进阶</p>\n<ul>\n<li>重新实现</li>\n<li>优化重构</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"源码阅读习惯\"><a href=\"#源码阅读习惯\" class=\"headerlink\" title=\"源码阅读习惯\"></a>源码阅读习惯</h2><ol>\n<li><p>快速浏览程序文档【官方文档】，制作简单的 demo，使用一些核心功能</p>\n</li>\n<li><p>在 Google 中搜索程序的源码解析，浏览前十篇文章，记录一些关键点</p>\n</li>\n<li><p>自己下载源码，找前面的记录的一些关键点，写上自己的源码理解注释</p>\n</li>\n<li><p>发布注释后的源码到自己的 github 仓库，写上自己的心得理解到 README</p>\n</li>\n<li><p>给别人讲讲这个简单的东西！！！</p>\n</li>\n</ol>\n<h2 id=\"核心点\"><a href=\"#核心点\" class=\"headerlink\" title=\"核心点\"></a>核心点</h2><p>基本</p>\n<ul>\n<li>是什么</li>\n<li>基本用法</li>\n<li>关键实现点</li>\n</ul>\n<p>进阶</p>\n<ul>\n<li>重新实现</li>\n<li>优化重构</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckam9xr5f0003g938zi8vnzid","category_id":"ckam9xr5l0005g938gmalevkh","_id":"ckam9xr60000gg938rx2ofpi9"},{"post_id":"ckam9xr5s0009g938da3t9i8c","category_id":"ckam9xr5l0005g938gmalevkh","_id":"ckam9xr62000jg938814ia1mh"},{"post_id":"ckam9xr5j0004g938jzxmxymz","category_id":"ckam9xr5l0005g938gmalevkh","_id":"ckam9xr64000mg9380b8skgws"},{"post_id":"ckam9xr5o0007g938yxp4j5ag","category_id":"ckam9xr60000fg938s2zpksxc","_id":"ckam9xr67000sg938hcu8m9nh"},{"post_id":"ckam9xr5q0008g9380iixwaz9","category_id":"ckam9xr64000ng938tib574j9","_id":"ckam9xr6h000yg938o0jqr1gs"},{"post_id":"ckam9xr5x000dg9384m8zb2x7","category_id":"ckam9xr68000tg938f87jup24","_id":"ckam9xr6l0013g9387f5nuaj9"},{"post_id":"ckam9xr5z000eg938e6mn047b","category_id":"ckam9xr6h000zg938sb3paaix","_id":"ckam9xr6p001ag938noqtd2tw"},{"post_id":"ckam9xr61000ig93838gb83nq","category_id":"ckam9xr6n0015g938zgq2qgju","_id":"ckam9xr6t001hg938ji9ddmdf"},{"post_id":"ckam9xr62000lg938vfi87phd","category_id":"ckam9xr6q001cg9382vt2dvqp","_id":"ckam9xr6w001ng9389crivjlu"},{"post_id":"ckam9xr65000pg93831qedfre","category_id":"ckam9xr6t001ig938kkuyoo0s","_id":"ckam9xr6z001ug938aalq1gg6"},{"post_id":"ckam9xr6v001mg9388xivmuvl","category_id":"ckam9xr6h000zg938sb3paaix","_id":"ckam9xr70001yg938ntu64g6d"},{"post_id":"ckam9xr66000rg938e9to3xbt","category_id":"ckam9xr6w001og938u1y3r8p1","_id":"ckam9xr720022g938913cdbkm"},{"post_id":"ckam9xr70001zg9384r13yn8q","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr750028g938yg3o9z4k"},{"post_id":"ckam9xr68000vg9388u6vpisf","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr77002dg938cwnu63r6"},{"post_id":"ckam9xr730025g938r46zr8yy","category_id":"ckam9xr6h000zg938sb3paaix","_id":"ckam9xr78002gg938vqzgn5ec"},{"post_id":"ckam9xr6a000xg938nxak0xm2","category_id":"ckam9xr730023g938oe61kuen","_id":"ckam9xr7a002jg938ij6sfu1x"},{"post_id":"ckam9xr6i0010g93844gxrxd3","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr7c002og9380kv5xi6r"},{"post_id":"ckam9xr6j0012g9385j5b7nim","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr7g002ug938g17ek74g"},{"post_id":"ckam9xr6l0014g9382fu4tug1","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr7m002yg938nwpn2u6z"},{"post_id":"ckam9xr6o0017g938s8wckm6a","category_id":"ckam9xr7g002tg93899g4pixh","_id":"ckam9xr7p0035g938er46i34o"},{"post_id":"ckam9xr6p0019g9385j7w3sco","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr7t003bg938n584chm3"},{"post_id":"ckam9xr6q001eg938ibqv1txa","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr7v003gg938dawacjeb"},{"post_id":"ckam9xr6s001gg938enwdg5al","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr7x003jg938fpzxxexd"},{"post_id":"ckam9xr6t001kg938gp4pbver","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr7z003ng938faawr8ce"},{"post_id":"ckam9xr6w001pg938378cgzvg","category_id":"ckam9xr7w003ig938uvtamopr","_id":"ckam9xr81003rg938qw9ijtf9"},{"post_id":"ckam9xr6y001sg9385l0a5zm2","category_id":"ckam9xr70001wg938c2t5cl73","_id":"ckam9xr82003vg938sg5v5n5x"},{"post_id":"ckam9xr6z001vg93867bp03xa","category_id":"ckam9xr81003qg938a4uve9ar","_id":"ckam9xr84003zg938azrq5sbm"},{"post_id":"ckam9xr720021g938sx8aq7mp","category_id":"ckam9xr83003wg938wp171pit","_id":"ckam9xr850043g938s4ctzea6"},{"post_id":"ckam9xr740027g9389qmb2n0y","category_id":"ckam9xr840040g938br8l9g2a","_id":"ckam9xr860048g938g4vec8wn"},{"post_id":"ckam9xr76002cg938f3m9htyo","category_id":"ckam9xr850045g938kvaiojcy","_id":"ckam9xr87004cg938ar9o5typ"},{"post_id":"ckam9xr78002fg938849keykj","category_id":"ckam9xr860049g938x87uwmlh","_id":"ckam9xr88004gg938arawm6yq"},{"post_id":"ckam9xr79002ig938ly8jyqj1","category_id":"ckam9xr840040g938br8l9g2a","_id":"ckam9xr89004ig9386dgpui9i"},{"post_id":"ckam9xr7b002mg9389hlnpp1f","category_id":"ckam9xr88004fg938xtgpc64k","_id":"ckam9xr8a004ng938yrz49x8r"},{"post_id":"ckam9xr7d002pg93880q4ekrm","category_id":"ckam9xr840040g938br8l9g2a","_id":"ckam9xr8b004rg938407dyu8s"},{"post_id":"ckam9xr7f002rg938r3h9v0q9","category_id":"ckam9xr8a004mg938lta2nufi","_id":"ckam9xr8b004vg938ugqxgxtq"},{"post_id":"ckam9xr7h002vg938kchevjdl","category_id":"ckam9xr8b004sg9381kac7biq","_id":"ckam9xr8c004zg9386u7hat9d"},{"post_id":"ckam9xr7l002xg938d5trg7bl","category_id":"ckam9xr8b004xg938zni7ajqg","_id":"ckam9xr8c0052g938h9q5pesj"},{"post_id":"ckam9xr7m0030g9383477ig4m","category_id":"ckam9xr8c0050g938dkylxo9t","_id":"ckam9xr8d0057g93880pqyfeq"},{"post_id":"ckam9xr7o0032g938lo2u2vya","category_id":"ckam9xr8d0054g93846yjzaee","_id":"ckam9xr8f005cg938z9flwqw6"},{"post_id":"ckam9xr7p0036g938zdmjct3k","category_id":"ckam9xr8d0054g93846yjzaee","_id":"ckam9xr8g005fg9382mvt6lyh"},{"post_id":"ckam9xr7r0038g938cys211dw","category_id":"ckam9xr8e005bg938kg9oryku","_id":"ckam9xr8h005jg938bi7j149r"},{"post_id":"ckam9xr7t003dg938mpx1f4gb","category_id":"ckam9xr8g005gg938dxw7qaso","_id":"ckam9xr8i005lg938tn559m24"}],"PostTag":[{"post_id":"ckam9xr5f0003g938zi8vnzid","tag_id":"ckam9xr5n0006g938ol19agex","_id":"ckam9xr5w000cg938fajidc5i"},{"post_id":"ckam9xr5j0004g938jzxmxymz","tag_id":"ckam9xr5u000bg93839bpg3i7","_id":"ckam9xr62000kg938abqbhsez"},{"post_id":"ckam9xr5o0007g938yxp4j5ag","tag_id":"ckam9xr61000hg938dn1hr8wr","_id":"ckam9xr66000qg938mmgf6br9"},{"post_id":"ckam9xr5q0008g9380iixwaz9","tag_id":"ckam9xr64000og938kkpsmpo6","_id":"ckam9xr6a000wg938d0zt7o16"},{"post_id":"ckam9xr5s0009g938da3t9i8c","tag_id":"ckam9xr68000ug938h0wer0ql","_id":"ckam9xr6o0018g938k7ukflu2"},{"post_id":"ckam9xr5s0009g938da3t9i8c","tag_id":"ckam9xr6j0011g938yx6tx5ri","_id":"ckam9xr6q001bg938zycoia9g"},{"post_id":"ckam9xr5x000dg9384m8zb2x7","tag_id":"ckam9xr6n0016g938kxp4xkaa","_id":"ckam9xr6r001fg938sxgh04k3"},{"post_id":"ckam9xr5z000eg938e6mn047b","tag_id":"ckam9xr6q001dg9383kdd8xr7","_id":"ckam9xr6u001lg938qubh6g76"},{"post_id":"ckam9xr6v001mg9388xivmuvl","tag_id":"ckam9xr6q001dg9383kdd8xr7","_id":"ckam9xr6y001rg938fzl2mmwx"},{"post_id":"ckam9xr61000ig93838gb83nq","tag_id":"ckam9xr6t001jg938vvzglgnu","_id":"ckam9xr6z001tg938hfp3ylbt"},{"post_id":"ckam9xr62000lg938vfi87phd","tag_id":"ckam9xr6x001qg9388nxtr7f2","_id":"ckam9xr710020g9384rwpnftv"},{"post_id":"ckam9xr65000pg93831qedfre","tag_id":"ckam9xr70001xg9382rnem4e5","_id":"ckam9xr740026g938kyt510yp"},{"post_id":"ckam9xr730025g938r46zr8yy","tag_id":"ckam9xr6q001dg9383kdd8xr7","_id":"ckam9xr75002ag938c4oxbkev"},{"post_id":"ckam9xr66000rg938e9to3xbt","tag_id":"ckam9xr730024g938w67o7yex","_id":"ckam9xr77002eg938dbonci15"},{"post_id":"ckam9xr68000vg9388u6vpisf","tag_id":"ckam9xr76002bg938x0qf095a","_id":"ckam9xr7b002lg9389la410is"},{"post_id":"ckam9xr6a000xg938nxak0xm2","tag_id":"ckam9xr7a002kg938gdwfrir3","_id":"ckam9xr7g002sg938emxjwyi5"},{"post_id":"ckam9xr6i0010g93844gxrxd3","tag_id":"ckam9xr7e002qg938uab73v0r","_id":"ckam9xr7p0033g938uejah6fp"},{"post_id":"ckam9xr6i0010g93844gxrxd3","tag_id":"ckam9xr7k002wg9385eiqvtw7","_id":"ckam9xr7q0037g938eyuefdke"},{"post_id":"ckam9xr6j0012g9385j5b7nim","tag_id":"ckam9xr7n0031g938xte1v1oa","_id":"ckam9xr7t003cg93819sut6k5"},{"post_id":"ckam9xr6l0014g9382fu4tug1","tag_id":"ckam9xr7s0039g938crs2nywx","_id":"ckam9xr7y003kg9381jdamfmw"},{"post_id":"ckam9xr6l0014g9382fu4tug1","tag_id":"ckam9xr7v003eg938h5dsa40i","_id":"ckam9xr7z003lg938nupcseqb"},{"post_id":"ckam9xr6o0017g938s8wckm6a","tag_id":"ckam9xr7n0031g938xte1v1oa","_id":"ckam9xr81003sg938t694a9i9"},{"post_id":"ckam9xr6o0017g938s8wckm6a","tag_id":"ckam9xr7z003mg938zjh4is5r","_id":"ckam9xr82003tg938f6hicmrl"},{"post_id":"ckam9xr6p0019g9385j7w3sco","tag_id":"ckam9xr7n0031g938xte1v1oa","_id":"ckam9xr83003xg938k1wtwa2n"},{"post_id":"ckam9xr6q001eg938ibqv1txa","tag_id":"ckam9xr7n0031g938xte1v1oa","_id":"ckam9xr840041g938zpfqh6ci"},{"post_id":"ckam9xr6s001gg938enwdg5al","tag_id":"ckam9xr7n0031g938xte1v1oa","_id":"ckam9xr850044g938akkl0g6a"},{"post_id":"ckam9xr6t001kg938gp4pbver","tag_id":"ckam9xr7n0031g938xte1v1oa","_id":"ckam9xr860047g9383c1u3s30"},{"post_id":"ckam9xr6w001pg938378cgzvg","tag_id":"ckam9xr860046g9381h9pht4d","_id":"ckam9xr87004bg938qrqdk22p"},{"post_id":"ckam9xr6y001sg9385l0a5zm2","tag_id":"ckam9xr7n0031g938xte1v1oa","_id":"ckam9xr8a004lg938gt3ynldv"},{"post_id":"ckam9xr6y001sg9385l0a5zm2","tag_id":"ckam9xr88004eg938lvmt6lnk","_id":"ckam9xr8a004og9380avfm4ga"},{"post_id":"ckam9xr6y001sg9385l0a5zm2","tag_id":"ckam9xr89004hg9383dsx0mfh","_id":"ckam9xr8b004qg938cnqwspmh"},{"post_id":"ckam9xr6z001vg93867bp03xa","tag_id":"ckam9xr89004kg938vrw2nwcb","_id":"ckam9xr8b004tg938620qdhud"},{"post_id":"ckam9xr70001zg9384r13yn8q","tag_id":"ckam9xr8a004pg93865dpao0g","_id":"ckam9xr8b004wg9381ivduk65"},{"post_id":"ckam9xr720021g938sx8aq7mp","tag_id":"ckam9xr8b004ug938kb4rzuhc","_id":"ckam9xr8c0053g938qol6sdxp"},{"post_id":"ckam9xr720021g938sx8aq7mp","tag_id":"ckam9xr8c004yg938f43tzkk5","_id":"ckam9xr8d0055g938dra23yc8"},{"post_id":"ckam9xr740027g9389qmb2n0y","tag_id":"ckam9xr8c0051g938tj2idqlu","_id":"ckam9xr8d0058g938eh7wduud"},{"post_id":"ckam9xr76002cg938f3m9htyo","tag_id":"ckam9xr8d0056g938pzxmfwqf","_id":"ckam9xr8f005dg938zkqyamx3"},{"post_id":"ckam9xr78002fg938849keykj","tag_id":"ckam9xr8e005ag9381j84l2go","_id":"ckam9xr8h005hg938sj7gqszt"},{"post_id":"ckam9xr79002ig938ly8jyqj1","tag_id":"ckam9xr8f005eg938ymrl71un","_id":"ckam9xr8i005mg9382s44iwx3"},{"post_id":"ckam9xr79002ig938ly8jyqj1","tag_id":"ckam9xr8h005ig938enpgnlxs","_id":"ckam9xr8i005ng9382ik211yl"},{"post_id":"ckam9xr7b002mg9389hlnpp1f","tag_id":"ckam9xr8i005kg9384s8fvwq0","_id":"ckam9xr8j005pg938hbkf3az8"},{"post_id":"ckam9xr7d002pg93880q4ekrm","tag_id":"ckam9xr8f005eg938ymrl71un","_id":"ckam9xr8k005sg938330bs8es"},{"post_id":"ckam9xr7d002pg93880q4ekrm","tag_id":"ckam9xr8k005qg938388tot8s","_id":"ckam9xr8l005tg938xop50rmo"},{"post_id":"ckam9xr7f002rg938r3h9v0q9","tag_id":"ckam9xr8k005rg938kx65sh3s","_id":"ckam9xr8l005vg938anr0ibtw"},{"post_id":"ckam9xr7h002vg938kchevjdl","tag_id":"ckam9xr8l005ug938380paq2r","_id":"ckam9xr8n005yg938ozl28lsc"},{"post_id":"ckam9xr7h002vg938kchevjdl","tag_id":"ckam9xr8l005wg9389neb26co","_id":"ckam9xr8n005zg9385g3v27tq"},{"post_id":"ckam9xr7l002xg938d5trg7bl","tag_id":"ckam9xr8m005xg938m6ue63ns","_id":"ckam9xr8q0061g938o75x1bgw"},{"post_id":"ckam9xr7m0030g9383477ig4m","tag_id":"ckam9xr8n0060g9383qtq5hqf","_id":"ckam9xr8r0063g938201ngkum"},{"post_id":"ckam9xr7o0032g938lo2u2vya","tag_id":"ckam9xr8q0062g938r2pip3hk","_id":"ckam9xr8s0065g938f287uyuk"},{"post_id":"ckam9xr7p0036g938zdmjct3k","tag_id":"ckam9xr8r0064g938wy4ifw2s","_id":"ckam9xr8u0067g938en38gzkb"},{"post_id":"ckam9xr7r0038g938cys211dw","tag_id":"ckam9xr8s0066g938zuxg8kmm","_id":"ckam9xr8w006ag9383azyievz"},{"post_id":"ckam9xr7r0038g938cys211dw","tag_id":"ckam9xr8u0068g938bbtd4pnn","_id":"ckam9xr8w006bg938bmiy3fvq"},{"post_id":"ckam9xr7t003dg938mpx1f4gb","tag_id":"ckam9xr8v0069g93896ofn4kw","_id":"ckam9xr8w006cg938z25ye0tz"}],"Tag":[{"name":"epoll","_id":"ckam9xr5n0006g938ol19agex"},{"name":"hash","_id":"ckam9xr5u000bg93839bpg3i7"},{"name":"protobuf","_id":"ckam9xr61000hg938dn1hr8wr"},{"name":"code_style","_id":"ckam9xr64000og938kkpsmpo6"},{"name":"https","_id":"ckam9xr68000ug938h0wer0ql"},{"name":"SSL/TLS","_id":"ckam9xr6j0011g938yx6tx5ri"},{"name":"cap","_id":"ckam9xr6n0016g938kxp4xkaa"},{"name":"tags","_id":"ckam9xr6q001dg9383kdd8xr7"},{"name":"etcd","_id":"ckam9xr6t001jg938vvzglgnu"},{"name":"gin","_id":"ckam9xr6x001qg9388nxtr7f2"},{"name":"k8s","_id":"ckam9xr70001xg9382rnem4e5"},{"name":"thrift","_id":"ckam9xr730024g938w67o7yex"},{"name":"buffer","_id":"ckam9xr76002bg938x0qf095a"},{"name":"boltdb","_id":"ckam9xr7a002kg938gdwfrir3"},{"name":"golang","_id":"ckam9xr7e002qg938uab73v0r"},{"name":"context","_id":"ckam9xr7k002wg9385eiqvtw7"},{"name":"go","_id":"ckam9xr7n0031g938xte1v1oa"},{"name":"test","_id":"ckam9xr7s0039g938crs2nywx"},{"name":"bench test","_id":"ckam9xr7v003eg938h5dsa40i"},{"name":"函数式选项","_id":"ckam9xr7z003mg938zjh4is5r"},{"name":"闭包","_id":"ckam9xr860046g9381h9pht4d"},{"name":"error","_id":"ckam9xr88004eg938lvmt6lnk"},{"name":"log","_id":"ckam9xr89004hg9383dsx0mfh"},{"name":"ES6","_id":"ckam9xr89004kg938vrw2nwcb"},{"name":"net/http","_id":"ckam9xr8a004pg93865dpao0g"},{"name":"await","_id":"ckam9xr8b004ug938kb4rzuhc"},{"name":"async","_id":"ckam9xr8c004yg938f43tzkk5"},{"name":"signal","_id":"ckam9xr8c0051g938tj2idqlu"},{"name":"gorm","_id":"ckam9xr8d0056g938pzxmfwqf"},{"name":"mysql","_id":"ckam9xr8e005ag9381j84l2go"},{"name":"linux","_id":"ckam9xr8f005eg938ymrl71un"},{"name":"cmd","_id":"ckam9xr8h005ig938enpgnlxs"},{"name":"mongo","_id":"ckam9xr8i005kg9384s8fvwq0"},{"name":"supervisor","_id":"ckam9xr8k005qg938388tot8s"},{"name":"redis","_id":"ckam9xr8k005rg938kx65sh3s"},{"name":"php","_id":"ckam9xr8l005ug938380paq2r"},{"name":"php-fpm","_id":"ckam9xr8l005wg9389neb26co"},{"name":"python","_id":"ckam9xr8m005xg938m6ue63ns"},{"name":"私信系统","_id":"ckam9xr8n0060g9383qtq5hqf"},{"name":"git","_id":"ckam9xr8q0062g938r2pip3hk"},{"name":"vscode","_id":"ckam9xr8r0064g938wy4ifw2s"},{"name":"计划","_id":"ckam9xr8s0066g938zuxg8kmm"},{"name":"目标","_id":"ckam9xr8u0068g938bbtd4pnn"},{"name":"源码阅读","_id":"ckam9xr8v0069g93896ofn4kw"}]}}