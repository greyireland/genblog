{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"8efff17e20845896e514f641bdae6d8e492d695d","modified":1570455180779},{"_id":"source/favicon.ico","hash":"e6c1bed3ac2b2a5f5c1e40a0860aa533c74d3e31","modified":1544341897000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1545206786707},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1545206786708},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1545206786708},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1545206786708},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1545206786708},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1545206786709},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1545206786709},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1545206786709},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1545206786710},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1545206786711},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1545206786711},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1545206786712},{"_id":"themes/next/_config.yml","hash":"a6690a1dcdaae2d6ecd6fc8dd93a21627c8be856","modified":1545206786712},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1545206786712},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1545206786713},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1545206786757},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1541488453000},{"_id":"source/about/index.md","hash":"c451cfa1a86e195bf0e479bbd6cfc0eca5bc6a92","modified":1542713727000},{"_id":"source/categories/index.md","hash":"fc623ca8759adf6fa028d85a7e40526c7e17ae79","modified":1542711378000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1570455185796},{"_id":"source/tags/index.md","hash":"9b77ca2779083722c0a653a1e43f82890825dd0c","modified":1542711309000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1545206786714},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1545206786715},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1545206786714},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1545206786716},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1545206786718},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1545206786717},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1545206786716},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1545206786718},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1545206786718},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1545206786720},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1545206786719},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1545206786720},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1545206786721},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1545206786722},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1545206786754},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1545206786755},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1545206786755},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1545206786756},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1545206786756},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1545206786757},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1545206786757},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1545206786758},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1545206786759},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1545206786897},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1545206786898},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1545206786897},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545206786818},{"_id":"source/_posts/algorithm/00_算法入门.md","hash":"3afbd903c91f794e2f182ba6b9aa895ec9d71b9c","modified":1552215729828},{"_id":"source/_posts/algorithm/01_二分搜索系列.md","hash":"c5f881d7f2aa311ec04c494bbc892d0f62fe54f8","modified":1552215755709},{"_id":"source/_posts/cs/epoll.md","hash":"3ae8f2dea2ea34e8835674143f194497d97cc4bf","modified":1561712234597},{"_id":"source/_posts/algorithm/02_binary-tree.md","hash":"58aeb1e96f0884bf011a2b5b08e29db26b292ed9","modified":1555383390555},{"_id":"source/_posts/cs/hash算法.md","hash":"a3370d28a30d2eb3470adf58c78bc03f0520e09b","modified":1555653278666},{"_id":"source/_posts/cs/https理解.md","hash":"11fe08b90ae3e91d58d483722b169da01708189b","modified":1552291864701},{"_id":"source/_posts/cs/loadbalance.md","hash":"b5f1aceb67c0d0e4292cb6825ca0e2dace48dcc9","modified":1541480852000},{"_id":"source/_posts/cs/protobuf-intro.md","hash":"061091178441dc081a78611b7d06678c38a4b566","modified":1570453029075},{"_id":"source/_posts/distributed/mapreduce-intro.md","hash":"39e4f4866896ace3bcb5bd336a67bcf858784981","modified":1542713253000},{"_id":"source/_posts/distributed/cap原理.md","hash":"cff7d88ca417235a57e9715a6a6fe02e7cd002b4","modified":1570454212986},{"_id":"source/_posts/cs/代码规范.md","hash":"806d56fc02b7a629d579047e201db29d18a80d88","modified":1570451183200},{"_id":"source/_posts/docker_k8s/docker命令.md","hash":"cf2fefae5252914431d1c9be4fb5f56d0c17df89","modified":1550812259730},{"_id":"source/_posts/docker_k8s/k8s入门.md","hash":"868983d0f1103638bd37321223ce2582e1c59d1a","modified":1550820069812},{"_id":"source/_posts/framework/gin概览.md","hash":"4098c3106dc824fddf6d48c98b5d178b5a28bed4","modified":1554477898138},{"_id":"source/_posts/framework/etcd-intro.md","hash":"1ab3397ca4e5486770e467fa4993bde43b9edd97","modified":1570453989245},{"_id":"source/_posts/framework/thrift-intro.md","hash":"3e15db552ae8b04df4fb408d3eb16b422e2976b9","modified":1570452079178},{"_id":"source/_posts/framework/boltdb使用.md","hash":"369bd895cef0285f62dd2cb0fe5d5e5eea93497c","modified":1555652922141},{"_id":"source/_posts/golang/go-bytes-Buffer.md","hash":"4076425ddeabfe8eecc99a8fa92a5fb5d7d51169","modified":1537344366000},{"_id":"source/_posts/golang/go-standard-library-intro.md","hash":"9d15993eee938e622317f294b705becf3c7bbcac","modified":1537963254000},{"_id":"source/_posts/golang/go-test简介.md","hash":"36f220451ab801c0556fd8e0f0cc8a7809e9a7cc","modified":1553327957863},{"_id":"source/_posts/golang/go-context介绍.md","hash":"d5dc067380dc92d8e40ce5c2b5b066388233187d","modified":1552391993511},{"_id":"source/_posts/golang/go-函数式可选项.md","hash":"9c8420c17d2db6be1f756b29aa880b5b4825ed27","modified":1552227450347},{"_id":"source/_posts/golang/go-踩坑点.md","hash":"43ace2217366253377f231ba6cd58cfd1f6ddae0","modified":1537344366000},{"_id":"source/_posts/golang/go-通道channel.md","hash":"77c0334b4bd8893bbf5c7944d3b0bab66710c409","modified":1537344366000},{"_id":"source/_posts/golang/golang-dep.md","hash":"d5ad015847ce9b87c8950b8b99eb7f1461e677b5","modified":1544345255000},{"_id":"source/_posts/golang/go-文件io.md","hash":"b1a1d8b18b97e81bf0cc0c5d74d8797edca11fe8","modified":1551664346915},{"_id":"source/_posts/golang/golang-pprof.md","hash":"50d1682adac6eb92dc9cb073b27c078711ffc032","modified":1546833562705},{"_id":"source/_posts/golang/golang代码规范.md","hash":"1ad0cccb896d98066c8c5d3f44d5465bb07ecfb0","modified":1552981859815},{"_id":"source/_posts/golang/golang入门笔记.md","hash":"49d898737458581a601caac11cfd1c2feecc1bb0","modified":1570453831448},{"_id":"source/_posts/golang/go协程调度.md","hash":"3a71645bd8d69f2ffa2444c85990da4349ae2d45","modified":1537344366000},{"_id":"source/_posts/golang/golang闭包.md","hash":"d21c37c35145a0a7cd57d0c04b17527acf2838bc","modified":1552733913610},{"_id":"source/_posts/javascript/es6.md","hash":"6c114597ba7471c71f1bb617f4bbe0bac0961218","modified":1545207248501},{"_id":"source/_posts/golang/govendor-quickstart.md","hash":"c663714104e9605f7c01c7c18cbbfed186658a76","modified":1545715338169},{"_id":"source/_posts/golang/net-http包关键点解析.md","hash":"238cf1fd757c42579dc189429e272c03d1af9800","modified":1551601101641},{"_id":"source/_posts/javascript/nodejs问题.md","hash":"01074d5f9ebc00b62e57dade2e6b4ad6d985ed17","modified":1570453222098},{"_id":"source/_posts/linux/linux常用命令.md","hash":"1fa13d38505e99ae30139fe84abce49d964ac0f5","modified":1570451776986},{"_id":"source/_posts/linux/signal信号.md","hash":"60b5ab70ffda0c1260e1713994b862a23263514c","modified":1570451767109},{"_id":"source/_posts/linux/supervisor使用.md","hash":"4e1aa2cefbfd31d175d8d3e6a3dda8abb1509a70","modified":1557650974866},{"_id":"source/_posts/mysql/mongodb-intro.md","hash":"8f2280b2a8107dfe26bcb7c9f8fb02b540402719","modified":1570450917261},{"_id":"source/_posts/mysql/gorm源码分析.md","hash":"0d869120f5a893a0e34196dd0dfd647afe2d51e4","modified":1570453791741},{"_id":"source/_posts/mysql/mysql常见问题.md","hash":"6fdf190ad8057f66f82547f7e81af23cd4e0cd45","modified":1570453467715},{"_id":"source/_posts/mysql/redis注意点.md","hash":"bad2eb2b16b02140d081870a95e40f7cec1f7554","modified":1570452278088},{"_id":"source/_posts/mysql/深入mysql一条查询SQL语句的执行流程.md","hash":"b9b890f88cf1e8d19a45e89deee937bc8a745470","modified":1542716747000},{"_id":"source/_posts/python/python常见问题.md","hash":"6835ea7ccdc93c50b9f74488373f39bbe31b3504","modified":1570452867473},{"_id":"source/_posts/tool/git-cheatcheet.md","hash":"8ac237a20e552167843baa0b3a1cb2db5c2f4e58","modified":1555294692427},{"_id":"source/_posts/system_design/私信系统设计.md","hash":"e4027eeb0f17da3668735f3d58b09076f6fe1259","modified":1550743816231},{"_id":"source/_posts/tool/vscode使用.md","hash":"cf63d1951c3414e3d1e03c1c638026219df5aeb1","modified":1570451431086},{"_id":"source/_posts/z-summary/定一个目标.md","hash":"6d40584462fdfd923061ca0b6ae08b086374d708","modified":1537345713000},{"_id":"source/_posts/tool/gitbook使用.md","hash":"55cda89c3f918dabffe50f4123a58101dd217b8c","modified":1553003579441},{"_id":"source/_posts/z-summary/设计模式理解.md","hash":"45665dc6cb8fb3a523e37a0ff758b39afed7e23e","modified":1550744918873},{"_id":"source/_posts/z-summary/时间和金钱.md","hash":"839021afe7ecf2cea792b060bb9d6ca9cfea6bd5","modified":1552545156146},{"_id":"source/_posts/z-summary/模板方法.md","hash":"332531b88ff0cffd8cff8f68b695ffcf1cbf0724","modified":1570450300161},{"_id":"source/_posts/z-summary/源码阅读顺序.md","hash":"ffea2bfedd533bece47eda2b96de023070e46977","modified":1552544817516},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1545206786722},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1545206786722},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1545206786723},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1545206786724},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1545206786725},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1545206786724},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1545206786725},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1545206786725},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1545206786726},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1545206786726},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1545206786729},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1545206786727},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1545206786728},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1545206786730},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1545206786730},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1545206786736},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1545206786737},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1545206786739},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1545206786745},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1545206786746},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1545206786746},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1545206786746},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1545206786746},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1545206786747},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1545206786759},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1545206786760},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1545206786760},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1545206786761},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1545206786761},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1545206786762},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1545206786762},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1545206786762},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1545206786763},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1545206786818},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1545206786819},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1545206786819},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1545206786820},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1545206786821},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1545206786821},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1545206786822},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1545206786822},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1545206786823},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1545206786823},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545206786824},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545206786824},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1545206786825},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1545206786825},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1545206786826},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545206786738},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545206786738},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545206786803},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545206786803},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545206786804},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545206786816},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545206786817},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1545206786727},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1545206786730},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1545206786731},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1545206786728},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1545206786732},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1545206786733},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1545206786734},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1545206786736},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1545206786735},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1545206786737},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1545206786738},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1545206786738},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1545206786743},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1545206786743},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1545206786744},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1545206786744},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1545206786745},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1545206786744},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1545206786745},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1545206786740},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1545206786740},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1545206786741},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1545206786739},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1545206786741},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1545206786741},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1545206786742},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1545206786742},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1545206786742},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1545206786742},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1545206786743},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1545206786748},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1545206786751},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1545206786750},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1545206786752},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1545206786802},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1545206786802},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1545206786803},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1545206786804},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1545206786815},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1545206786816},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1545206786816},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1545206786817},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1545206786827},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1545206786827},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1545206786828},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1545206786828},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1545206786829},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1545206786830},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1545206786830},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1545206786831},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1545206786834},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1545206786835},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1545206786835},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1545206786842},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1545206786846},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1545206786846},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1545206786855},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1545206786856},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1545206786856},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1545206786857},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1545206786859},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1545206786858},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1545206786860},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1545206786860},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1545206786859},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1545206786872},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1545206786874},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1545206786875},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1545206786874},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1545206786875},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1545206786876},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1545206786877},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1545206786876},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1545206786878},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1545206786879},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1545206786880},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1545206786880},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1545206786881},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1545206786881},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1545206786881},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1545206786882},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1545206786883},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1545206786884},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1545206786884},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1545206786884},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1545206786885},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1545206786886},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1545206786887},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1545206786887},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1545206786893},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1545206786893},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1545206786896},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1545206786897},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1545206786896},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1545206786873},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1545206786747},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1545206786747},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1545206786764},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1545206786764},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1545206786764},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1545206786765},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1545206786766},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1545206786773},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1545206786789},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1545206786797},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1545206786797},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1545206786798},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1545206786800},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1545206786801},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1545206786801},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1545206786801},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1545206786805},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1545206786805},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1545206786805},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1545206786806},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1545206786806},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1545206786807},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1545206786807},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1545206786807},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1545206786809},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1545206786808},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1545206786810},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1545206786810},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1545206786811},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1545206786812},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1545206786812},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1545206786813},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1545206786813},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1545206786814},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1545206786814},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1545206786834},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1545206786840},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1545206786842},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1545206786841},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545206786847},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545206786847},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545206786847},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545206786847},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545206786848},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545206786849},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1545206786853},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1545206786854},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1545206786854},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1545206786857},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1545206786858},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1545206786861},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1545206786861},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1545206786862},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1545206786892},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1545206786893},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1545206786841},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545206786870},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545206786871},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1545206786895},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1545206786766},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1545206786769},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1545206786768},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1545206786768},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1545206786770},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1545206786769},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1545206786770},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1545206786769},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1545206786771},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1545206786772},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1545206786772},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1545206786773},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1545206786773},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1545206786774},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1545206786771},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1545206786775},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1545206786775},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1545206786776},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1545206786776},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1545206786777},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1545206786777},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1545206786778},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1545206786778},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1545206786779},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1545206786779},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1545206786777},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1545206786779},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1545206786780},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1545206786780},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1545206786781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1545206786781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1545206786782},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1545206786784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1545206786785},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1545206786786},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1545206786787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1545206786788},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1545206786788},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1545206786789},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1545206786789},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1545206786790},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1545206786791},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1545206786791},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1545206786791},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1545206786790},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1545206786792},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1545206786793},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1545206786793},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1545206786794},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1545206786792},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1545206786794},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1545206786795},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1545206786794},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1545206786795},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1545206786796},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1545206786795},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1545206786796},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1545206786808},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1545206786808},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1545206786811},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1545206786836},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1545206786837},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1545206786838},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1545206786839},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545206786851},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545206786851},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1545206786852},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1545206786852},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545206786852},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1545206786853},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545206786863},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545206786866},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545206786869},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1545206786845},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1545206786891},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545206786868},{"_id":"public/about/index.html","hash":"2850f79555c923ff4ccf3e7153950d7d6669d9e1","modified":1570456551832},{"_id":"public/categories/index.html","hash":"2f8ed11d58e43d40510b98c76818e36b1ea07ffd","modified":1570456551832},{"_id":"public/tags/index.html","hash":"7696649c082ff8a13a41037e72e4413b11be257d","modified":1570456551833},{"_id":"public/2019/10/07/mysql/redis注意点/index.html","hash":"3e801b4d3d54f395e57f649168d32ef162682c3b","modified":1570456551833},{"_id":"public/2019/04/19/algorithm/02_binary-tree/index.html","hash":"7c5edfa0f2bd8325313993443e61f82c6b9b23bc","modified":1570456551833},{"_id":"public/2019/03/19/golang/golang代码规范/index.html","hash":"5fc98756baee1ccba146643b0b0e3c426153d4b5","modified":1570456551833},{"_id":"public/2019/03/14/z-summary/时间和金钱/index.html","hash":"012ecc5d92001e16091e6fa02155b632e6368db2","modified":1570456551833},{"_id":"public/2019/03/14/z-summary/源码阅读顺序/index.html","hash":"fd694cf7101e770a5a5c4381ba028301abb47a2e","modified":1570456551833},{"_id":"public/2019/02/21/z-summary/设计模式理解/index.html","hash":"cda4140a77c3c65cbc440ed01b0782d237937eb9","modified":1570456551833},{"_id":"public/2019/02/21/z-summary/模板方法/index.html","hash":"b072e1aa8097df891b528489fa6d420d0efc301e","modified":1570456551833},{"_id":"public/2018/09/26/golang/go-standard-library-intro/index.html","hash":"f8582aca018e795ad3e732d7c851ba72806a1056","modified":1570456551834},{"_id":"public/2018/07/21/z-summary/定一个目标/index.html","hash":"ba22daf1c6a8ef805305a150c8f53d71d5e73d82","modified":1570456551834},{"_id":"public/archives/page/6/index.html","hash":"311625b197ca88677d375ccb1fff7f846fd4f0c1","modified":1570456551834},{"_id":"public/archives/2018/page/2/index.html","hash":"4be895fe8fde3af66914bc021ed5a78bf9a5d740","modified":1570456551834},{"_id":"public/archives/2018/07/index.html","hash":"1c798b955f9f25accfa2c76cb4f03c9ca0a7c6c4","modified":1570456551834},{"_id":"public/archives/2018/09/index.html","hash":"28f8527a7d84083a10222772449042f0d90ce8d4","modified":1570456551834},{"_id":"public/archives/2018/10/index.html","hash":"189f4c59cae5b8f93755d96dccfb649381c77ef8","modified":1570456551834},{"_id":"public/archives/2018/11/index.html","hash":"e864cf92ca5f45bdaf420e1057a578707676b699","modified":1570456551834},{"_id":"public/archives/2018/12/index.html","hash":"334a93f8db7d2d1d17fcb8a17ac505ca8163c329","modified":1570456551834},{"_id":"public/archives/2019/page/4/index.html","hash":"4ea07f0848785382e77046e705ed96d7a9081ffe","modified":1570456551834},{"_id":"public/archives/2019/01/index.html","hash":"a36e8948ade687dce76bd608360333517f26341b","modified":1570456551834},{"_id":"public/archives/2019/02/index.html","hash":"f27ce459f28c766136dfc5349b167f6dd0d2ed5e","modified":1570456551834},{"_id":"public/archives/2019/04/index.html","hash":"fdad7463840167be65fe18502be7bd48e3f97de8","modified":1570456551835},{"_id":"public/archives/2019/05/index.html","hash":"ee8f2484b53560cece0716362a10f55d4f5abe4b","modified":1570456551835},{"_id":"public/archives/2019/06/index.html","hash":"7e9909f5c1cad752c8c0deae79b41389c53e3c50","modified":1570456551835},{"_id":"public/archives/2019/10/page/2/index.html","hash":"75249f8c635548267adb67d05c8229f1a8dd0501","modified":1570456551835},{"_id":"public/categories/algorithm/index.html","hash":"e358805b626c1741cfc231e41786f93ddde54a7f","modified":1570456551835},{"_id":"public/categories/cs/index.html","hash":"67e5bf4cc5f9f5205d41b809d142da3f972aa583","modified":1570456551835},{"_id":"public/categories/categories/index.html","hash":"7ae2dd19ff61e5bbd48bd09bd1e9564932a11c8e","modified":1570456551835},{"_id":"public/categories/分类/index.html","hash":"1d8f1cdea25be05e33b637f40204cc0e3f0169dc","modified":1570456551835},{"_id":"public/categories/protobuf/index.html","hash":"1e0f8143bc1b9ec831e3d7cc2909d7d620043dfd","modified":1570456551835},{"_id":"public/categories/分布式/index.html","hash":"3993c71f43f85818f95bfea61bd72716663277dc","modified":1570456551835},{"_id":"public/categories/cap/index.html","hash":"bdd8d9fbe51167cdb9f24ae8fc5cd72aa89fd645","modified":1570456551835},{"_id":"public/categories/code-style/index.html","hash":"f53c696185594303e71bcb6419876f849ea2f716","modified":1570456551836},{"_id":"public/categories/docker/index.html","hash":"4df0d4072cce08f07d719ddf39181646168fcd93","modified":1570456551836},{"_id":"public/categories/框架/index.html","hash":"3625b0e306b95e8dea09f5e035f602503d533b72","modified":1570456551836},{"_id":"public/categories/etcd/index.html","hash":"c14ee5b617ab659f1851c2fcf27b91918106d9b6","modified":1570456551836},{"_id":"public/categories/rpc/index.html","hash":"9a5715e1f8ecbd9af984c36a11faf69ae861af31","modified":1570456551836},{"_id":"public/categories/boltdb/index.html","hash":"5c645bf754fe909b0d7cafd5fc7b873d29801d23","modified":1570456551836},{"_id":"public/categories/go/index.html","hash":"7affe91cffad34cd4d1edfb2569d504b964677a1","modified":1570456551836},{"_id":"public/categories/go/page/2/index.html","hash":"4915b4f3a1fc8466e98935962331224403c51a5f","modified":1570456551836},{"_id":"public/categories/设计模式/index.html","hash":"f69e20770fd5dd265528193a7b15ce7181311c8f","modified":1570456551836},{"_id":"public/categories/golang/index.html","hash":"7587491bc3c377b46e3db7024c9abcd0ab064824","modified":1570456551836},{"_id":"public/categories/front-end/index.html","hash":"32ec1a22239574fcde080cdd62ffd6f336e0ef3f","modified":1570456551836},{"_id":"public/categories/linux/index.html","hash":"fc3e8d5a7fc0b80b9b1ed68804775d390a3d6b13","modified":1570456551836},{"_id":"public/categories/db/index.html","hash":"fe95978ace509b4742e43c455757352f79cd737d","modified":1570456551836},{"_id":"public/categories/gorm/index.html","hash":"ab8bc76778ea2e7e635abf6f63c3092da48095c2","modified":1570456551837},{"_id":"public/categories/mysql/index.html","hash":"88b71ddbf834b84c823a8991533fe045e45095bf","modified":1570456551837},{"_id":"public/categories/redis/index.html","hash":"8e47b65ab4d47fbb6e76f2f7824fcab8468ebe9c","modified":1570456551837},{"_id":"public/categories/python/index.html","hash":"f3dada7e394a317f5de0123c32d9dd2498eb6dde","modified":1570456551837},{"_id":"public/categories/tool/index.html","hash":"3e25beb31281ad50fa9da37b4ae44a292ce65c13","modified":1570456551837},{"_id":"public/categories/system-design/index.html","hash":"0a3be72738322be13bad3b8e1c612f0fb4c40a0f","modified":1570456551837},{"_id":"public/categories/设计模式/Go设计模式/index.html","hash":"6d82b2e3bb93040c6356d935699d4fe923857e6b","modified":1570456551837},{"_id":"public/categories/idea/index.html","hash":"4ad434cc36cfe27eb053d0fe552afeb814a99123","modified":1570456551837},{"_id":"public/categories/人生大事/index.html","hash":"f2f35899daef5a3392ced252a170e3b8a88d0806","modified":1570456551837},{"_id":"public/categories/method/index.html","hash":"d630c386da89bbc56b77bb537ea02b793ef5d6e9","modified":1570456551837},{"_id":"public/categories/源码阅读/index.html","hash":"e3647de05dad7b7969a64668960a7d5e724f4b90","modified":1570456551837},{"_id":"public/tags/algorithm/index.html","hash":"718c013c258aa4a3058d6826c7ab446479e49cd5","modified":1570456551837},{"_id":"public/tags/strStr/index.html","hash":"45643c8da4b937a7041d6e65db0c4ba51582a266","modified":1570456551838},{"_id":"public/tags/subset/index.html","hash":"4bc7038bd342c9dae48b8c1e47bf52b451760efd","modified":1570456551838},{"_id":"public/tags/二分搜索/index.html","hash":"96c58575eb91126130939d0812611636abf3647a","modified":1570456551838},{"_id":"public/tags/epoll/index.html","hash":"6cc14f9de648f65f413d0df7469c30d67ceb793c","modified":1570456551838},{"_id":"public/tags/tags/index.html","hash":"8e1bcb3739948b453164ef6b046a608c7745ee3e","modified":1570456551838},{"_id":"public/tags/hash/index.html","hash":"9dfb3203d3b48d94034fa3acbf3661034199b7b9","modified":1570456551838},{"_id":"public/tags/https/index.html","hash":"633fc10c0fd7994974c88df7ed4c7449b085b263","modified":1570456551839},{"_id":"public/tags/SSL-TLS/index.html","hash":"c8116e8c45ee835eb3f300a9db56f20f19ff7745","modified":1570456551839},{"_id":"public/tags/Secure-Sockets-Layer-Transport-Layer-Security/index.html","hash":"3371f4bac8342259e1d2ea70c6ca9589a1cb3195","modified":1570456551839},{"_id":"public/tags/标签/index.html","hash":"8b0cc6831b5d0bb46cee6ca647ff8cb0a127ce9b","modified":1570456551839},{"_id":"public/tags/protobuf/index.html","hash":"a3865f1ec26bc9a0bd34ed2fd4f1ae277698f94d","modified":1570456551839},{"_id":"public/tags/mapreduce/index.html","hash":"599d71fc26bb4a0ad3a23fcf993dff6314c0c56c","modified":1570456551839},{"_id":"public/tags/cap/index.html","hash":"ae3100a722700a1da9a0b4c4a9f266458e7e7db3","modified":1570456551839},{"_id":"public/tags/code-style/index.html","hash":"1c36ccba25606e8bf57de11ef174f34c3c8e8a27","modified":1570456551839},{"_id":"public/tags/k8s/index.html","hash":"2841fd5f79a1832d0e9af282d2208cc7d70fe433","modified":1570456551839},{"_id":"public/tags/gin/index.html","hash":"1a4ec3c4f54a68848a4b94a5a5e54b1874bb99d7","modified":1570456551839},{"_id":"public/tags/etcd/index.html","hash":"947fbbcd0741211ebf980343d25a6fc77c247e58","modified":1570456551839},{"_id":"public/tags/thrift/index.html","hash":"cfb3207440f3174c4aafdb167f563f29da61d10e","modified":1570456551840},{"_id":"public/tags/boltdb/index.html","hash":"1c1aed386b8ae9f1bf080915833130e8bbe2cb49","modified":1570456551840},{"_id":"public/tags/buffer/index.html","hash":"73121cb392c75b2b29bc494641be5f00c3134f62","modified":1570456551840},{"_id":"public/tags/标准库/index.html","hash":"e991a618b1ca912b6ce167e2918e35966b242612","modified":1570456551840},{"_id":"public/tags/test/index.html","hash":"6508f83c5574b8deab6e58fea7532b6a4fe687cf","modified":1570456551840},{"_id":"public/tags/bench-test/index.html","hash":"8bf69564980d240bcf02734816262bfc3b2e6440","modified":1570456551840},{"_id":"public/tags/golang/index.html","hash":"d65af475396cc2ad8e515341d6ff9114757a7858","modified":1570456551840},{"_id":"public/tags/context/index.html","hash":"362ef67452775e7ca849e192f682c8d11b1363cf","modified":1570456551840},{"_id":"public/tags/go/index.html","hash":"aed379e5da86a7314a323cc1bcbdfa2e58692575","modified":1570456551840},{"_id":"public/tags/函数式选项/index.html","hash":"823476216f4658d0682faaebacc24099448f793f","modified":1570456551840},{"_id":"public/tags/代码规范/index.html","hash":"aa0c7b457740837a9eed5d8f6b5bc1120b9cc681","modified":1570456551840},{"_id":"public/tags/闭包/index.html","hash":"216d9c7c5ae01e83cdf80a7d91504eb47b97eb49","modified":1570456551840},{"_id":"public/tags/ES6/index.html","hash":"4f18a1907e9734265c760ee317803b086e929471","modified":1570456551841},{"_id":"public/tags/net-http/index.html","hash":"4f47ab514de48c128ca9c10178ebff87e6a16771","modified":1570456551841},{"_id":"public/tags/linux/index.html","hash":"00aa7889a3f4eda80e30f8d477bf8ceb68baa61c","modified":1570456551841},{"_id":"public/tags/cmd/index.html","hash":"a66d3f42b91110c6f5d206f452c91a5885952242","modified":1570456551841},{"_id":"public/tags/signal/index.html","hash":"851b283d2aa8d25a82032540b2b23f0a72b6cb5e","modified":1570456551841},{"_id":"public/tags/supervisor/index.html","hash":"f03effe240ad79e3065115c0b4a19310efd7d031","modified":1570456551841},{"_id":"public/tags/mongo/index.html","hash":"891c56dd72d12311c72f78dd2715b92a55173eec","modified":1570456551841},{"_id":"public/tags/gorm/index.html","hash":"bb0899ea5c2648a9d1d0c4aae2522f5acd7a6316","modified":1570456551841},{"_id":"public/tags/mysql/index.html","hash":"548f14322605c24ac82dd4471be5dc13a5ad428f","modified":1570456551841},{"_id":"public/tags/redis/index.html","hash":"5aaedb7d1b2617ff43c1f97d15c2dc555ccdbf3e","modified":1570456551841},{"_id":"public/tags/python/index.html","hash":"0af06e78a23524ab354e9dbdf32b5b4724309b1a","modified":1570456551841},{"_id":"public/tags/git/index.html","hash":"0d87a51e89dec5e0a8eaf3e5808a401631b184f8","modified":1570456551842},{"_id":"public/tags/私信系统/index.html","hash":"1b13eb19787f9b65a485617c536048da910fab33","modified":1570456551842},{"_id":"public/tags/vscode/index.html","hash":"81ae96cdd45d17f58c832ba1bdcc0b6189e8a20a","modified":1570456551842},{"_id":"public/tags/计划/index.html","hash":"fc0d883f09fdb6b62e9a53049459841e2d5ca9a4","modified":1570456551842},{"_id":"public/tags/目标/index.html","hash":"832a5bfd0aa7931977c3159e8bfd8cd6c7a7c2eb","modified":1570456551842},{"_id":"public/tags/gitbook/index.html","hash":"26b378e383f727a96dd99f6a8ff1612f54f0fc36","modified":1570456551842},{"_id":"public/tags/cs/index.html","hash":"69cfe469a655e53994543058584c02daed594c93","modified":1570456551842},{"_id":"public/tags/时间/index.html","hash":"275d48a04bcabbd16e725e38182e7ca84e0f93bb","modified":1570456551842},{"_id":"public/tags/金钱/index.html","hash":"9d53b82a455994ee163d005436349575f61521c9","modified":1570456551842},{"_id":"public/tags/method/index.html","hash":"848ef353c072613eda9a57b90cd276205643a779","modified":1570456551842},{"_id":"public/tags/源码阅读/index.html","hash":"d12040290b9467c2ead4044e7583382258eae699","modified":1570456551842},{"_id":"public/2019/10/07/distributed/cap原理/index.html","hash":"c9cbfc321937c925b8552383650bbfcb5d6d4c0d","modified":1570456551842},{"_id":"public/2019/10/07/framework/etcd-intro/index.html","hash":"96d6c2c599e60771d63fe703fb5c767e4c609f93","modified":1570456551842},{"_id":"public/2019/10/07/golang/golang入门笔记/index.html","hash":"cb1614efde2056ce6834a06631097030e6ad0fb4","modified":1570456551843},{"_id":"public/2019/10/07/mysql/gorm源码分析/index.html","hash":"dfcdeb8a019d72bde31767c9f23db35d3d082c8d","modified":1570456551843},{"_id":"public/2019/10/07/mysql/mysql常见问题/index.html","hash":"ff5e38af14769a0f3ecd5556f64e818a1a5db546","modified":1570456551843},{"_id":"public/2019/10/07/javascript/nodejs问题/index.html","hash":"1329dbb3eb62de958b9403fca6de1228f1597901","modified":1570456551843},{"_id":"public/2019/10/07/cs/protobuf-intro/index.html","hash":"d27738852da663682ec4d6f9c32810d68d53ab69","modified":1570456551843},{"_id":"public/2019/10/07/python/python常见问题/index.html","hash":"5cef5a6419c0157872b1dd63c7eacac3894bff69","modified":1570456551843},{"_id":"public/2019/10/07/framework/thrift-intro/index.html","hash":"aad81e4f066d1afc346643197c79faadf9375adf","modified":1570456551843},{"_id":"public/2019/10/07/linux/signal信号/index.html","hash":"24eb22ccad0656da715c4339e2a601909720b34c","modified":1570456551843},{"_id":"public/2019/10/07/mysql/mongodb-intro/index.html","hash":"cd190a53c9c14003cc45830c8e3280a23f0fd707","modified":1570456551843},{"_id":"public/2019/06/28/cs/epoll/index.html","hash":"2939fbeca9902c02845d29f3934ac27933515f7a","modified":1570456551843},{"_id":"public/2019/05/12/linux/supervisor使用/index.html","hash":"6a8e436dba9a9d74b3dcbe0bf47d02ae7b1aca56","modified":1570456551843},{"_id":"public/2019/04/19/framework/boltdb使用/index.html","hash":"526821f5c043102e91b35a495031a004353f29ee","modified":1570456551843},{"_id":"public/2019/04/06/cs/hash算法/index.html","hash":"d1e705599a2ae525af7b8e9f7ece4245b96f28d6","modified":1570456551843},{"_id":"public/2019/04/05/framework/gin概览/index.html","hash":"135d01da9cdd417d5d998cf35c516b2de5924348","modified":1570456551843},{"_id":"public/2019/03/19/tool/gitbook使用/index.html","hash":"cad089a170ddcff5b183954e3ce03bb16579461c","modified":1570456551844},{"_id":"public/2019/03/16/golang/golang闭包/index.html","hash":"3e6c6957524651b38ab01f8af068c1cd881e73f8","modified":1570456551844},{"_id":"public/2019/03/13/golang/go-test简介/index.html","hash":"db294a5b04eaa9a76698969399adcd4b0e4dda50","modified":1570456551844},{"_id":"public/2019/03/12/golang/go-context介绍/index.html","hash":"7283ff2e4d24125d2e5029959d644218e2325c7d","modified":1570456551844},{"_id":"public/2019/03/11/cs/https理解/index.html","hash":"2774a8b7a34a2317d6723aa018032b96e2261a86","modified":1570456551844},{"_id":"public/2019/03/10/golang/go-函数式可选项/index.html","hash":"dbdc1079f2b0e78875b9b2f6e8006aa862cb8d0a","modified":1570456551844},{"_id":"public/2019/03/03/golang/net-http包关键点解析/index.html","hash":"0f9ca9c982a2ff237bc9fd4b417c8e19c1fe3e80","modified":1570456551844},{"_id":"public/2019/02/23/algorithm/01_二分搜索系列/index.html","hash":"7b2952a807e018d1d3c9b34744b48c398041bf37","modified":1570456551844},{"_id":"public/2019/02/23/algorithm/00_算法入门/index.html","hash":"a73a821cd427982c13630faec3e70ba8a0d6f998","modified":1570456551844},{"_id":"public/2019/02/22/docker_k8s/k8s入门/index.html","hash":"240bf132071266fd11e57a7354beb9de4015dc43","modified":1570456551844},{"_id":"public/2019/02/21/docker_k8s/docker命令/index.html","hash":"7c6d3dd1b8029678f55395961ef2c2ac113ed3fa","modified":1570456551844},{"_id":"public/2019/02/21/cs/代码规范/index.html","hash":"6e7d80340d819b478c7d1eca1f7a243639318a4e","modified":1570456551844},{"_id":"public/2019/02/21/system_design/私信系统设计/index.html","hash":"8070728989b7c7f3ab49f9b365eace50e830217a","modified":1570456551844},{"_id":"public/2019/01/04/golang/golang-pprof/index.html","hash":"edd7c970b9b27ad796324851f7eb3130c1fe9fbd","modified":1570456551844},{"_id":"public/2018/12/25/golang/govendor-quickstart/index.html","hash":"3f32667e211304ecd6bd0b6cd9585052b42a30c6","modified":1570456551845},{"_id":"public/2018/12/19/javascript/es6/index.html","hash":"9705acc8534475775ec7f446ca637d2551120a53","modified":1570456551845},{"_id":"public/2018/12/09/golang/golang-dep/index.html","hash":"3a0410f8175227870b60c8d539705e43e78004f1","modified":1570456551845},{"_id":"public/2018/11/20/mysql/深入mysql一条查询SQL语句的执行流程/index.html","hash":"353ffa1249e785950c6d26850f5b4370655ef128","modified":1570456551845},{"_id":"public/2018/10/12/cs/loadbalance/index.html","hash":"af928db95d7de95af9a97e010866a0024e134fd7","modified":1570456551845},{"_id":"public/2018/09/20/distributed/mapreduce-intro/index.html","hash":"ea9774451100279d2deacbf3163f907acba8c846","modified":1570456551845},{"_id":"public/2018/09/19/tool/git-cheatcheet/index.html","hash":"3f6d226464ceff1f7b25b36cd09633ede5829efe","modified":1570456551845},{"_id":"public/2018/09/19/golang/go-bytes-Buffer/index.html","hash":"4902b0d8b896a2f4007c7c0adb6903eee39c2e67","modified":1570456551845},{"_id":"public/2018/09/19/tool/vscode使用/index.html","hash":"60531fccae36b83b4acc1f92cf2d3d499dd8b676","modified":1570456551845},{"_id":"public/2018/09/19/golang/go-踩坑点/index.html","hash":"ebef4c4b41cf896e3022da43727b53dd23241529","modified":1570456551845},{"_id":"public/2018/09/19/golang/go-通道channel/index.html","hash":"55dfac1e69b21eebadfe926892ba92725b64a782","modified":1570456551845},{"_id":"public/2018/09/19/golang/go-文件io/index.html","hash":"68fe3be5b4d111739ec982fa8f199a9cc2732329","modified":1570456551845},{"_id":"public/2018/09/19/golang/go协程调度/index.html","hash":"b0826e0475f3e14f606799cd6a6040e5c8dd69a4","modified":1570456551845},{"_id":"public/2018/07/21/linux/linux常用命令/index.html","hash":"517a24084cffcf88955ce08f0e0ff6cf75e12b72","modified":1570456551845},{"_id":"public/archives/index.html","hash":"6a4a279f545bfe2481d1fe560bc5b6b26dff0f6d","modified":1570456551845},{"_id":"public/archives/page/2/index.html","hash":"1a797b112fffed5138431b4d3a92f6587f1d5e1d","modified":1570456551845},{"_id":"public/archives/page/3/index.html","hash":"69aebc7795ed2fc8bc6fb18fcadb63bd0743f054","modified":1570456551846},{"_id":"public/archives/page/4/index.html","hash":"e1ee642233aa62253f950c7dd942090cc0dc59c9","modified":1570456551846},{"_id":"public/archives/page/5/index.html","hash":"1a1a26106186dcfdca9835db9fb2c5c6dbd5eb12","modified":1570456551846},{"_id":"public/archives/2018/index.html","hash":"f2f49b8cbe3ea660aba2dcf68361c6ad3ce6179a","modified":1570456551846},{"_id":"public/archives/2019/index.html","hash":"8f52b6c9f0d44cb1b25b34cb588222e2d80bf3e9","modified":1570456551846},{"_id":"public/archives/2019/page/2/index.html","hash":"169eefc9e7fede8e7f5a49367a881f61f61f6fa0","modified":1570456551846},{"_id":"public/archives/2019/page/3/index.html","hash":"157e0833c025e1802dd98d73684d09e1deaf592e","modified":1570456551846},{"_id":"public/archives/2019/03/index.html","hash":"5a31b58bc915db9290aa3d903e41256a628ead53","modified":1570456551846},{"_id":"public/archives/2019/10/index.html","hash":"aa0eb264ac1f780f8030257ee71bf78e1c04b636","modified":1570456551846},{"_id":"public/index.html","hash":"0e0363f2197ddc4ee0133ec87477dba07406da7d","modified":1570456551846},{"_id":"public/page/2/index.html","hash":"c7b5fdf27b1c6762d5f0df739c309d4f5ac173fc","modified":1570456551846},{"_id":"public/page/3/index.html","hash":"d0b543653b8079228ca435b09f29ca47c5d08050","modified":1570456551846},{"_id":"public/page/4/index.html","hash":"64f7cc08899554fc29893b699bfaac3075072059","modified":1570456551846},{"_id":"public/page/5/index.html","hash":"6cf52189a61c47c4b1f7454f57abb24f6248855a","modified":1570456551846},{"_id":"public/page/6/index.html","hash":"9109ca155ce53ae735fb008d904ba07a0c0575e0","modified":1570456551846},{"_id":"public/favicon.ico","hash":"e6c1bed3ac2b2a5f5c1e40a0860aa533c74d3e31","modified":1570456551860},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1570456551860},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1570456551860},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1570456551860},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1570456551860},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1570456551860},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1570456551860},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1570456551861},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1570456551861},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1570456551861},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1570456551861},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1570456551861},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1570456551861},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1570456551861},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1570456551861},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1570456551861},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1570456551861},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1570456551861},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1570456551862},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1570456551862},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1570456551862},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1570456551862},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1570456551862},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1570456551862},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1570456551862},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1570456551862},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1570456551862},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1570456551862},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1570456551862},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1570456552424},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1570456552425},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1570456552436},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1570456552437},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1570456552437},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1570456552437},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1570456552437},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1570456552437},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1570456552437},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1570456552437},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1570456552437},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1570456552437},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1570456552437},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1570456552437},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1570456552437},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1570456552437},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1570456552437},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1570456552437},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1570456552437},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1570456552437},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1570456552438},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1570456552438},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1570456552438},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1570456552438},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1570456552438},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1570456552438},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1570456552438},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1570456552438},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1570456552438},{"_id":"public/css/main.css","hash":"f5a2fb2434ddb64215e58695895f10497f85f586","modified":1570456552438},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1570456552438},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1570456552438},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1570456552506},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1570456552506},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1570456552506},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1570456552506},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1570456552506},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1570456552506},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1570456552506},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1570456552507},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1570456552507},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1570456552507},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1570456552507},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1570456552507},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1570456552507},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1570456552507},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1570456552507},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1570456552507},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1570456552507},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1570456552507},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1570456552507},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1570456552508},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1570456552508},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1570456552508},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1570456552508},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1570456552508},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1570456552508},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1570456552508},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1570456552508},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1570456552508},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1570456552508},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1570456552509},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1570456552509},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1570456552509},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1570456552509},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1570456552509},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1570456552509},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1570456552509},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1570456552509},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1570456552510},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1570456552510},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1570456552510},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1570456552530}],"Category":[{"name":"algorithm","_id":"ck1gha0c70005wl38wlokfv9h"},{"name":"cs","_id":"ck1gha0cf000ewl38lo7rgqja"},{"name":"categories","_id":"ck1gha0cj000kwl38jg796jdi"},{"name":"分类","_id":"ck1gha0cs0013wl38nhysi9xe"},{"name":"protobuf","_id":"ck1gha0cu001bwl3842irx3cg"},{"name":"分布式","_id":"ck1gha0cx001iwl38hvjpgiui"},{"name":"cap","_id":"ck1gha0cz001owl38e4n3ssj0"},{"name":"code_style","_id":"ck1gha0d2001twl38y2jd9w9f"},{"name":"docker","_id":"ck1gha0d4001zwl38w15v3nx3"},{"name":"框架","_id":"ck1gha0d80027wl38y814uw09"},{"name":"etcd","_id":"ck1gha0db002gwl38m2pw3gcd"},{"name":"rpc","_id":"ck1gha0dd002nwl38a78r6q60"},{"name":"boltdb","_id":"ck1gha0df002twl382cy2z3jx"},{"name":"go","_id":"ck1gha0di0031wl381d6bg8gj"},{"name":"设计模式","_id":"ck1gha0du003pwl38sxzpf8ti"},{"name":"golang","_id":"ck1gha0e5004lwl38cqbpq7rh"},{"name":"front-end","_id":"ck1gha0e6004rwl38ojez6mcd"},{"name":"linux","_id":"ck1gha0e80051wl389fs5nn2m"},{"name":"db","_id":"ck1gha0ec005ewl382q669861"},{"name":"gorm","_id":"ck1gha0ed005jwl38mswxklwt"},{"name":"mysql","_id":"ck1gha0ed005nwl383g6rmg8m"},{"name":"redis","_id":"ck1gha0eg005rwl38mmczko20"},{"name":"python","_id":"ck1gha0eg005vwl38u7i5yvak"},{"name":"tool","_id":"ck1gha0eh005zwl38iup6r1kc"},{"name":"system design","_id":"ck1gha0ej0066wl38ywjv6hkj"},{"name":"Go设计模式","parent":"ck1gha0du003pwl38sxzpf8ti","_id":"ck1gha0ek006dwl385ahb7xor"},{"name":"idea","_id":"ck1gha0em006jwl387f9magys"},{"name":"人生大事","_id":"ck1gha0en006qwl380o4pz1jx"},{"name":"method","_id":"ck1gha0eo006wwl382bxobmq4"},{"name":"源码阅读","_id":"ck1gha0ep0070wl382yzfpslg"}],"Data":[],"Page":[{"title":"about","date":"2018-11-20T10:56:34.000Z","type":"about","_content":"# 关于\n\n邮箱：fruitbag@163.com\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-11-20 18:56:34\ntype: about\n---\n# 关于\n\n邮箱：fruitbag@163.com\n","updated":"2018-11-20T11:35:27.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck1gha04t0000wl38vc80wl3a","content":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>邮箱：<a href=\"mailto:fruitbag@163.com\" target=\"_blank\" rel=\"noopener\">fruitbag@163.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>邮箱：<a href=\"mailto:fruitbag@163.com\" target=\"_blank\" rel=\"noopener\">fruitbag@163.com</a></p>\n"},{"title":"categories","date":"2018-11-20T10:56:05.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-11-20 18:56:05\ntype: \"categories\"\n---\n","updated":"2018-11-20T10:56:18.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck1gha04u0001wl38x28w1740","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-11-20T10:54:49.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-11-20 18:54:49\ntype: \"tags\"\n---\n","updated":"2018-11-20T10:55:09.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck1gha04v0002wl38ykl0p7gc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"00_算法入门【算法模板】","date":"2019-02-23T11:43:31.000Z","_content":"\n## 算法理解\n算法理解：\n\n就是找一套解决问题的模板，有特殊情况就做特殊处理\n\n类似【算法模板】【算法设计模式】\n\n后续文章会依次介绍各种算法的模板，关注[github](https://github.com/greyireland)\n\n## 模板入门\n\n### 1. 双重循环模板【strStr】\n常见面试题，实现双重循环就OK【strStr在面试中了解KMP算法即可】\n\n双重for循环模板：\n- 参数检查\n- 双重循环\n- 逻辑判断&边界检查\n\n\n```go\n问题：\n实现 strStr() 函数。\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中\n找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。\n\n示例 1:\n输入: haystack = \"hello\", needle = \"ll\"\n输出: 2\n\n示例 2:\n输入: haystack = \"aaaaa\", needle = \"bba\"\n输出: -1\n\n代码实现：\nfunc strStr(haystack string, needle string) int {\n    if needle==\"\"{\n        return 0\n    }\n    var i,j int;\n    for i=0;i<len(haystack)-len(needle)+1;i++{\n        for j=0;j<len(needle);j++{\n            if haystack[i+j]!=needle[j]{\n                break\n            }\n        }\n        if j==len(needle){\n            return i\n        }\n    }\n    return -1\n}\n```\n\n### 2. 回溯法模板【subset/subset2】\n```go\n# 回溯法backtrack通用模板\n\nfunc subsets(nums []int) [][]int {\n    var res = make([][]int, 0)\n    var tmp = make([]int, 0)\n    backtrack(&res, tmp, nums, 0)\n \n    return res\n}\n//res 所有子集的结果\n//tmp 临时子集\n//nums 原始数组\n//start 下次开始取数据的位置\nfunc backtrack(res *[][]int, tmp []int, nums []int, start int) {\n    //golang必须是用copy，因为tmp的数据可能变化\n    var e = make([]int, len(tmp))\n    copy(e, tmp)\n    *res = append(*res, e)\n\n    for i := start; i < len(nums); i++ {\n        tmp = append(tmp, nums[i])\n        backtrack(res, tmp, nums, i+1)\n        tmp = tmp[:len(tmp)-1]\n    }\n}\n```\n\n\n\nsubset\n```go\n给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。\n\n说明：解集不能包含重复的子集。\n\n示例:\n输入: nums = [1,2,3]\n输出:\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n\n解答：\nfunc subsets(nums []int) [][]int {\n    var res = make([][]int, 0)\n    var tmp = make([]int, 0)\n    backtrack(&res, tmp, nums, 0)\n \n    return res\n}\n//res 所有子集的结果\n//tmp 临时子集\n//nums 原始数组\n//start 下次开始取数据的位置\nfunc backtrack(res *[][]int, tmp []int, nums []int, start int) {\n    //golang必须是用copy，因为tmp的数据可能变化\n    var e = make([]int, len(tmp))\n    copy(e, tmp)\n    *res = append(*res, e)\n\n    for i := start; i < len(nums); i++ {\n        tmp = append(tmp, nums[i])\n        backtrack(res, tmp, nums, i+1)\n        tmp = tmp[:len(tmp)-1]\n    }\n}\n```\n\n\nsubset 2\n```go\n给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。\n\n示例:\n输入: [1,2,2]\n输出:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n解答：\nfunc subsetsWithDup(nums []int) [][]int {\n    var res = make([][]int, 0)\n    var tmp = make([]int, 0)\n    sort.Ints(nums) //先排序\n    backtrack(&res, tmp, nums, 0)\n    return res\n}\n\nfunc backtrack(res *[][]int, tmp []int, nums []int, start int) {\n    //golang必须是用copy，因为tmp的数据可能变化\n    var e = make([]int, len(tmp))\n    copy(e, tmp)\n    *res = append(*res, e)\n\n    for i := start; i < len(nums); i++ {\n        //判断符合条件才进行回溯\n        if i == start || nums[i] != nums[i-1] {\n            tmp = append(tmp, nums[i])\n            backtrack(res, tmp, nums, i+1)\n            tmp = tmp[:len(tmp)-1]\n        }\n        \n    }\n}\n\n```\n\n\n## QA?\n### 算法面试注意点？\n1. 找到各类问题的通用模板，根据题目特殊情况做特殊处理即可。\n2. 先去朝一个解决问题的方向！先去抛出可行解，而不是最优解！先解决，再优化！\n3. 代码的风格要统一！熟悉各类语言的代码规范\n4. 最常见错误：A.访问下标时，不能访问越界！B.空值问题run time error!","source":"_posts/algorithm/00_算法入门.md","raw":"---\ntitle: 00_算法入门【算法模板】\ntags:\n  - algorithm\n  - strStr\n  - subset\ncategories:\n  - algorithm\ndate: 2019-02-23 19:43:31\n---\n\n## 算法理解\n算法理解：\n\n就是找一套解决问题的模板，有特殊情况就做特殊处理\n\n类似【算法模板】【算法设计模式】\n\n后续文章会依次介绍各种算法的模板，关注[github](https://github.com/greyireland)\n\n## 模板入门\n\n### 1. 双重循环模板【strStr】\n常见面试题，实现双重循环就OK【strStr在面试中了解KMP算法即可】\n\n双重for循环模板：\n- 参数检查\n- 双重循环\n- 逻辑判断&边界检查\n\n\n```go\n问题：\n实现 strStr() 函数。\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中\n找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。\n\n示例 1:\n输入: haystack = \"hello\", needle = \"ll\"\n输出: 2\n\n示例 2:\n输入: haystack = \"aaaaa\", needle = \"bba\"\n输出: -1\n\n代码实现：\nfunc strStr(haystack string, needle string) int {\n    if needle==\"\"{\n        return 0\n    }\n    var i,j int;\n    for i=0;i<len(haystack)-len(needle)+1;i++{\n        for j=0;j<len(needle);j++{\n            if haystack[i+j]!=needle[j]{\n                break\n            }\n        }\n        if j==len(needle){\n            return i\n        }\n    }\n    return -1\n}\n```\n\n### 2. 回溯法模板【subset/subset2】\n```go\n# 回溯法backtrack通用模板\n\nfunc subsets(nums []int) [][]int {\n    var res = make([][]int, 0)\n    var tmp = make([]int, 0)\n    backtrack(&res, tmp, nums, 0)\n \n    return res\n}\n//res 所有子集的结果\n//tmp 临时子集\n//nums 原始数组\n//start 下次开始取数据的位置\nfunc backtrack(res *[][]int, tmp []int, nums []int, start int) {\n    //golang必须是用copy，因为tmp的数据可能变化\n    var e = make([]int, len(tmp))\n    copy(e, tmp)\n    *res = append(*res, e)\n\n    for i := start; i < len(nums); i++ {\n        tmp = append(tmp, nums[i])\n        backtrack(res, tmp, nums, i+1)\n        tmp = tmp[:len(tmp)-1]\n    }\n}\n```\n\n\n\nsubset\n```go\n给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。\n\n说明：解集不能包含重复的子集。\n\n示例:\n输入: nums = [1,2,3]\n输出:\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n\n解答：\nfunc subsets(nums []int) [][]int {\n    var res = make([][]int, 0)\n    var tmp = make([]int, 0)\n    backtrack(&res, tmp, nums, 0)\n \n    return res\n}\n//res 所有子集的结果\n//tmp 临时子集\n//nums 原始数组\n//start 下次开始取数据的位置\nfunc backtrack(res *[][]int, tmp []int, nums []int, start int) {\n    //golang必须是用copy，因为tmp的数据可能变化\n    var e = make([]int, len(tmp))\n    copy(e, tmp)\n    *res = append(*res, e)\n\n    for i := start; i < len(nums); i++ {\n        tmp = append(tmp, nums[i])\n        backtrack(res, tmp, nums, i+1)\n        tmp = tmp[:len(tmp)-1]\n    }\n}\n```\n\n\nsubset 2\n```go\n给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。\n\n示例:\n输入: [1,2,2]\n输出:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n解答：\nfunc subsetsWithDup(nums []int) [][]int {\n    var res = make([][]int, 0)\n    var tmp = make([]int, 0)\n    sort.Ints(nums) //先排序\n    backtrack(&res, tmp, nums, 0)\n    return res\n}\n\nfunc backtrack(res *[][]int, tmp []int, nums []int, start int) {\n    //golang必须是用copy，因为tmp的数据可能变化\n    var e = make([]int, len(tmp))\n    copy(e, tmp)\n    *res = append(*res, e)\n\n    for i := start; i < len(nums); i++ {\n        //判断符合条件才进行回溯\n        if i == start || nums[i] != nums[i-1] {\n            tmp = append(tmp, nums[i])\n            backtrack(res, tmp, nums, i+1)\n            tmp = tmp[:len(tmp)-1]\n        }\n        \n    }\n}\n\n```\n\n\n## QA?\n### 算法面试注意点？\n1. 找到各类问题的通用模板，根据题目特殊情况做特殊处理即可。\n2. 先去朝一个解决问题的方向！先去抛出可行解，而不是最优解！先解决，再优化！\n3. 代码的风格要统一！熟悉各类语言的代码规范\n4. 最常见错误：A.访问下标时，不能访问越界！B.空值问题run time error!","slug":"algorithm/00_算法入门","published":1,"updated":"2019-03-10T11:02:09.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0c10003wl38fbt55s3s","content":"<h2 id=\"算法理解\"><a href=\"#算法理解\" class=\"headerlink\" title=\"算法理解\"></a>算法理解</h2><p>算法理解：</p>\n<p>就是找一套解决问题的模板，有特殊情况就做特殊处理</p>\n<p>类似【算法模板】【算法设计模式】</p>\n<p>后续文章会依次介绍各种算法的模板，关注<a href=\"https://github.com/greyireland\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<h2 id=\"模板入门\"><a href=\"#模板入门\" class=\"headerlink\" title=\"模板入门\"></a>模板入门</h2><h3 id=\"1-双重循环模板【strStr】\"><a href=\"#1-双重循环模板【strStr】\" class=\"headerlink\" title=\"1. 双重循环模板【strStr】\"></a>1. 双重循环模板【strStr】</h3><p>常见面试题，实现双重循环就OK【strStr在面试中了解KMP算法即可】</p>\n<p>双重for循环模板：</p>\n<ul>\n<li>参数检查</li>\n<li>双重循环</li>\n<li>逻辑判断&amp;边界检查</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">问题：</span><br><span class=\"line\">实现 strStr() 函数。</span><br><span class=\"line\">给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中</span><br><span class=\"line\">找出 needle 字符串出现的第一个位置 (从<span class=\"number\">0</span>开始)。如果不存在，则返回  <span class=\"number\">-1</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入: haystack = <span class=\"string\">\"hello\"</span>, needle = <span class=\"string\">\"ll\"</span></span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">输入: haystack = <span class=\"string\">\"aaaaa\"</span>, needle = <span class=\"string\">\"bba\"</span></span><br><span class=\"line\">输出: <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">代码实现：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">strStr</span><span class=\"params\">(haystack <span class=\"keyword\">string</span>, needle <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> needle==<span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i,j <span class=\"keyword\">int</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(haystack)-<span class=\"built_in\">len</span>(needle)+<span class=\"number\">1</span>;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"built_in\">len</span>(needle);j++&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> haystack[i+j]!=needle[j]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j==<span class=\"built_in\">len</span>(needle)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-回溯法模板【subset-subset2】\"><a href=\"#2-回溯法模板【subset-subset2】\" class=\"headerlink\" title=\"2. 回溯法模板【subset/subset2】\"></a>2. 回溯法模板【subset/subset2】</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 回溯法backtrack通用模板</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subsets</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> [][]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    backtrack(&amp;res, tmp, nums, <span class=\"number\">0</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//res 所有子集的结果</span></span><br><span class=\"line\"><span class=\"comment\">//tmp 临时子集</span></span><br><span class=\"line\"><span class=\"comment\">//nums 原始数组</span></span><br><span class=\"line\"><span class=\"comment\">//start 下次开始取数据的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backtrack</span><span class=\"params\">(res *[][]<span class=\"keyword\">int</span>, tmp []<span class=\"keyword\">int</span>, nums []<span class=\"keyword\">int</span>, start <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//golang必须是用copy，因为tmp的数据可能变化</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(tmp))</span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(e, tmp)</span><br><span class=\"line\">    *res = <span class=\"built_in\">append</span>(*res, e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := start; i &lt; <span class=\"built_in\">len</span>(nums); i++ &#123;</span><br><span class=\"line\">        tmp = <span class=\"built_in\">append</span>(tmp, nums[i])</span><br><span class=\"line\">        backtrack(res, tmp, nums, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        tmp = tmp[:<span class=\"built_in\">len</span>(tmp)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>subset<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</span><br><span class=\"line\"></span><br><span class=\"line\">说明：解集不能包含重复的子集。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\">输入: nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  []</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">解答：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subsets</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> [][]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    backtrack(&amp;res, tmp, nums, <span class=\"number\">0</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//res 所有子集的结果</span></span><br><span class=\"line\"><span class=\"comment\">//tmp 临时子集</span></span><br><span class=\"line\"><span class=\"comment\">//nums 原始数组</span></span><br><span class=\"line\"><span class=\"comment\">//start 下次开始取数据的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backtrack</span><span class=\"params\">(res *[][]<span class=\"keyword\">int</span>, tmp []<span class=\"keyword\">int</span>, nums []<span class=\"keyword\">int</span>, start <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//golang必须是用copy，因为tmp的数据可能变化</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(tmp))</span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(e, tmp)</span><br><span class=\"line\">    *res = <span class=\"built_in\">append</span>(*res, e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := start; i &lt; <span class=\"built_in\">len</span>(nums); i++ &#123;</span><br><span class=\"line\">        tmp = <span class=\"built_in\">append</span>(tmp, nums[i])</span><br><span class=\"line\">        backtrack(res, tmp, nums, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        tmp = tmp[:<span class=\"built_in\">len</span>(tmp)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>subset 2<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  []</span><br><span class=\"line\">]</span><br><span class=\"line\">解答：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subsetsWithDup</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> [][]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    sort.Ints(nums) <span class=\"comment\">//先排序</span></span><br><span class=\"line\">    backtrack(&amp;res, tmp, nums, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backtrack</span><span class=\"params\">(res *[][]<span class=\"keyword\">int</span>, tmp []<span class=\"keyword\">int</span>, nums []<span class=\"keyword\">int</span>, start <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//golang必须是用copy，因为tmp的数据可能变化</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(tmp))</span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(e, tmp)</span><br><span class=\"line\">    *res = <span class=\"built_in\">append</span>(*res, e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := start; i &lt; <span class=\"built_in\">len</span>(nums); i++ &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断符合条件才进行回溯</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == start || nums[i] != nums[i<span class=\"number\">-1</span>] &#123;</span><br><span class=\"line\">            tmp = <span class=\"built_in\">append</span>(tmp, nums[i])</span><br><span class=\"line\">            backtrack(res, tmp, nums, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            tmp = tmp[:<span class=\"built_in\">len</span>(tmp)<span class=\"number\">-1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA?\"></a>QA?</h2><h3 id=\"算法面试注意点？\"><a href=\"#算法面试注意点？\" class=\"headerlink\" title=\"算法面试注意点？\"></a>算法面试注意点？</h3><ol>\n<li>找到各类问题的通用模板，根据题目特殊情况做特殊处理即可。</li>\n<li>先去朝一个解决问题的方向！先去抛出可行解，而不是最优解！先解决，再优化！</li>\n<li>代码的风格要统一！熟悉各类语言的代码规范</li>\n<li>最常见错误：A.访问下标时，不能访问越界！B.空值问题run time error!</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"算法理解\"><a href=\"#算法理解\" class=\"headerlink\" title=\"算法理解\"></a>算法理解</h2><p>算法理解：</p>\n<p>就是找一套解决问题的模板，有特殊情况就做特殊处理</p>\n<p>类似【算法模板】【算法设计模式】</p>\n<p>后续文章会依次介绍各种算法的模板，关注<a href=\"https://github.com/greyireland\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<h2 id=\"模板入门\"><a href=\"#模板入门\" class=\"headerlink\" title=\"模板入门\"></a>模板入门</h2><h3 id=\"1-双重循环模板【strStr】\"><a href=\"#1-双重循环模板【strStr】\" class=\"headerlink\" title=\"1. 双重循环模板【strStr】\"></a>1. 双重循环模板【strStr】</h3><p>常见面试题，实现双重循环就OK【strStr在面试中了解KMP算法即可】</p>\n<p>双重for循环模板：</p>\n<ul>\n<li>参数检查</li>\n<li>双重循环</li>\n<li>逻辑判断&amp;边界检查</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">问题：</span><br><span class=\"line\">实现 strStr() 函数。</span><br><span class=\"line\">给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中</span><br><span class=\"line\">找出 needle 字符串出现的第一个位置 (从<span class=\"number\">0</span>开始)。如果不存在，则返回  <span class=\"number\">-1</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入: haystack = <span class=\"string\">\"hello\"</span>, needle = <span class=\"string\">\"ll\"</span></span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">输入: haystack = <span class=\"string\">\"aaaaa\"</span>, needle = <span class=\"string\">\"bba\"</span></span><br><span class=\"line\">输出: <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">代码实现：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">strStr</span><span class=\"params\">(haystack <span class=\"keyword\">string</span>, needle <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> needle==<span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i,j <span class=\"keyword\">int</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(haystack)-<span class=\"built_in\">len</span>(needle)+<span class=\"number\">1</span>;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"built_in\">len</span>(needle);j++&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> haystack[i+j]!=needle[j]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j==<span class=\"built_in\">len</span>(needle)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-回溯法模板【subset-subset2】\"><a href=\"#2-回溯法模板【subset-subset2】\" class=\"headerlink\" title=\"2. 回溯法模板【subset/subset2】\"></a>2. 回溯法模板【subset/subset2】</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 回溯法backtrack通用模板</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subsets</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> [][]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    backtrack(&amp;res, tmp, nums, <span class=\"number\">0</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//res 所有子集的结果</span></span><br><span class=\"line\"><span class=\"comment\">//tmp 临时子集</span></span><br><span class=\"line\"><span class=\"comment\">//nums 原始数组</span></span><br><span class=\"line\"><span class=\"comment\">//start 下次开始取数据的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backtrack</span><span class=\"params\">(res *[][]<span class=\"keyword\">int</span>, tmp []<span class=\"keyword\">int</span>, nums []<span class=\"keyword\">int</span>, start <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//golang必须是用copy，因为tmp的数据可能变化</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(tmp))</span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(e, tmp)</span><br><span class=\"line\">    *res = <span class=\"built_in\">append</span>(*res, e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := start; i &lt; <span class=\"built_in\">len</span>(nums); i++ &#123;</span><br><span class=\"line\">        tmp = <span class=\"built_in\">append</span>(tmp, nums[i])</span><br><span class=\"line\">        backtrack(res, tmp, nums, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        tmp = tmp[:<span class=\"built_in\">len</span>(tmp)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>subset<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</span><br><span class=\"line\"></span><br><span class=\"line\">说明：解集不能包含重复的子集。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\">输入: nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  []</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">解答：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subsets</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> [][]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    backtrack(&amp;res, tmp, nums, <span class=\"number\">0</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//res 所有子集的结果</span></span><br><span class=\"line\"><span class=\"comment\">//tmp 临时子集</span></span><br><span class=\"line\"><span class=\"comment\">//nums 原始数组</span></span><br><span class=\"line\"><span class=\"comment\">//start 下次开始取数据的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backtrack</span><span class=\"params\">(res *[][]<span class=\"keyword\">int</span>, tmp []<span class=\"keyword\">int</span>, nums []<span class=\"keyword\">int</span>, start <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//golang必须是用copy，因为tmp的数据可能变化</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(tmp))</span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(e, tmp)</span><br><span class=\"line\">    *res = <span class=\"built_in\">append</span>(*res, e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := start; i &lt; <span class=\"built_in\">len</span>(nums); i++ &#123;</span><br><span class=\"line\">        tmp = <span class=\"built_in\">append</span>(tmp, nums[i])</span><br><span class=\"line\">        backtrack(res, tmp, nums, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        tmp = tmp[:<span class=\"built_in\">len</span>(tmp)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>subset 2<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  []</span><br><span class=\"line\">]</span><br><span class=\"line\">解答：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subsetsWithDup</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> [][]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    sort.Ints(nums) <span class=\"comment\">//先排序</span></span><br><span class=\"line\">    backtrack(&amp;res, tmp, nums, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backtrack</span><span class=\"params\">(res *[][]<span class=\"keyword\">int</span>, tmp []<span class=\"keyword\">int</span>, nums []<span class=\"keyword\">int</span>, start <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//golang必须是用copy，因为tmp的数据可能变化</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(tmp))</span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(e, tmp)</span><br><span class=\"line\">    *res = <span class=\"built_in\">append</span>(*res, e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := start; i &lt; <span class=\"built_in\">len</span>(nums); i++ &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断符合条件才进行回溯</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == start || nums[i] != nums[i<span class=\"number\">-1</span>] &#123;</span><br><span class=\"line\">            tmp = <span class=\"built_in\">append</span>(tmp, nums[i])</span><br><span class=\"line\">            backtrack(res, tmp, nums, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            tmp = tmp[:<span class=\"built_in\">len</span>(tmp)<span class=\"number\">-1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA?\"></a>QA?</h2><h3 id=\"算法面试注意点？\"><a href=\"#算法面试注意点？\" class=\"headerlink\" title=\"算法面试注意点？\"></a>算法面试注意点？</h3><ol>\n<li>找到各类问题的通用模板，根据题目特殊情况做特殊处理即可。</li>\n<li>先去朝一个解决问题的方向！先去抛出可行解，而不是最优解！先解决，再优化！</li>\n<li>代码的风格要统一！熟悉各类语言的代码规范</li>\n<li>最常见错误：A.访问下标时，不能访问越界！B.空值问题run time error!</li>\n</ol>\n"},{"title":"01_二分搜索系列","date":"2019-02-23T12:58:30.000Z","_content":"\n# 二分搜索模板\n### 题目\n给一个有序数组和目标值，找第一次/最后一次/任何一次出现的索引，如果没有出现返回-1\n\n通用模板\n四点要素:\n1. start + 1 < end\n2. start + (end - start) / 2 \n3. A[mid] ==, <, >\n4. A[start] A[end] ? target\n\n\n```go\n标准代码：\nfunc search(nums []int, target int) int {\n    start:=0\n    end:=len(nums)-1\n    for(start+1<end){\n        mid:=start+(end-start)/2\n        if nums[mid]==target{\n            end=mid\n        }else if nums[mid]<target{\n            start=mid\n        }else if nums[mid]>target{\n            end=mid\n        }\n    }\n    if nums[start]==target{\n        return start\n    }\n    if nums[end]==target{\n        return end\n    }\n    return -1\n}\n```\n大部分二分查找类的题目都可以用这个模板，然后做一点特殊逻辑即可\n\n\n### 常见题目：\n1. 二分查找\n```go\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n你可以假设数组中无重复元素。\n\n示例 1:\n输入: [1,3,5,6], 5\n输出: 2\n\n示例 2:\n输入: [1,3,5,6], 2\n输出: 1\n\n示例 3:\n输入: [1,3,5,6], 7\n输出: 4\n\n示例 4:\n输入: [1,3,5,6], 0\n输出: 0\n\n解答：\n- 二分查找\n- 判断首尾的情况，找first position +1，判断end\n\nfunc searchInsert(nums []int, target int) int {\n    if len(nums)==0{\n        return 0\n    }\n    start:=0\n    end:=len(nums)-1\n    for(start+1<end){\n        mid:=start+(end-start)/2\n        if nums[mid]>target{\n            end=mid\n        }else if nums[mid]<target{\n            start=mid\n        }else if nums[mid]==target {\n            end=mid\n        }\n    }\n    if nums[start]>=target{\n        return start\n    }else if nums[end]<target{\n        return end+1\n    }\n    return start+1\n}\n```\n\n2. 矩阵搜索\n```go\n编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：\n每行中的整数从左到右按升序排列。\n每行的第一个整数大于前一行的最后一个整数。\n\n示例 1:\n输入:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n输出: true\n\n示例 2:\n输入:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\n输出: false\n\n//从右上角开始查找log(m)+log(n)\nfunc searchMatrix(matrix [][]int, target int) bool {\n    if len(matrix)==0||len(matrix[0])==0{\n        return false\n    }\n    i:=len(matrix)-1\n    j:=0\n    for(i>=0&&j<len(matrix[0])){\n        if matrix[i][j]<target{\n            j++\n        }else if matrix[i][j]>target{\n            i--\n        }else{\n            return true\n        }\n    }\n    \n    return false\n}\n```\n\n3. 旋转数组搜索\n\n\n核心思路：\n\n根据nums[start]<nums[mid] 判断两种情况\n\n```go\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。\n你可以假设数组中不存在重复的元素。\n你的算法时间复杂度必须是 O(log n) 级别。\n\n示例 1:\n输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n\n示例 2:\n输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n\n\nfunc search(nums []int, target int) int {\n    if len(nums)==0{\n        return -1\n    }\n    start:=0\n    end:=len(nums)-1\n    for(start+1<end){\n        mid:=start+(end-start)/2\n        if nums[start]<nums[mid]{\n            if target>=nums[start]&&target<=nums[mid]{\n                end=mid\n            }else{\n                start=mid\n            }\n            \n        }else if nums[start]>nums[mid]{\n            if nums[mid]<=target&&target<=nums[end]{\n                start=mid\n            }else{\n                end=mid\n            }\n            \n        }else if nums[mid]==target{\n            return mid\n        }\n    }\n    if nums[start]==target{\n        return start\n    }else if nums[end]==target{\n        return end\n    }\n    \n    return -1\n}\n\n存在重复元素情况，只能线性判断\nfunc search(nums []int, target int) bool {\n    for i:=0;i<len(nums);i++{\n        if nums[i]==target{\n            return true\n        }\n    }\n    return false\n}\n```\n\n\n### 总结\n- 每一个模板都是前人总结的经验。\n- 没有模板就自己创造一个模板。","source":"_posts/algorithm/01_二分搜索系列.md","raw":"---\ntitle: 01_二分搜索系列\ntags:\n  - algorithm\n  - 二分搜索\ncategories:\n  - algorithm\ndate: 2019-02-23 20:58:30\n---\n\n# 二分搜索模板\n### 题目\n给一个有序数组和目标值，找第一次/最后一次/任何一次出现的索引，如果没有出现返回-1\n\n通用模板\n四点要素:\n1. start + 1 < end\n2. start + (end - start) / 2 \n3. A[mid] ==, <, >\n4. A[start] A[end] ? target\n\n\n```go\n标准代码：\nfunc search(nums []int, target int) int {\n    start:=0\n    end:=len(nums)-1\n    for(start+1<end){\n        mid:=start+(end-start)/2\n        if nums[mid]==target{\n            end=mid\n        }else if nums[mid]<target{\n            start=mid\n        }else if nums[mid]>target{\n            end=mid\n        }\n    }\n    if nums[start]==target{\n        return start\n    }\n    if nums[end]==target{\n        return end\n    }\n    return -1\n}\n```\n大部分二分查找类的题目都可以用这个模板，然后做一点特殊逻辑即可\n\n\n### 常见题目：\n1. 二分查找\n```go\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n你可以假设数组中无重复元素。\n\n示例 1:\n输入: [1,3,5,6], 5\n输出: 2\n\n示例 2:\n输入: [1,3,5,6], 2\n输出: 1\n\n示例 3:\n输入: [1,3,5,6], 7\n输出: 4\n\n示例 4:\n输入: [1,3,5,6], 0\n输出: 0\n\n解答：\n- 二分查找\n- 判断首尾的情况，找first position +1，判断end\n\nfunc searchInsert(nums []int, target int) int {\n    if len(nums)==0{\n        return 0\n    }\n    start:=0\n    end:=len(nums)-1\n    for(start+1<end){\n        mid:=start+(end-start)/2\n        if nums[mid]>target{\n            end=mid\n        }else if nums[mid]<target{\n            start=mid\n        }else if nums[mid]==target {\n            end=mid\n        }\n    }\n    if nums[start]>=target{\n        return start\n    }else if nums[end]<target{\n        return end+1\n    }\n    return start+1\n}\n```\n\n2. 矩阵搜索\n```go\n编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：\n每行中的整数从左到右按升序排列。\n每行的第一个整数大于前一行的最后一个整数。\n\n示例 1:\n输入:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n输出: true\n\n示例 2:\n输入:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\n输出: false\n\n//从右上角开始查找log(m)+log(n)\nfunc searchMatrix(matrix [][]int, target int) bool {\n    if len(matrix)==0||len(matrix[0])==0{\n        return false\n    }\n    i:=len(matrix)-1\n    j:=0\n    for(i>=0&&j<len(matrix[0])){\n        if matrix[i][j]<target{\n            j++\n        }else if matrix[i][j]>target{\n            i--\n        }else{\n            return true\n        }\n    }\n    \n    return false\n}\n```\n\n3. 旋转数组搜索\n\n\n核心思路：\n\n根据nums[start]<nums[mid] 判断两种情况\n\n```go\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。\n你可以假设数组中不存在重复的元素。\n你的算法时间复杂度必须是 O(log n) 级别。\n\n示例 1:\n输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n\n示例 2:\n输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n\n\nfunc search(nums []int, target int) int {\n    if len(nums)==0{\n        return -1\n    }\n    start:=0\n    end:=len(nums)-1\n    for(start+1<end){\n        mid:=start+(end-start)/2\n        if nums[start]<nums[mid]{\n            if target>=nums[start]&&target<=nums[mid]{\n                end=mid\n            }else{\n                start=mid\n            }\n            \n        }else if nums[start]>nums[mid]{\n            if nums[mid]<=target&&target<=nums[end]{\n                start=mid\n            }else{\n                end=mid\n            }\n            \n        }else if nums[mid]==target{\n            return mid\n        }\n    }\n    if nums[start]==target{\n        return start\n    }else if nums[end]==target{\n        return end\n    }\n    \n    return -1\n}\n\n存在重复元素情况，只能线性判断\nfunc search(nums []int, target int) bool {\n    for i:=0;i<len(nums);i++{\n        if nums[i]==target{\n            return true\n        }\n    }\n    return false\n}\n```\n\n\n### 总结\n- 每一个模板都是前人总结的经验。\n- 没有模板就自己创造一个模板。","slug":"algorithm/01_二分搜索系列","published":1,"updated":"2019-03-10T11:02:35.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0c50004wl38eglfl5vn","content":"<h1 id=\"二分搜索模板\"><a href=\"#二分搜索模板\" class=\"headerlink\" title=\"二分搜索模板\"></a>二分搜索模板</h1><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给一个有序数组和目标值，找第一次/最后一次/任何一次出现的索引，如果没有出现返回-1</p>\n<p>通用模板<br>四点要素:</p>\n<ol>\n<li>start + 1 &lt; end</li>\n<li>start + (end - start) / 2 </li>\n<li>A[mid] ==, &lt;, &gt;</li>\n<li>A[start] A[end] ? target</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标准代码：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">search</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    start:=<span class=\"number\">0</span></span><br><span class=\"line\">    end:=<span class=\"built_in\">len</span>(nums)<span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(start+<span class=\"number\">1</span>&lt;end)&#123;</span><br><span class=\"line\">        mid:=start+(end-start)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[mid]==target&#123;</span><br><span class=\"line\">            end=mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]&lt;target&#123;</span><br><span class=\"line\">            start=mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]&gt;target&#123;</span><br><span class=\"line\">            end=mid</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[start]==target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> start</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[end]==target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> end</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大部分二分查找类的题目都可以用这个模板，然后做一点特殊逻辑即可</p>\n<h3 id=\"常见题目：\"><a href=\"#常见题目：\" class=\"headerlink\" title=\"常见题目：\"></a>常见题目：</h3><ol>\n<li><p>二分查找</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</span><br><span class=\"line\">你可以假设数组中无重复元素。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], <span class=\"number\">5</span></span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">3</span>:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], <span class=\"number\">7</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">4</span>:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], <span class=\"number\">0</span></span><br><span class=\"line\">输出: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">解答：</span><br><span class=\"line\">- 二分查找</span><br><span class=\"line\">- 判断首尾的情况，找first position +<span class=\"number\">1</span>，判断end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">searchInsert</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums)==<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start:=<span class=\"number\">0</span></span><br><span class=\"line\">    end:=<span class=\"built_in\">len</span>(nums)<span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(start+<span class=\"number\">1</span>&lt;end)&#123;</span><br><span class=\"line\">        mid:=start+(end-start)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[mid]&gt;target&#123;</span><br><span class=\"line\">            end=mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]&lt;target&#123;</span><br><span class=\"line\">            start=mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]==target &#123;</span><br><span class=\"line\">            end=mid</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[start]&gt;=target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> start</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[end]&lt;target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> end+<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>矩阵搜索</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</span><br><span class=\"line\">每行中的整数从左到右按升序排列。</span><br><span class=\"line\">每行的第一个整数大于前一行的最后一个整数。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入:</span><br><span class=\"line\">matrix = [</span><br><span class=\"line\">  [<span class=\"number\">1</span>,   <span class=\"number\">3</span>,  <span class=\"number\">5</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">  [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">  [<span class=\"number\">23</span>, <span class=\"number\">30</span>, <span class=\"number\">34</span>, <span class=\"number\">50</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">target = <span class=\"number\">3</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">输入:</span><br><span class=\"line\">matrix = [</span><br><span class=\"line\">  [<span class=\"number\">1</span>,   <span class=\"number\">3</span>,  <span class=\"number\">5</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">  [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">  [<span class=\"number\">23</span>, <span class=\"number\">30</span>, <span class=\"number\">34</span>, <span class=\"number\">50</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">target = <span class=\"number\">13</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从右上角开始查找log(m)+log(n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(matrix)==<span class=\"number\">0</span>||<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])==<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i:=<span class=\"built_in\">len</span>(matrix)<span class=\"number\">-1</span></span><br><span class=\"line\">    j:=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i&gt;=<span class=\"number\">0</span>&amp;&amp;j&lt;<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> matrix[i][j]&lt;target&#123;</span><br><span class=\"line\">            j++</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> matrix[i][j]&gt;target&#123;</span><br><span class=\"line\">            i--</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>旋转数组搜索</p>\n</li>\n</ol>\n<p>核心思路：</p>\n<p>根据nums[start]&lt;nums[mid] 判断两种情况</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设按照升序排序的数组在预先未知的某个点上进行了旋转。</span><br><span class=\"line\">( 例如，数组 [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>] 可能变为 [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>] )。</span><br><span class=\"line\">搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 <span class=\"number\">-1</span> 。</span><br><span class=\"line\">你可以假设数组中不存在重复的元素。</span><br><span class=\"line\">你的算法时间复杂度必须是 O(log n) 级别。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入: nums = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>], target = <span class=\"number\">0</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">输入: nums = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>], target = <span class=\"number\">3</span></span><br><span class=\"line\">输出: <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">search</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums)==<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start:=<span class=\"number\">0</span></span><br><span class=\"line\">    end:=<span class=\"built_in\">len</span>(nums)<span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(start+<span class=\"number\">1</span>&lt;end)&#123;</span><br><span class=\"line\">        mid:=start+(end-start)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[start]&lt;nums[mid]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> target&gt;=nums[start]&amp;&amp;target&lt;=nums[mid]&#123;</span><br><span class=\"line\">                end=mid</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                start=mid</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[start]&gt;nums[mid]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[mid]&lt;=target&amp;&amp;target&lt;=nums[end]&#123;</span><br><span class=\"line\">                start=mid</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                end=mid</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]==target&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[start]==target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> start</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[end]==target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> end</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">存在重复元素情况，只能线性判断</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">search</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(nums);i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i]==target&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>每一个模板都是前人总结的经验。</li>\n<li>没有模板就自己创造一个模板。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"二分搜索模板\"><a href=\"#二分搜索模板\" class=\"headerlink\" title=\"二分搜索模板\"></a>二分搜索模板</h1><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给一个有序数组和目标值，找第一次/最后一次/任何一次出现的索引，如果没有出现返回-1</p>\n<p>通用模板<br>四点要素:</p>\n<ol>\n<li>start + 1 &lt; end</li>\n<li>start + (end - start) / 2 </li>\n<li>A[mid] ==, &lt;, &gt;</li>\n<li>A[start] A[end] ? target</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标准代码：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">search</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    start:=<span class=\"number\">0</span></span><br><span class=\"line\">    end:=<span class=\"built_in\">len</span>(nums)<span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(start+<span class=\"number\">1</span>&lt;end)&#123;</span><br><span class=\"line\">        mid:=start+(end-start)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[mid]==target&#123;</span><br><span class=\"line\">            end=mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]&lt;target&#123;</span><br><span class=\"line\">            start=mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]&gt;target&#123;</span><br><span class=\"line\">            end=mid</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[start]==target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> start</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[end]==target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> end</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大部分二分查找类的题目都可以用这个模板，然后做一点特殊逻辑即可</p>\n<h3 id=\"常见题目：\"><a href=\"#常见题目：\" class=\"headerlink\" title=\"常见题目：\"></a>常见题目：</h3><ol>\n<li><p>二分查找</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</span><br><span class=\"line\">你可以假设数组中无重复元素。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], <span class=\"number\">5</span></span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">3</span>:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], <span class=\"number\">7</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">4</span>:</span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], <span class=\"number\">0</span></span><br><span class=\"line\">输出: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">解答：</span><br><span class=\"line\">- 二分查找</span><br><span class=\"line\">- 判断首尾的情况，找first position +<span class=\"number\">1</span>，判断end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">searchInsert</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums)==<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start:=<span class=\"number\">0</span></span><br><span class=\"line\">    end:=<span class=\"built_in\">len</span>(nums)<span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(start+<span class=\"number\">1</span>&lt;end)&#123;</span><br><span class=\"line\">        mid:=start+(end-start)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[mid]&gt;target&#123;</span><br><span class=\"line\">            end=mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]&lt;target&#123;</span><br><span class=\"line\">            start=mid</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]==target &#123;</span><br><span class=\"line\">            end=mid</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[start]&gt;=target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> start</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[end]&lt;target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> end+<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start+<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>矩阵搜索</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</span><br><span class=\"line\">每行中的整数从左到右按升序排列。</span><br><span class=\"line\">每行的第一个整数大于前一行的最后一个整数。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入:</span><br><span class=\"line\">matrix = [</span><br><span class=\"line\">  [<span class=\"number\">1</span>,   <span class=\"number\">3</span>,  <span class=\"number\">5</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">  [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">  [<span class=\"number\">23</span>, <span class=\"number\">30</span>, <span class=\"number\">34</span>, <span class=\"number\">50</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">target = <span class=\"number\">3</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">输入:</span><br><span class=\"line\">matrix = [</span><br><span class=\"line\">  [<span class=\"number\">1</span>,   <span class=\"number\">3</span>,  <span class=\"number\">5</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">  [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">  [<span class=\"number\">23</span>, <span class=\"number\">30</span>, <span class=\"number\">34</span>, <span class=\"number\">50</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">target = <span class=\"number\">13</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从右上角开始查找log(m)+log(n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(matrix)==<span class=\"number\">0</span>||<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])==<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i:=<span class=\"built_in\">len</span>(matrix)<span class=\"number\">-1</span></span><br><span class=\"line\">    j:=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i&gt;=<span class=\"number\">0</span>&amp;&amp;j&lt;<span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> matrix[i][j]&lt;target&#123;</span><br><span class=\"line\">            j++</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> matrix[i][j]&gt;target&#123;</span><br><span class=\"line\">            i--</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>旋转数组搜索</p>\n</li>\n</ol>\n<p>核心思路：</p>\n<p>根据nums[start]&lt;nums[mid] 判断两种情况</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设按照升序排序的数组在预先未知的某个点上进行了旋转。</span><br><span class=\"line\">( 例如，数组 [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>] 可能变为 [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>] )。</span><br><span class=\"line\">搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 <span class=\"number\">-1</span> 。</span><br><span class=\"line\">你可以假设数组中不存在重复的元素。</span><br><span class=\"line\">你的算法时间复杂度必须是 O(log n) 级别。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入: nums = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>], target = <span class=\"number\">0</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">输入: nums = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>], target = <span class=\"number\">3</span></span><br><span class=\"line\">输出: <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">search</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums)==<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start:=<span class=\"number\">0</span></span><br><span class=\"line\">    end:=<span class=\"built_in\">len</span>(nums)<span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(start+<span class=\"number\">1</span>&lt;end)&#123;</span><br><span class=\"line\">        mid:=start+(end-start)/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[start]&lt;nums[mid]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> target&gt;=nums[start]&amp;&amp;target&lt;=nums[mid]&#123;</span><br><span class=\"line\">                end=mid</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                start=mid</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[start]&gt;nums[mid]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[mid]&lt;=target&amp;&amp;target&lt;=nums[end]&#123;</span><br><span class=\"line\">                start=mid</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                end=mid</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid]==target&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[start]==target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> start</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[end]==target&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> end</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">存在重复元素情况，只能线性判断</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">search</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, target <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">len</span>(nums);i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i]==target&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>每一个模板都是前人总结的经验。</li>\n<li>没有模板就自己创造一个模板。</li>\n</ul>\n"},{"title":"epoll","date":"2019-06-28T08:56:03.000Z","_content":"\n# epoll\n\n### epoll如何实现百万连接\n\n```\nint epoll_create(int size);//size fd数量,创建了红黑树和就绪链表\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);//添加回调函数到红黑树，事件来临时将回调函数写到就绪链表\nint epoll_wait(int epfd, struct epoll_event *events,int maxevents, int timeout);//取出就绪链表数据\n```\n\n\n\n#### VS select & poll\n\n轮询实现效率低，poll去除fd限制，实际问题未解决\n\n\n\n### 网络IO模型\n\n![](https://raw.githubusercontent.com/greyireland/images/master/img/20190628165226.png)\n\n\n\n参考：\n\n<https://zhuanlan.zhihu.com/p/21378825>\n\n<https://www.zhihu.com/question/20831000>\n\n<https://www.jianshu.com/p/55eb83d60ab1>","source":"_posts/cs/epoll.md","raw":"---\ntitle: epoll\ntags:\n  - epoll\ncategories:\n  - cs\ndate: 2019-06-28 16:56:03\n---\n\n# epoll\n\n### epoll如何实现百万连接\n\n```\nint epoll_create(int size);//size fd数量,创建了红黑树和就绪链表\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);//添加回调函数到红黑树，事件来临时将回调函数写到就绪链表\nint epoll_wait(int epfd, struct epoll_event *events,int maxevents, int timeout);//取出就绪链表数据\n```\n\n\n\n#### VS select & poll\n\n轮询实现效率低，poll去除fd限制，实际问题未解决\n\n\n\n### 网络IO模型\n\n![](https://raw.githubusercontent.com/greyireland/images/master/img/20190628165226.png)\n\n\n\n参考：\n\n<https://zhuanlan.zhihu.com/p/21378825>\n\n<https://www.zhihu.com/question/20831000>\n\n<https://www.jianshu.com/p/55eb83d60ab1>","slug":"cs/epoll","published":1,"updated":"2019-06-28T08:57:14.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0c90007wl38rva3v0a3","content":"<h1 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h1><h3 id=\"epoll如何实现百万连接\"><a href=\"#epoll如何实现百万连接\" class=\"headerlink\" title=\"epoll如何实现百万连接\"></a>epoll如何实现百万连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int epoll_create(int size);//size fd数量,创建了红黑树和就绪链表</span><br><span class=\"line\">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);//添加回调函数到红黑树，事件来临时将回调函数写到就绪链表</span><br><span class=\"line\">int epoll_wait(int epfd, struct epoll_event *events,int maxevents, int timeout);//取出就绪链表数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"VS-select-amp-poll\"><a href=\"#VS-select-amp-poll\" class=\"headerlink\" title=\"VS select &amp; poll\"></a>VS select &amp; poll</h4><p>轮询实现效率低，poll去除fd限制，实际问题未解决</p>\n<h3 id=\"网络IO模型\"><a href=\"#网络IO模型\" class=\"headerlink\" title=\"网络IO模型\"></a>网络IO模型</h3><p><img src=\"https://raw.githubusercontent.com/greyireland/images/master/img/20190628165226.png\" alt=\"\"></p>\n<p>参考：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/21378825\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/21378825</a></p>\n<p><a href=\"https://www.zhihu.com/question/20831000\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20831000</a></p>\n<p><a href=\"https://www.jianshu.com/p/55eb83d60ab1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/55eb83d60ab1</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h1><h3 id=\"epoll如何实现百万连接\"><a href=\"#epoll如何实现百万连接\" class=\"headerlink\" title=\"epoll如何实现百万连接\"></a>epoll如何实现百万连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int epoll_create(int size);//size fd数量,创建了红黑树和就绪链表</span><br><span class=\"line\">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);//添加回调函数到红黑树，事件来临时将回调函数写到就绪链表</span><br><span class=\"line\">int epoll_wait(int epfd, struct epoll_event *events,int maxevents, int timeout);//取出就绪链表数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"VS-select-amp-poll\"><a href=\"#VS-select-amp-poll\" class=\"headerlink\" title=\"VS select &amp; poll\"></a>VS select &amp; poll</h4><p>轮询实现效率低，poll去除fd限制，实际问题未解决</p>\n<h3 id=\"网络IO模型\"><a href=\"#网络IO模型\" class=\"headerlink\" title=\"网络IO模型\"></a>网络IO模型</h3><p><img src=\"https://raw.githubusercontent.com/greyireland/images/master/img/20190628165226.png\" alt=\"\"></p>\n<p>参考：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/21378825\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/21378825</a></p>\n<p><a href=\"https://www.zhihu.com/question/20831000\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20831000</a></p>\n<p><a href=\"https://www.jianshu.com/p/55eb83d60ab1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/55eb83d60ab1</a></p>\n"},{"title":"02_binary-tree","date":"2019-04-18T16:06:03.000Z","_content":"\n","source":"_posts/algorithm/02_binary-tree.md","raw":"---\ntitle: 02_binary-tree\ntags:\n  - tags\ncategories:\n  - categories\ndate: 2019-04-19 00:06:03\n---\n\n","slug":"algorithm/02_binary-tree","published":1,"updated":"2019-04-16T02:56:30.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cb0008wl38nf0eq4nf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hash算法","date":"2019-04-06T15:26:40.000Z","_content":"\n\n# hash算法\n\n> 简单来说：hash（散列、杂凑）函数，是将任意长度的数据映射到有限长度的域上。直观解释起来，就是对一串数据m进行杂糅，输出另一段固定长度的数据h，作为这段数据的特征（指纹）。\n> 由于用途的不同，hash在数据结构中的含义【hashCode()】和密码学【md5,sha1,sha256】中的含义并不相同，所以在这两种不同的领域里，算法的设计侧重点也不同。\n\n#### 数据结构hash\n\n```\nstring、int、bool、object hashCode()\n```\n\n#### 密码学hash\n\n```\n| 算法   | bit位数 | 16进制字符串                                                 |\n| ------ | ------- | ------------------------------------------------------------ |\n| md5    | 128     | e10adc3949ba59abbe56e057f20f883e                             |\n| sha1   | 160     | 7c4a8d09ca3762af61e59520943dc26494f8941b                     |\n| sha256 | 256     | 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 |\n| crc32  | 32      | 70930f27                                                     |\n| fnv    | 32      | -                                                            |\n```\n\n#### 其他工具\n\n```\nfnv：FNV能快速hash大量数据并保持较小的冲突率，它的高度分散使它适用于hash一些非常相近的字符串，比如URL，hostname，文件名，text，IP地址等。\nbase64:编码后的数据比原始数据略长，为原来的4/3,用64个可见字符表示数据a-z A-Z 0-9 + / ,可序列化可反序列化\nurlencode:url中只有字母和数字[0-9a-zA-Z]、一些特殊符号\"$-_.+!*'(),\"[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。\n```\n\n","source":"_posts/cs/hash算法.md","raw":"---\ntitle: hash算法\ntags:\n  - hash\ncategories:\n  - cs\ndate: 2019-04-06 23:26:40\n---\n\n\n# hash算法\n\n> 简单来说：hash（散列、杂凑）函数，是将任意长度的数据映射到有限长度的域上。直观解释起来，就是对一串数据m进行杂糅，输出另一段固定长度的数据h，作为这段数据的特征（指纹）。\n> 由于用途的不同，hash在数据结构中的含义【hashCode()】和密码学【md5,sha1,sha256】中的含义并不相同，所以在这两种不同的领域里，算法的设计侧重点也不同。\n\n#### 数据结构hash\n\n```\nstring、int、bool、object hashCode()\n```\n\n#### 密码学hash\n\n```\n| 算法   | bit位数 | 16进制字符串                                                 |\n| ------ | ------- | ------------------------------------------------------------ |\n| md5    | 128     | e10adc3949ba59abbe56e057f20f883e                             |\n| sha1   | 160     | 7c4a8d09ca3762af61e59520943dc26494f8941b                     |\n| sha256 | 256     | 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 |\n| crc32  | 32      | 70930f27                                                     |\n| fnv    | 32      | -                                                            |\n```\n\n#### 其他工具\n\n```\nfnv：FNV能快速hash大量数据并保持较小的冲突率，它的高度分散使它适用于hash一些非常相近的字符串，比如URL，hostname，文件名，text，IP地址等。\nbase64:编码后的数据比原始数据略长，为原来的4/3,用64个可见字符表示数据a-z A-Z 0-9 + / ,可序列化可反序列化\nurlencode:url中只有字母和数字[0-9a-zA-Z]、一些特殊符号\"$-_.+!*'(),\"[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。\n```\n\n","slug":"cs/hash算法","published":1,"updated":"2019-04-19T05:54:38.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cc0009wl386836ubce","content":"<h1 id=\"hash算法\"><a href=\"#hash算法\" class=\"headerlink\" title=\"hash算法\"></a>hash算法</h1><blockquote>\n<p>简单来说：hash（散列、杂凑）函数，是将任意长度的数据映射到有限长度的域上。直观解释起来，就是对一串数据m进行杂糅，输出另一段固定长度的数据h，作为这段数据的特征（指纹）。<br>由于用途的不同，hash在数据结构中的含义【hashCode()】和密码学【md5,sha1,sha256】中的含义并不相同，所以在这两种不同的领域里，算法的设计侧重点也不同。</p>\n</blockquote>\n<h4 id=\"数据结构hash\"><a href=\"#数据结构hash\" class=\"headerlink\" title=\"数据结构hash\"></a>数据结构hash</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string、int、bool、object hashCode()</span><br></pre></td></tr></table></figure>\n<h4 id=\"密码学hash\"><a href=\"#密码学hash\" class=\"headerlink\" title=\"密码学hash\"></a>密码学hash</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 算法   | bit位数 | 16进制字符串                                                 |</span><br><span class=\"line\">| ------ | ------- | ------------------------------------------------------------ |</span><br><span class=\"line\">| md5    | 128     | e10adc3949ba59abbe56e057f20f883e                             |</span><br><span class=\"line\">| sha1   | 160     | 7c4a8d09ca3762af61e59520943dc26494f8941b                     |</span><br><span class=\"line\">| sha256 | 256     | 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 |</span><br><span class=\"line\">| crc32  | 32      | 70930f27                                                     |</span><br><span class=\"line\">| fnv    | 32      | -                                                            |</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fnv：FNV能快速hash大量数据并保持较小的冲突率，它的高度分散使它适用于hash一些非常相近的字符串，比如URL，hostname，文件名，text，IP地址等。</span><br><span class=\"line\">base64:编码后的数据比原始数据略长，为原来的4/3,用64个可见字符表示数据a-z A-Z 0-9 + / ,可序列化可反序列化</span><br><span class=\"line\">urlencode:url中只有字母和数字[0-9a-zA-Z]、一些特殊符号&quot;$-_.+!*&apos;(),&quot;[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hash算法\"><a href=\"#hash算法\" class=\"headerlink\" title=\"hash算法\"></a>hash算法</h1><blockquote>\n<p>简单来说：hash（散列、杂凑）函数，是将任意长度的数据映射到有限长度的域上。直观解释起来，就是对一串数据m进行杂糅，输出另一段固定长度的数据h，作为这段数据的特征（指纹）。<br>由于用途的不同，hash在数据结构中的含义【hashCode()】和密码学【md5,sha1,sha256】中的含义并不相同，所以在这两种不同的领域里，算法的设计侧重点也不同。</p>\n</blockquote>\n<h4 id=\"数据结构hash\"><a href=\"#数据结构hash\" class=\"headerlink\" title=\"数据结构hash\"></a>数据结构hash</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string、int、bool、object hashCode()</span><br></pre></td></tr></table></figure>\n<h4 id=\"密码学hash\"><a href=\"#密码学hash\" class=\"headerlink\" title=\"密码学hash\"></a>密码学hash</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 算法   | bit位数 | 16进制字符串                                                 |</span><br><span class=\"line\">| ------ | ------- | ------------------------------------------------------------ |</span><br><span class=\"line\">| md5    | 128     | e10adc3949ba59abbe56e057f20f883e                             |</span><br><span class=\"line\">| sha1   | 160     | 7c4a8d09ca3762af61e59520943dc26494f8941b                     |</span><br><span class=\"line\">| sha256 | 256     | 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 |</span><br><span class=\"line\">| crc32  | 32      | 70930f27                                                     |</span><br><span class=\"line\">| fnv    | 32      | -                                                            |</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fnv：FNV能快速hash大量数据并保持较小的冲突率，它的高度分散使它适用于hash一些非常相近的字符串，比如URL，hostname，文件名，text，IP地址等。</span><br><span class=\"line\">base64:编码后的数据比原始数据略长，为原来的4/3,用64个可见字符表示数据a-z A-Z 0-9 + / ,可序列化可反序列化</span><br><span class=\"line\">urlencode:url中只有字母和数字[0-9a-zA-Z]、一些特殊符号&quot;$-_.+!*&apos;(),&quot;[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。</span><br></pre></td></tr></table></figure>\n"},{"title":"https理解","date":"2019-03-11T06:58:50.000Z","_content":"\n# https 请求过程\n\n### 交互流程\n1. 加密通信一条完整的HTTPS请求应该是这样的：客户端 (浏览器) 发起 HTTP 请求，请求连接服务端，发送支持的加密通信协议 (和版本)，并且生成一个随机数，后续用于生成\"对话密钥\"。【关键点：加密协议列表和随机数】\n\n2. 服务端确认加密通信协议 (和版本)，同时也生成一个随机数，后续用于生成\"对话密匙\"，并且将 CA 颁发的数字证书，一起发送给客户端。【关键点：确认加密协议、随机数、证书】\n\n3. 客户端收到数字证书后，检测内置的\"受信任的根证书颁发机构\"，查看解开数字证书的公匙是否在。如果解开数字证书的公匙存在，则使用它解开数字证书，得到正确的服务器公匙，同时再次生成一个随机数，用于服务器公匙加密，并发送给服务器。【关键点：解开证书，通过公钥加密随机数】\n\n4. 此时本地和服务器同时将三个随机数，根据约定的加密方法进行加密，各自生成本次会话的所使用的同一把 \"会话密匙\" 。到这里，认证阶段已经完毕，数据传输从非对称加密换成了对称加密(因为考虑到性能)，接下来所有的数据传输都是使用HTTP协议进行传输，只不过使用了 \"会话密匙\" 来加密内容。【关键点：私钥解密随机数，都使用三个随机数生成密匙】\n\n### 交互图：\n![](https://ws1.sinaimg.cn/large/e5320b2aly1g0yv6kojktj20rs0ghwlc.jpg)\n\n\n\n### 参考链接：\n\nhttps://blog.csdn.net/kefengwang/article/details/81219121\nhttps://www.jianshu.com/p/43c67177c248\nhttps://zhuanlan.zhihu.com/p/27395037\nhttps://juejin.im/post/5a2fbe1b51882507ae25f991\nhttp://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\n\n\n","source":"_posts/cs/https理解.md","raw":"---\ntitle: https理解\ntags:\n  - https\n  - SSL/TLS\n  - Secure Sockets Layer/Transport Layer Security\n  \ncategories:\n  - cs\ndate: 2019-03-11 14:58:50\n---\n\n# https 请求过程\n\n### 交互流程\n1. 加密通信一条完整的HTTPS请求应该是这样的：客户端 (浏览器) 发起 HTTP 请求，请求连接服务端，发送支持的加密通信协议 (和版本)，并且生成一个随机数，后续用于生成\"对话密钥\"。【关键点：加密协议列表和随机数】\n\n2. 服务端确认加密通信协议 (和版本)，同时也生成一个随机数，后续用于生成\"对话密匙\"，并且将 CA 颁发的数字证书，一起发送给客户端。【关键点：确认加密协议、随机数、证书】\n\n3. 客户端收到数字证书后，检测内置的\"受信任的根证书颁发机构\"，查看解开数字证书的公匙是否在。如果解开数字证书的公匙存在，则使用它解开数字证书，得到正确的服务器公匙，同时再次生成一个随机数，用于服务器公匙加密，并发送给服务器。【关键点：解开证书，通过公钥加密随机数】\n\n4. 此时本地和服务器同时将三个随机数，根据约定的加密方法进行加密，各自生成本次会话的所使用的同一把 \"会话密匙\" 。到这里，认证阶段已经完毕，数据传输从非对称加密换成了对称加密(因为考虑到性能)，接下来所有的数据传输都是使用HTTP协议进行传输，只不过使用了 \"会话密匙\" 来加密内容。【关键点：私钥解密随机数，都使用三个随机数生成密匙】\n\n### 交互图：\n![](https://ws1.sinaimg.cn/large/e5320b2aly1g0yv6kojktj20rs0ghwlc.jpg)\n\n\n\n### 参考链接：\n\nhttps://blog.csdn.net/kefengwang/article/details/81219121\nhttps://www.jianshu.com/p/43c67177c248\nhttps://zhuanlan.zhihu.com/p/27395037\nhttps://juejin.im/post/5a2fbe1b51882507ae25f991\nhttp://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\n\n\n","slug":"cs/https理解","published":1,"updated":"2019-03-11T08:11:04.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0ce000cwl382x81mmja","content":"<h1 id=\"https-请求过程\"><a href=\"#https-请求过程\" class=\"headerlink\" title=\"https 请求过程\"></a>https 请求过程</h1><h3 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h3><ol>\n<li><p>加密通信一条完整的HTTPS请求应该是这样的：客户端 (浏览器) 发起 HTTP 请求，请求连接服务端，发送支持的加密通信协议 (和版本)，并且生成一个随机数，后续用于生成”对话密钥”。【关键点：加密协议列表和随机数】</p>\n</li>\n<li><p>服务端确认加密通信协议 (和版本)，同时也生成一个随机数，后续用于生成”对话密匙”，并且将 CA 颁发的数字证书，一起发送给客户端。【关键点：确认加密协议、随机数、证书】</p>\n</li>\n<li><p>客户端收到数字证书后，检测内置的”受信任的根证书颁发机构”，查看解开数字证书的公匙是否在。如果解开数字证书的公匙存在，则使用它解开数字证书，得到正确的服务器公匙，同时再次生成一个随机数，用于服务器公匙加密，并发送给服务器。【关键点：解开证书，通过公钥加密随机数】</p>\n</li>\n<li><p>此时本地和服务器同时将三个随机数，根据约定的加密方法进行加密，各自生成本次会话的所使用的同一把 “会话密匙” 。到这里，认证阶段已经完毕，数据传输从非对称加密换成了对称加密(因为考虑到性能)，接下来所有的数据传输都是使用HTTP协议进行传输，只不过使用了 “会话密匙” 来加密内容。【关键点：私钥解密随机数，都使用三个随机数生成密匙】</p>\n</li>\n</ol>\n<h3 id=\"交互图：\"><a href=\"#交互图：\" class=\"headerlink\" title=\"交互图：\"></a>交互图：</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1g0yv6kojktj20rs0ghwlc.jpg\" alt=\"\"></p>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://blog.csdn.net/kefengwang/article/details/81219121\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/kefengwang/article/details/81219121</a><br><a href=\"https://www.jianshu.com/p/43c67177c248\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/43c67177c248</a><br><a href=\"https://zhuanlan.zhihu.com/p/27395037\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27395037</a><br><a href=\"https://juejin.im/post/5a2fbe1b51882507ae25f991\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a2fbe1b51882507ae25f991</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"https-请求过程\"><a href=\"#https-请求过程\" class=\"headerlink\" title=\"https 请求过程\"></a>https 请求过程</h1><h3 id=\"交互流程\"><a href=\"#交互流程\" class=\"headerlink\" title=\"交互流程\"></a>交互流程</h3><ol>\n<li><p>加密通信一条完整的HTTPS请求应该是这样的：客户端 (浏览器) 发起 HTTP 请求，请求连接服务端，发送支持的加密通信协议 (和版本)，并且生成一个随机数，后续用于生成”对话密钥”。【关键点：加密协议列表和随机数】</p>\n</li>\n<li><p>服务端确认加密通信协议 (和版本)，同时也生成一个随机数，后续用于生成”对话密匙”，并且将 CA 颁发的数字证书，一起发送给客户端。【关键点：确认加密协议、随机数、证书】</p>\n</li>\n<li><p>客户端收到数字证书后，检测内置的”受信任的根证书颁发机构”，查看解开数字证书的公匙是否在。如果解开数字证书的公匙存在，则使用它解开数字证书，得到正确的服务器公匙，同时再次生成一个随机数，用于服务器公匙加密，并发送给服务器。【关键点：解开证书，通过公钥加密随机数】</p>\n</li>\n<li><p>此时本地和服务器同时将三个随机数，根据约定的加密方法进行加密，各自生成本次会话的所使用的同一把 “会话密匙” 。到这里，认证阶段已经完毕，数据传输从非对称加密换成了对称加密(因为考虑到性能)，接下来所有的数据传输都是使用HTTP协议进行传输，只不过使用了 “会话密匙” 来加密内容。【关键点：私钥解密随机数，都使用三个随机数生成密匙】</p>\n</li>\n</ol>\n<h3 id=\"交互图：\"><a href=\"#交互图：\" class=\"headerlink\" title=\"交互图：\"></a>交互图：</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1g0yv6kojktj20rs0ghwlc.jpg\" alt=\"\"></p>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://blog.csdn.net/kefengwang/article/details/81219121\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/kefengwang/article/details/81219121</a><br><a href=\"https://www.jianshu.com/p/43c67177c248\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/43c67177c248</a><br><a href=\"https://zhuanlan.zhihu.com/p/27395037\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27395037</a><br><a href=\"https://juejin.im/post/5a2fbe1b51882507ae25f991\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a2fbe1b51882507ae25f991</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html</a></p>\n"},{"title":"loadbalance","date":"2018-10-12T08:56:16.000Z","_content":"\n# 负载均衡\n当一台服务器的承受能力达到上限时，那么就需要多台服务器来组成集群，提升应用整体的吞吐量，那么这个时候就涉及到如何合理分配客户端请求到集群中不同的机器，这个过程就叫做负载均衡，当然这也是负载均衡要解决的问题。\n\n### 实现：\n模拟Ip列表：\n```java\n 1 public class IpMap\n 2 {\n 3     // 待路由的Ip列表，Key代表Ip，Value代表该Ip的权重\n 4     public static HashMap<String, Integer> serverWeightMap = \n 5             new HashMap<String, Integer>();\n 6     \n 7     static\n 8     {\n 9         serverWeightMap.put(\"192.168.1.100\", 1);\n10         serverWeightMap.put(\"192.168.1.101\", 1);\n11         // 权重为4\n12         serverWeightMap.put(\"192.168.1.102\", 4);\n13         serverWeightMap.put(\"192.168.1.103\", 1);\n14         serverWeightMap.put(\"192.168.1.104\", 1);\n15         // 权重为3\n16         serverWeightMap.put(\"192.168.1.105\", 3);\n17         serverWeightMap.put(\"192.168.1.106\", 1);\n18         // 权重为2\n19         serverWeightMap.put(\"192.168.1.107\", 2);\n20         serverWeightMap.put(\"192.168.1.108\", 1);\n21         serverWeightMap.put(\"192.168.1.109\", 1);\n22         serverWeightMap.put(\"192.168.1.110\", 1);\n23     }\n24 }\n```\n \n轮询（Round Robin）法\n轮询法即Round Robin法，其代码实现大致如下：\n```java\n 1 public class RoundRobin\n 2 {\n 3     private static Integer pos = 0;\n 4     \n 5     public static String getServer()\n 6     {\n 7         // 重建一个Map，避免服务器的上下线导致的并发问题\n 8         Map<String, Integer> serverMap = \n 9                 new HashMap<String, Integer>();\n10         serverMap.putAll(IpMap.serverWeightMap);\n11         \n12         // 取得Ip地址List\n13         Set<String> keySet = serverMap.keySet();\n14         ArrayList<String> keyList = new ArrayList<String>();\n15         keyList.addAll(keySet);\n16         \n17         String server = null;\n18         synchronized (pos)\n19         {\n20             if (pos >= keySet.size())\n21                 pos = 0;\n22             server = keyList.get(pos);\n23             pos ++;\n24         }\n25         \n26         return server;\n27     }\n28 }\n```\n由于serverWeightMap中的地址列表是动态的，随时可能有机器上线、下线或者宕机，因此为了避免可能出现的并发问题，方法内部要新建局部变量serverMap，现将serverMap中的内容复制到线程本地，以避免被多个线程修改。这样可能会引入新的问题，复制以后serverWeightMap的修改无法反映给serverMap，也就是说这一轮选择服务器的过程中，新增服务器或者下线服务器，负载均衡算法将无法获知。新增无所谓，如果有服务器下线或者宕机，那么可能会访问到不存在的地址。因此，服务调用端需要有相应的容错处理，比如重新发起一次server选择并调用。\n对于当前轮询的位置变量pos，为了保证服务器选择的顺序性，需要在操作时对其加锁，使得同一时刻只能有一个线程可以修改pos的值，否则当pos变量被并发修改，则无法保证服务器选择的顺序性，甚至有可能导致keyList数组越界。\n轮询法的优点在于：试图做到请求转移的绝对均衡。\n轮询法的缺点在于：为了做到请求转移的绝对均衡，必须付出相当大的代价，因为为了保证pos变量修改的互斥性，需要引入重量级的悲观锁synchronized，这将会导致该段轮询代码的并发吞吐量发生明显的下降。\n \n随机（Random）法\n通过系统随机函数，根据后端服务器列表的大小值来随机选择其中一台进行访问。由概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到每一台后端服务器，也就是轮询的效果。\n随机法的代码实现大致如下：\n```java\n 1 public class Random\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         ArrayList<String> keyList = new ArrayList<String>();\n13         keyList.addAll(keySet);\n14         \n15         java.util.Random random = new java.util.Random();\n16         int randomPos = random.nextInt(keyList.size());\n17         \n18         return keyList.get(randomPos);\n19     }\n20 }\n```\n整体代码思路和轮询法一致，先重建serverMap，再获取到server列表。在选取server的时候，通过Random的nextInt方法取0~keyList.size()区间的一个随机值，从而从服务器列表中随机获取到一台服务器地址进行返回。基于概率统计的理论，吞吐量越大，随机算法的效果越接近于轮询算法的效果。\n \n源地址哈希（Hash）法\n源地址哈希的思想是获取客户端访问的IP地址值，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是要访问的服务器的序号。源地址哈希算法的代码实现大致如下：\n```java\n 1 public class Hash\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         ArrayList<String> keyList = new ArrayList<String>();\n13         keyList.addAll(keySet);\n14         \n15         // 在Web应用中可通过HttpServlet的getRemoteIp方法获取\n16         String remoteIp = \"127.0.0.1\";\n17         int hashCode = remoteIp.hashCode();\n18         int serverListSize = keyList.size();\n19         int serverPos = hashCode % serverListSize;\n20         \n21         return keyList.get(serverPos);\n22     }\n23 }\n```\n前两部分和轮询法、随机法一样就不说了，差别在于路由选择部分。通过客户端的ip也就是remoteIp，取得它的Hash值，对服务器列表的大小取模，结果便是选用的服务器在服务器列表中的索引值。\n源地址哈希法的优点在于：保证了相同客户端IP地址将会被哈希到同一台后端服务器，直到后端服务器列表变更。根据此特性可以在服务消费者与服务提供者之间建立有状态的session会话。\n源地址哈希算法的缺点在于：除非集群中服务器的非常稳定，基本不会上下线，否则一旦有服务器上线、下线，那么通过源地址哈希算法路由到的服务器是服务器上线、下线前路由到的服务器的概率非常低，如果是session则取不到session，如果是缓存则可能引发\"雪崩\"。如果这么解释不适合明白，可以看我之前的一篇文章MemCache超详细解读，一致性Hash算法部分。\n \n加权轮询（Weight Round Robin）法\n不同的服务器可能机器配置和当前系统的负载并不相同，因此它们的抗压能力也不尽相同，给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而低配置、高负载的机器，则给其分配较低的权重，降低其系统负载。加权轮询法可以很好地处理这一问题，并将请求顺序按照权重分配到后端。加权轮询法的代码实现大致如下：\n```java\n 1 public class WeightRoundRobin\n 2 {\n 3     private static Integer pos;\n 4     \n 5     public static String getServer()\n 6     {\n 7         // 重建一个Map，避免服务器的上下线导致的并发问题\n 8         Map<String, Integer> serverMap = \n 9                 new HashMap<String, Integer>();\n10         serverMap.putAll(IpMap.serverWeightMap);\n11         \n12         // 取得Ip地址List\n13         Set<String> keySet = serverMap.keySet();\n14         Iterator<String> iterator = keySet.iterator();\n15         \n16         List<String> serverList = new ArrayList<String>();\n17         while (iterator.hasNext())\n18         {\n19             String server = iterator.next();\n20             int weight = serverMap.get(server);\n21             for (int i = 0; i < weight; i++)\n22                 serverList.add(server);\n23         }\n24         \n25         String server = null;\n26         synchronized (pos)\n27         {\n28             if (pos > keySet.size())\n29                 pos = 0;\n30             server = serverList.get(pos);\n31             pos ++;\n32         }\n33         \n34         return server;\n35     }\n36 }\n```\n与轮询法类似，只是在获取服务器地址之前增加了一段权重计算的代码，根据权重的大小，将地址重复地增加到服务器地址列表中，权重越大，该服务器每轮所获得的请求数量越多。\n \n加权随机（Weight Random）法\n与加权轮询法类似，加权随机法也是根据后端服务器不同的配置和负载情况来配置不同的权重。不同的是，它是按照权重来随机选择服务器的，而不是顺序。加权随机法的代码实现如下：\n ```java\n1 public class WeightRandom\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         Iterator<String> iterator = keySet.iterator();\n13         \n14         List<String> serverList = new ArrayList<String>();\n15         while (iterator.hasNext())\n16         {\n17             String server = iterator.next();\n18             int weight = serverMap.get(server);\n19             for (int i = 0; i < weight; i++)\n20                 serverList.add(server);\n21         }\n22         \n23         java.util.Random random = new java.util.Random();\n24         int randomPos = random.nextInt(serverList.size());\n25         \n26         return serverList.get(randomPos);\n27     }\n28 }\n ```\n这段代码相当于是随机法和加权轮询法的结合，比较好理解，就不解释了。\n \n最小连接数（Least Connections）法\n前面几种方法费尽心思来实现服务消费者请求次数分配的均衡，当然这么做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是实际情况是否真的如此？实际情况中，请求次数的均衡真的能代表负载的均衡吗？这是一个值得思考的问题。\n上面的问题，再换一个角度来说就是：以后端服务器的视角来观察系统的负载，而非请求发起方来观察。最小连接数法便属于此类。\n最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。由于最小连接数设计服务器连接数的汇总和感知，设计与实现较为繁琐，此处就不说它的实现了。\n","source":"_posts/cs/loadbalance.md","raw":"---\ntitle: loadbalance\ntags:\n  - 标签\ncategories:\n  - 分类\ndate: 2018-10-12 16:56:16\n---\n\n# 负载均衡\n当一台服务器的承受能力达到上限时，那么就需要多台服务器来组成集群，提升应用整体的吞吐量，那么这个时候就涉及到如何合理分配客户端请求到集群中不同的机器，这个过程就叫做负载均衡，当然这也是负载均衡要解决的问题。\n\n### 实现：\n模拟Ip列表：\n```java\n 1 public class IpMap\n 2 {\n 3     // 待路由的Ip列表，Key代表Ip，Value代表该Ip的权重\n 4     public static HashMap<String, Integer> serverWeightMap = \n 5             new HashMap<String, Integer>();\n 6     \n 7     static\n 8     {\n 9         serverWeightMap.put(\"192.168.1.100\", 1);\n10         serverWeightMap.put(\"192.168.1.101\", 1);\n11         // 权重为4\n12         serverWeightMap.put(\"192.168.1.102\", 4);\n13         serverWeightMap.put(\"192.168.1.103\", 1);\n14         serverWeightMap.put(\"192.168.1.104\", 1);\n15         // 权重为3\n16         serverWeightMap.put(\"192.168.1.105\", 3);\n17         serverWeightMap.put(\"192.168.1.106\", 1);\n18         // 权重为2\n19         serverWeightMap.put(\"192.168.1.107\", 2);\n20         serverWeightMap.put(\"192.168.1.108\", 1);\n21         serverWeightMap.put(\"192.168.1.109\", 1);\n22         serverWeightMap.put(\"192.168.1.110\", 1);\n23     }\n24 }\n```\n \n轮询（Round Robin）法\n轮询法即Round Robin法，其代码实现大致如下：\n```java\n 1 public class RoundRobin\n 2 {\n 3     private static Integer pos = 0;\n 4     \n 5     public static String getServer()\n 6     {\n 7         // 重建一个Map，避免服务器的上下线导致的并发问题\n 8         Map<String, Integer> serverMap = \n 9                 new HashMap<String, Integer>();\n10         serverMap.putAll(IpMap.serverWeightMap);\n11         \n12         // 取得Ip地址List\n13         Set<String> keySet = serverMap.keySet();\n14         ArrayList<String> keyList = new ArrayList<String>();\n15         keyList.addAll(keySet);\n16         \n17         String server = null;\n18         synchronized (pos)\n19         {\n20             if (pos >= keySet.size())\n21                 pos = 0;\n22             server = keyList.get(pos);\n23             pos ++;\n24         }\n25         \n26         return server;\n27     }\n28 }\n```\n由于serverWeightMap中的地址列表是动态的，随时可能有机器上线、下线或者宕机，因此为了避免可能出现的并发问题，方法内部要新建局部变量serverMap，现将serverMap中的内容复制到线程本地，以避免被多个线程修改。这样可能会引入新的问题，复制以后serverWeightMap的修改无法反映给serverMap，也就是说这一轮选择服务器的过程中，新增服务器或者下线服务器，负载均衡算法将无法获知。新增无所谓，如果有服务器下线或者宕机，那么可能会访问到不存在的地址。因此，服务调用端需要有相应的容错处理，比如重新发起一次server选择并调用。\n对于当前轮询的位置变量pos，为了保证服务器选择的顺序性，需要在操作时对其加锁，使得同一时刻只能有一个线程可以修改pos的值，否则当pos变量被并发修改，则无法保证服务器选择的顺序性，甚至有可能导致keyList数组越界。\n轮询法的优点在于：试图做到请求转移的绝对均衡。\n轮询法的缺点在于：为了做到请求转移的绝对均衡，必须付出相当大的代价，因为为了保证pos变量修改的互斥性，需要引入重量级的悲观锁synchronized，这将会导致该段轮询代码的并发吞吐量发生明显的下降。\n \n随机（Random）法\n通过系统随机函数，根据后端服务器列表的大小值来随机选择其中一台进行访问。由概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到每一台后端服务器，也就是轮询的效果。\n随机法的代码实现大致如下：\n```java\n 1 public class Random\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         ArrayList<String> keyList = new ArrayList<String>();\n13         keyList.addAll(keySet);\n14         \n15         java.util.Random random = new java.util.Random();\n16         int randomPos = random.nextInt(keyList.size());\n17         \n18         return keyList.get(randomPos);\n19     }\n20 }\n```\n整体代码思路和轮询法一致，先重建serverMap，再获取到server列表。在选取server的时候，通过Random的nextInt方法取0~keyList.size()区间的一个随机值，从而从服务器列表中随机获取到一台服务器地址进行返回。基于概率统计的理论，吞吐量越大，随机算法的效果越接近于轮询算法的效果。\n \n源地址哈希（Hash）法\n源地址哈希的思想是获取客户端访问的IP地址值，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是要访问的服务器的序号。源地址哈希算法的代码实现大致如下：\n```java\n 1 public class Hash\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         ArrayList<String> keyList = new ArrayList<String>();\n13         keyList.addAll(keySet);\n14         \n15         // 在Web应用中可通过HttpServlet的getRemoteIp方法获取\n16         String remoteIp = \"127.0.0.1\";\n17         int hashCode = remoteIp.hashCode();\n18         int serverListSize = keyList.size();\n19         int serverPos = hashCode % serverListSize;\n20         \n21         return keyList.get(serverPos);\n22     }\n23 }\n```\n前两部分和轮询法、随机法一样就不说了，差别在于路由选择部分。通过客户端的ip也就是remoteIp，取得它的Hash值，对服务器列表的大小取模，结果便是选用的服务器在服务器列表中的索引值。\n源地址哈希法的优点在于：保证了相同客户端IP地址将会被哈希到同一台后端服务器，直到后端服务器列表变更。根据此特性可以在服务消费者与服务提供者之间建立有状态的session会话。\n源地址哈希算法的缺点在于：除非集群中服务器的非常稳定，基本不会上下线，否则一旦有服务器上线、下线，那么通过源地址哈希算法路由到的服务器是服务器上线、下线前路由到的服务器的概率非常低，如果是session则取不到session，如果是缓存则可能引发\"雪崩\"。如果这么解释不适合明白，可以看我之前的一篇文章MemCache超详细解读，一致性Hash算法部分。\n \n加权轮询（Weight Round Robin）法\n不同的服务器可能机器配置和当前系统的负载并不相同，因此它们的抗压能力也不尽相同，给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而低配置、高负载的机器，则给其分配较低的权重，降低其系统负载。加权轮询法可以很好地处理这一问题，并将请求顺序按照权重分配到后端。加权轮询法的代码实现大致如下：\n```java\n 1 public class WeightRoundRobin\n 2 {\n 3     private static Integer pos;\n 4     \n 5     public static String getServer()\n 6     {\n 7         // 重建一个Map，避免服务器的上下线导致的并发问题\n 8         Map<String, Integer> serverMap = \n 9                 new HashMap<String, Integer>();\n10         serverMap.putAll(IpMap.serverWeightMap);\n11         \n12         // 取得Ip地址List\n13         Set<String> keySet = serverMap.keySet();\n14         Iterator<String> iterator = keySet.iterator();\n15         \n16         List<String> serverList = new ArrayList<String>();\n17         while (iterator.hasNext())\n18         {\n19             String server = iterator.next();\n20             int weight = serverMap.get(server);\n21             for (int i = 0; i < weight; i++)\n22                 serverList.add(server);\n23         }\n24         \n25         String server = null;\n26         synchronized (pos)\n27         {\n28             if (pos > keySet.size())\n29                 pos = 0;\n30             server = serverList.get(pos);\n31             pos ++;\n32         }\n33         \n34         return server;\n35     }\n36 }\n```\n与轮询法类似，只是在获取服务器地址之前增加了一段权重计算的代码，根据权重的大小，将地址重复地增加到服务器地址列表中，权重越大，该服务器每轮所获得的请求数量越多。\n \n加权随机（Weight Random）法\n与加权轮询法类似，加权随机法也是根据后端服务器不同的配置和负载情况来配置不同的权重。不同的是，它是按照权重来随机选择服务器的，而不是顺序。加权随机法的代码实现如下：\n ```java\n1 public class WeightRandom\n 2 {\n 3     public static String getServer()\n 4     {\n 5         // 重建一个Map，避免服务器的上下线导致的并发问题\n 6         Map<String, Integer> serverMap = \n 7                 new HashMap<String, Integer>();\n 8         serverMap.putAll(IpMap.serverWeightMap);\n 9         \n10         // 取得Ip地址List\n11         Set<String> keySet = serverMap.keySet();\n12         Iterator<String> iterator = keySet.iterator();\n13         \n14         List<String> serverList = new ArrayList<String>();\n15         while (iterator.hasNext())\n16         {\n17             String server = iterator.next();\n18             int weight = serverMap.get(server);\n19             for (int i = 0; i < weight; i++)\n20                 serverList.add(server);\n21         }\n22         \n23         java.util.Random random = new java.util.Random();\n24         int randomPos = random.nextInt(serverList.size());\n25         \n26         return serverList.get(randomPos);\n27     }\n28 }\n ```\n这段代码相当于是随机法和加权轮询法的结合，比较好理解，就不解释了。\n \n最小连接数（Least Connections）法\n前面几种方法费尽心思来实现服务消费者请求次数分配的均衡，当然这么做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是实际情况是否真的如此？实际情况中，请求次数的均衡真的能代表负载的均衡吗？这是一个值得思考的问题。\n上面的问题，再换一个角度来说就是：以后端服务器的视角来观察系统的负载，而非请求发起方来观察。最小连接数法便属于此类。\n最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。由于最小连接数设计服务器连接数的汇总和感知，设计与实现较为繁琐，此处就不说它的实现了。\n","slug":"cs/loadbalance","published":1,"updated":"2018-11-06T05:07:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cf000dwl38kzj1c2c7","content":"<h1 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h1><p>当一台服务器的承受能力达到上限时，那么就需要多台服务器来组成集群，提升应用整体的吞吐量，那么这个时候就涉及到如何合理分配客户端请求到集群中不同的机器，这个过程就叫做负载均衡，当然这也是负载均衡要解决的问题。</p>\n<h3 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h3><p>模拟Ip列表：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IpMap</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"comment\">// 待路由的Ip列表，Key代表Ip，Value代表该Ip的权重</span></span><br><span class=\"line\"> <span class=\"number\">4</span>     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HashMap&lt;String, Integer&gt; serverWeightMap = </span><br><span class=\"line\"> <span class=\"number\">5</span>             <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">6</span>     </span><br><span class=\"line\"> <span class=\"number\">7</span>     <span class=\"keyword\">static</span></span><br><span class=\"line\"> <span class=\"number\">8</span>     &#123;</span><br><span class=\"line\"> <span class=\"number\">9</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.100\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">10</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.101\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">11</span>         <span class=\"comment\">// 权重为4</span></span><br><span class=\"line\"><span class=\"number\">12</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.102\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"number\">13</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.103\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">14</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.104\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"comment\">// 权重为3</span></span><br><span class=\"line\"><span class=\"number\">16</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.105\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">17</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.106\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"comment\">// 权重为2</span></span><br><span class=\"line\"><span class=\"number\">19</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.107\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"number\">20</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.108\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">21</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.109\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">22</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.110\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">23</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">24</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>轮询（Round Robin）法<br>轮询法即Round Robin法，其代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoundRobin</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"number\">4</span>     </span><br><span class=\"line\"> <span class=\"number\">5</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 6     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">8</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">9</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"><span class=\"number\">10</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"><span class=\"number\">11</span>         </span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">13</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">14</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">16</span>         </span><br><span class=\"line\"><span class=\"number\">17</span>         String server = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">synchronized</span> (pos)</span><br><span class=\"line\"><span class=\"number\">19</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">20</span>             <span class=\"keyword\">if</span> (pos &gt;= keySet.size())</span><br><span class=\"line\"><span class=\"number\">21</span>                 pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">22</span>             server = keyList.get(pos);</span><br><span class=\"line\"><span class=\"number\">23</span>             pos ++;</span><br><span class=\"line\"><span class=\"number\">24</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">25</span>         </span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">return</span> server;</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">28</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于serverWeightMap中的地址列表是动态的，随时可能有机器上线、下线或者宕机，因此为了避免可能出现的并发问题，方法内部要新建局部变量serverMap，现将serverMap中的内容复制到线程本地，以避免被多个线程修改。这样可能会引入新的问题，复制以后serverWeightMap的修改无法反映给serverMap，也就是说这一轮选择服务器的过程中，新增服务器或者下线服务器，负载均衡算法将无法获知。新增无所谓，如果有服务器下线或者宕机，那么可能会访问到不存在的地址。因此，服务调用端需要有相应的容错处理，比如重新发起一次server选择并调用。<br>对于当前轮询的位置变量pos，为了保证服务器选择的顺序性，需要在操作时对其加锁，使得同一时刻只能有一个线程可以修改pos的值，否则当pos变量被并发修改，则无法保证服务器选择的顺序性，甚至有可能导致keyList数组越界。<br>轮询法的优点在于：试图做到请求转移的绝对均衡。<br>轮询法的缺点在于：为了做到请求转移的绝对均衡，必须付出相当大的代价，因为为了保证pos变量修改的互斥性，需要引入重量级的悲观锁synchronized，这将会导致该段轮询代码的并发吞吐量发生明显的下降。</p>\n<p>随机（Random）法<br>通过系统随机函数，根据后端服务器列表的大小值来随机选择其中一台进行访问。由概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到每一台后端服务器，也就是轮询的效果。<br>随机法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Random</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">13</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">14</span>         </span><br><span class=\"line\"><span class=\"number\">15</span>         java.util.Random random = <span class=\"keyword\">new</span> java.util.Random();</span><br><span class=\"line\"><span class=\"number\">16</span>         <span class=\"keyword\">int</span> randomPos = random.nextInt(keyList.size());</span><br><span class=\"line\"><span class=\"number\">17</span>         </span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">return</span> keyList.get(randomPos);</span><br><span class=\"line\"><span class=\"number\">19</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">20</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>整体代码思路和轮询法一致，先重建serverMap，再获取到server列表。在选取server的时候，通过Random的nextInt方法取0~keyList.size()区间的一个随机值，从而从服务器列表中随机获取到一台服务器地址进行返回。基于概率统计的理论，吞吐量越大，随机算法的效果越接近于轮询算法的效果。</p>\n<p>源地址哈希（Hash）法<br>源地址哈希的思想是获取客户端访问的IP地址值，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是要访问的服务器的序号。源地址哈希算法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hash</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">13</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">14</span>         </span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"comment\">// 在Web应用中可通过HttpServlet的getRemoteIp方法获取</span></span><br><span class=\"line\"><span class=\"number\">16</span>         String remoteIp = <span class=\"string\">\"127.0.0.1\"</span>;</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"keyword\">int</span> hashCode = remoteIp.hashCode();</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">int</span> serverListSize = keyList.size();</span><br><span class=\"line\"><span class=\"number\">19</span>         <span class=\"keyword\">int</span> serverPos = hashCode % serverListSize;</span><br><span class=\"line\"><span class=\"number\">20</span>         </span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"keyword\">return</span> keyList.get(serverPos);</span><br><span class=\"line\"><span class=\"number\">22</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">23</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>前两部分和轮询法、随机法一样就不说了，差别在于路由选择部分。通过客户端的ip也就是remoteIp，取得它的Hash值，对服务器列表的大小取模，结果便是选用的服务器在服务器列表中的索引值。<br>源地址哈希法的优点在于：保证了相同客户端IP地址将会被哈希到同一台后端服务器，直到后端服务器列表变更。根据此特性可以在服务消费者与服务提供者之间建立有状态的session会话。<br>源地址哈希算法的缺点在于：除非集群中服务器的非常稳定，基本不会上下线，否则一旦有服务器上线、下线，那么通过源地址哈希算法路由到的服务器是服务器上线、下线前路由到的服务器的概率非常低，如果是session则取不到session，如果是缓存则可能引发”雪崩”。如果这么解释不适合明白，可以看我之前的一篇文章MemCache超详细解读，一致性Hash算法部分。</p>\n<p>加权轮询（Weight Round Robin）法<br>不同的服务器可能机器配置和当前系统的负载并不相同，因此它们的抗压能力也不尽相同，给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而低配置、高负载的机器，则给其分配较低的权重，降低其系统负载。加权轮询法可以很好地处理这一问题，并将请求顺序按照权重分配到后端。加权轮询法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightRoundRobin</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer pos;</span><br><span class=\"line\"> <span class=\"number\">4</span>     </span><br><span class=\"line\"> <span class=\"number\">5</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 6     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">8</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">9</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"><span class=\"number\">10</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"><span class=\"number\">11</span>         </span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">13</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">14</span>         Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class=\"line\"><span class=\"number\">15</span>         </span><br><span class=\"line\"><span class=\"number\">16</span>         List&lt;String&gt; serverList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"keyword\">while</span> (iterator.hasNext())</span><br><span class=\"line\"><span class=\"number\">18</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">19</span>             String server = iterator.next();</span><br><span class=\"line\"><span class=\"number\">20</span>             <span class=\"keyword\">int</span> weight = serverMap.get(server);</span><br><span class=\"line\"><span class=\"number\">21</span>             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; weight; i++)</span><br><span class=\"line\"><span class=\"number\">22</span>                 serverList.add(server);</span><br><span class=\"line\"><span class=\"number\">23</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">24</span>         </span><br><span class=\"line\"><span class=\"number\">25</span>         String server = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">synchronized</span> (pos)</span><br><span class=\"line\"><span class=\"number\">27</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">28</span>             <span class=\"keyword\">if</span> (pos &gt; keySet.size())</span><br><span class=\"line\"><span class=\"number\">29</span>                 pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">30</span>             server = serverList.get(pos);</span><br><span class=\"line\"><span class=\"number\">31</span>             pos ++;</span><br><span class=\"line\"><span class=\"number\">32</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">33</span>         </span><br><span class=\"line\"><span class=\"number\">34</span>         <span class=\"keyword\">return</span> server;</span><br><span class=\"line\"><span class=\"number\">35</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">36</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>与轮询法类似，只是在获取服务器地址之前增加了一段权重计算的代码，根据权重的大小，将地址重复地增加到服务器地址列表中，权重越大，该服务器每轮所获得的请求数量越多。</p>\n<p>加权随机（Weight Random）法<br>与加权轮询法类似，加权随机法也是根据后端服务器不同的配置和负载情况来配置不同的权重。不同的是，它是按照权重来随机选择服务器的，而不是顺序。加权随机法的代码实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightRandom</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class=\"line\"><span class=\"number\">13</span>         </span><br><span class=\"line\"><span class=\"number\">14</span>         List&lt;String&gt; serverList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"keyword\">while</span> (iterator.hasNext())</span><br><span class=\"line\"><span class=\"number\">16</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">17</span>             String server = iterator.next();</span><br><span class=\"line\"><span class=\"number\">18</span>             <span class=\"keyword\">int</span> weight = serverMap.get(server);</span><br><span class=\"line\"><span class=\"number\">19</span>             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; weight; i++)</span><br><span class=\"line\"><span class=\"number\">20</span>                 serverList.add(server);</span><br><span class=\"line\"><span class=\"number\">21</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">22</span>         </span><br><span class=\"line\"><span class=\"number\">23</span>         java.util.Random random = <span class=\"keyword\">new</span> java.util.Random();</span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"keyword\">int</span> randomPos = random.nextInt(serverList.size());</span><br><span class=\"line\"><span class=\"number\">25</span>         </span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">return</span> serverList.get(randomPos);</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">28</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码相当于是随机法和加权轮询法的结合，比较好理解，就不解释了。</p>\n<p>最小连接数（Least Connections）法<br>前面几种方法费尽心思来实现服务消费者请求次数分配的均衡，当然这么做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是实际情况是否真的如此？实际情况中，请求次数的均衡真的能代表负载的均衡吗？这是一个值得思考的问题。<br>上面的问题，再换一个角度来说就是：以后端服务器的视角来观察系统的负载，而非请求发起方来观察。最小连接数法便属于此类。<br>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。由于最小连接数设计服务器连接数的汇总和感知，设计与实现较为繁琐，此处就不说它的实现了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h1><p>当一台服务器的承受能力达到上限时，那么就需要多台服务器来组成集群，提升应用整体的吞吐量，那么这个时候就涉及到如何合理分配客户端请求到集群中不同的机器，这个过程就叫做负载均衡，当然这也是负载均衡要解决的问题。</p>\n<h3 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h3><p>模拟Ip列表：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IpMap</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"comment\">// 待路由的Ip列表，Key代表Ip，Value代表该Ip的权重</span></span><br><span class=\"line\"> <span class=\"number\">4</span>     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HashMap&lt;String, Integer&gt; serverWeightMap = </span><br><span class=\"line\"> <span class=\"number\">5</span>             <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">6</span>     </span><br><span class=\"line\"> <span class=\"number\">7</span>     <span class=\"keyword\">static</span></span><br><span class=\"line\"> <span class=\"number\">8</span>     &#123;</span><br><span class=\"line\"> <span class=\"number\">9</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.100\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">10</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.101\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">11</span>         <span class=\"comment\">// 权重为4</span></span><br><span class=\"line\"><span class=\"number\">12</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.102\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"number\">13</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.103\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">14</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.104\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"comment\">// 权重为3</span></span><br><span class=\"line\"><span class=\"number\">16</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.105\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">17</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.106\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"comment\">// 权重为2</span></span><br><span class=\"line\"><span class=\"number\">19</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.107\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"number\">20</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.108\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">21</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.109\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">22</span>         serverWeightMap.put(<span class=\"string\">\"192.168.1.110\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">23</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">24</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>轮询（Round Robin）法<br>轮询法即Round Robin法，其代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoundRobin</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"number\">4</span>     </span><br><span class=\"line\"> <span class=\"number\">5</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 6     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">8</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">9</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"><span class=\"number\">10</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"><span class=\"number\">11</span>         </span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">13</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">14</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">16</span>         </span><br><span class=\"line\"><span class=\"number\">17</span>         String server = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">synchronized</span> (pos)</span><br><span class=\"line\"><span class=\"number\">19</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">20</span>             <span class=\"keyword\">if</span> (pos &gt;= keySet.size())</span><br><span class=\"line\"><span class=\"number\">21</span>                 pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">22</span>             server = keyList.get(pos);</span><br><span class=\"line\"><span class=\"number\">23</span>             pos ++;</span><br><span class=\"line\"><span class=\"number\">24</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">25</span>         </span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">return</span> server;</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">28</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于serverWeightMap中的地址列表是动态的，随时可能有机器上线、下线或者宕机，因此为了避免可能出现的并发问题，方法内部要新建局部变量serverMap，现将serverMap中的内容复制到线程本地，以避免被多个线程修改。这样可能会引入新的问题，复制以后serverWeightMap的修改无法反映给serverMap，也就是说这一轮选择服务器的过程中，新增服务器或者下线服务器，负载均衡算法将无法获知。新增无所谓，如果有服务器下线或者宕机，那么可能会访问到不存在的地址。因此，服务调用端需要有相应的容错处理，比如重新发起一次server选择并调用。<br>对于当前轮询的位置变量pos，为了保证服务器选择的顺序性，需要在操作时对其加锁，使得同一时刻只能有一个线程可以修改pos的值，否则当pos变量被并发修改，则无法保证服务器选择的顺序性，甚至有可能导致keyList数组越界。<br>轮询法的优点在于：试图做到请求转移的绝对均衡。<br>轮询法的缺点在于：为了做到请求转移的绝对均衡，必须付出相当大的代价，因为为了保证pos变量修改的互斥性，需要引入重量级的悲观锁synchronized，这将会导致该段轮询代码的并发吞吐量发生明显的下降。</p>\n<p>随机（Random）法<br>通过系统随机函数，根据后端服务器列表的大小值来随机选择其中一台进行访问。由概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到每一台后端服务器，也就是轮询的效果。<br>随机法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Random</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">13</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">14</span>         </span><br><span class=\"line\"><span class=\"number\">15</span>         java.util.Random random = <span class=\"keyword\">new</span> java.util.Random();</span><br><span class=\"line\"><span class=\"number\">16</span>         <span class=\"keyword\">int</span> randomPos = random.nextInt(keyList.size());</span><br><span class=\"line\"><span class=\"number\">17</span>         </span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">return</span> keyList.get(randomPos);</span><br><span class=\"line\"><span class=\"number\">19</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">20</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>整体代码思路和轮询法一致，先重建serverMap，再获取到server列表。在选取server的时候，通过Random的nextInt方法取0~keyList.size()区间的一个随机值，从而从服务器列表中随机获取到一台服务器地址进行返回。基于概率统计的理论，吞吐量越大，随机算法的效果越接近于轮询算法的效果。</p>\n<p>源地址哈希（Hash）法<br>源地址哈希的思想是获取客户端访问的IP地址值，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是要访问的服务器的序号。源地址哈希算法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hash</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         ArrayList&lt;String&gt; keyList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">13</span>         keyList.addAll(keySet);</span><br><span class=\"line\"><span class=\"number\">14</span>         </span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"comment\">// 在Web应用中可通过HttpServlet的getRemoteIp方法获取</span></span><br><span class=\"line\"><span class=\"number\">16</span>         String remoteIp = <span class=\"string\">\"127.0.0.1\"</span>;</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"keyword\">int</span> hashCode = remoteIp.hashCode();</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">int</span> serverListSize = keyList.size();</span><br><span class=\"line\"><span class=\"number\">19</span>         <span class=\"keyword\">int</span> serverPos = hashCode % serverListSize;</span><br><span class=\"line\"><span class=\"number\">20</span>         </span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"keyword\">return</span> keyList.get(serverPos);</span><br><span class=\"line\"><span class=\"number\">22</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">23</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>前两部分和轮询法、随机法一样就不说了，差别在于路由选择部分。通过客户端的ip也就是remoteIp，取得它的Hash值，对服务器列表的大小取模，结果便是选用的服务器在服务器列表中的索引值。<br>源地址哈希法的优点在于：保证了相同客户端IP地址将会被哈希到同一台后端服务器，直到后端服务器列表变更。根据此特性可以在服务消费者与服务提供者之间建立有状态的session会话。<br>源地址哈希算法的缺点在于：除非集群中服务器的非常稳定，基本不会上下线，否则一旦有服务器上线、下线，那么通过源地址哈希算法路由到的服务器是服务器上线、下线前路由到的服务器的概率非常低，如果是session则取不到session，如果是缓存则可能引发”雪崩”。如果这么解释不适合明白，可以看我之前的一篇文章MemCache超详细解读，一致性Hash算法部分。</p>\n<p>加权轮询（Weight Round Robin）法<br>不同的服务器可能机器配置和当前系统的负载并不相同，因此它们的抗压能力也不尽相同，给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而低配置、高负载的机器，则给其分配较低的权重，降低其系统负载。加权轮询法可以很好地处理这一问题，并将请求顺序按照权重分配到后端。加权轮询法的代码实现大致如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightRoundRobin</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer pos;</span><br><span class=\"line\"> <span class=\"number\">4</span>     </span><br><span class=\"line\"> <span class=\"number\">5</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 6     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">8</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">9</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"><span class=\"number\">10</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"><span class=\"number\">11</span>         </span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">13</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">14</span>         Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class=\"line\"><span class=\"number\">15</span>         </span><br><span class=\"line\"><span class=\"number\">16</span>         List&lt;String&gt; serverList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"keyword\">while</span> (iterator.hasNext())</span><br><span class=\"line\"><span class=\"number\">18</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">19</span>             String server = iterator.next();</span><br><span class=\"line\"><span class=\"number\">20</span>             <span class=\"keyword\">int</span> weight = serverMap.get(server);</span><br><span class=\"line\"><span class=\"number\">21</span>             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; weight; i++)</span><br><span class=\"line\"><span class=\"number\">22</span>                 serverList.add(server);</span><br><span class=\"line\"><span class=\"number\">23</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">24</span>         </span><br><span class=\"line\"><span class=\"number\">25</span>         String server = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">synchronized</span> (pos)</span><br><span class=\"line\"><span class=\"number\">27</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">28</span>             <span class=\"keyword\">if</span> (pos &gt; keySet.size())</span><br><span class=\"line\"><span class=\"number\">29</span>                 pos = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">30</span>             server = serverList.get(pos);</span><br><span class=\"line\"><span class=\"number\">31</span>             pos ++;</span><br><span class=\"line\"><span class=\"number\">32</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">33</span>         </span><br><span class=\"line\"><span class=\"number\">34</span>         <span class=\"keyword\">return</span> server;</span><br><span class=\"line\"><span class=\"number\">35</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">36</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>与轮询法类似，只是在获取服务器地址之前增加了一段权重计算的代码，根据权重的大小，将地址重复地增加到服务器地址列表中，权重越大，该服务器每轮所获得的请求数量越多。</p>\n<p>加权随机（Weight Random）法<br>与加权轮询法类似，加权随机法也是根据后端服务器不同的配置和负载情况来配置不同的权重。不同的是，它是按照权重来随机选择服务器的，而不是顺序。加权随机法的代码实现如下：<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightRandom</span></span></span><br><span class=\"line\"><span class=\"class\"> 2 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4     </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">// 重建一个Map，避免服务器的上下线导致的并发问题</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         Map&lt;String, Integer&gt; serverMap = </span><br><span class=\"line\"> <span class=\"number\">7</span>                 <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"> <span class=\"number\">8</span>         serverMap.putAll(IpMap.serverWeightMap);</span><br><span class=\"line\"> <span class=\"number\">9</span>         </span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"comment\">// 取得Ip地址List</span></span><br><span class=\"line\"><span class=\"number\">11</span>         Set&lt;String&gt; keySet = serverMap.keySet();</span><br><span class=\"line\"><span class=\"number\">12</span>         Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class=\"line\"><span class=\"number\">13</span>         </span><br><span class=\"line\"><span class=\"number\">14</span>         List&lt;String&gt; serverList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"keyword\">while</span> (iterator.hasNext())</span><br><span class=\"line\"><span class=\"number\">16</span>         &#123;</span><br><span class=\"line\"><span class=\"number\">17</span>             String server = iterator.next();</span><br><span class=\"line\"><span class=\"number\">18</span>             <span class=\"keyword\">int</span> weight = serverMap.get(server);</span><br><span class=\"line\"><span class=\"number\">19</span>             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; weight; i++)</span><br><span class=\"line\"><span class=\"number\">20</span>                 serverList.add(server);</span><br><span class=\"line\"><span class=\"number\">21</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">22</span>         </span><br><span class=\"line\"><span class=\"number\">23</span>         java.util.Random random = <span class=\"keyword\">new</span> java.util.Random();</span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"keyword\">int</span> randomPos = random.nextInt(serverList.size());</span><br><span class=\"line\"><span class=\"number\">25</span>         </span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">return</span> serverList.get(randomPos);</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">28</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码相当于是随机法和加权轮询法的结合，比较好理解，就不解释了。</p>\n<p>最小连接数（Least Connections）法<br>前面几种方法费尽心思来实现服务消费者请求次数分配的均衡，当然这么做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是实际情况是否真的如此？实际情况中，请求次数的均衡真的能代表负载的均衡吗？这是一个值得思考的问题。<br>上面的问题，再换一个角度来说就是：以后端服务器的视角来观察系统的负载，而非请求发起方来观察。最小连接数法便属于此类。<br>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。由于最小连接数设计服务器连接数的汇总和感知，设计与实现较为繁琐，此处就不说它的实现了。</p>\n"},{"title":"protobuf_intro","date":"2019-10-07T12:55:39.000Z","_content":"\n# 为什么要使用protobuf\n\n最近的项目中，一直使用Json做数据传输。Json用起来的确很方便。但相对于protobuf数据量更大些。做一个移动端应用，为用户省点流量还是很有必要的。正好也可以学习一下protobuf的使用\n\n跟Json相比protobuf性能更高，更加规范\n\n- 编解码速度快，数据体积小\n- 使用统一的规范，不用再担心大小写不同导致解析失败等蛋疼的问题了\n\n但也失去了一些便利性\n\n- 改动协议字段，需要重新生成文件。\n- 数据没有可读性\n\n# 安装\n\n在go中使用protobuf，有两个可选用的包goprotobuf（go官方出品）和gogoprotobuf。\ngogoprotobuf完全兼容google protobuf，它生成的代码质量和编解码性能均比goprotobuf高一些\n\n## 安装protoc\n\n首先去[https://github.com/google/pro…](https://github.com/google/protobuf/releases) 上下载protobuf的编译器protoc，windows上可以直接下到exe文件(linux则需要编译)，最后将下载好的可执行文件拷贝到$GOPATH的bin目录下($GOPATH/bin目录最好添加到系统环境变量里)\n\n## 安装protobuf库文件\n\n```\ngo get github.com/golang/protobuf/proto\n```\n\n## goprotobuf\n\n### 安装插件\n\n```\ngo get github.com/golang/protobuf/protoc-gen-go\n```\n\n### 生成go文件\n\n```\nprotoc --go_out=. *.proto\n```\n\n## gogoprotobuf\n\n### 安装插件\n\ngogoprotobuf有两个插件可以使用\n\n- protoc-gen-gogo：和protoc-gen-go生成的文件差不多，性能也几乎一样(稍微快一点点)\n- protoc-gen-gofast：生成的文件更复杂，性能也更高(快5-7倍)\n\n```\n//gogo\ngo get github.com/gogo/protobuf/protoc-gen-gogo\n\n//gofast\ngo get github.com/gogo/protobuf/protoc-gen-gofast\n```\n\n### 安装gogoprotobuf库文件【插件的依赖】\n\n```\ngo get github.com/gogo/protobuf/proto\ngo get github.com/gogo/protobuf/gogoproto  //这个不装也没关系\n```\n\n### 生成go文件\n\n```\n//gogo\nprotoc --gogo_out=. *.proto\n\n//gofast\nprotoc --gofast_out=. *.proto\n```\n\n# 性能测试\n\n这里只是简单的用go test测试了一下\n\n```\n//goprotobuf\n\"编码\"：447ns/op\n\"解码\"：422ns/op\n\n//gogoprotobuf-go\n\"编码\"：433ns/op\n\"解码\"：427ns/op\n\n//gogoprotobuf-fast\n\"编码\"：112ns/op\n\"解码\"：112ns/op\n```\n\n# go_protobuf的简单使用\n\n## test.proto\n\n```\nsyntax = \"proto3\";  //指定版本，必须要写（proto3、proto2）  \npackage proto;\n\nenum FOO \n{ \n    X = 0; \n};\n\n//message是固定的。UserInfo是类名，可以随意指定，符合规范即可\nmessage UserInfo{\n    string message = 1;   //消息\n    int32 length = 2;    //消息大小\n    int32 cnt = 3;      //消息计数\n}\n```\n\n## client_protobuf.go\n\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"net\"\n    \"os\"\n    stProto \"proto\"\n    \"time\"\n\n    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个\n    \"github.com/golang/protobuf/proto\"\n    //\"github.com/gogo/protobuf/proto\"\n)\n\nfunc main() {\n    strIP := \"localhost:6600\"\n    var conn net.Conn\n    var err error\n\n    //连接服务器\n    for conn, err = net.Dial(\"tcp\", strIP); err != nil; conn, err = net.Dial(\"tcp\", strIP) {\n        fmt.Println(\"connect\", strIP, \"fail\")\n        time.Sleep(time.Second)\n        fmt.Println(\"reconnect...\")\n    }\n    fmt.Println(\"connect\", strIP, \"success\")\n    defer conn.Close()\n\n    //发送消息\n    cnt := 0\n    sender := bufio.NewScanner(os.Stdin)\n    for sender.Scan() {\n        cnt++\n        stSend := &stProto.UserInfo{\n            Message: sender.Text(),\n            Length:  *proto.Int(len(sender.Text())),\n            Cnt:     *proto.Int(cnt),\n        }\n\n        //protobuf编码\n        pData, err := proto.Marshal(stSend)\n        if err != nil {\n            panic(err)\n        }\n\n        //发送\n        conn.Write(pData)\n        if sender.Text() == \"stop\" {\n            return\n        }\n    }\n}\n```\n\n## server_protobuf.go\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"os\"\n    stProto \"proto\"\n\n    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个\n    \"github.com/golang/protobuf/proto\"\n    //\"github.com/gogo/protobuf/proto\"\n)\n\nfunc main() {\n    //监听\n    listener, err := net.Listen(\"tcp\", \"localhost:6600\")\n    if err != nil {\n        panic(err)\n    }\n\n    for {\n        conn, err := listener.Accept()\n        if err != nil {\n            panic(err)\n        }\n        fmt.Println(\"new connect\", conn.RemoteAddr())\n        go readMessage(conn)\n    }\n}\n\n//接收消息\nfunc readMessage(conn net.Conn) {\n    defer conn.Close()\n    buf := make([]byte, 4096, 4096)\n    for {\n        //读消息\n        cnt, err := conn.Read(buf)\n        if err != nil {\n            panic(err)\n        }\n\n        stReceive := &stProto.UserInfo{}\n        pData := buf[:cnt]\n\n        //protobuf解码\n        err = proto.Unmarshal(pData, stReceive)\n        if err != nil {\n            panic(err)\n        }\n\n        fmt.Println(\"receive\", conn.RemoteAddr(), stReceive)\n        if stReceive.Message == \"stop\" {\n            os.Exit(1)\n        }\n    }\n}\n```\n\n\n\n# gRPC-go\n\n### 安装\n\n```\ngo get -u github.com/golang/protobuf/{proto,protoc-gen-go}\ngo get -u google.golang.org/grpc\nprotoc --go_out=plugins=grpc:. *.proto\n```\n\n\n\n### gRPC仓库\n\n```\n# 引入包\ngoogle.golang.org/grpc\n\n# github\nhttps://github.com/grpc/grpc-go\n\n```\n\n### gRPC文档\n\n```\nhttps://godoc.org/google.golang.org/grpc\n```\n\n\n\ngRPC需要使用插件：`plugins=grpc`，冒号`:`表示分割，点`.`表示当前目录\n\n```\nprotoc -I/usr/local/include -I. -I$GOPATH/src -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis --go_out=plugins=grpc:. *.proto\n```\n\n\n\n#### protoc工作原理\n\n[protoc原理](<https://hitzhangjie.github.io/2017/05/23/Protoc%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90(%E7%B2%BE%E5%8D%8E%E7%89%88).html>)\n\n\n\n# gRPC gateway\n\n#### 仓库\n\n```\n# 包含grpc=>restful调用，swagger文档生成\nhttps://github.com/grpc-ecosystem/grpc-gateway\n\n```\n\n","source":"_posts/cs/protobuf-intro.md","raw":"---\ntitle: protobuf_intro\ntags:\n  - protobuf\ncategories:\n  - protobuf\ndate: 2019-10-07 20:55:39\n---\n\n# 为什么要使用protobuf\n\n最近的项目中，一直使用Json做数据传输。Json用起来的确很方便。但相对于protobuf数据量更大些。做一个移动端应用，为用户省点流量还是很有必要的。正好也可以学习一下protobuf的使用\n\n跟Json相比protobuf性能更高，更加规范\n\n- 编解码速度快，数据体积小\n- 使用统一的规范，不用再担心大小写不同导致解析失败等蛋疼的问题了\n\n但也失去了一些便利性\n\n- 改动协议字段，需要重新生成文件。\n- 数据没有可读性\n\n# 安装\n\n在go中使用protobuf，有两个可选用的包goprotobuf（go官方出品）和gogoprotobuf。\ngogoprotobuf完全兼容google protobuf，它生成的代码质量和编解码性能均比goprotobuf高一些\n\n## 安装protoc\n\n首先去[https://github.com/google/pro…](https://github.com/google/protobuf/releases) 上下载protobuf的编译器protoc，windows上可以直接下到exe文件(linux则需要编译)，最后将下载好的可执行文件拷贝到$GOPATH的bin目录下($GOPATH/bin目录最好添加到系统环境变量里)\n\n## 安装protobuf库文件\n\n```\ngo get github.com/golang/protobuf/proto\n```\n\n## goprotobuf\n\n### 安装插件\n\n```\ngo get github.com/golang/protobuf/protoc-gen-go\n```\n\n### 生成go文件\n\n```\nprotoc --go_out=. *.proto\n```\n\n## gogoprotobuf\n\n### 安装插件\n\ngogoprotobuf有两个插件可以使用\n\n- protoc-gen-gogo：和protoc-gen-go生成的文件差不多，性能也几乎一样(稍微快一点点)\n- protoc-gen-gofast：生成的文件更复杂，性能也更高(快5-7倍)\n\n```\n//gogo\ngo get github.com/gogo/protobuf/protoc-gen-gogo\n\n//gofast\ngo get github.com/gogo/protobuf/protoc-gen-gofast\n```\n\n### 安装gogoprotobuf库文件【插件的依赖】\n\n```\ngo get github.com/gogo/protobuf/proto\ngo get github.com/gogo/protobuf/gogoproto  //这个不装也没关系\n```\n\n### 生成go文件\n\n```\n//gogo\nprotoc --gogo_out=. *.proto\n\n//gofast\nprotoc --gofast_out=. *.proto\n```\n\n# 性能测试\n\n这里只是简单的用go test测试了一下\n\n```\n//goprotobuf\n\"编码\"：447ns/op\n\"解码\"：422ns/op\n\n//gogoprotobuf-go\n\"编码\"：433ns/op\n\"解码\"：427ns/op\n\n//gogoprotobuf-fast\n\"编码\"：112ns/op\n\"解码\"：112ns/op\n```\n\n# go_protobuf的简单使用\n\n## test.proto\n\n```\nsyntax = \"proto3\";  //指定版本，必须要写（proto3、proto2）  \npackage proto;\n\nenum FOO \n{ \n    X = 0; \n};\n\n//message是固定的。UserInfo是类名，可以随意指定，符合规范即可\nmessage UserInfo{\n    string message = 1;   //消息\n    int32 length = 2;    //消息大小\n    int32 cnt = 3;      //消息计数\n}\n```\n\n## client_protobuf.go\n\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"net\"\n    \"os\"\n    stProto \"proto\"\n    \"time\"\n\n    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个\n    \"github.com/golang/protobuf/proto\"\n    //\"github.com/gogo/protobuf/proto\"\n)\n\nfunc main() {\n    strIP := \"localhost:6600\"\n    var conn net.Conn\n    var err error\n\n    //连接服务器\n    for conn, err = net.Dial(\"tcp\", strIP); err != nil; conn, err = net.Dial(\"tcp\", strIP) {\n        fmt.Println(\"connect\", strIP, \"fail\")\n        time.Sleep(time.Second)\n        fmt.Println(\"reconnect...\")\n    }\n    fmt.Println(\"connect\", strIP, \"success\")\n    defer conn.Close()\n\n    //发送消息\n    cnt := 0\n    sender := bufio.NewScanner(os.Stdin)\n    for sender.Scan() {\n        cnt++\n        stSend := &stProto.UserInfo{\n            Message: sender.Text(),\n            Length:  *proto.Int(len(sender.Text())),\n            Cnt:     *proto.Int(cnt),\n        }\n\n        //protobuf编码\n        pData, err := proto.Marshal(stSend)\n        if err != nil {\n            panic(err)\n        }\n\n        //发送\n        conn.Write(pData)\n        if sender.Text() == \"stop\" {\n            return\n        }\n    }\n}\n```\n\n## server_protobuf.go\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"os\"\n    stProto \"proto\"\n\n    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个\n    \"github.com/golang/protobuf/proto\"\n    //\"github.com/gogo/protobuf/proto\"\n)\n\nfunc main() {\n    //监听\n    listener, err := net.Listen(\"tcp\", \"localhost:6600\")\n    if err != nil {\n        panic(err)\n    }\n\n    for {\n        conn, err := listener.Accept()\n        if err != nil {\n            panic(err)\n        }\n        fmt.Println(\"new connect\", conn.RemoteAddr())\n        go readMessage(conn)\n    }\n}\n\n//接收消息\nfunc readMessage(conn net.Conn) {\n    defer conn.Close()\n    buf := make([]byte, 4096, 4096)\n    for {\n        //读消息\n        cnt, err := conn.Read(buf)\n        if err != nil {\n            panic(err)\n        }\n\n        stReceive := &stProto.UserInfo{}\n        pData := buf[:cnt]\n\n        //protobuf解码\n        err = proto.Unmarshal(pData, stReceive)\n        if err != nil {\n            panic(err)\n        }\n\n        fmt.Println(\"receive\", conn.RemoteAddr(), stReceive)\n        if stReceive.Message == \"stop\" {\n            os.Exit(1)\n        }\n    }\n}\n```\n\n\n\n# gRPC-go\n\n### 安装\n\n```\ngo get -u github.com/golang/protobuf/{proto,protoc-gen-go}\ngo get -u google.golang.org/grpc\nprotoc --go_out=plugins=grpc:. *.proto\n```\n\n\n\n### gRPC仓库\n\n```\n# 引入包\ngoogle.golang.org/grpc\n\n# github\nhttps://github.com/grpc/grpc-go\n\n```\n\n### gRPC文档\n\n```\nhttps://godoc.org/google.golang.org/grpc\n```\n\n\n\ngRPC需要使用插件：`plugins=grpc`，冒号`:`表示分割，点`.`表示当前目录\n\n```\nprotoc -I/usr/local/include -I. -I$GOPATH/src -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis --go_out=plugins=grpc:. *.proto\n```\n\n\n\n#### protoc工作原理\n\n[protoc原理](<https://hitzhangjie.github.io/2017/05/23/Protoc%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90(%E7%B2%BE%E5%8D%8E%E7%89%88).html>)\n\n\n\n# gRPC gateway\n\n#### 仓库\n\n```\n# 包含grpc=>restful调用，swagger文档生成\nhttps://github.com/grpc-ecosystem/grpc-gateway\n\n```\n\n","slug":"cs/protobuf-intro","published":1,"updated":"2019-10-07T12:57:09.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cg000hwl38u1waiumf","content":"<h1 id=\"为什么要使用protobuf\"><a href=\"#为什么要使用protobuf\" class=\"headerlink\" title=\"为什么要使用protobuf\"></a>为什么要使用protobuf</h1><p>最近的项目中，一直使用Json做数据传输。Json用起来的确很方便。但相对于protobuf数据量更大些。做一个移动端应用，为用户省点流量还是很有必要的。正好也可以学习一下protobuf的使用</p>\n<p>跟Json相比protobuf性能更高，更加规范</p>\n<ul>\n<li>编解码速度快，数据体积小</li>\n<li>使用统一的规范，不用再担心大小写不同导致解析失败等蛋疼的问题了</li>\n</ul>\n<p>但也失去了一些便利性</p>\n<ul>\n<li>改动协议字段，需要重新生成文件。</li>\n<li>数据没有可读性</li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>在go中使用protobuf，有两个可选用的包goprotobuf（go官方出品）和gogoprotobuf。<br>gogoprotobuf完全兼容google protobuf，它生成的代码质量和编解码性能均比goprotobuf高一些</p>\n<h2 id=\"安装protoc\"><a href=\"#安装protoc\" class=\"headerlink\" title=\"安装protoc\"></a>安装protoc</h2><p>首先去<a href=\"https://github.com/google/protobuf/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/google/pro…</a> 上下载protobuf的编译器protoc，windows上可以直接下到exe文件(linux则需要编译)，最后将下载好的可执行文件拷贝到$GOPATH的bin目录下($GOPATH/bin目录最好添加到系统环境变量里)</p>\n<h2 id=\"安装protobuf库文件\"><a href=\"#安装protobuf库文件\" class=\"headerlink\" title=\"安装protobuf库文件\"></a>安装protobuf库文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/golang/protobuf/proto</span><br></pre></td></tr></table></figure>\n<h2 id=\"goprotobuf\"><a href=\"#goprotobuf\" class=\"headerlink\" title=\"goprotobuf\"></a>goprotobuf</h2><h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成go文件\"><a href=\"#生成go文件\" class=\"headerlink\" title=\"生成go文件\"></a>生成go文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=. *.proto</span><br></pre></td></tr></table></figure>\n<h2 id=\"gogoprotobuf\"><a href=\"#gogoprotobuf\" class=\"headerlink\" title=\"gogoprotobuf\"></a>gogoprotobuf</h2><h3 id=\"安装插件-1\"><a href=\"#安装插件-1\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>gogoprotobuf有两个插件可以使用</p>\n<ul>\n<li>protoc-gen-gogo：和protoc-gen-go生成的文件差不多，性能也几乎一样(稍微快一点点)</li>\n<li>protoc-gen-gofast：生成的文件更复杂，性能也更高(快5-7倍)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//gogo</span><br><span class=\"line\">go get github.com/gogo/protobuf/protoc-gen-gogo</span><br><span class=\"line\"></span><br><span class=\"line\">//gofast</span><br><span class=\"line\">go get github.com/gogo/protobuf/protoc-gen-gofast</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装gogoprotobuf库文件【插件的依赖】\"><a href=\"#安装gogoprotobuf库文件【插件的依赖】\" class=\"headerlink\" title=\"安装gogoprotobuf库文件【插件的依赖】\"></a>安装gogoprotobuf库文件【插件的依赖】</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/gogo/protobuf/proto</span><br><span class=\"line\">go get github.com/gogo/protobuf/gogoproto  //这个不装也没关系</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成go文件-1\"><a href=\"#生成go文件-1\" class=\"headerlink\" title=\"生成go文件\"></a>生成go文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//gogo</span><br><span class=\"line\">protoc --gogo_out=. *.proto</span><br><span class=\"line\"></span><br><span class=\"line\">//gofast</span><br><span class=\"line\">protoc --gofast_out=. *.proto</span><br></pre></td></tr></table></figure>\n<h1 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h1><p>这里只是简单的用go test测试了一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//goprotobuf</span><br><span class=\"line\">&quot;编码&quot;：447ns/op</span><br><span class=\"line\">&quot;解码&quot;：422ns/op</span><br><span class=\"line\"></span><br><span class=\"line\">//gogoprotobuf-go</span><br><span class=\"line\">&quot;编码&quot;：433ns/op</span><br><span class=\"line\">&quot;解码&quot;：427ns/op</span><br><span class=\"line\"></span><br><span class=\"line\">//gogoprotobuf-fast</span><br><span class=\"line\">&quot;编码&quot;：112ns/op</span><br><span class=\"line\">&quot;解码&quot;：112ns/op</span><br></pre></td></tr></table></figure>\n<h1 id=\"go-protobuf的简单使用\"><a href=\"#go-protobuf的简单使用\" class=\"headerlink\" title=\"go_protobuf的简单使用\"></a>go_protobuf的简单使用</h1><h2 id=\"test-proto\"><a href=\"#test-proto\" class=\"headerlink\" title=\"test.proto\"></a>test.proto</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;  //指定版本，必须要写（proto3、proto2）  </span><br><span class=\"line\">package proto;</span><br><span class=\"line\"></span><br><span class=\"line\">enum FOO </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    X = 0; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//message是固定的。UserInfo是类名，可以随意指定，符合规范即可</span><br><span class=\"line\">message UserInfo&#123;</span><br><span class=\"line\">    string message = 1;   //消息</span><br><span class=\"line\">    int32 length = 2;    //消息大小</span><br><span class=\"line\">    int32 cnt = 3;      //消息计数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"client-protobuf-go\"><a href=\"#client-protobuf-go\" class=\"headerlink\" title=\"client_protobuf.go\"></a>client_protobuf.go</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;net&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">    stProto &quot;proto&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个</span><br><span class=\"line\">    &quot;github.com/golang/protobuf/proto&quot;</span><br><span class=\"line\">    //&quot;github.com/gogo/protobuf/proto&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    strIP := &quot;localhost:6600&quot;</span><br><span class=\"line\">    var conn net.Conn</span><br><span class=\"line\">    var err error</span><br><span class=\"line\"></span><br><span class=\"line\">    //连接服务器</span><br><span class=\"line\">    for conn, err = net.Dial(&quot;tcp&quot;, strIP); err != nil; conn, err = net.Dial(&quot;tcp&quot;, strIP) &#123;</span><br><span class=\"line\">        fmt.Println(&quot;connect&quot;, strIP, &quot;fail&quot;)</span><br><span class=\"line\">        time.Sleep(time.Second)</span><br><span class=\"line\">        fmt.Println(&quot;reconnect...&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(&quot;connect&quot;, strIP, &quot;success&quot;)</span><br><span class=\"line\">    defer conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    //发送消息</span><br><span class=\"line\">    cnt := 0</span><br><span class=\"line\">    sender := bufio.NewScanner(os.Stdin)</span><br><span class=\"line\">    for sender.Scan() &#123;</span><br><span class=\"line\">        cnt++</span><br><span class=\"line\">        stSend := &amp;stProto.UserInfo&#123;</span><br><span class=\"line\">            Message: sender.Text(),</span><br><span class=\"line\">            Length:  *proto.Int(len(sender.Text())),</span><br><span class=\"line\">            Cnt:     *proto.Int(cnt),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //protobuf编码</span><br><span class=\"line\">        pData, err := proto.Marshal(stSend)</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //发送</span><br><span class=\"line\">        conn.Write(pData)</span><br><span class=\"line\">        if sender.Text() == &quot;stop&quot; &#123;</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"server-protobuf-go\"><a href=\"#server-protobuf-go\" class=\"headerlink\" title=\"server_protobuf.go\"></a>server_protobuf.go</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;net&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">    stProto &quot;proto&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个</span><br><span class=\"line\">    &quot;github.com/golang/protobuf/proto&quot;</span><br><span class=\"line\">    //&quot;github.com/gogo/protobuf/proto&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    //监听</span><br><span class=\"line\">    listener, err := net.Listen(&quot;tcp&quot;, &quot;localhost:6600&quot;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        conn, err := listener.Accept()</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(&quot;new connect&quot;, conn.RemoteAddr())</span><br><span class=\"line\">        go readMessage(conn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//接收消息</span><br><span class=\"line\">func readMessage(conn net.Conn) &#123;</span><br><span class=\"line\">    defer conn.Close()</span><br><span class=\"line\">    buf := make([]byte, 4096, 4096)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        //读消息</span><br><span class=\"line\">        cnt, err := conn.Read(buf)</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stReceive := &amp;stProto.UserInfo&#123;&#125;</span><br><span class=\"line\">        pData := buf[:cnt]</span><br><span class=\"line\"></span><br><span class=\"line\">        //protobuf解码</span><br><span class=\"line\">        err = proto.Unmarshal(pData, stReceive)</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(&quot;receive&quot;, conn.RemoteAddr(), stReceive)</span><br><span class=\"line\">        if stReceive.Message == &quot;stop&quot; &#123;</span><br><span class=\"line\">            os.Exit(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"gRPC-go\"><a href=\"#gRPC-go\" class=\"headerlink\" title=\"gRPC-go\"></a>gRPC-go</h1><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/&#123;proto,protoc-gen-go&#125;</span><br><span class=\"line\">go get -u google.golang.org/grpc</span><br><span class=\"line\">protoc --go_out=plugins=grpc:. *.proto</span><br></pre></td></tr></table></figure>\n<h3 id=\"gRPC仓库\"><a href=\"#gRPC仓库\" class=\"headerlink\" title=\"gRPC仓库\"></a>gRPC仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 引入包</span><br><span class=\"line\">google.golang.org/grpc</span><br><span class=\"line\"></span><br><span class=\"line\"># github</span><br><span class=\"line\">https://github.com/grpc/grpc-go</span><br></pre></td></tr></table></figure>\n<h3 id=\"gRPC文档\"><a href=\"#gRPC文档\" class=\"headerlink\" title=\"gRPC文档\"></a>gRPC文档</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://godoc.org/google.golang.org/grpc</span><br></pre></td></tr></table></figure>\n<p>gRPC需要使用插件：<code>plugins=grpc</code>，冒号<code>:</code>表示分割，点<code>.</code>表示当前目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc -I/usr/local/include -I. -I$GOPATH/src -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis --go_out=plugins=grpc:. *.proto</span><br></pre></td></tr></table></figure>\n<h4 id=\"protoc工作原理\"><a href=\"#protoc工作原理\" class=\"headerlink\" title=\"protoc工作原理\"></a>protoc工作原理</h4><p><a href=\"https://hitzhangjie.github.io/2017/05/23/Protoc%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90(%E7%B2%BE%E5%8D%8E%E7%89%88\" target=\"_blank\" rel=\"noopener\">protoc原理</a>.html&gt;)</p>\n<h1 id=\"gRPC-gateway\"><a href=\"#gRPC-gateway\" class=\"headerlink\" title=\"gRPC gateway\"></a>gRPC gateway</h1><h4 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 包含grpc=&gt;restful调用，swagger文档生成</span><br><span class=\"line\">https://github.com/grpc-ecosystem/grpc-gateway</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么要使用protobuf\"><a href=\"#为什么要使用protobuf\" class=\"headerlink\" title=\"为什么要使用protobuf\"></a>为什么要使用protobuf</h1><p>最近的项目中，一直使用Json做数据传输。Json用起来的确很方便。但相对于protobuf数据量更大些。做一个移动端应用，为用户省点流量还是很有必要的。正好也可以学习一下protobuf的使用</p>\n<p>跟Json相比protobuf性能更高，更加规范</p>\n<ul>\n<li>编解码速度快，数据体积小</li>\n<li>使用统一的规范，不用再担心大小写不同导致解析失败等蛋疼的问题了</li>\n</ul>\n<p>但也失去了一些便利性</p>\n<ul>\n<li>改动协议字段，需要重新生成文件。</li>\n<li>数据没有可读性</li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>在go中使用protobuf，有两个可选用的包goprotobuf（go官方出品）和gogoprotobuf。<br>gogoprotobuf完全兼容google protobuf，它生成的代码质量和编解码性能均比goprotobuf高一些</p>\n<h2 id=\"安装protoc\"><a href=\"#安装protoc\" class=\"headerlink\" title=\"安装protoc\"></a>安装protoc</h2><p>首先去<a href=\"https://github.com/google/protobuf/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/google/pro…</a> 上下载protobuf的编译器protoc，windows上可以直接下到exe文件(linux则需要编译)，最后将下载好的可执行文件拷贝到$GOPATH的bin目录下($GOPATH/bin目录最好添加到系统环境变量里)</p>\n<h2 id=\"安装protobuf库文件\"><a href=\"#安装protobuf库文件\" class=\"headerlink\" title=\"安装protobuf库文件\"></a>安装protobuf库文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/golang/protobuf/proto</span><br></pre></td></tr></table></figure>\n<h2 id=\"goprotobuf\"><a href=\"#goprotobuf\" class=\"headerlink\" title=\"goprotobuf\"></a>goprotobuf</h2><h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成go文件\"><a href=\"#生成go文件\" class=\"headerlink\" title=\"生成go文件\"></a>生成go文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=. *.proto</span><br></pre></td></tr></table></figure>\n<h2 id=\"gogoprotobuf\"><a href=\"#gogoprotobuf\" class=\"headerlink\" title=\"gogoprotobuf\"></a>gogoprotobuf</h2><h3 id=\"安装插件-1\"><a href=\"#安装插件-1\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>gogoprotobuf有两个插件可以使用</p>\n<ul>\n<li>protoc-gen-gogo：和protoc-gen-go生成的文件差不多，性能也几乎一样(稍微快一点点)</li>\n<li>protoc-gen-gofast：生成的文件更复杂，性能也更高(快5-7倍)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//gogo</span><br><span class=\"line\">go get github.com/gogo/protobuf/protoc-gen-gogo</span><br><span class=\"line\"></span><br><span class=\"line\">//gofast</span><br><span class=\"line\">go get github.com/gogo/protobuf/protoc-gen-gofast</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装gogoprotobuf库文件【插件的依赖】\"><a href=\"#安装gogoprotobuf库文件【插件的依赖】\" class=\"headerlink\" title=\"安装gogoprotobuf库文件【插件的依赖】\"></a>安装gogoprotobuf库文件【插件的依赖】</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/gogo/protobuf/proto</span><br><span class=\"line\">go get github.com/gogo/protobuf/gogoproto  //这个不装也没关系</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成go文件-1\"><a href=\"#生成go文件-1\" class=\"headerlink\" title=\"生成go文件\"></a>生成go文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//gogo</span><br><span class=\"line\">protoc --gogo_out=. *.proto</span><br><span class=\"line\"></span><br><span class=\"line\">//gofast</span><br><span class=\"line\">protoc --gofast_out=. *.proto</span><br></pre></td></tr></table></figure>\n<h1 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h1><p>这里只是简单的用go test测试了一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//goprotobuf</span><br><span class=\"line\">&quot;编码&quot;：447ns/op</span><br><span class=\"line\">&quot;解码&quot;：422ns/op</span><br><span class=\"line\"></span><br><span class=\"line\">//gogoprotobuf-go</span><br><span class=\"line\">&quot;编码&quot;：433ns/op</span><br><span class=\"line\">&quot;解码&quot;：427ns/op</span><br><span class=\"line\"></span><br><span class=\"line\">//gogoprotobuf-fast</span><br><span class=\"line\">&quot;编码&quot;：112ns/op</span><br><span class=\"line\">&quot;解码&quot;：112ns/op</span><br></pre></td></tr></table></figure>\n<h1 id=\"go-protobuf的简单使用\"><a href=\"#go-protobuf的简单使用\" class=\"headerlink\" title=\"go_protobuf的简单使用\"></a>go_protobuf的简单使用</h1><h2 id=\"test-proto\"><a href=\"#test-proto\" class=\"headerlink\" title=\"test.proto\"></a>test.proto</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;  //指定版本，必须要写（proto3、proto2）  </span><br><span class=\"line\">package proto;</span><br><span class=\"line\"></span><br><span class=\"line\">enum FOO </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    X = 0; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//message是固定的。UserInfo是类名，可以随意指定，符合规范即可</span><br><span class=\"line\">message UserInfo&#123;</span><br><span class=\"line\">    string message = 1;   //消息</span><br><span class=\"line\">    int32 length = 2;    //消息大小</span><br><span class=\"line\">    int32 cnt = 3;      //消息计数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"client-protobuf-go\"><a href=\"#client-protobuf-go\" class=\"headerlink\" title=\"client_protobuf.go\"></a>client_protobuf.go</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;net&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">    stProto &quot;proto&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个</span><br><span class=\"line\">    &quot;github.com/golang/protobuf/proto&quot;</span><br><span class=\"line\">    //&quot;github.com/gogo/protobuf/proto&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    strIP := &quot;localhost:6600&quot;</span><br><span class=\"line\">    var conn net.Conn</span><br><span class=\"line\">    var err error</span><br><span class=\"line\"></span><br><span class=\"line\">    //连接服务器</span><br><span class=\"line\">    for conn, err = net.Dial(&quot;tcp&quot;, strIP); err != nil; conn, err = net.Dial(&quot;tcp&quot;, strIP) &#123;</span><br><span class=\"line\">        fmt.Println(&quot;connect&quot;, strIP, &quot;fail&quot;)</span><br><span class=\"line\">        time.Sleep(time.Second)</span><br><span class=\"line\">        fmt.Println(&quot;reconnect...&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(&quot;connect&quot;, strIP, &quot;success&quot;)</span><br><span class=\"line\">    defer conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    //发送消息</span><br><span class=\"line\">    cnt := 0</span><br><span class=\"line\">    sender := bufio.NewScanner(os.Stdin)</span><br><span class=\"line\">    for sender.Scan() &#123;</span><br><span class=\"line\">        cnt++</span><br><span class=\"line\">        stSend := &amp;stProto.UserInfo&#123;</span><br><span class=\"line\">            Message: sender.Text(),</span><br><span class=\"line\">            Length:  *proto.Int(len(sender.Text())),</span><br><span class=\"line\">            Cnt:     *proto.Int(cnt),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //protobuf编码</span><br><span class=\"line\">        pData, err := proto.Marshal(stSend)</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //发送</span><br><span class=\"line\">        conn.Write(pData)</span><br><span class=\"line\">        if sender.Text() == &quot;stop&quot; &#123;</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"server-protobuf-go\"><a href=\"#server-protobuf-go\" class=\"headerlink\" title=\"server_protobuf.go\"></a>server_protobuf.go</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;net&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">    stProto &quot;proto&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    //protobuf编解码库,下面两个库是相互兼容的，可以使用其中任意一个</span><br><span class=\"line\">    &quot;github.com/golang/protobuf/proto&quot;</span><br><span class=\"line\">    //&quot;github.com/gogo/protobuf/proto&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    //监听</span><br><span class=\"line\">    listener, err := net.Listen(&quot;tcp&quot;, &quot;localhost:6600&quot;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        conn, err := listener.Accept()</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(&quot;new connect&quot;, conn.RemoteAddr())</span><br><span class=\"line\">        go readMessage(conn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//接收消息</span><br><span class=\"line\">func readMessage(conn net.Conn) &#123;</span><br><span class=\"line\">    defer conn.Close()</span><br><span class=\"line\">    buf := make([]byte, 4096, 4096)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        //读消息</span><br><span class=\"line\">        cnt, err := conn.Read(buf)</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stReceive := &amp;stProto.UserInfo&#123;&#125;</span><br><span class=\"line\">        pData := buf[:cnt]</span><br><span class=\"line\"></span><br><span class=\"line\">        //protobuf解码</span><br><span class=\"line\">        err = proto.Unmarshal(pData, stReceive)</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(&quot;receive&quot;, conn.RemoteAddr(), stReceive)</span><br><span class=\"line\">        if stReceive.Message == &quot;stop&quot; &#123;</span><br><span class=\"line\">            os.Exit(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"gRPC-go\"><a href=\"#gRPC-go\" class=\"headerlink\" title=\"gRPC-go\"></a>gRPC-go</h1><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/&#123;proto,protoc-gen-go&#125;</span><br><span class=\"line\">go get -u google.golang.org/grpc</span><br><span class=\"line\">protoc --go_out=plugins=grpc:. *.proto</span><br></pre></td></tr></table></figure>\n<h3 id=\"gRPC仓库\"><a href=\"#gRPC仓库\" class=\"headerlink\" title=\"gRPC仓库\"></a>gRPC仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 引入包</span><br><span class=\"line\">google.golang.org/grpc</span><br><span class=\"line\"></span><br><span class=\"line\"># github</span><br><span class=\"line\">https://github.com/grpc/grpc-go</span><br></pre></td></tr></table></figure>\n<h3 id=\"gRPC文档\"><a href=\"#gRPC文档\" class=\"headerlink\" title=\"gRPC文档\"></a>gRPC文档</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://godoc.org/google.golang.org/grpc</span><br></pre></td></tr></table></figure>\n<p>gRPC需要使用插件：<code>plugins=grpc</code>，冒号<code>:</code>表示分割，点<code>.</code>表示当前目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc -I/usr/local/include -I. -I$GOPATH/src -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis --go_out=plugins=grpc:. *.proto</span><br></pre></td></tr></table></figure>\n<h4 id=\"protoc工作原理\"><a href=\"#protoc工作原理\" class=\"headerlink\" title=\"protoc工作原理\"></a>protoc工作原理</h4><p><a href=\"https://hitzhangjie.github.io/2017/05/23/Protoc%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90(%E7%B2%BE%E5%8D%8E%E7%89%88\" target=\"_blank\" rel=\"noopener\">protoc原理</a>.html&gt;)</p>\n<h1 id=\"gRPC-gateway\"><a href=\"#gRPC-gateway\" class=\"headerlink\" title=\"gRPC gateway\"></a>gRPC gateway</h1><h4 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 包含grpc=&gt;restful调用，swagger文档生成</span><br><span class=\"line\">https://github.com/grpc-ecosystem/grpc-gateway</span><br></pre></td></tr></table></figure>\n"},{"title":"mapreduce-intro","date":"2018-09-20T12:50:28.000Z","_content":"# 1 什么是MapReduce？\n　　Map本意可以理解为地图，映射（面向对象语言都有Map集合），这里我们可以理解为从现实世界获得或产生映射。Reduce本意是减少的意思，这里我们可以理解为归并前面Map产生的映射。\n\n# 2 MapReduce的编程模型\n　　按照google的MapReduce论文所说的，MapReduce的编程模型的原理是：利用一个输入key/value对集合来产生一个输出的key/value对集合。MapReduce库的用户用两个函数表达这个计算：Map和Reduce。用户自定义的Map函数接受一个输入的key/value对值，然后产生一个中间key/value对值的集合。MapReduce库把所有具有相同中间key值的中间value值集合在一起后传递给Reduce函数。用户自定义的Reduce函数接受一个中间key的值和相关的一个value值的集合。Reduce函数合并这些value值，形成一个较小的value值的集合。\n\n# 3 MapReduce实现\n　　通过将Map调用的输入数据自动分割为M个数据片段的集合，Map调用被分布到多台机器上执行。输入的数据片段能够在不同的机器上并行处理。使用分区函数将Map调用产生的中间key值分成R个不同分区（例如，hash(key) mod R），Reduce调用也被分布到多台机器上执行。分区数量（R）和分区函数由用户来指定。\n\n　　MapReduce实现的大概过程如下：\n\n　　1.用户程序首先调用的MapReduce库将输入文件分成M个数据片度，每个数据片段的大小一般从16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后用户程序在集群中创建大量的程序副本。\n\n　　2.这些程序副本中的有一个特殊的程序master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。 \n\n　　3.被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value对，然后把key/value对传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value对，并缓存在内存中。 \n\n　　4.缓存中的key/value对通过分区函数分成R个区域，之后周期性的写入到本地磁盘上，会产生R个临时文件。缓存的key/value对在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker。 \n\n　　5.当Reduce worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map worker所在主机的磁盘上读取这些缓存数据。当Reduce worker读取了所有的中间数据（这个时候所有的Map任务都执行完了）后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。 \n\n　　6.Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合（这个集合是由Reduce worker产生的，它存放的是同一个key对应的value值）传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。 \n\n　　上面过程中的排序很容易理解，关键是分区，这一步最终决定该键值对未来会交给哪个reduce任务，如统计单词出现的次数可以用前面说的hash(key) mod R来分区，如果是对数据进行排序则应该根据key的分布进行分区。\n\n\n\n图1 MapReduce过程\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvgargrvu2j20cs0k7dgf.jpg)\n \n\n# 4 例子\n　　假设我们需要处理一批有关天气的数据，其格式如下： 按照ASCII码存储，每行一条记录，每一行字符从0开始计数，第15个到第18个字符为年，第25个到第29个字符为温度，其中第25位是符号+/-，现在需要统计出每年的最高温度。\n\n　　0067011990999991950051507+0000+ \n　　0043011990999991950051512+0022+ \n　　0043011990999991950051518-0011+ \n　　0043012650999991949032412+0111+ \n　　0043012650999991949032418+0078+ \n　　0067011990999991937051507+0001+ \n　　0043011990999991937051512-0002+ \n　　0043011990999991945051518+0001+ \n　　0043012650999991945032412+0002+ \n　　0043012650999991945032418+0078+ \n\n　　MapReduce主要包括两个步骤：Map和Reduce 每一步都有key/value对作为输入和输出： \n\n　　Map阶段的key/value对的格式是由输入的格式所决定的，如果是默认的TextInputFormat，则每行作为一个记录进程处理，其中key为此行的开头相对于文件的起始位置，value就是此行的字符文本，Map阶段的输出的key/value对的格式必须同Reduce阶段的输入key/value对的格式相对应\n\n　　对于上面的例子，在map过程，输入的key-value对如下： \n　　(0 ,0067011990999991950051507+0000+) \n　　(1 ,0043011990999991950051512+0022+) \n　　(2 ,0043011990999991950051518-0011+) \n　　(3 ,0043012650999991949032412+0111+) \n　　(4 ,0043012650999991949032418+0078+) \n　　(5 ,0067011990999991937051507+0001+) \n　　(6 ,0043011990999991937051512-0002+) \n　　(7 ,0043011990999991945051518+0001+) \n　　(8 ,0043012650999991945032412+0002+) \n　　(9 ,0043012650999991945032418+0078+) \n\n　　将上面的数据作为用户编写的map函数的输入，通过对每一行字符串的解析，得到年/温度的key/value对作为输出： \n　　(1950, 0) \n　　(1950, 22) \n　　(1950, -11) \n　　(1949, 111) \n　　(1949, 78) \n　　(1937, 1) \n　　(1937, -2) \n　　(1945, 1) \n　　(1945, 2) \n　　(1945, 78) \n\n　　在Reduce过程，将map过程中的输出，按照相同的key将value放到同一个列表中作为用户写的reduce函数的输入 \n　　(1950, [0, 22, –11]) \n　　(1949, [111, 78]) \n　　(1937, [1, -2]) \n　　(1945, [1, 2, 78]) \n\n\n　　在Reduce过程中，在列表中选择出最大的温度，将年/最大温度的key/value作为输出： \n　　(1950, 22) \n　　(1949, 111) \n　　(1937, 1) \n　　(1945, 78) \n\n\n　　其逻辑过程可用如下图表示： \n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvgarwkdo0j20hw03zjt4.jpg)\n\n\n\n 参考：\n\nhttp://desert3.iteye.com/blog/865243\n\nhttp://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html\n\nhttp://www.cnblogs.com/MitiskySean/p/3320451.html","source":"_posts/distributed/mapreduce-intro.md","raw":"---\ntitle: mapreduce-intro\ntags:\n  - mapreduce\ncategories:\n  - 分布式\ndate: 2018-09-20 20:50:28\n---\n# 1 什么是MapReduce？\n　　Map本意可以理解为地图，映射（面向对象语言都有Map集合），这里我们可以理解为从现实世界获得或产生映射。Reduce本意是减少的意思，这里我们可以理解为归并前面Map产生的映射。\n\n# 2 MapReduce的编程模型\n　　按照google的MapReduce论文所说的，MapReduce的编程模型的原理是：利用一个输入key/value对集合来产生一个输出的key/value对集合。MapReduce库的用户用两个函数表达这个计算：Map和Reduce。用户自定义的Map函数接受一个输入的key/value对值，然后产生一个中间key/value对值的集合。MapReduce库把所有具有相同中间key值的中间value值集合在一起后传递给Reduce函数。用户自定义的Reduce函数接受一个中间key的值和相关的一个value值的集合。Reduce函数合并这些value值，形成一个较小的value值的集合。\n\n# 3 MapReduce实现\n　　通过将Map调用的输入数据自动分割为M个数据片段的集合，Map调用被分布到多台机器上执行。输入的数据片段能够在不同的机器上并行处理。使用分区函数将Map调用产生的中间key值分成R个不同分区（例如，hash(key) mod R），Reduce调用也被分布到多台机器上执行。分区数量（R）和分区函数由用户来指定。\n\n　　MapReduce实现的大概过程如下：\n\n　　1.用户程序首先调用的MapReduce库将输入文件分成M个数据片度，每个数据片段的大小一般从16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后用户程序在集群中创建大量的程序副本。\n\n　　2.这些程序副本中的有一个特殊的程序master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。 \n\n　　3.被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value对，然后把key/value对传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value对，并缓存在内存中。 \n\n　　4.缓存中的key/value对通过分区函数分成R个区域，之后周期性的写入到本地磁盘上，会产生R个临时文件。缓存的key/value对在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker。 \n\n　　5.当Reduce worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map worker所在主机的磁盘上读取这些缓存数据。当Reduce worker读取了所有的中间数据（这个时候所有的Map任务都执行完了）后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。 \n\n　　6.Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合（这个集合是由Reduce worker产生的，它存放的是同一个key对应的value值）传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。 \n\n　　上面过程中的排序很容易理解，关键是分区，这一步最终决定该键值对未来会交给哪个reduce任务，如统计单词出现的次数可以用前面说的hash(key) mod R来分区，如果是对数据进行排序则应该根据key的分布进行分区。\n\n\n\n图1 MapReduce过程\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvgargrvu2j20cs0k7dgf.jpg)\n \n\n# 4 例子\n　　假设我们需要处理一批有关天气的数据，其格式如下： 按照ASCII码存储，每行一条记录，每一行字符从0开始计数，第15个到第18个字符为年，第25个到第29个字符为温度，其中第25位是符号+/-，现在需要统计出每年的最高温度。\n\n　　0067011990999991950051507+0000+ \n　　0043011990999991950051512+0022+ \n　　0043011990999991950051518-0011+ \n　　0043012650999991949032412+0111+ \n　　0043012650999991949032418+0078+ \n　　0067011990999991937051507+0001+ \n　　0043011990999991937051512-0002+ \n　　0043011990999991945051518+0001+ \n　　0043012650999991945032412+0002+ \n　　0043012650999991945032418+0078+ \n\n　　MapReduce主要包括两个步骤：Map和Reduce 每一步都有key/value对作为输入和输出： \n\n　　Map阶段的key/value对的格式是由输入的格式所决定的，如果是默认的TextInputFormat，则每行作为一个记录进程处理，其中key为此行的开头相对于文件的起始位置，value就是此行的字符文本，Map阶段的输出的key/value对的格式必须同Reduce阶段的输入key/value对的格式相对应\n\n　　对于上面的例子，在map过程，输入的key-value对如下： \n　　(0 ,0067011990999991950051507+0000+) \n　　(1 ,0043011990999991950051512+0022+) \n　　(2 ,0043011990999991950051518-0011+) \n　　(3 ,0043012650999991949032412+0111+) \n　　(4 ,0043012650999991949032418+0078+) \n　　(5 ,0067011990999991937051507+0001+) \n　　(6 ,0043011990999991937051512-0002+) \n　　(7 ,0043011990999991945051518+0001+) \n　　(8 ,0043012650999991945032412+0002+) \n　　(9 ,0043012650999991945032418+0078+) \n\n　　将上面的数据作为用户编写的map函数的输入，通过对每一行字符串的解析，得到年/温度的key/value对作为输出： \n　　(1950, 0) \n　　(1950, 22) \n　　(1950, -11) \n　　(1949, 111) \n　　(1949, 78) \n　　(1937, 1) \n　　(1937, -2) \n　　(1945, 1) \n　　(1945, 2) \n　　(1945, 78) \n\n　　在Reduce过程，将map过程中的输出，按照相同的key将value放到同一个列表中作为用户写的reduce函数的输入 \n　　(1950, [0, 22, –11]) \n　　(1949, [111, 78]) \n　　(1937, [1, -2]) \n　　(1945, [1, 2, 78]) \n\n\n　　在Reduce过程中，在列表中选择出最大的温度，将年/最大温度的key/value作为输出： \n　　(1950, 22) \n　　(1949, 111) \n　　(1937, 1) \n　　(1945, 78) \n\n\n　　其逻辑过程可用如下图表示： \n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvgarwkdo0j20hw03zjt4.jpg)\n\n\n\n 参考：\n\nhttp://desert3.iteye.com/blog/865243\n\nhttp://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html\n\nhttp://www.cnblogs.com/MitiskySean/p/3320451.html","slug":"distributed/mapreduce-intro","published":1,"updated":"2018-11-20T11:27:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0ch000iwl384vk9a7an","content":"<h1 id=\"1-什么是MapReduce？\"><a href=\"#1-什么是MapReduce？\" class=\"headerlink\" title=\"1 什么是MapReduce？\"></a>1 什么是MapReduce？</h1><p>　　Map本意可以理解为地图，映射（面向对象语言都有Map集合），这里我们可以理解为从现实世界获得或产生映射。Reduce本意是减少的意思，这里我们可以理解为归并前面Map产生的映射。</p>\n<h1 id=\"2-MapReduce的编程模型\"><a href=\"#2-MapReduce的编程模型\" class=\"headerlink\" title=\"2 MapReduce的编程模型\"></a>2 MapReduce的编程模型</h1><p>　　按照google的MapReduce论文所说的，MapReduce的编程模型的原理是：利用一个输入key/value对集合来产生一个输出的key/value对集合。MapReduce库的用户用两个函数表达这个计算：Map和Reduce。用户自定义的Map函数接受一个输入的key/value对值，然后产生一个中间key/value对值的集合。MapReduce库把所有具有相同中间key值的中间value值集合在一起后传递给Reduce函数。用户自定义的Reduce函数接受一个中间key的值和相关的一个value值的集合。Reduce函数合并这些value值，形成一个较小的value值的集合。</p>\n<h1 id=\"3-MapReduce实现\"><a href=\"#3-MapReduce实现\" class=\"headerlink\" title=\"3 MapReduce实现\"></a>3 MapReduce实现</h1><p>　　通过将Map调用的输入数据自动分割为M个数据片段的集合，Map调用被分布到多台机器上执行。输入的数据片段能够在不同的机器上并行处理。使用分区函数将Map调用产生的中间key值分成R个不同分区（例如，hash(key) mod R），Reduce调用也被分布到多台机器上执行。分区数量（R）和分区函数由用户来指定。</p>\n<p>　　MapReduce实现的大概过程如下：</p>\n<p>　　1.用户程序首先调用的MapReduce库将输入文件分成M个数据片度，每个数据片段的大小一般从16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后用户程序在集群中创建大量的程序副本。</p>\n<p>　　2.这些程序副本中的有一个特殊的程序master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。 </p>\n<p>　　3.被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value对，然后把key/value对传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value对，并缓存在内存中。 </p>\n<p>　　4.缓存中的key/value对通过分区函数分成R个区域，之后周期性的写入到本地磁盘上，会产生R个临时文件。缓存的key/value对在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker。 </p>\n<p>　　5.当Reduce worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map worker所在主机的磁盘上读取这些缓存数据。当Reduce worker读取了所有的中间数据（这个时候所有的Map任务都执行完了）后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。 </p>\n<p>　　6.Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合（这个集合是由Reduce worker产生的，它存放的是同一个key对应的value值）传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。 </p>\n<p>　　上面过程中的排序很容易理解，关键是分区，这一步最终决定该键值对未来会交给哪个reduce任务，如统计单词出现的次数可以用前面说的hash(key) mod R来分区，如果是对数据进行排序则应该根据key的分布进行分区。</p>\n<p>图1 MapReduce过程<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvgargrvu2j20cs0k7dgf.jpg\" alt=\"\"></p>\n<h1 id=\"4-例子\"><a href=\"#4-例子\" class=\"headerlink\" title=\"4 例子\"></a>4 例子</h1><p>　　假设我们需要处理一批有关天气的数据，其格式如下： 按照ASCII码存储，每行一条记录，每一行字符从0开始计数，第15个到第18个字符为年，第25个到第29个字符为温度，其中第25位是符号+/-，现在需要统计出每年的最高温度。</p>\n<p>　　0067011990999991950051507+0000+<br>　　0043011990999991950051512+0022+<br>　　0043011990999991950051518-0011+<br>　　0043012650999991949032412+0111+<br>　　0043012650999991949032418+0078+<br>　　0067011990999991937051507+0001+<br>　　0043011990999991937051512-0002+<br>　　0043011990999991945051518+0001+<br>　　0043012650999991945032412+0002+<br>　　0043012650999991945032418+0078+ </p>\n<p>　　MapReduce主要包括两个步骤：Map和Reduce 每一步都有key/value对作为输入和输出： </p>\n<p>　　Map阶段的key/value对的格式是由输入的格式所决定的，如果是默认的TextInputFormat，则每行作为一个记录进程处理，其中key为此行的开头相对于文件的起始位置，value就是此行的字符文本，Map阶段的输出的key/value对的格式必须同Reduce阶段的输入key/value对的格式相对应</p>\n<p>　　对于上面的例子，在map过程，输入的key-value对如下：<br>　　(0 ,0067011990999991950051507+0000+)<br>　　(1 ,0043011990999991950051512+0022+)<br>　　(2 ,0043011990999991950051518-0011+)<br>　　(3 ,0043012650999991949032412+0111+)<br>　　(4 ,0043012650999991949032418+0078+)<br>　　(5 ,0067011990999991937051507+0001+)<br>　　(6 ,0043011990999991937051512-0002+)<br>　　(7 ,0043011990999991945051518+0001+)<br>　　(8 ,0043012650999991945032412+0002+)<br>　　(9 ,0043012650999991945032418+0078+) </p>\n<p>　　将上面的数据作为用户编写的map函数的输入，通过对每一行字符串的解析，得到年/温度的key/value对作为输出：<br>　　(1950, 0)<br>　　(1950, 22)<br>　　(1950, -11)<br>　　(1949, 111)<br>　　(1949, 78)<br>　　(1937, 1)<br>　　(1937, -2)<br>　　(1945, 1)<br>　　(1945, 2)<br>　　(1945, 78) </p>\n<p>　　在Reduce过程，将map过程中的输出，按照相同的key将value放到同一个列表中作为用户写的reduce函数的输入<br>　　(1950, [0, 22, –11])<br>　　(1949, [111, 78])<br>　　(1937, [1, -2])<br>　　(1945, [1, 2, 78]) </p>\n<p>　　在Reduce过程中，在列表中选择出最大的温度，将年/最大温度的key/value作为输出：<br>　　(1950, 22)<br>　　(1949, 111)<br>　　(1937, 1)<br>　　(1945, 78) </p>\n<p>　　其逻辑过程可用如下图表示：<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvgarwkdo0j20hw03zjt4.jpg\" alt=\"\"></p>\n<p> 参考：</p>\n<p><a href=\"http://desert3.iteye.com/blog/865243\" target=\"_blank\" rel=\"noopener\">http://desert3.iteye.com/blog/865243</a></p>\n<p><a href=\"http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html</a></p>\n<p><a href=\"http://www.cnblogs.com/MitiskySean/p/3320451.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/MitiskySean/p/3320451.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-什么是MapReduce？\"><a href=\"#1-什么是MapReduce？\" class=\"headerlink\" title=\"1 什么是MapReduce？\"></a>1 什么是MapReduce？</h1><p>　　Map本意可以理解为地图，映射（面向对象语言都有Map集合），这里我们可以理解为从现实世界获得或产生映射。Reduce本意是减少的意思，这里我们可以理解为归并前面Map产生的映射。</p>\n<h1 id=\"2-MapReduce的编程模型\"><a href=\"#2-MapReduce的编程模型\" class=\"headerlink\" title=\"2 MapReduce的编程模型\"></a>2 MapReduce的编程模型</h1><p>　　按照google的MapReduce论文所说的，MapReduce的编程模型的原理是：利用一个输入key/value对集合来产生一个输出的key/value对集合。MapReduce库的用户用两个函数表达这个计算：Map和Reduce。用户自定义的Map函数接受一个输入的key/value对值，然后产生一个中间key/value对值的集合。MapReduce库把所有具有相同中间key值的中间value值集合在一起后传递给Reduce函数。用户自定义的Reduce函数接受一个中间key的值和相关的一个value值的集合。Reduce函数合并这些value值，形成一个较小的value值的集合。</p>\n<h1 id=\"3-MapReduce实现\"><a href=\"#3-MapReduce实现\" class=\"headerlink\" title=\"3 MapReduce实现\"></a>3 MapReduce实现</h1><p>　　通过将Map调用的输入数据自动分割为M个数据片段的集合，Map调用被分布到多台机器上执行。输入的数据片段能够在不同的机器上并行处理。使用分区函数将Map调用产生的中间key值分成R个不同分区（例如，hash(key) mod R），Reduce调用也被分布到多台机器上执行。分区数量（R）和分区函数由用户来指定。</p>\n<p>　　MapReduce实现的大概过程如下：</p>\n<p>　　1.用户程序首先调用的MapReduce库将输入文件分成M个数据片度，每个数据片段的大小一般从16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后用户程序在集群中创建大量的程序副本。</p>\n<p>　　2.这些程序副本中的有一个特殊的程序master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。 </p>\n<p>　　3.被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value对，然后把key/value对传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value对，并缓存在内存中。 </p>\n<p>　　4.缓存中的key/value对通过分区函数分成R个区域，之后周期性的写入到本地磁盘上，会产生R个临时文件。缓存的key/value对在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker。 </p>\n<p>　　5.当Reduce worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map worker所在主机的磁盘上读取这些缓存数据。当Reduce worker读取了所有的中间数据（这个时候所有的Map任务都执行完了）后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。 </p>\n<p>　　6.Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合（这个集合是由Reduce worker产生的，它存放的是同一个key对应的value值）传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。 </p>\n<p>　　上面过程中的排序很容易理解，关键是分区，这一步最终决定该键值对未来会交给哪个reduce任务，如统计单词出现的次数可以用前面说的hash(key) mod R来分区，如果是对数据进行排序则应该根据key的分布进行分区。</p>\n<p>图1 MapReduce过程<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvgargrvu2j20cs0k7dgf.jpg\" alt=\"\"></p>\n<h1 id=\"4-例子\"><a href=\"#4-例子\" class=\"headerlink\" title=\"4 例子\"></a>4 例子</h1><p>　　假设我们需要处理一批有关天气的数据，其格式如下： 按照ASCII码存储，每行一条记录，每一行字符从0开始计数，第15个到第18个字符为年，第25个到第29个字符为温度，其中第25位是符号+/-，现在需要统计出每年的最高温度。</p>\n<p>　　0067011990999991950051507+0000+<br>　　0043011990999991950051512+0022+<br>　　0043011990999991950051518-0011+<br>　　0043012650999991949032412+0111+<br>　　0043012650999991949032418+0078+<br>　　0067011990999991937051507+0001+<br>　　0043011990999991937051512-0002+<br>　　0043011990999991945051518+0001+<br>　　0043012650999991945032412+0002+<br>　　0043012650999991945032418+0078+ </p>\n<p>　　MapReduce主要包括两个步骤：Map和Reduce 每一步都有key/value对作为输入和输出： </p>\n<p>　　Map阶段的key/value对的格式是由输入的格式所决定的，如果是默认的TextInputFormat，则每行作为一个记录进程处理，其中key为此行的开头相对于文件的起始位置，value就是此行的字符文本，Map阶段的输出的key/value对的格式必须同Reduce阶段的输入key/value对的格式相对应</p>\n<p>　　对于上面的例子，在map过程，输入的key-value对如下：<br>　　(0 ,0067011990999991950051507+0000+)<br>　　(1 ,0043011990999991950051512+0022+)<br>　　(2 ,0043011990999991950051518-0011+)<br>　　(3 ,0043012650999991949032412+0111+)<br>　　(4 ,0043012650999991949032418+0078+)<br>　　(5 ,0067011990999991937051507+0001+)<br>　　(6 ,0043011990999991937051512-0002+)<br>　　(7 ,0043011990999991945051518+0001+)<br>　　(8 ,0043012650999991945032412+0002+)<br>　　(9 ,0043012650999991945032418+0078+) </p>\n<p>　　将上面的数据作为用户编写的map函数的输入，通过对每一行字符串的解析，得到年/温度的key/value对作为输出：<br>　　(1950, 0)<br>　　(1950, 22)<br>　　(1950, -11)<br>　　(1949, 111)<br>　　(1949, 78)<br>　　(1937, 1)<br>　　(1937, -2)<br>　　(1945, 1)<br>　　(1945, 2)<br>　　(1945, 78) </p>\n<p>　　在Reduce过程，将map过程中的输出，按照相同的key将value放到同一个列表中作为用户写的reduce函数的输入<br>　　(1950, [0, 22, –11])<br>　　(1949, [111, 78])<br>　　(1937, [1, -2])<br>　　(1945, [1, 2, 78]) </p>\n<p>　　在Reduce过程中，在列表中选择出最大的温度，将年/最大温度的key/value作为输出：<br>　　(1950, 22)<br>　　(1949, 111)<br>　　(1937, 1)<br>　　(1945, 78) </p>\n<p>　　其逻辑过程可用如下图表示：<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvgarwkdo0j20hw03zjt4.jpg\" alt=\"\"></p>\n<p> 参考：</p>\n<p><a href=\"http://desert3.iteye.com/blog/865243\" target=\"_blank\" rel=\"noopener\">http://desert3.iteye.com/blog/865243</a></p>\n<p><a href=\"http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html</a></p>\n<p><a href=\"http://www.cnblogs.com/MitiskySean/p/3320451.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/MitiskySean/p/3320451.html</a></p>\n"},{"title":"cap原理","date":"2019-10-07T13:16:27.000Z","_content":"# CAP分布式理论理解\n\n```\nCA without P：如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此CA的系统更多的是允许分区后各子系统依然保持CA。\n\nCP without A：如果不要求A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。\n\nAP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。\n```\n\n\n","source":"_posts/distributed/cap原理.md","raw":"---\ntitle: cap原理\ntags:\n  - cap\ncategories:\n  - cap\ndate: 2019-10-07 21:16:27\n---\n# CAP分布式理论理解\n\n```\nCA without P：如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此CA的系统更多的是允许分区后各子系统依然保持CA。\n\nCP without A：如果不要求A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。\n\nAP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。\n```\n\n\n","slug":"distributed/cap原理","published":1,"updated":"2019-10-07T13:16:52.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0ck000mwl38aublogr8","content":"<h1 id=\"CAP分布式理论理解\"><a href=\"#CAP分布式理论理解\" class=\"headerlink\" title=\"CAP分布式理论理解\"></a>CAP分布式理论理解</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CA without P：如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此CA的系统更多的是允许分区后各子系统依然保持CA。</span><br><span class=\"line\"></span><br><span class=\"line\">CP without A：如果不要求A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。</span><br><span class=\"line\"></span><br><span class=\"line\">AP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CAP分布式理论理解\"><a href=\"#CAP分布式理论理解\" class=\"headerlink\" title=\"CAP分布式理论理解\"></a>CAP分布式理论理解</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CA without P：如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此CA的系统更多的是允许分区后各子系统依然保持CA。</span><br><span class=\"line\"></span><br><span class=\"line\">CP without A：如果不要求A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。</span><br><span class=\"line\"></span><br><span class=\"line\">AP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。</span><br></pre></td></tr></table></figure>\n"},{"title":"代码规范","date":"2019-02-21T10:30:18.000Z","_content":"\n# 代码进阶之道\n```\n\n1. 代码简介 VS 代码易读\nif (variable != null) {\n   return variable.getSomething();\n}\nreturn null;\n\n\nreturn x >= 90 ? \"A\" : x >= 80 ? \"B\" : x >= 70 ? \"C\" : x >= 60 ? \"D\" : \"E\";\n\n\n坚持使用最直观的编码方式，而不是追求代码简短，真的可以避免很多不必要的错误。golang不支持条件运算符\n\n\n2. 好代码 VS 坏代码\n好代码：\n- 容易理解(if和条件运算符?)\n- 没有安全问题(*指针 并发map)\n- 有充分的注释(关键地方有注释)\n- 命名规范(驼峰和下划线)\n- 有充分的测试(先测试再上线)\n\n坏代码：\n- 难以阅读（函数太长太大）\n- 浪费计算机资源\n- 代码风格混乱\n- 没有测试\n\n\n\n3. 优秀程序员\n# 硬指标\n- 优秀的编程技能\n- 解决问题能力\n- 认知和发现问题的能力\n# 软指标\n- 为高效推进目标进程，作出合适的权衡和妥协\n- 团队协调能力\n- 时间管理能力\n \n\n\n4. 怎么写注释\n- Code Tells You How, Comments Tell You Why.\n- 参考golang源码\n  - 核心方法注释【英文不好可以用中文】\n\n\n5. 异常处理\n底层IO的错误，抛给上层处理，上层来处理各种错误\n- socketIO 【redis/mysql/kafka】\n- file\n\n\n6. 文档\n- 简介\n- 快速上手\n- 开发指南\n- 高级用法\n- 二次开发\n\n\n7. 高效工具\n思维导图\n时序图\n问题清单\n\n\n```\n","source":"_posts/cs/代码规范.md","raw":"---\ntitle: 代码规范\ntags:\n  - code_style\ncategories:\n  - code_style\ndate: 2019-02-21 18:30:18\n---\n\n# 代码进阶之道\n```\n\n1. 代码简介 VS 代码易读\nif (variable != null) {\n   return variable.getSomething();\n}\nreturn null;\n\n\nreturn x >= 90 ? \"A\" : x >= 80 ? \"B\" : x >= 70 ? \"C\" : x >= 60 ? \"D\" : \"E\";\n\n\n坚持使用最直观的编码方式，而不是追求代码简短，真的可以避免很多不必要的错误。golang不支持条件运算符\n\n\n2. 好代码 VS 坏代码\n好代码：\n- 容易理解(if和条件运算符?)\n- 没有安全问题(*指针 并发map)\n- 有充分的注释(关键地方有注释)\n- 命名规范(驼峰和下划线)\n- 有充分的测试(先测试再上线)\n\n坏代码：\n- 难以阅读（函数太长太大）\n- 浪费计算机资源\n- 代码风格混乱\n- 没有测试\n\n\n\n3. 优秀程序员\n# 硬指标\n- 优秀的编程技能\n- 解决问题能力\n- 认知和发现问题的能力\n# 软指标\n- 为高效推进目标进程，作出合适的权衡和妥协\n- 团队协调能力\n- 时间管理能力\n \n\n\n4. 怎么写注释\n- Code Tells You How, Comments Tell You Why.\n- 参考golang源码\n  - 核心方法注释【英文不好可以用中文】\n\n\n5. 异常处理\n底层IO的错误，抛给上层处理，上层来处理各种错误\n- socketIO 【redis/mysql/kafka】\n- file\n\n\n6. 文档\n- 简介\n- 快速上手\n- 开发指南\n- 高级用法\n- 二次开发\n\n\n7. 高效工具\n思维导图\n时序图\n问题清单\n\n\n```\n","slug":"cs/代码规范","published":1,"updated":"2019-10-07T12:26:23.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cl000owl38i1qxchyz","content":"<h1 id=\"代码进阶之道\"><a href=\"#代码进阶之道\" class=\"headerlink\" title=\"代码进阶之道\"></a>代码进阶之道</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. 代码简介 VS 代码易读</span><br><span class=\"line\">if (variable != null) &#123;</span><br><span class=\"line\">   return variable.getSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return null;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return x &gt;= 90 ? &quot;A&quot; : x &gt;= 80 ? &quot;B&quot; : x &gt;= 70 ? &quot;C&quot; : x &gt;= 60 ? &quot;D&quot; : &quot;E&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">坚持使用最直观的编码方式，而不是追求代码简短，真的可以避免很多不必要的错误。golang不支持条件运算符</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2. 好代码 VS 坏代码</span><br><span class=\"line\">好代码：</span><br><span class=\"line\">- 容易理解(if和条件运算符?)</span><br><span class=\"line\">- 没有安全问题(*指针 并发map)</span><br><span class=\"line\">- 有充分的注释(关键地方有注释)</span><br><span class=\"line\">- 命名规范(驼峰和下划线)</span><br><span class=\"line\">- 有充分的测试(先测试再上线)</span><br><span class=\"line\"></span><br><span class=\"line\">坏代码：</span><br><span class=\"line\">- 难以阅读（函数太长太大）</span><br><span class=\"line\">- 浪费计算机资源</span><br><span class=\"line\">- 代码风格混乱</span><br><span class=\"line\">- 没有测试</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3. 优秀程序员</span><br><span class=\"line\"># 硬指标</span><br><span class=\"line\">- 优秀的编程技能</span><br><span class=\"line\">- 解决问题能力</span><br><span class=\"line\">- 认知和发现问题的能力</span><br><span class=\"line\"># 软指标</span><br><span class=\"line\">- 为高效推进目标进程，作出合适的权衡和妥协</span><br><span class=\"line\">- 团队协调能力</span><br><span class=\"line\">- 时间管理能力</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4. 怎么写注释</span><br><span class=\"line\">- Code Tells You How, Comments Tell You Why.</span><br><span class=\"line\">- 参考golang源码</span><br><span class=\"line\">  - 核心方法注释【英文不好可以用中文】</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">5. 异常处理</span><br><span class=\"line\">底层IO的错误，抛给上层处理，上层来处理各种错误</span><br><span class=\"line\">- socketIO 【redis/mysql/kafka】</span><br><span class=\"line\">- file</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">6. 文档</span><br><span class=\"line\">- 简介</span><br><span class=\"line\">- 快速上手</span><br><span class=\"line\">- 开发指南</span><br><span class=\"line\">- 高级用法</span><br><span class=\"line\">- 二次开发</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">7. 高效工具</span><br><span class=\"line\">思维导图</span><br><span class=\"line\">时序图</span><br><span class=\"line\">问题清单</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码进阶之道\"><a href=\"#代码进阶之道\" class=\"headerlink\" title=\"代码进阶之道\"></a>代码进阶之道</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. 代码简介 VS 代码易读</span><br><span class=\"line\">if (variable != null) &#123;</span><br><span class=\"line\">   return variable.getSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return null;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">return x &gt;= 90 ? &quot;A&quot; : x &gt;= 80 ? &quot;B&quot; : x &gt;= 70 ? &quot;C&quot; : x &gt;= 60 ? &quot;D&quot; : &quot;E&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">坚持使用最直观的编码方式，而不是追求代码简短，真的可以避免很多不必要的错误。golang不支持条件运算符</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2. 好代码 VS 坏代码</span><br><span class=\"line\">好代码：</span><br><span class=\"line\">- 容易理解(if和条件运算符?)</span><br><span class=\"line\">- 没有安全问题(*指针 并发map)</span><br><span class=\"line\">- 有充分的注释(关键地方有注释)</span><br><span class=\"line\">- 命名规范(驼峰和下划线)</span><br><span class=\"line\">- 有充分的测试(先测试再上线)</span><br><span class=\"line\"></span><br><span class=\"line\">坏代码：</span><br><span class=\"line\">- 难以阅读（函数太长太大）</span><br><span class=\"line\">- 浪费计算机资源</span><br><span class=\"line\">- 代码风格混乱</span><br><span class=\"line\">- 没有测试</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3. 优秀程序员</span><br><span class=\"line\"># 硬指标</span><br><span class=\"line\">- 优秀的编程技能</span><br><span class=\"line\">- 解决问题能力</span><br><span class=\"line\">- 认知和发现问题的能力</span><br><span class=\"line\"># 软指标</span><br><span class=\"line\">- 为高效推进目标进程，作出合适的权衡和妥协</span><br><span class=\"line\">- 团队协调能力</span><br><span class=\"line\">- 时间管理能力</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4. 怎么写注释</span><br><span class=\"line\">- Code Tells You How, Comments Tell You Why.</span><br><span class=\"line\">- 参考golang源码</span><br><span class=\"line\">  - 核心方法注释【英文不好可以用中文】</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">5. 异常处理</span><br><span class=\"line\">底层IO的错误，抛给上层处理，上层来处理各种错误</span><br><span class=\"line\">- socketIO 【redis/mysql/kafka】</span><br><span class=\"line\">- file</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">6. 文档</span><br><span class=\"line\">- 简介</span><br><span class=\"line\">- 快速上手</span><br><span class=\"line\">- 开发指南</span><br><span class=\"line\">- 高级用法</span><br><span class=\"line\">- 二次开发</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">7. 高效工具</span><br><span class=\"line\">思维导图</span><br><span class=\"line\">时序图</span><br><span class=\"line\">问题清单</span><br></pre></td></tr></table></figure>\n"},{"title":"docker命令","date":"2019-02-21T12:40:22.000Z","_content":"\n# Docker使用：\n\n\n\n\n\n\n## 常用命令\n\n### 容器生命周期管理\n\n- [run](http://www.runoob.com/docker/docker-run-command.html)\n- [start/stop/restart](http://www.runoob.com/docker/docker-start-stop-restart-command.html)\n- [kill](http://www.runoob.com/docker/docker-kill-command.html) 向容器发送信号\n- [rm](http://www.runoob.com/docker/docker-rm-command.html) 常见combo是：stop x;rm x ;build x;run x\n- [pause/unpause](http://www.runoob.com/docker/docker-pause-unpause-command.html)\n- [create](http://www.runoob.com/docker/docker-create-command.html)\n- [exec](http://www.runoob.com/docker/docker-exec-command.html) 在运行的容器中执行命令\n\n### 容器操作\n\n- [ps](http://www.runoob.com/docker/docker-ps-command.html) 显示容器\n- [inspect](http://www.runoob.com/docker/docker-inspect-command.html) 获取容器/镜像的元数据。返回json格式的数据\n- [top](http://www.runoob.com/docker/docker-top-command.html) 查看容器中的进程信息\n- [attach](http://www.runoob.com/docker/docker-attach-command.html) **:**连接到正在运行中的容器。\n- [events](http://www.runoob.com/docker/docker-events-command.html) docker相关的事件\n- [logs](http://www.runoob.com/docker/docker-logs-command.html) 应该是打印到stdout上的日志吧！！！\n- [wait](http://www.runoob.com/docker/docker-wait-command.html)\n- [export](http://www.runoob.com/docker/docker-export-command.html)\n- [port](http://www.runoob.com/docker/docker-port-command.html) 显示容器的端口映射\n\n### 容器rootfs命令\n\n- [commit](http://www.runoob.com/docker/docker-commit-command.html) 类似git commit 一样修改之后保存新版本docker commit -m \"commit test\" uuu fuiboom/myubuntu:v1 给运行的容器创建一个新的保存镜像（一般常用Dockerfile和build来构建镜像）\n- [cp](http://www.runoob.com/docker/docker-cp-command.html) 容器与主机的数据拷贝\n- [diff](http://www.runoob.com/docker/docker-diff-command.html) 显示容器文件结构的改变（显示自己改了什么东西）\n\n### 镜像仓库\n\n- [login](http://www.runoob.com/docker/docker-login-command.html)\n- [pull](http://www.runoob.com/docker/docker-pull-command.html) 拉取别人已经配置好的环境（非常好用的命令）\n- [push](http://www.runoob.com/docker/docker-push-command.html) push自己的镜像，（需要登录）\n- [search](http://www.runoob.com/docker/docker-search-command.html)\n\n### 本地镜像管理\n\n- [images](http://www.runoob.com/docker/docker-images-command.html) \n- [rmi](http://www.runoob.com/docker/docker-rmi-command.html) 移除本地image(不然占用本地磁盘空间)\n- [tag](http://www.runoob.com/docker/docker-tag-command.html) 创建一个镜像的引用docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] \n\n> docker tag mysql_client_test fuiboom/mysql_client_test 把官方的改造重新命名一下就可以push\n>\n> docker push fuiboom/mysql_client_test\n\n- [build](http://www.runoob.com/docker/docker-build-command.html) 根据Dockerfile创建一个镜像\n- [history](http://www.runoob.com/docker/docker-history-command.html) 显示构建容器的历史数据\n- [save](http://www.runoob.com/docker/docker-save-command.html) save和load搭配\n- [import](http://www.runoob.com/docker/docker-import-command.html) export和import搭配\n\n### info|version\n\n- [info](http://www.runoob.com/docker/docker-info-command.html)\n- [version](http://www.runoob.com/docker/docker-version-command.html)\n\n### docker run 创建一个新的容器并运行一个命令\n\n### 语法\n\n```\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n```\n\nOPTIONS说明：\n\n- **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n- **-d:** 后台运行容器，并返回容器ID；\n- **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n- **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n- **--name=\"nginx-lb\":** 为容器指定一个名称；\n- **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n- **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n- **-h \"mars\":** 指定容器的hostname；\n- **-e username=\"ritchie\":** 设置环境变量；\n- **--env-file=[]:** 从指定文件读入环境变量；\n- **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n- **-m :**设置容器使用内存最大值；\n- **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n- **--link=[]:** 添加链接到另一个容器；\n- **--expose=[]:** 开放一个端口或一组端口；\n- -P 大P使用expose的端口映射到主机的随机端口（感觉不好，还是自己指定比较好）\n\n### 实例\n\n使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。\n\n```\ndocker run --name mynginx -d nginx:latest\n```\n\n使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。\n\n```\ndocker run -P -d nginx:latest\n```\n\n使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。\n\n```\ndocker run -p 80:80 -v /data:/data -d nginx:latest\n```\n\n使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。\n\n```\nrunoob@runoob:~$ docker run -it nginx:latest /bin/bash\nroot@b8573233d675:/# \n```\n\n\n\n### docker exec ：在运行的容器中执行命令\n\n### 语法\n\n```\ndocker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n```\n\nOPTIONS说明：\n\n- **-d :**分离模式: 在后台运行\n- **-i :**即使没有附加也保持STDIN 打开\n- **-t :**分配一个伪终端\n\n### 实例\n\n在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本 （用容器中的程序执行某段脚本）\n\n```\nrunoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh\nhttp://www.runoob.com/\n```\n\n在容器mynginx中开启一个交互模式的终端（启动容器的一个可交互bash窗口）\n\n```\nrunoob@runoob:~$ docker exec -i -t  mynginx /bin/bash\nroot@b1a0703e41e7:/#\n```\n\n启动、停止所有容器\n\n```\ndocker start $(docker ps -a -q) \n```\n\n\n\n\n\n#### TODO问题？？？\n\n1. 怎么设置容器的cpu，内存，磁盘，网络大小限制？\n2. 设置容器镜像\n\n```\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://a2a3a2e1.m.daocloud.io \n```\n\n```\nsudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service\nsudo sed -i \"s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=http://a2a3a2e1.m.daocloud.io|g\" /etc/systemd/system/docker.service\nsudo systemctl daemon-reload\nsudo service docker restart\n```\n\n\n\n```\nsudo sed -i \"s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=https://pee6w651.mirror.aliyuncs.com|g\" /etc/systemd/system/docker.service\n```\n\n\n\n常用镜像：\n\n#### redis\n\n```\n//-d 后台运行\ndocker run --name some-redis -d redis\n\n//--link A:B 连接过去(自动设置host) --rm 终端退出时自动清除容器内容(跟-d不同时用)\ndocker run -it --link some-redis:redis --rm redis redis-cli -h redis -p 6379\n\n//自定义conf配置文件\ndocker run -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf --name myredis redis redis-server /usr/local/etc/redis/redis.conf\n\n```\n\n\n\n#### mysql\n\n```\n//创建mysql容器 -e 设置环境变量\ndocker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//客户端连接\ndocker run -it --link some-mysql:mysql --rm mysql sh -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\n\n//mysql的客户端\ndocker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p\n\n//mysql使用配置文件/my/custom/config-file.cnf ==> /etc/mysql/conf.d/config-file.cnf\ndocker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//指定外部存储目录\ndocker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//dump数据到宿主机\ndocker exec some-mysql sh -c 'exec mysqldump --all-databases -uroot -p\"$MYSQL_ROOT_PASSWORD\"' > /some/path/on/your/host/all-databases.sql\n```\n\n#### nginx\n\n```\n//静态页面\ndocker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx\n\n//配置文件\ndocker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx\n\n//debug模式运行\ndocker run --name my-nginx -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx nginx-debug -g 'daemon off;'\n```\n\n\n\n```\ndocker run --name my_zookeeper -p 2181:2181 -d zookeeper:latest\ndocker run -it --rm --link my_zookeeper:zookeeper zookeeper zkCli.sh -server zookeeper\nhttps://segmentfault.com/a/1190000006907443\n\n10.111.100.235:2181,10.111.100.236:2181,10.111.100.237:2181,10.111.100.238:2181/user.base.global_id_gen/\n```\n\n\n# 编写dockerfile文件\n\n```\n#dockerfile文件\n\nFROM debian:jessie\n\nRUN buildDeps='gcc libc6-dev make' \\\n    && apt-get update \\\n    && apt-get install -y $buildDeps \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\" \\\n    && mkdir -p /usr/src/redis \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove $buildDeps\n```\n\n2.在 `Dockerfile` 文件所在目录执行：\n\n```\n$ docker build -t nginx:v3 .\n```\n\n```\ndocker build [选项] <上下文路径/URL/->\n```\n\n如果在 `Dockerfile` 中这么写：\n\n```\nCOPY ./package.json /app/\n\n```\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n一般来说，应该会将 `Dockerfile` 置于一个空目录下，或者项目根目录下。\n\n#### COPY命令\n\n> 源路径必须使用相对当前目录的路径\t\n\n从上下文路径复制文件到 镜像中某个目录\n\n`COPY <源路径>... <目标路径>`\n\n`<目标路径>` 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 `WORKDIR`指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。\n\n#### CMD命令\n\n```\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n```\n\n#### ENV命名\n\n```\nENV NODE_VERSION 7.2.0\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \n#后面可以使用到\n```\n\n下列指令可以支持环境变量展开（可以用这个环境变量）： `ADD`、`COPY`、`ENV`、`EXPOSE`、`LABEL`、`USER`、`WORKDIR`、`VOLUME`、`STOPSIGNAL`、`ONBUILD`。\n\n#### EXPOSE\n\n要将 `EXPOSE` 和在运行时使用 `-p <宿主端口>:<容器端口>` 区分开来。`-p`，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 `EXPOSE` 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\n#### WORKDIR \n\n> 下面ENTRYPOINT命令会在这个目录下面执行命令\n\n```\nWORKDIR <工作目录路径> #以后可以在某层有一个 相对路径\n```\n\n#### entrypoint 入口\n\n```\nENTRYPOINT [\"/usr/sbin/nginx\",\"-g\",\"daemon off\"]\n```\n\n\n\n3.运行docker容器中的项目：\n\n// -t 新的伪终端tty \n\n-i 交互输入保持打开 \n\n-d后台运行，在使用 `-d` 参数时，容器启动后会进入后台\n\n-p指定外内端口映射，**-P:**将容器内部使用的网络端口映射到我们使用的主机上。有expose就用expose的，没有就随机一个\n\n-v指定容器外目录与容器内目录映射\n\n-w /usr/src/myapp :指定容器的/usr/src/myapp目录为工作目录\n\n-e username=\"ritchie\":设置环境变量；\n\n--env-file=[]: 从指定文件读入环境变量；\n\n--expose=[]:开放一个端口或一组端口；\n\n--name=\"nginx-lb\": 为容器指定一个名称；\n\n```\nsudo docker run -t -i ubuntu:14.04 /bin/bash\n```\n\n```\nsudo docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py\n```\n\n终止：docker stop\n\n\n\n###  常见命令\n\n```\ndocker ps -a //所有\ndocker ps -l //最近\ndocker ps -n 5//最近5个\ndocker ps //运行中\n```\n\n```\ndocker inspect xx\ndocker inspect -f '{{.NetworkSettings.IPAddress}}' mymysql\ndocker top xx\n```\n\n```\ndocker images\ndocker images ubutun_*\ndocker tag ubuntu:15.10 runoob/ubuntu:v3\ndocker build -t runoob/ubuntu:v1 . \ndocker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\ndocker import  my_ubuntu_v3.tar runoob/ubuntu:v4\n```\n\n\n\n```\nalias cp='cp -i'\nalias dex='docker exec -i -t'\nalias di='docker images'\nalias dip='docker inspect --format '\\''{{ .NetworkSettings.IPAddress }}'\\'''\nalias dkd='docker run -d -P'\nalias dki='docker run -i -t -P'\nalias dl='docker ps -l -q'\nalias dpa='docker ps -a'\nalias dps='docker ps'\nalias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'\nalias egrep='egrep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias grep='grep --color=auto'\nalias l.='ls -d .* --color=auto'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias mv='mv -i'\nalias rm='rm -i'\n```\n\n\n\n","source":"_posts/docker_k8s/docker命令.md","raw":"---\ntitle: docker命令\ntags:\n  - tags\ncategories:\n  - categories\ndate: 2019-02-21 20:40:22\n---\n\n# Docker使用：\n\n\n\n\n\n\n## 常用命令\n\n### 容器生命周期管理\n\n- [run](http://www.runoob.com/docker/docker-run-command.html)\n- [start/stop/restart](http://www.runoob.com/docker/docker-start-stop-restart-command.html)\n- [kill](http://www.runoob.com/docker/docker-kill-command.html) 向容器发送信号\n- [rm](http://www.runoob.com/docker/docker-rm-command.html) 常见combo是：stop x;rm x ;build x;run x\n- [pause/unpause](http://www.runoob.com/docker/docker-pause-unpause-command.html)\n- [create](http://www.runoob.com/docker/docker-create-command.html)\n- [exec](http://www.runoob.com/docker/docker-exec-command.html) 在运行的容器中执行命令\n\n### 容器操作\n\n- [ps](http://www.runoob.com/docker/docker-ps-command.html) 显示容器\n- [inspect](http://www.runoob.com/docker/docker-inspect-command.html) 获取容器/镜像的元数据。返回json格式的数据\n- [top](http://www.runoob.com/docker/docker-top-command.html) 查看容器中的进程信息\n- [attach](http://www.runoob.com/docker/docker-attach-command.html) **:**连接到正在运行中的容器。\n- [events](http://www.runoob.com/docker/docker-events-command.html) docker相关的事件\n- [logs](http://www.runoob.com/docker/docker-logs-command.html) 应该是打印到stdout上的日志吧！！！\n- [wait](http://www.runoob.com/docker/docker-wait-command.html)\n- [export](http://www.runoob.com/docker/docker-export-command.html)\n- [port](http://www.runoob.com/docker/docker-port-command.html) 显示容器的端口映射\n\n### 容器rootfs命令\n\n- [commit](http://www.runoob.com/docker/docker-commit-command.html) 类似git commit 一样修改之后保存新版本docker commit -m \"commit test\" uuu fuiboom/myubuntu:v1 给运行的容器创建一个新的保存镜像（一般常用Dockerfile和build来构建镜像）\n- [cp](http://www.runoob.com/docker/docker-cp-command.html) 容器与主机的数据拷贝\n- [diff](http://www.runoob.com/docker/docker-diff-command.html) 显示容器文件结构的改变（显示自己改了什么东西）\n\n### 镜像仓库\n\n- [login](http://www.runoob.com/docker/docker-login-command.html)\n- [pull](http://www.runoob.com/docker/docker-pull-command.html) 拉取别人已经配置好的环境（非常好用的命令）\n- [push](http://www.runoob.com/docker/docker-push-command.html) push自己的镜像，（需要登录）\n- [search](http://www.runoob.com/docker/docker-search-command.html)\n\n### 本地镜像管理\n\n- [images](http://www.runoob.com/docker/docker-images-command.html) \n- [rmi](http://www.runoob.com/docker/docker-rmi-command.html) 移除本地image(不然占用本地磁盘空间)\n- [tag](http://www.runoob.com/docker/docker-tag-command.html) 创建一个镜像的引用docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] \n\n> docker tag mysql_client_test fuiboom/mysql_client_test 把官方的改造重新命名一下就可以push\n>\n> docker push fuiboom/mysql_client_test\n\n- [build](http://www.runoob.com/docker/docker-build-command.html) 根据Dockerfile创建一个镜像\n- [history](http://www.runoob.com/docker/docker-history-command.html) 显示构建容器的历史数据\n- [save](http://www.runoob.com/docker/docker-save-command.html) save和load搭配\n- [import](http://www.runoob.com/docker/docker-import-command.html) export和import搭配\n\n### info|version\n\n- [info](http://www.runoob.com/docker/docker-info-command.html)\n- [version](http://www.runoob.com/docker/docker-version-command.html)\n\n### docker run 创建一个新的容器并运行一个命令\n\n### 语法\n\n```\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n```\n\nOPTIONS说明：\n\n- **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n- **-d:** 后台运行容器，并返回容器ID；\n- **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n- **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n- **--name=\"nginx-lb\":** 为容器指定一个名称；\n- **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n- **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n- **-h \"mars\":** 指定容器的hostname；\n- **-e username=\"ritchie\":** 设置环境变量；\n- **--env-file=[]:** 从指定文件读入环境变量；\n- **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n- **-m :**设置容器使用内存最大值；\n- **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n- **--link=[]:** 添加链接到另一个容器；\n- **--expose=[]:** 开放一个端口或一组端口；\n- -P 大P使用expose的端口映射到主机的随机端口（感觉不好，还是自己指定比较好）\n\n### 实例\n\n使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。\n\n```\ndocker run --name mynginx -d nginx:latest\n```\n\n使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。\n\n```\ndocker run -P -d nginx:latest\n```\n\n使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。\n\n```\ndocker run -p 80:80 -v /data:/data -d nginx:latest\n```\n\n使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。\n\n```\nrunoob@runoob:~$ docker run -it nginx:latest /bin/bash\nroot@b8573233d675:/# \n```\n\n\n\n### docker exec ：在运行的容器中执行命令\n\n### 语法\n\n```\ndocker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n```\n\nOPTIONS说明：\n\n- **-d :**分离模式: 在后台运行\n- **-i :**即使没有附加也保持STDIN 打开\n- **-t :**分配一个伪终端\n\n### 实例\n\n在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本 （用容器中的程序执行某段脚本）\n\n```\nrunoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh\nhttp://www.runoob.com/\n```\n\n在容器mynginx中开启一个交互模式的终端（启动容器的一个可交互bash窗口）\n\n```\nrunoob@runoob:~$ docker exec -i -t  mynginx /bin/bash\nroot@b1a0703e41e7:/#\n```\n\n启动、停止所有容器\n\n```\ndocker start $(docker ps -a -q) \n```\n\n\n\n\n\n#### TODO问题？？？\n\n1. 怎么设置容器的cpu，内存，磁盘，网络大小限制？\n2. 设置容器镜像\n\n```\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://a2a3a2e1.m.daocloud.io \n```\n\n```\nsudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service\nsudo sed -i \"s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=http://a2a3a2e1.m.daocloud.io|g\" /etc/systemd/system/docker.service\nsudo systemctl daemon-reload\nsudo service docker restart\n```\n\n\n\n```\nsudo sed -i \"s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=https://pee6w651.mirror.aliyuncs.com|g\" /etc/systemd/system/docker.service\n```\n\n\n\n常用镜像：\n\n#### redis\n\n```\n//-d 后台运行\ndocker run --name some-redis -d redis\n\n//--link A:B 连接过去(自动设置host) --rm 终端退出时自动清除容器内容(跟-d不同时用)\ndocker run -it --link some-redis:redis --rm redis redis-cli -h redis -p 6379\n\n//自定义conf配置文件\ndocker run -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf --name myredis redis redis-server /usr/local/etc/redis/redis.conf\n\n```\n\n\n\n#### mysql\n\n```\n//创建mysql容器 -e 设置环境变量\ndocker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//客户端连接\ndocker run -it --link some-mysql:mysql --rm mysql sh -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\n\n//mysql的客户端\ndocker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p\n\n//mysql使用配置文件/my/custom/config-file.cnf ==> /etc/mysql/conf.d/config-file.cnf\ndocker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//指定外部存储目录\ndocker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n\n//dump数据到宿主机\ndocker exec some-mysql sh -c 'exec mysqldump --all-databases -uroot -p\"$MYSQL_ROOT_PASSWORD\"' > /some/path/on/your/host/all-databases.sql\n```\n\n#### nginx\n\n```\n//静态页面\ndocker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx\n\n//配置文件\ndocker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx\n\n//debug模式运行\ndocker run --name my-nginx -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx nginx-debug -g 'daemon off;'\n```\n\n\n\n```\ndocker run --name my_zookeeper -p 2181:2181 -d zookeeper:latest\ndocker run -it --rm --link my_zookeeper:zookeeper zookeeper zkCli.sh -server zookeeper\nhttps://segmentfault.com/a/1190000006907443\n\n10.111.100.235:2181,10.111.100.236:2181,10.111.100.237:2181,10.111.100.238:2181/user.base.global_id_gen/\n```\n\n\n# 编写dockerfile文件\n\n```\n#dockerfile文件\n\nFROM debian:jessie\n\nRUN buildDeps='gcc libc6-dev make' \\\n    && apt-get update \\\n    && apt-get install -y $buildDeps \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\" \\\n    && mkdir -p /usr/src/redis \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove $buildDeps\n```\n\n2.在 `Dockerfile` 文件所在目录执行：\n\n```\n$ docker build -t nginx:v3 .\n```\n\n```\ndocker build [选项] <上下文路径/URL/->\n```\n\n如果在 `Dockerfile` 中这么写：\n\n```\nCOPY ./package.json /app/\n\n```\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n一般来说，应该会将 `Dockerfile` 置于一个空目录下，或者项目根目录下。\n\n#### COPY命令\n\n> 源路径必须使用相对当前目录的路径\t\n\n从上下文路径复制文件到 镜像中某个目录\n\n`COPY <源路径>... <目标路径>`\n\n`<目标路径>` 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 `WORKDIR`指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。\n\n#### CMD命令\n\n```\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n```\n\n#### ENV命名\n\n```\nENV NODE_VERSION 7.2.0\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \n#后面可以使用到\n```\n\n下列指令可以支持环境变量展开（可以用这个环境变量）： `ADD`、`COPY`、`ENV`、`EXPOSE`、`LABEL`、`USER`、`WORKDIR`、`VOLUME`、`STOPSIGNAL`、`ONBUILD`。\n\n#### EXPOSE\n\n要将 `EXPOSE` 和在运行时使用 `-p <宿主端口>:<容器端口>` 区分开来。`-p`，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 `EXPOSE` 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\n#### WORKDIR \n\n> 下面ENTRYPOINT命令会在这个目录下面执行命令\n\n```\nWORKDIR <工作目录路径> #以后可以在某层有一个 相对路径\n```\n\n#### entrypoint 入口\n\n```\nENTRYPOINT [\"/usr/sbin/nginx\",\"-g\",\"daemon off\"]\n```\n\n\n\n3.运行docker容器中的项目：\n\n// -t 新的伪终端tty \n\n-i 交互输入保持打开 \n\n-d后台运行，在使用 `-d` 参数时，容器启动后会进入后台\n\n-p指定外内端口映射，**-P:**将容器内部使用的网络端口映射到我们使用的主机上。有expose就用expose的，没有就随机一个\n\n-v指定容器外目录与容器内目录映射\n\n-w /usr/src/myapp :指定容器的/usr/src/myapp目录为工作目录\n\n-e username=\"ritchie\":设置环境变量；\n\n--env-file=[]: 从指定文件读入环境变量；\n\n--expose=[]:开放一个端口或一组端口；\n\n--name=\"nginx-lb\": 为容器指定一个名称；\n\n```\nsudo docker run -t -i ubuntu:14.04 /bin/bash\n```\n\n```\nsudo docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py\n```\n\n终止：docker stop\n\n\n\n###  常见命令\n\n```\ndocker ps -a //所有\ndocker ps -l //最近\ndocker ps -n 5//最近5个\ndocker ps //运行中\n```\n\n```\ndocker inspect xx\ndocker inspect -f '{{.NetworkSettings.IPAddress}}' mymysql\ndocker top xx\n```\n\n```\ndocker images\ndocker images ubutun_*\ndocker tag ubuntu:15.10 runoob/ubuntu:v3\ndocker build -t runoob/ubuntu:v1 . \ndocker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\ndocker import  my_ubuntu_v3.tar runoob/ubuntu:v4\n```\n\n\n\n```\nalias cp='cp -i'\nalias dex='docker exec -i -t'\nalias di='docker images'\nalias dip='docker inspect --format '\\''{{ .NetworkSettings.IPAddress }}'\\'''\nalias dkd='docker run -d -P'\nalias dki='docker run -i -t -P'\nalias dl='docker ps -l -q'\nalias dpa='docker ps -a'\nalias dps='docker ps'\nalias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'\nalias egrep='egrep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias grep='grep --color=auto'\nalias l.='ls -d .* --color=auto'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias mv='mv -i'\nalias rm='rm -i'\n```\n\n\n\n","slug":"docker_k8s/docker命令","published":1,"updated":"2019-02-22T05:10:59.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cn000twl38jr797ed4","content":"<h1 id=\"Docker使用：\"><a href=\"#Docker使用：\" class=\"headerlink\" title=\"Docker使用：\"></a>Docker使用：</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"容器生命周期管理\"><a href=\"#容器生命周期管理\" class=\"headerlink\" title=\"容器生命周期管理\"></a>容器生命周期管理</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-run-command.html\" target=\"_blank\" rel=\"noopener\">run</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-start-stop-restart-command.html\" target=\"_blank\" rel=\"noopener\">start/stop/restart</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-kill-command.html\" target=\"_blank\" rel=\"noopener\">kill</a> 向容器发送信号</li>\n<li><a href=\"http://www.runoob.com/docker/docker-rm-command.html\" target=\"_blank\" rel=\"noopener\">rm</a> 常见combo是：stop x;rm x ;build x;run x</li>\n<li><a href=\"http://www.runoob.com/docker/docker-pause-unpause-command.html\" target=\"_blank\" rel=\"noopener\">pause/unpause</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-create-command.html\" target=\"_blank\" rel=\"noopener\">create</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-exec-command.html\" target=\"_blank\" rel=\"noopener\">exec</a> 在运行的容器中执行命令</li>\n</ul>\n<h3 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-ps-command.html\" target=\"_blank\" rel=\"noopener\">ps</a> 显示容器</li>\n<li><a href=\"http://www.runoob.com/docker/docker-inspect-command.html\" target=\"_blank\" rel=\"noopener\">inspect</a> 获取容器/镜像的元数据。返回json格式的数据</li>\n<li><a href=\"http://www.runoob.com/docker/docker-top-command.html\" target=\"_blank\" rel=\"noopener\">top</a> 查看容器中的进程信息</li>\n<li><a href=\"http://www.runoob.com/docker/docker-attach-command.html\" target=\"_blank\" rel=\"noopener\">attach</a> <strong>:</strong>连接到正在运行中的容器。</li>\n<li><a href=\"http://www.runoob.com/docker/docker-events-command.html\" target=\"_blank\" rel=\"noopener\">events</a> docker相关的事件</li>\n<li><a href=\"http://www.runoob.com/docker/docker-logs-command.html\" target=\"_blank\" rel=\"noopener\">logs</a> 应该是打印到stdout上的日志吧！！！</li>\n<li><a href=\"http://www.runoob.com/docker/docker-wait-command.html\" target=\"_blank\" rel=\"noopener\">wait</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-export-command.html\" target=\"_blank\" rel=\"noopener\">export</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-port-command.html\" target=\"_blank\" rel=\"noopener\">port</a> 显示容器的端口映射</li>\n</ul>\n<h3 id=\"容器rootfs命令\"><a href=\"#容器rootfs命令\" class=\"headerlink\" title=\"容器rootfs命令\"></a>容器rootfs命令</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-commit-command.html\" target=\"_blank\" rel=\"noopener\">commit</a> 类似git commit 一样修改之后保存新版本docker commit -m “commit test” uuu fuiboom/myubuntu:v1 给运行的容器创建一个新的保存镜像（一般常用Dockerfile和build来构建镜像）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-cp-command.html\" target=\"_blank\" rel=\"noopener\">cp</a> 容器与主机的数据拷贝</li>\n<li><a href=\"http://www.runoob.com/docker/docker-diff-command.html\" target=\"_blank\" rel=\"noopener\">diff</a> 显示容器文件结构的改变（显示自己改了什么东西）</li>\n</ul>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-login-command.html\" target=\"_blank\" rel=\"noopener\">login</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-pull-command.html\" target=\"_blank\" rel=\"noopener\">pull</a> 拉取别人已经配置好的环境（非常好用的命令）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-push-command.html\" target=\"_blank\" rel=\"noopener\">push</a> push自己的镜像，（需要登录）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-search-command.html\" target=\"_blank\" rel=\"noopener\">search</a></li>\n</ul>\n<h3 id=\"本地镜像管理\"><a href=\"#本地镜像管理\" class=\"headerlink\" title=\"本地镜像管理\"></a>本地镜像管理</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-images-command.html\" target=\"_blank\" rel=\"noopener\">images</a> </li>\n<li><a href=\"http://www.runoob.com/docker/docker-rmi-command.html\" target=\"_blank\" rel=\"noopener\">rmi</a> 移除本地image(不然占用本地磁盘空间)</li>\n<li><a href=\"http://www.runoob.com/docker/docker-tag-command.html\" target=\"_blank\" rel=\"noopener\">tag</a> 创建一个镜像的引用docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] </li>\n</ul>\n<blockquote>\n<p>docker tag mysql_client_test fuiboom/mysql_client_test 把官方的改造重新命名一下就可以push</p>\n<p>docker push fuiboom/mysql_client_test</p>\n</blockquote>\n<ul>\n<li><a href=\"http://www.runoob.com/docker/docker-build-command.html\" target=\"_blank\" rel=\"noopener\">build</a> 根据Dockerfile创建一个镜像</li>\n<li><a href=\"http://www.runoob.com/docker/docker-history-command.html\" target=\"_blank\" rel=\"noopener\">history</a> 显示构建容器的历史数据</li>\n<li><a href=\"http://www.runoob.com/docker/docker-save-command.html\" target=\"_blank\" rel=\"noopener\">save</a> save和load搭配</li>\n<li><a href=\"http://www.runoob.com/docker/docker-import-command.html\" target=\"_blank\" rel=\"noopener\">import</a> export和import搭配</li>\n</ul>\n<h3 id=\"info-version\"><a href=\"#info-version\" class=\"headerlink\" title=\"info|version\"></a>info|version</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-info-command.html\" target=\"_blank\" rel=\"noopener\">info</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-version-command.html\" target=\"_blank\" rel=\"noopener\">version</a></li>\n</ul>\n<h3 id=\"docker-run-创建一个新的容器并运行一个命令\"><a href=\"#docker-run-创建一个新的容器并运行一个命令\" class=\"headerlink\" title=\"docker run 创建一个新的容器并运行一个命令\"></a>docker run 创建一个新的容器并运行一个命令</h3><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>\n<p>OPTIONS说明：</p>\n<ul>\n<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>\n<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>\n<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>\n<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>\n<li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li>\n<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>\n<li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li>\n<li><strong>-h “mars”:</strong> 指定容器的hostname；</li>\n<li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li>\n<li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li>\n<li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li>\n<li><strong>-m :</strong>设置容器使用内存最大值；</li>\n<li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>\n<li><strong>–link=[]:</strong> 添加链接到另一个容器；</li>\n<li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li>\n<li>-P 大P使用expose的端口映射到主机的随机端口（感觉不好，还是自己指定比较好）</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -P -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 80:80 -v /data:/data -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker run -it nginx:latest /bin/bash</span><br><span class=\"line\">root@b8573233d675:/#</span><br></pre></td></tr></table></figure>\n<h3 id=\"docker-exec-：在运行的容器中执行命令\"><a href=\"#docker-exec-：在运行的容器中执行命令\" class=\"headerlink\" title=\"docker exec ：在运行的容器中执行命令\"></a>docker exec ：在运行的容器中执行命令</h3><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>\n<p>OPTIONS说明：</p>\n<ul>\n<li><strong>-d :</strong>分离模式: 在后台运行</li>\n<li><strong>-i :</strong>即使没有附加也保持STDIN 打开</li>\n<li><strong>-t :</strong>分配一个伪终端</li>\n</ul>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本 （用容器中的程序执行某段脚本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh</span><br><span class=\"line\">http://www.runoob.com/</span><br></pre></td></tr></table></figure>\n<p>在容器mynginx中开启一个交互模式的终端（启动容器的一个可交互bash窗口）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash</span><br><span class=\"line\">root@b1a0703e41e7:/#</span><br></pre></td></tr></table></figure>\n<p>启动、停止所有容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n<h4 id=\"TODO问题？？？\"><a href=\"#TODO问题？？？\" class=\"headerlink\" title=\"TODO问题？？？\"></a>TODO问题？？？</h4><ol>\n<li>怎么设置容器的cpu，内存，磁盘，网络大小限制？</li>\n<li>设置容器镜像</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://a2a3a2e1.m.daocloud.io</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service</span><br><span class=\"line\">sudo sed -i &quot;s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=http://a2a3a2e1.m.daocloud.io|g&quot; /etc/systemd/system/docker.service</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sed -i &quot;s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=https://pee6w651.mirror.aliyuncs.com|g&quot; /etc/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n<p>常用镜像：</p>\n<h4 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//-d 后台运行</span><br><span class=\"line\">docker run --name some-redis -d redis</span><br><span class=\"line\"></span><br><span class=\"line\">//--link A:B 连接过去(自动设置host) --rm 终端退出时自动清除容器内容(跟-d不同时用)</span><br><span class=\"line\">docker run -it --link some-redis:redis --rm redis redis-cli -h redis -p 6379</span><br><span class=\"line\"></span><br><span class=\"line\">//自定义conf配置文件</span><br><span class=\"line\">docker run -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf --name myredis redis redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建mysql容器 -e 设置环境变量</span><br><span class=\"line\">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//客户端连接</span><br><span class=\"line\">docker run -it --link some-mysql:mysql --rm mysql sh -c &apos;exec mysql -h&quot;$MYSQL_PORT_3306_TCP_ADDR&quot; -P&quot;$MYSQL_PORT_3306_TCP_PORT&quot; -uroot -p&quot;$MYSQL_ENV_MYSQL_ROOT_PASSWORD&quot;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//mysql的客户端</span><br><span class=\"line\">docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p</span><br><span class=\"line\"></span><br><span class=\"line\">//mysql使用配置文件/my/custom/config-file.cnf ==&gt; /etc/mysql/conf.d/config-file.cnf</span><br><span class=\"line\">docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//指定外部存储目录</span><br><span class=\"line\">docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//dump数据到宿主机</span><br><span class=\"line\">docker exec some-mysql sh -c &apos;exec mysqldump --all-databases -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&apos; &gt; /some/path/on/your/host/all-databases.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//静态页面</span><br><span class=\"line\">docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//配置文件</span><br><span class=\"line\">docker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//debug模式运行</span><br><span class=\"line\">docker run --name my-nginx -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx nginx-debug -g &apos;daemon off;&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my_zookeeper -p 2181:2181 -d zookeeper:latest</span><br><span class=\"line\">docker run -it --rm --link my_zookeeper:zookeeper zookeeper zkCli.sh -server zookeeper</span><br><span class=\"line\">https://segmentfault.com/a/1190000006907443</span><br><span class=\"line\"></span><br><span class=\"line\">10.111.100.235:2181,10.111.100.236:2181,10.111.100.237:2181,10.111.100.238:2181/user.base.global_id_gen/</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写dockerfile文件\"><a href=\"#编写dockerfile文件\" class=\"headerlink\" title=\"编写dockerfile文件\"></a>编写dockerfile文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dockerfile文件</span><br><span class=\"line\"></span><br><span class=\"line\">FROM debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\">RUN buildDeps=&apos;gcc libc6-dev make&apos; \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y $buildDeps \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot; \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; rm redis.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm -r /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure>\n<p>2.在 <code>Dockerfile</code> 文件所在目录执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t nginx:v3 .</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure>\n<p>如果在 <code>Dockerfile</code> 中这么写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY ./package.json /app/</span><br></pre></td></tr></table></figure>\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。</p>\n<h4 id=\"COPY命令\"><a href=\"#COPY命令\" class=\"headerlink\" title=\"COPY命令\"></a>COPY命令</h4><blockquote>\n<p>源路径必须使用相对当前目录的路径    </p>\n</blockquote>\n<p>从上下文路径复制文件到 镜像中某个目录</p>\n<p><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></p>\n<p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code>指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>\n<h4 id=\"CMD命令\"><a href=\"#CMD命令\" class=\"headerlink\" title=\"CMD命令\"></a>CMD命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"ENV命名\"><a href=\"#ENV命名\" class=\"headerlink\" title=\"ENV命名\"></a>ENV命名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV NODE_VERSION 7.2.0</span><br><span class=\"line\">RUN curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot; </span><br><span class=\"line\">#后面可以使用到</span><br></pre></td></tr></table></figure>\n<p>下列指令可以支持环境变量展开（可以用这个环境变量）： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>。</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><blockquote>\n<p>下面ENTRYPOINT命令会在这个目录下面执行命令</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR &lt;工作目录路径&gt; #以后可以在某层有一个 相对路径</span><br></pre></td></tr></table></figure>\n<h4 id=\"entrypoint-入口\"><a href=\"#entrypoint-入口\" class=\"headerlink\" title=\"entrypoint 入口\"></a>entrypoint 入口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/nginx&quot;,&quot;-g&quot;,&quot;daemon off&quot;]</span><br></pre></td></tr></table></figure>\n<p>3.运行docker容器中的项目：</p>\n<p>// -t 新的伪终端tty </p>\n<p>-i 交互输入保持打开 </p>\n<p>-d后台运行，在使用 <code>-d</code> 参数时，容器启动后会进入后台</p>\n<p>-p指定外内端口映射，<strong>-P:</strong>将容器内部使用的网络端口映射到我们使用的主机上。有expose就用expose的，没有就随机一个</p>\n<p>-v指定容器外目录与容器内目录映射</p>\n<p>-w /usr/src/myapp :指定容器的/usr/src/myapp目录为工作目录</p>\n<p>-e username=”ritchie”:设置环境变量；</p>\n<p>–env-file=[]: 从指定文件读入环境变量；</p>\n<p>–expose=[]:开放一个端口或一组端口；</p>\n<p>–name=”nginx-lb”: 为容器指定一个名称；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -t -i ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure>\n<p>终止：docker stop</p>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a //所有</span><br><span class=\"line\">docker ps -l //最近</span><br><span class=\"line\">docker ps -n 5//最近5个</span><br><span class=\"line\">docker ps //运行中</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect xx</span><br><span class=\"line\">docker inspect -f &apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; mymysql</span><br><span class=\"line\">docker top xx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">docker images ubutun_*</span><br><span class=\"line\">docker tag ubuntu:15.10 runoob/ubuntu:v3</span><br><span class=\"line\">docker build -t runoob/ubuntu:v1 . </span><br><span class=\"line\">docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3</span><br><span class=\"line\">docker import  my_ubuntu_v3.tar runoob/ubuntu:v4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias cp=&apos;cp -i&apos;</span><br><span class=\"line\">alias dex=&apos;docker exec -i -t&apos;</span><br><span class=\"line\">alias di=&apos;docker images&apos;</span><br><span class=\"line\">alias dip=&apos;docker inspect --format &apos;\\&apos;&apos;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&apos;\\&apos;&apos;&apos;</span><br><span class=\"line\">alias dkd=&apos;docker run -d -P&apos;</span><br><span class=\"line\">alias dki=&apos;docker run -i -t -P&apos;</span><br><span class=\"line\">alias dl=&apos;docker ps -l -q&apos;</span><br><span class=\"line\">alias dpa=&apos;docker ps -a&apos;</span><br><span class=\"line\">alias dps=&apos;docker ps&apos;</span><br><span class=\"line\">alias drmf=&apos;docker stop $(docker ps -a -q) &amp;&amp; docker rm $(docker ps -a -q)&apos;</span><br><span class=\"line\">alias egrep=&apos;egrep --color=auto&apos;</span><br><span class=\"line\">alias fgrep=&apos;fgrep --color=auto&apos;</span><br><span class=\"line\">alias grep=&apos;grep --color=auto&apos;</span><br><span class=\"line\">alias l.=&apos;ls -d .* --color=auto&apos;</span><br><span class=\"line\">alias ll=&apos;ls -l --color=auto&apos;</span><br><span class=\"line\">alias ls=&apos;ls --color=auto&apos;</span><br><span class=\"line\">alias mv=&apos;mv -i&apos;</span><br><span class=\"line\">alias rm=&apos;rm -i&apos;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker使用：\"><a href=\"#Docker使用：\" class=\"headerlink\" title=\"Docker使用：\"></a>Docker使用：</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"容器生命周期管理\"><a href=\"#容器生命周期管理\" class=\"headerlink\" title=\"容器生命周期管理\"></a>容器生命周期管理</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-run-command.html\" target=\"_blank\" rel=\"noopener\">run</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-start-stop-restart-command.html\" target=\"_blank\" rel=\"noopener\">start/stop/restart</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-kill-command.html\" target=\"_blank\" rel=\"noopener\">kill</a> 向容器发送信号</li>\n<li><a href=\"http://www.runoob.com/docker/docker-rm-command.html\" target=\"_blank\" rel=\"noopener\">rm</a> 常见combo是：stop x;rm x ;build x;run x</li>\n<li><a href=\"http://www.runoob.com/docker/docker-pause-unpause-command.html\" target=\"_blank\" rel=\"noopener\">pause/unpause</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-create-command.html\" target=\"_blank\" rel=\"noopener\">create</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-exec-command.html\" target=\"_blank\" rel=\"noopener\">exec</a> 在运行的容器中执行命令</li>\n</ul>\n<h3 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-ps-command.html\" target=\"_blank\" rel=\"noopener\">ps</a> 显示容器</li>\n<li><a href=\"http://www.runoob.com/docker/docker-inspect-command.html\" target=\"_blank\" rel=\"noopener\">inspect</a> 获取容器/镜像的元数据。返回json格式的数据</li>\n<li><a href=\"http://www.runoob.com/docker/docker-top-command.html\" target=\"_blank\" rel=\"noopener\">top</a> 查看容器中的进程信息</li>\n<li><a href=\"http://www.runoob.com/docker/docker-attach-command.html\" target=\"_blank\" rel=\"noopener\">attach</a> <strong>:</strong>连接到正在运行中的容器。</li>\n<li><a href=\"http://www.runoob.com/docker/docker-events-command.html\" target=\"_blank\" rel=\"noopener\">events</a> docker相关的事件</li>\n<li><a href=\"http://www.runoob.com/docker/docker-logs-command.html\" target=\"_blank\" rel=\"noopener\">logs</a> 应该是打印到stdout上的日志吧！！！</li>\n<li><a href=\"http://www.runoob.com/docker/docker-wait-command.html\" target=\"_blank\" rel=\"noopener\">wait</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-export-command.html\" target=\"_blank\" rel=\"noopener\">export</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-port-command.html\" target=\"_blank\" rel=\"noopener\">port</a> 显示容器的端口映射</li>\n</ul>\n<h3 id=\"容器rootfs命令\"><a href=\"#容器rootfs命令\" class=\"headerlink\" title=\"容器rootfs命令\"></a>容器rootfs命令</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-commit-command.html\" target=\"_blank\" rel=\"noopener\">commit</a> 类似git commit 一样修改之后保存新版本docker commit -m “commit test” uuu fuiboom/myubuntu:v1 给运行的容器创建一个新的保存镜像（一般常用Dockerfile和build来构建镜像）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-cp-command.html\" target=\"_blank\" rel=\"noopener\">cp</a> 容器与主机的数据拷贝</li>\n<li><a href=\"http://www.runoob.com/docker/docker-diff-command.html\" target=\"_blank\" rel=\"noopener\">diff</a> 显示容器文件结构的改变（显示自己改了什么东西）</li>\n</ul>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-login-command.html\" target=\"_blank\" rel=\"noopener\">login</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-pull-command.html\" target=\"_blank\" rel=\"noopener\">pull</a> 拉取别人已经配置好的环境（非常好用的命令）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-push-command.html\" target=\"_blank\" rel=\"noopener\">push</a> push自己的镜像，（需要登录）</li>\n<li><a href=\"http://www.runoob.com/docker/docker-search-command.html\" target=\"_blank\" rel=\"noopener\">search</a></li>\n</ul>\n<h3 id=\"本地镜像管理\"><a href=\"#本地镜像管理\" class=\"headerlink\" title=\"本地镜像管理\"></a>本地镜像管理</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-images-command.html\" target=\"_blank\" rel=\"noopener\">images</a> </li>\n<li><a href=\"http://www.runoob.com/docker/docker-rmi-command.html\" target=\"_blank\" rel=\"noopener\">rmi</a> 移除本地image(不然占用本地磁盘空间)</li>\n<li><a href=\"http://www.runoob.com/docker/docker-tag-command.html\" target=\"_blank\" rel=\"noopener\">tag</a> 创建一个镜像的引用docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] </li>\n</ul>\n<blockquote>\n<p>docker tag mysql_client_test fuiboom/mysql_client_test 把官方的改造重新命名一下就可以push</p>\n<p>docker push fuiboom/mysql_client_test</p>\n</blockquote>\n<ul>\n<li><a href=\"http://www.runoob.com/docker/docker-build-command.html\" target=\"_blank\" rel=\"noopener\">build</a> 根据Dockerfile创建一个镜像</li>\n<li><a href=\"http://www.runoob.com/docker/docker-history-command.html\" target=\"_blank\" rel=\"noopener\">history</a> 显示构建容器的历史数据</li>\n<li><a href=\"http://www.runoob.com/docker/docker-save-command.html\" target=\"_blank\" rel=\"noopener\">save</a> save和load搭配</li>\n<li><a href=\"http://www.runoob.com/docker/docker-import-command.html\" target=\"_blank\" rel=\"noopener\">import</a> export和import搭配</li>\n</ul>\n<h3 id=\"info-version\"><a href=\"#info-version\" class=\"headerlink\" title=\"info|version\"></a>info|version</h3><ul>\n<li><a href=\"http://www.runoob.com/docker/docker-info-command.html\" target=\"_blank\" rel=\"noopener\">info</a></li>\n<li><a href=\"http://www.runoob.com/docker/docker-version-command.html\" target=\"_blank\" rel=\"noopener\">version</a></li>\n</ul>\n<h3 id=\"docker-run-创建一个新的容器并运行一个命令\"><a href=\"#docker-run-创建一个新的容器并运行一个命令\" class=\"headerlink\" title=\"docker run 创建一个新的容器并运行一个命令\"></a>docker run 创建一个新的容器并运行一个命令</h3><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>\n<p>OPTIONS说明：</p>\n<ul>\n<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>\n<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>\n<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>\n<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>\n<li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li>\n<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>\n<li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li>\n<li><strong>-h “mars”:</strong> 指定容器的hostname；</li>\n<li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li>\n<li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li>\n<li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li>\n<li><strong>-m :</strong>设置容器使用内存最大值；</li>\n<li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>\n<li><strong>–link=[]:</strong> 添加链接到另一个容器；</li>\n<li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li>\n<li>-P 大P使用expose的端口映射到主机的随机端口（感觉不好，还是自己指定比较好）</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -P -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 80:80 -v /data:/data -d nginx:latest</span><br></pre></td></tr></table></figure>\n<p>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker run -it nginx:latest /bin/bash</span><br><span class=\"line\">root@b8573233d675:/#</span><br></pre></td></tr></table></figure>\n<h3 id=\"docker-exec-：在运行的容器中执行命令\"><a href=\"#docker-exec-：在运行的容器中执行命令\" class=\"headerlink\" title=\"docker exec ：在运行的容器中执行命令\"></a>docker exec ：在运行的容器中执行命令</h3><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>\n<p>OPTIONS说明：</p>\n<ul>\n<li><strong>-d :</strong>分离模式: 在后台运行</li>\n<li><strong>-i :</strong>即使没有附加也保持STDIN 打开</li>\n<li><strong>-t :</strong>分配一个伪终端</li>\n</ul>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本 （用容器中的程序执行某段脚本）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh</span><br><span class=\"line\">http://www.runoob.com/</span><br></pre></td></tr></table></figure>\n<p>在容器mynginx中开启一个交互模式的终端（启动容器的一个可交互bash窗口）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash</span><br><span class=\"line\">root@b1a0703e41e7:/#</span><br></pre></td></tr></table></figure>\n<p>启动、停止所有容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n<h4 id=\"TODO问题？？？\"><a href=\"#TODO问题？？？\" class=\"headerlink\" title=\"TODO问题？？？\"></a>TODO问题？？？</h4><ol>\n<li>怎么设置容器的cpu，内存，磁盘，网络大小限制？</li>\n<li>设置容器镜像</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://a2a3a2e1.m.daocloud.io</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service</span><br><span class=\"line\">sudo sed -i &quot;s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=http://a2a3a2e1.m.daocloud.io|g&quot; /etc/systemd/system/docker.service</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sed -i &quot;s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=https://pee6w651.mirror.aliyuncs.com|g&quot; /etc/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n<p>常用镜像：</p>\n<h4 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//-d 后台运行</span><br><span class=\"line\">docker run --name some-redis -d redis</span><br><span class=\"line\"></span><br><span class=\"line\">//--link A:B 连接过去(自动设置host) --rm 终端退出时自动清除容器内容(跟-d不同时用)</span><br><span class=\"line\">docker run -it --link some-redis:redis --rm redis redis-cli -h redis -p 6379</span><br><span class=\"line\"></span><br><span class=\"line\">//自定义conf配置文件</span><br><span class=\"line\">docker run -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf --name myredis redis redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建mysql容器 -e 设置环境变量</span><br><span class=\"line\">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//客户端连接</span><br><span class=\"line\">docker run -it --link some-mysql:mysql --rm mysql sh -c &apos;exec mysql -h&quot;$MYSQL_PORT_3306_TCP_ADDR&quot; -P&quot;$MYSQL_PORT_3306_TCP_PORT&quot; -uroot -p&quot;$MYSQL_ENV_MYSQL_ROOT_PASSWORD&quot;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//mysql的客户端</span><br><span class=\"line\">docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p</span><br><span class=\"line\"></span><br><span class=\"line\">//mysql使用配置文件/my/custom/config-file.cnf ==&gt; /etc/mysql/conf.d/config-file.cnf</span><br><span class=\"line\">docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//指定外部存储目录</span><br><span class=\"line\">docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\">//dump数据到宿主机</span><br><span class=\"line\">docker exec some-mysql sh -c &apos;exec mysqldump --all-databases -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&apos; &gt; /some/path/on/your/host/all-databases.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//静态页面</span><br><span class=\"line\">docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//配置文件</span><br><span class=\"line\">docker run --name my-custom-nginx-container -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//debug模式运行</span><br><span class=\"line\">docker run --name my-nginx -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx nginx-debug -g &apos;daemon off;&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my_zookeeper -p 2181:2181 -d zookeeper:latest</span><br><span class=\"line\">docker run -it --rm --link my_zookeeper:zookeeper zookeeper zkCli.sh -server zookeeper</span><br><span class=\"line\">https://segmentfault.com/a/1190000006907443</span><br><span class=\"line\"></span><br><span class=\"line\">10.111.100.235:2181,10.111.100.236:2181,10.111.100.237:2181,10.111.100.238:2181/user.base.global_id_gen/</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写dockerfile文件\"><a href=\"#编写dockerfile文件\" class=\"headerlink\" title=\"编写dockerfile文件\"></a>编写dockerfile文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dockerfile文件</span><br><span class=\"line\"></span><br><span class=\"line\">FROM debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\">RUN buildDeps=&apos;gcc libc6-dev make&apos; \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y $buildDeps \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot; \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; rm redis.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm -r /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure>\n<p>2.在 <code>Dockerfile</code> 文件所在目录执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t nginx:v3 .</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure>\n<p>如果在 <code>Dockerfile</code> 中这么写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY ./package.json /app/</span><br></pre></td></tr></table></figure>\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。</p>\n<h4 id=\"COPY命令\"><a href=\"#COPY命令\" class=\"headerlink\" title=\"COPY命令\"></a>COPY命令</h4><blockquote>\n<p>源路径必须使用相对当前目录的路径    </p>\n</blockquote>\n<p>从上下文路径复制文件到 镜像中某个目录</p>\n<p><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></p>\n<p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code>指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>\n<h4 id=\"CMD命令\"><a href=\"#CMD命令\" class=\"headerlink\" title=\"CMD命令\"></a>CMD命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"ENV命名\"><a href=\"#ENV命名\" class=\"headerlink\" title=\"ENV命名\"></a>ENV命名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV NODE_VERSION 7.2.0</span><br><span class=\"line\">RUN curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot; </span><br><span class=\"line\">#后面可以使用到</span><br></pre></td></tr></table></figure>\n<p>下列指令可以支持环境变量展开（可以用这个环境变量）： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>。</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><blockquote>\n<p>下面ENTRYPOINT命令会在这个目录下面执行命令</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR &lt;工作目录路径&gt; #以后可以在某层有一个 相对路径</span><br></pre></td></tr></table></figure>\n<h4 id=\"entrypoint-入口\"><a href=\"#entrypoint-入口\" class=\"headerlink\" title=\"entrypoint 入口\"></a>entrypoint 入口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/nginx&quot;,&quot;-g&quot;,&quot;daemon off&quot;]</span><br></pre></td></tr></table></figure>\n<p>3.运行docker容器中的项目：</p>\n<p>// -t 新的伪终端tty </p>\n<p>-i 交互输入保持打开 </p>\n<p>-d后台运行，在使用 <code>-d</code> 参数时，容器启动后会进入后台</p>\n<p>-p指定外内端口映射，<strong>-P:</strong>将容器内部使用的网络端口映射到我们使用的主机上。有expose就用expose的，没有就随机一个</p>\n<p>-v指定容器外目录与容器内目录映射</p>\n<p>-w /usr/src/myapp :指定容器的/usr/src/myapp目录为工作目录</p>\n<p>-e username=”ritchie”:设置环境变量；</p>\n<p>–env-file=[]: 从指定文件读入环境变量；</p>\n<p>–expose=[]:开放一个端口或一组端口；</p>\n<p>–name=”nginx-lb”: 为容器指定一个名称；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -t -i ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure>\n<p>终止：docker stop</p>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a //所有</span><br><span class=\"line\">docker ps -l //最近</span><br><span class=\"line\">docker ps -n 5//最近5个</span><br><span class=\"line\">docker ps //运行中</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect xx</span><br><span class=\"line\">docker inspect -f &apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; mymysql</span><br><span class=\"line\">docker top xx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">docker images ubutun_*</span><br><span class=\"line\">docker tag ubuntu:15.10 runoob/ubuntu:v3</span><br><span class=\"line\">docker build -t runoob/ubuntu:v1 . </span><br><span class=\"line\">docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3</span><br><span class=\"line\">docker import  my_ubuntu_v3.tar runoob/ubuntu:v4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias cp=&apos;cp -i&apos;</span><br><span class=\"line\">alias dex=&apos;docker exec -i -t&apos;</span><br><span class=\"line\">alias di=&apos;docker images&apos;</span><br><span class=\"line\">alias dip=&apos;docker inspect --format &apos;\\&apos;&apos;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&apos;\\&apos;&apos;&apos;</span><br><span class=\"line\">alias dkd=&apos;docker run -d -P&apos;</span><br><span class=\"line\">alias dki=&apos;docker run -i -t -P&apos;</span><br><span class=\"line\">alias dl=&apos;docker ps -l -q&apos;</span><br><span class=\"line\">alias dpa=&apos;docker ps -a&apos;</span><br><span class=\"line\">alias dps=&apos;docker ps&apos;</span><br><span class=\"line\">alias drmf=&apos;docker stop $(docker ps -a -q) &amp;&amp; docker rm $(docker ps -a -q)&apos;</span><br><span class=\"line\">alias egrep=&apos;egrep --color=auto&apos;</span><br><span class=\"line\">alias fgrep=&apos;fgrep --color=auto&apos;</span><br><span class=\"line\">alias grep=&apos;grep --color=auto&apos;</span><br><span class=\"line\">alias l.=&apos;ls -d .* --color=auto&apos;</span><br><span class=\"line\">alias ll=&apos;ls -l --color=auto&apos;</span><br><span class=\"line\">alias ls=&apos;ls --color=auto&apos;</span><br><span class=\"line\">alias mv=&apos;mv -i&apos;</span><br><span class=\"line\">alias rm=&apos;rm -i&apos;</span><br></pre></td></tr></table></figure>\n"},{"title":"k8s入门","date":"2019-02-22T02:22:20.000Z","_content":"\n# docker 虚拟化实现\n隔离是怎么实现的？\n- namespace 进程隔离，名称映射【障眼法】\n- Cgroups 限制进程使用资源，限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等。此外还可以对进程进行优先级设置、审计、进程挂起和恢复。\ncgroup示例：\n```\n# 配置相关文件\n$ mount -t cgroup \ncpuset on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)\ncpu on /sys/fs/cgroup/cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)\ncpuacct on /sys/fs/cgroup/cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)\nblkio on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)\nmemory on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)\n\n1. 创建一个cgroup配置\nroot@ubuntu:/sys/fs/cgroup/cpu$ mkdir container\nroot@ubuntu:/sys/fs/cgroup/cpu$ ls container/\ncgroup.clone_children cpu.cfs_period_us cpu.rt_period_us  cpu.shares notify_on_release\ncgroup.procs      cpu.cfs_quota_us  cpu.rt_runtime_us cpu.stat  tasks\n\n2. 执行脚本，进程号226，top 查看CPU占用100%\n$ while : ; do : ; done &\n[1] 226\n因为默认配置，quota为-1没有限制，period默认为100ms(100000us)：\n$ cat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us \n-1\n$ cat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us \n100000\n\n\n3. 向container组的cfs_quota写入20000us\n$ echo 20000 > /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us\n意味着这个进程只是用20%CPU\n\n4. 然后写入被限制的进程PID，使用top查看CPU占用20%了\n$ echo 226 > /sys/fs/cgroup/cpu/container/tasks \n\n# docker运行容器时可以指定参数\n$ docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash\n$ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us \n100000\n$ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us \n20000\n说明这个容器只能占用20%的CPU\n```\n### mount namespace\n挂载新的路径作为容器的根路径 rootfs\n核心流程：\n1.弃用linux namespace 2.指定cgroups参数 3.切换进程的根目录\n\n# QA\n1. docker 和KVM虚拟机区别？\n```\n- docker本身不占用资源，KVM本身占用200M内存\n- KVM虚拟化拦截，性能有损耗，docker直接使用宿主机的进程，性能更好\n- docker隔离不是很彻底，linux内核中很多对象和资源是不能被namespace化，如时间 宿主机改了容器也会改\n```\n\n\n2. 容器是一个单进程吗？\n\n>是，一个容器本质就是一个进程，用户的应用进程实际上就是容器里PID为1的进程，也是后续创建的进程的父进程。所以没办法在一个容器运行两个不同的应用。\n\n3. 解决容器类top查看到宿主机信息问题？\n\n>top是从/proc下面获取数据的，所以把宿主机的 /var/lib/lxcfs/proc/* 文件挂载到容器的/proc/* 就可以通过lxcfs读取到对应容器的内存，CPU等限制","source":"_posts/docker_k8s/k8s入门.md","raw":"---\ntitle: k8s入门\ntags:\n  - k8s\ncategories:\n  - docker\ndate: 2019-02-22 10:22:20\n---\n\n# docker 虚拟化实现\n隔离是怎么实现的？\n- namespace 进程隔离，名称映射【障眼法】\n- Cgroups 限制进程使用资源，限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等。此外还可以对进程进行优先级设置、审计、进程挂起和恢复。\ncgroup示例：\n```\n# 配置相关文件\n$ mount -t cgroup \ncpuset on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)\ncpu on /sys/fs/cgroup/cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)\ncpuacct on /sys/fs/cgroup/cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)\nblkio on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)\nmemory on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)\n\n1. 创建一个cgroup配置\nroot@ubuntu:/sys/fs/cgroup/cpu$ mkdir container\nroot@ubuntu:/sys/fs/cgroup/cpu$ ls container/\ncgroup.clone_children cpu.cfs_period_us cpu.rt_period_us  cpu.shares notify_on_release\ncgroup.procs      cpu.cfs_quota_us  cpu.rt_runtime_us cpu.stat  tasks\n\n2. 执行脚本，进程号226，top 查看CPU占用100%\n$ while : ; do : ; done &\n[1] 226\n因为默认配置，quota为-1没有限制，period默认为100ms(100000us)：\n$ cat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us \n-1\n$ cat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us \n100000\n\n\n3. 向container组的cfs_quota写入20000us\n$ echo 20000 > /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us\n意味着这个进程只是用20%CPU\n\n4. 然后写入被限制的进程PID，使用top查看CPU占用20%了\n$ echo 226 > /sys/fs/cgroup/cpu/container/tasks \n\n# docker运行容器时可以指定参数\n$ docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash\n$ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us \n100000\n$ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us \n20000\n说明这个容器只能占用20%的CPU\n```\n### mount namespace\n挂载新的路径作为容器的根路径 rootfs\n核心流程：\n1.弃用linux namespace 2.指定cgroups参数 3.切换进程的根目录\n\n# QA\n1. docker 和KVM虚拟机区别？\n```\n- docker本身不占用资源，KVM本身占用200M内存\n- KVM虚拟化拦截，性能有损耗，docker直接使用宿主机的进程，性能更好\n- docker隔离不是很彻底，linux内核中很多对象和资源是不能被namespace化，如时间 宿主机改了容器也会改\n```\n\n\n2. 容器是一个单进程吗？\n\n>是，一个容器本质就是一个进程，用户的应用进程实际上就是容器里PID为1的进程，也是后续创建的进程的父进程。所以没办法在一个容器运行两个不同的应用。\n\n3. 解决容器类top查看到宿主机信息问题？\n\n>top是从/proc下面获取数据的，所以把宿主机的 /var/lib/lxcfs/proc/* 文件挂载到容器的/proc/* 就可以通过lxcfs读取到对应容器的内存，CPU等限制","slug":"docker_k8s/k8s入门","published":1,"updated":"2019-02-22T07:21:09.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0co000vwl38stwij1bw","content":"<h1 id=\"docker-虚拟化实现\"><a href=\"#docker-虚拟化实现\" class=\"headerlink\" title=\"docker 虚拟化实现\"></a>docker 虚拟化实现</h1><p>隔离是怎么实现的？</p>\n<ul>\n<li>namespace 进程隔离，名称映射【障眼法】</li>\n<li>Cgroups 限制进程使用资源，限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等。此外还可以对进程进行优先级设置、审计、进程挂起和恢复。<br>cgroup示例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置相关文件</span><br><span class=\"line\">$ mount -t cgroup </span><br><span class=\"line\">cpuset on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)</span><br><span class=\"line\">cpu on /sys/fs/cgroup/cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)</span><br><span class=\"line\">cpuacct on /sys/fs/cgroup/cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)</span><br><span class=\"line\">blkio on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)</span><br><span class=\"line\">memory on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)</span><br><span class=\"line\"></span><br><span class=\"line\">1. 创建一个cgroup配置</span><br><span class=\"line\">root@ubuntu:/sys/fs/cgroup/cpu$ mkdir container</span><br><span class=\"line\">root@ubuntu:/sys/fs/cgroup/cpu$ ls container/</span><br><span class=\"line\">cgroup.clone_children cpu.cfs_period_us cpu.rt_period_us  cpu.shares notify_on_release</span><br><span class=\"line\">cgroup.procs      cpu.cfs_quota_us  cpu.rt_runtime_us cpu.stat  tasks</span><br><span class=\"line\"></span><br><span class=\"line\">2. 执行脚本，进程号226，top 查看CPU占用100%</span><br><span class=\"line\">$ while : ; do : ; done &amp;</span><br><span class=\"line\">[1] 226</span><br><span class=\"line\">因为默认配置，quota为-1没有限制，period默认为100ms(100000us)：</span><br><span class=\"line\">$ cat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us </span><br><span class=\"line\">-1</span><br><span class=\"line\">$ cat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us </span><br><span class=\"line\">100000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3. 向container组的cfs_quota写入20000us</span><br><span class=\"line\">$ echo 20000 &gt; /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us</span><br><span class=\"line\">意味着这个进程只是用20%CPU</span><br><span class=\"line\"></span><br><span class=\"line\">4. 然后写入被限制的进程PID，使用top查看CPU占用20%了</span><br><span class=\"line\">$ echo 226 &gt; /sys/fs/cgroup/cpu/container/tasks </span><br><span class=\"line\"></span><br><span class=\"line\"># docker运行容器时可以指定参数</span><br><span class=\"line\">$ docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash</span><br><span class=\"line\">$ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us </span><br><span class=\"line\">100000</span><br><span class=\"line\">$ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us </span><br><span class=\"line\">20000</span><br><span class=\"line\">说明这个容器只能占用20%的CPU</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"mount-namespace\"><a href=\"#mount-namespace\" class=\"headerlink\" title=\"mount namespace\"></a>mount namespace</h3><p>挂载新的路径作为容器的根路径 rootfs<br>核心流程：<br>1.弃用linux namespace 2.指定cgroups参数 3.切换进程的根目录</p>\n<h1 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h1><ol>\n<li><p>docker 和KVM虚拟机区别？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- docker本身不占用资源，KVM本身占用200M内存</span><br><span class=\"line\">- KVM虚拟化拦截，性能有损耗，docker直接使用宿主机的进程，性能更好</span><br><span class=\"line\">- docker隔离不是很彻底，linux内核中很多对象和资源是不能被namespace化，如时间 宿主机改了容器也会改</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>容器是一个单进程吗？</p>\n</li>\n</ol>\n<blockquote>\n<p>是，一个容器本质就是一个进程，用户的应用进程实际上就是容器里PID为1的进程，也是后续创建的进程的父进程。所以没办法在一个容器运行两个不同的应用。</p>\n</blockquote>\n<ol start=\"3\">\n<li>解决容器类top查看到宿主机信息问题？</li>\n</ol>\n<blockquote>\n<p>top是从/proc下面获取数据的，所以把宿主机的 /var/lib/lxcfs/proc/<em> 文件挂载到容器的/proc/</em> 就可以通过lxcfs读取到对应容器的内存，CPU等限制</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker-虚拟化实现\"><a href=\"#docker-虚拟化实现\" class=\"headerlink\" title=\"docker 虚拟化实现\"></a>docker 虚拟化实现</h1><p>隔离是怎么实现的？</p>\n<ul>\n<li>namespace 进程隔离，名称映射【障眼法】</li>\n<li>Cgroups 限制进程使用资源，限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等。此外还可以对进程进行优先级设置、审计、进程挂起和恢复。<br>cgroup示例：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置相关文件</span><br><span class=\"line\">$ mount -t cgroup </span><br><span class=\"line\">cpuset on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)</span><br><span class=\"line\">cpu on /sys/fs/cgroup/cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)</span><br><span class=\"line\">cpuacct on /sys/fs/cgroup/cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)</span><br><span class=\"line\">blkio on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)</span><br><span class=\"line\">memory on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)</span><br><span class=\"line\"></span><br><span class=\"line\">1. 创建一个cgroup配置</span><br><span class=\"line\">root@ubuntu:/sys/fs/cgroup/cpu$ mkdir container</span><br><span class=\"line\">root@ubuntu:/sys/fs/cgroup/cpu$ ls container/</span><br><span class=\"line\">cgroup.clone_children cpu.cfs_period_us cpu.rt_period_us  cpu.shares notify_on_release</span><br><span class=\"line\">cgroup.procs      cpu.cfs_quota_us  cpu.rt_runtime_us cpu.stat  tasks</span><br><span class=\"line\"></span><br><span class=\"line\">2. 执行脚本，进程号226，top 查看CPU占用100%</span><br><span class=\"line\">$ while : ; do : ; done &amp;</span><br><span class=\"line\">[1] 226</span><br><span class=\"line\">因为默认配置，quota为-1没有限制，period默认为100ms(100000us)：</span><br><span class=\"line\">$ cat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us </span><br><span class=\"line\">-1</span><br><span class=\"line\">$ cat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us </span><br><span class=\"line\">100000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3. 向container组的cfs_quota写入20000us</span><br><span class=\"line\">$ echo 20000 &gt; /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us</span><br><span class=\"line\">意味着这个进程只是用20%CPU</span><br><span class=\"line\"></span><br><span class=\"line\">4. 然后写入被限制的进程PID，使用top查看CPU占用20%了</span><br><span class=\"line\">$ echo 226 &gt; /sys/fs/cgroup/cpu/container/tasks </span><br><span class=\"line\"></span><br><span class=\"line\"># docker运行容器时可以指定参数</span><br><span class=\"line\">$ docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash</span><br><span class=\"line\">$ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us </span><br><span class=\"line\">100000</span><br><span class=\"line\">$ cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us </span><br><span class=\"line\">20000</span><br><span class=\"line\">说明这个容器只能占用20%的CPU</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"mount-namespace\"><a href=\"#mount-namespace\" class=\"headerlink\" title=\"mount namespace\"></a>mount namespace</h3><p>挂载新的路径作为容器的根路径 rootfs<br>核心流程：<br>1.弃用linux namespace 2.指定cgroups参数 3.切换进程的根目录</p>\n<h1 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h1><ol>\n<li><p>docker 和KVM虚拟机区别？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- docker本身不占用资源，KVM本身占用200M内存</span><br><span class=\"line\">- KVM虚拟化拦截，性能有损耗，docker直接使用宿主机的进程，性能更好</span><br><span class=\"line\">- docker隔离不是很彻底，linux内核中很多对象和资源是不能被namespace化，如时间 宿主机改了容器也会改</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>容器是一个单进程吗？</p>\n</li>\n</ol>\n<blockquote>\n<p>是，一个容器本质就是一个进程，用户的应用进程实际上就是容器里PID为1的进程，也是后续创建的进程的父进程。所以没办法在一个容器运行两个不同的应用。</p>\n</blockquote>\n<ol start=\"3\">\n<li>解决容器类top查看到宿主机信息问题？</li>\n</ol>\n<blockquote>\n<p>top是从/proc下面获取数据的，所以把宿主机的 /var/lib/lxcfs/proc/<em> 文件挂载到容器的/proc/</em> 就可以通过lxcfs读取到对应容器的内存，CPU等限制</p>\n</blockquote>\n"},{"title":"gin概览","date":"2019-04-05T15:23:09.000Z","_content":"\n# Gin框架概览\n\n### 基本用法\n\n```\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\tr.Run() // listen and serve on 0.0.0.0:8080\n}\n```\n\n\n\n#### 1.实现middleware\n\n```\n//使用middleware\nr := gin.New()\nr.Use(gin.Recovery())\n\n//定义middleware\nfunc Recovery() HandlerFunc {\n\treturn func(c *Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t}\n\t\t}()\n\t\t//fmt.Print(\"before\")\n\t\tc.Next()\n\t\t//fmt.Print(\"after\")\n\t\t\n\t}\n}\n\n//核心实现，调用下一个handler\nfunc (c *Context) Next() {\n\tc.index++\n\tfor c.index < int8(len(c.handlers)) {\n\t\tc.handlers[c.index](c)\n\t\tc.index++\n\t}\n}\n\ntype RouterGroup struct {\n\tHandlers HandlersChain //添加middleware链条\n\tbasePath string //base路径\n\tengine   *Engine //引用全局engine\n\troot     bool //是否根\n}\nr.Use(gin.Recovery()) //添加middleware到Handlers链条\n接入和handler一样\ntype HandlerFunc func(*Context)\n```\n\n#### 2.路径分组实现\n\n```\n//使用方式\nmux = gin.New()\napi := mux.Group(\"/api/v1\")\n{\n\tapi.POST(\"/login\", controller.Login)\n\tapi.DELETE(\"/logout\", middleware.SessionCheck(), controller.Logout)\n}\n\n//实现\nfunc (group *RouterGroup) Group(relativePath string, handlers ...HandlerFunc) *RouterGroup {\n\treturn &RouterGroup{\n\t\tHandlers: group.combineHandlers(handlers),//全局的handlers+当前组的handlers\n\t\tbasePath: group.calculateAbsolutePath(relativePath),//计算相对/路径\n\t\tengine:   group.engine,//全局的engine对象\n\t}\n}\n```\n\n#### 3.入口\n\n```\nfunc (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tc := engine.pool.Get().(*Context)//并发：多个context\n\tc.writermem.reset(w) //resp\n\tc.Request = req //req\n\tc.reset() //重置gincontext\n\n\tengine.handleHTTPRequest(c) //执行handler链条\n\n\tengine.pool.Put(c)\n}\n```\n\n","source":"_posts/framework/gin概览.md","raw":"---\ntitle: gin概览\ntags:\n  - gin\ncategories:\n  - 框架\ndate: 2019-04-05 23:23:09\n---\n\n# Gin框架概览\n\n### 基本用法\n\n```\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\tr.Run() // listen and serve on 0.0.0.0:8080\n}\n```\n\n\n\n#### 1.实现middleware\n\n```\n//使用middleware\nr := gin.New()\nr.Use(gin.Recovery())\n\n//定义middleware\nfunc Recovery() HandlerFunc {\n\treturn func(c *Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t}\n\t\t}()\n\t\t//fmt.Print(\"before\")\n\t\tc.Next()\n\t\t//fmt.Print(\"after\")\n\t\t\n\t}\n}\n\n//核心实现，调用下一个handler\nfunc (c *Context) Next() {\n\tc.index++\n\tfor c.index < int8(len(c.handlers)) {\n\t\tc.handlers[c.index](c)\n\t\tc.index++\n\t}\n}\n\ntype RouterGroup struct {\n\tHandlers HandlersChain //添加middleware链条\n\tbasePath string //base路径\n\tengine   *Engine //引用全局engine\n\troot     bool //是否根\n}\nr.Use(gin.Recovery()) //添加middleware到Handlers链条\n接入和handler一样\ntype HandlerFunc func(*Context)\n```\n\n#### 2.路径分组实现\n\n```\n//使用方式\nmux = gin.New()\napi := mux.Group(\"/api/v1\")\n{\n\tapi.POST(\"/login\", controller.Login)\n\tapi.DELETE(\"/logout\", middleware.SessionCheck(), controller.Logout)\n}\n\n//实现\nfunc (group *RouterGroup) Group(relativePath string, handlers ...HandlerFunc) *RouterGroup {\n\treturn &RouterGroup{\n\t\tHandlers: group.combineHandlers(handlers),//全局的handlers+当前组的handlers\n\t\tbasePath: group.calculateAbsolutePath(relativePath),//计算相对/路径\n\t\tengine:   group.engine,//全局的engine对象\n\t}\n}\n```\n\n#### 3.入口\n\n```\nfunc (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tc := engine.pool.Get().(*Context)//并发：多个context\n\tc.writermem.reset(w) //resp\n\tc.Request = req //req\n\tc.reset() //重置gincontext\n\n\tengine.handleHTTPRequest(c) //执行handler链条\n\n\tengine.pool.Put(c)\n}\n```\n\n","slug":"framework/gin概览","published":1,"updated":"2019-04-05T15:24:58.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cq000zwl388k1g99us","content":"<h1 id=\"Gin框架概览\"><a href=\"#Gin框架概览\" class=\"headerlink\" title=\"Gin框架概览\"></a>Gin框架概览</h1><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;github.com/gin-gonic/gin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.GET(&quot;/ping&quot;, func(c *gin.Context) &#123;</span><br><span class=\"line\">\t\tc.JSON(200, gin.H&#123;</span><br><span class=\"line\">\t\t\t&quot;message&quot;: &quot;pong&quot;,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run() // listen and serve on 0.0.0.0:8080</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-实现middleware\"><a href=\"#1-实现middleware\" class=\"headerlink\" title=\"1.实现middleware\"></a>1.实现middleware</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用middleware</span><br><span class=\"line\">r := gin.New()</span><br><span class=\"line\">r.Use(gin.Recovery())</span><br><span class=\"line\"></span><br><span class=\"line\">//定义middleware</span><br><span class=\"line\">func Recovery() HandlerFunc &#123;</span><br><span class=\"line\">\treturn func(c *Context) &#123;</span><br><span class=\"line\">\t\tdefer func() &#123;</span><br><span class=\"line\">\t\t\tif err := recover(); err != nil &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t//fmt.Print(&quot;before&quot;)</span><br><span class=\"line\">\t\tc.Next()</span><br><span class=\"line\">\t\t//fmt.Print(&quot;after&quot;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//核心实现，调用下一个handler</span><br><span class=\"line\">func (c *Context) Next() &#123;</span><br><span class=\"line\">\tc.index++</span><br><span class=\"line\">\tfor c.index &lt; int8(len(c.handlers)) &#123;</span><br><span class=\"line\">\t\tc.handlers[c.index](c)</span><br><span class=\"line\">\t\tc.index++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type RouterGroup struct &#123;</span><br><span class=\"line\">\tHandlers HandlersChain //添加middleware链条</span><br><span class=\"line\">\tbasePath string //base路径</span><br><span class=\"line\">\tengine   *Engine //引用全局engine</span><br><span class=\"line\">\troot     bool //是否根</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r.Use(gin.Recovery()) //添加middleware到Handlers链条</span><br><span class=\"line\">接入和handler一样</span><br><span class=\"line\">type HandlerFunc func(*Context)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-路径分组实现\"><a href=\"#2-路径分组实现\" class=\"headerlink\" title=\"2.路径分组实现\"></a>2.路径分组实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用方式</span><br><span class=\"line\">mux = gin.New()</span><br><span class=\"line\">api := mux.Group(&quot;/api/v1&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tapi.POST(&quot;/login&quot;, controller.Login)</span><br><span class=\"line\">\tapi.DELETE(&quot;/logout&quot;, middleware.SessionCheck(), controller.Logout)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实现</span><br><span class=\"line\">func (group *RouterGroup) Group(relativePath string, handlers ...HandlerFunc) *RouterGroup &#123;</span><br><span class=\"line\">\treturn &amp;RouterGroup&#123;</span><br><span class=\"line\">\t\tHandlers: group.combineHandlers(handlers),//全局的handlers+当前组的handlers</span><br><span class=\"line\">\t\tbasePath: group.calculateAbsolutePath(relativePath),//计算相对/路径</span><br><span class=\"line\">\t\tengine:   group.engine,//全局的engine对象</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-入口\"><a href=\"#3-入口\" class=\"headerlink\" title=\"3.入口\"></a>3.入口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">\tc := engine.pool.Get().(*Context)//并发：多个context</span><br><span class=\"line\">\tc.writermem.reset(w) //resp</span><br><span class=\"line\">\tc.Request = req //req</span><br><span class=\"line\">\tc.reset() //重置gincontext</span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.handleHTTPRequest(c) //执行handler链条</span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.pool.Put(c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Gin框架概览\"><a href=\"#Gin框架概览\" class=\"headerlink\" title=\"Gin框架概览\"></a>Gin框架概览</h1><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;github.com/gin-gonic/gin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.GET(&quot;/ping&quot;, func(c *gin.Context) &#123;</span><br><span class=\"line\">\t\tc.JSON(200, gin.H&#123;</span><br><span class=\"line\">\t\t\t&quot;message&quot;: &quot;pong&quot;,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run() // listen and serve on 0.0.0.0:8080</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-实现middleware\"><a href=\"#1-实现middleware\" class=\"headerlink\" title=\"1.实现middleware\"></a>1.实现middleware</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用middleware</span><br><span class=\"line\">r := gin.New()</span><br><span class=\"line\">r.Use(gin.Recovery())</span><br><span class=\"line\"></span><br><span class=\"line\">//定义middleware</span><br><span class=\"line\">func Recovery() HandlerFunc &#123;</span><br><span class=\"line\">\treturn func(c *Context) &#123;</span><br><span class=\"line\">\t\tdefer func() &#123;</span><br><span class=\"line\">\t\t\tif err := recover(); err != nil &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t//fmt.Print(&quot;before&quot;)</span><br><span class=\"line\">\t\tc.Next()</span><br><span class=\"line\">\t\t//fmt.Print(&quot;after&quot;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//核心实现，调用下一个handler</span><br><span class=\"line\">func (c *Context) Next() &#123;</span><br><span class=\"line\">\tc.index++</span><br><span class=\"line\">\tfor c.index &lt; int8(len(c.handlers)) &#123;</span><br><span class=\"line\">\t\tc.handlers[c.index](c)</span><br><span class=\"line\">\t\tc.index++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type RouterGroup struct &#123;</span><br><span class=\"line\">\tHandlers HandlersChain //添加middleware链条</span><br><span class=\"line\">\tbasePath string //base路径</span><br><span class=\"line\">\tengine   *Engine //引用全局engine</span><br><span class=\"line\">\troot     bool //是否根</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r.Use(gin.Recovery()) //添加middleware到Handlers链条</span><br><span class=\"line\">接入和handler一样</span><br><span class=\"line\">type HandlerFunc func(*Context)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-路径分组实现\"><a href=\"#2-路径分组实现\" class=\"headerlink\" title=\"2.路径分组实现\"></a>2.路径分组实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用方式</span><br><span class=\"line\">mux = gin.New()</span><br><span class=\"line\">api := mux.Group(&quot;/api/v1&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tapi.POST(&quot;/login&quot;, controller.Login)</span><br><span class=\"line\">\tapi.DELETE(&quot;/logout&quot;, middleware.SessionCheck(), controller.Logout)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实现</span><br><span class=\"line\">func (group *RouterGroup) Group(relativePath string, handlers ...HandlerFunc) *RouterGroup &#123;</span><br><span class=\"line\">\treturn &amp;RouterGroup&#123;</span><br><span class=\"line\">\t\tHandlers: group.combineHandlers(handlers),//全局的handlers+当前组的handlers</span><br><span class=\"line\">\t\tbasePath: group.calculateAbsolutePath(relativePath),//计算相对/路径</span><br><span class=\"line\">\t\tengine:   group.engine,//全局的engine对象</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-入口\"><a href=\"#3-入口\" class=\"headerlink\" title=\"3.入口\"></a>3.入口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">\tc := engine.pool.Get().(*Context)//并发：多个context</span><br><span class=\"line\">\tc.writermem.reset(w) //resp</span><br><span class=\"line\">\tc.Request = req //req</span><br><span class=\"line\">\tc.reset() //重置gincontext</span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.handleHTTPRequest(c) //执行handler链条</span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.pool.Put(c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"etcd_intro","date":"2019-10-07T13:12:21.000Z","_content":"\n# etcd笔记\n\n> 定义：分布式的kv存储系统\n\n# 常用API\n\n```\nget key\nput key val\nxxx=lease grant 60\nput key val —lease=xxx\ndelete key\nwatch key\n```\n\n\n\n#### lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key\n\n>  keep-alive让lease不过期\n\n","source":"_posts/framework/etcd-intro.md","raw":"---\ntitle: etcd_intro\ntags:\n  - etcd\ncategories:\n  - etcd\ndate: 2019-10-07 21:12:21\n---\n\n# etcd笔记\n\n> 定义：分布式的kv存储系统\n\n# 常用API\n\n```\nget key\nput key val\nxxx=lease grant 60\nput key val —lease=xxx\ndelete key\nwatch key\n```\n\n\n\n#### lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key\n\n>  keep-alive让lease不过期\n\n","slug":"framework/etcd-intro","published":1,"updated":"2019-10-07T13:13:09.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cr0011wl385phm7c6w","content":"<h1 id=\"etcd笔记\"><a href=\"#etcd笔记\" class=\"headerlink\" title=\"etcd笔记\"></a>etcd笔记</h1><blockquote>\n<p>定义：分布式的kv存储系统</p>\n</blockquote>\n<h1 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get key</span><br><span class=\"line\">put key val</span><br><span class=\"line\">xxx=lease grant 60</span><br><span class=\"line\">put key val —lease=xxx</span><br><span class=\"line\">delete key</span><br><span class=\"line\">watch key</span><br></pre></td></tr></table></figure>\n<h4 id=\"lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key\"><a href=\"#lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key\" class=\"headerlink\" title=\"lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key\"></a>lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key</h4><blockquote>\n<p> keep-alive让lease不过期</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"etcd笔记\"><a href=\"#etcd笔记\" class=\"headerlink\" title=\"etcd笔记\"></a>etcd笔记</h1><blockquote>\n<p>定义：分布式的kv存储系统</p>\n</blockquote>\n<h1 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get key</span><br><span class=\"line\">put key val</span><br><span class=\"line\">xxx=lease grant 60</span><br><span class=\"line\">put key val —lease=xxx</span><br><span class=\"line\">delete key</span><br><span class=\"line\">watch key</span><br></pre></td></tr></table></figure>\n<h4 id=\"lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key\"><a href=\"#lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key\" class=\"headerlink\" title=\"lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key\"></a>lease定义一个过期时长，多个key都可以绑定到这个lease上，lease过期后会删除所有关联的key</h4><blockquote>\n<p> keep-alive让lease不过期</p>\n</blockquote>\n"},{"title":"thrift_intro","date":"2019-10-07T12:40:13.000Z","_content":"# thrift笔记\n\n> Thrift实际上是实现了C/S模式，通过代码生成工具将接口定义文件生成服务器端和客户端代码（可以为不同语言），从而实现服务端和客户端跨语言的支持。用户在Thirft描述文件中声明自己的服务，这些服务经过编译后会生成相应语言的代码文件，然后用户实现服务（客户端调用服务，服务器端提服务）便可以了。其中protocol（协议层, 定义数据传输格式，可以为二进制或者XML等）和transport（传输层，定义数据传输方式，可以为TCP/IP传输，内存共享或者文件共享等）被用作运行时库。\n\nThrift的网络栈如下所示：\n\n![](https://raw.githubusercontent.com/greyireland/images/master/img/20191007203916.png)\n\n**3.1   Transport**\n\nTransport层提供了一个简单的网络读写抽象层。这使得thrift底层的transport从系统其它部分（如：序列化/反序列化）解耦。以下是一些Transport接口提供的方法：\n\n除了以上几个接口，Thrift使用ServerTransport接口接受或者创建原始transport对象。正如名字暗示的那样，ServerTransport用在server端，为到来的连接创建Transport对象。\n\n**3.2   Protocol**\n\nProtocol抽象层定义了一种将内存中数据结构映射成可传输格式的机制。换句话说，Protocol定义了datatype怎样使用底层的Transport对自己进行编解码。因此，Protocol的实现要给出编码机制并负责对数据进行序列化。\n\nProtocol接口的定义如下：\n\n下面是一些对大部分thrift支持的语言均可用的protocol：\n\n(1)     binary：简单的二进制编码\n\n(2)     Compact：具体见THRIFT-11\n\n(3)     Json\n\n**3.3   Processor**\n\nProcessor封装了从输入数据流中读数据和向数据数据流中写数据的操作。读写数据流用Protocol对象表示。Processor的结构体非常简单:\n\n与服务相关的processor实现由编译器产生。Processor主要工作流程如下：从连接中读取数据（使用输入protocol），将处理授权给handler（由用户实现），最后将结果写到连接上（使用输出protocol）。\n\n**3.4   Server**\n\nServer将以上所有特性集成在一起：\n\n（1）  创建一个transport对象\n\n（2）  为transport对象创建输入输出protocol\n\n（3）  基于输入输出protocol创建processor\n\n（4）  等待连接请求并将之交给processor处理\n\n\n\n","source":"_posts/framework/thrift-intro.md","raw":"---\ntitle: thrift_intro\ntags:\n  - thrift\ncategories:\n  - rpc\ndate: 2019-10-07 20:40:13\n---\n# thrift笔记\n\n> Thrift实际上是实现了C/S模式，通过代码生成工具将接口定义文件生成服务器端和客户端代码（可以为不同语言），从而实现服务端和客户端跨语言的支持。用户在Thirft描述文件中声明自己的服务，这些服务经过编译后会生成相应语言的代码文件，然后用户实现服务（客户端调用服务，服务器端提服务）便可以了。其中protocol（协议层, 定义数据传输格式，可以为二进制或者XML等）和transport（传输层，定义数据传输方式，可以为TCP/IP传输，内存共享或者文件共享等）被用作运行时库。\n\nThrift的网络栈如下所示：\n\n![](https://raw.githubusercontent.com/greyireland/images/master/img/20191007203916.png)\n\n**3.1   Transport**\n\nTransport层提供了一个简单的网络读写抽象层。这使得thrift底层的transport从系统其它部分（如：序列化/反序列化）解耦。以下是一些Transport接口提供的方法：\n\n除了以上几个接口，Thrift使用ServerTransport接口接受或者创建原始transport对象。正如名字暗示的那样，ServerTransport用在server端，为到来的连接创建Transport对象。\n\n**3.2   Protocol**\n\nProtocol抽象层定义了一种将内存中数据结构映射成可传输格式的机制。换句话说，Protocol定义了datatype怎样使用底层的Transport对自己进行编解码。因此，Protocol的实现要给出编码机制并负责对数据进行序列化。\n\nProtocol接口的定义如下：\n\n下面是一些对大部分thrift支持的语言均可用的protocol：\n\n(1)     binary：简单的二进制编码\n\n(2)     Compact：具体见THRIFT-11\n\n(3)     Json\n\n**3.3   Processor**\n\nProcessor封装了从输入数据流中读数据和向数据数据流中写数据的操作。读写数据流用Protocol对象表示。Processor的结构体非常简单:\n\n与服务相关的processor实现由编译器产生。Processor主要工作流程如下：从连接中读取数据（使用输入protocol），将处理授权给handler（由用户实现），最后将结果写到连接上（使用输出protocol）。\n\n**3.4   Server**\n\nServer将以上所有特性集成在一起：\n\n（1）  创建一个transport对象\n\n（2）  为transport对象创建输入输出protocol\n\n（3）  基于输入输出protocol创建processor\n\n（4）  等待连接请求并将之交给processor处理\n\n\n\n","slug":"framework/thrift-intro","published":1,"updated":"2019-10-07T12:41:19.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cs0015wl38bomucqik","content":"<h1 id=\"thrift笔记\"><a href=\"#thrift笔记\" class=\"headerlink\" title=\"thrift笔记\"></a>thrift笔记</h1><blockquote>\n<p>Thrift实际上是实现了C/S模式，通过代码生成工具将接口定义文件生成服务器端和客户端代码（可以为不同语言），从而实现服务端和客户端跨语言的支持。用户在Thirft描述文件中声明自己的服务，这些服务经过编译后会生成相应语言的代码文件，然后用户实现服务（客户端调用服务，服务器端提服务）便可以了。其中protocol（协议层, 定义数据传输格式，可以为二进制或者XML等）和transport（传输层，定义数据传输方式，可以为TCP/IP传输，内存共享或者文件共享等）被用作运行时库。</p>\n</blockquote>\n<p>Thrift的网络栈如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/greyireland/images/master/img/20191007203916.png\" alt=\"\"></p>\n<p><strong>3.1   Transport</strong></p>\n<p>Transport层提供了一个简单的网络读写抽象层。这使得thrift底层的transport从系统其它部分（如：序列化/反序列化）解耦。以下是一些Transport接口提供的方法：</p>\n<p>除了以上几个接口，Thrift使用ServerTransport接口接受或者创建原始transport对象。正如名字暗示的那样，ServerTransport用在server端，为到来的连接创建Transport对象。</p>\n<p><strong>3.2   Protocol</strong></p>\n<p>Protocol抽象层定义了一种将内存中数据结构映射成可传输格式的机制。换句话说，Protocol定义了datatype怎样使用底层的Transport对自己进行编解码。因此，Protocol的实现要给出编码机制并负责对数据进行序列化。</p>\n<p>Protocol接口的定义如下：</p>\n<p>下面是一些对大部分thrift支持的语言均可用的protocol：</p>\n<p>(1)     binary：简单的二进制编码</p>\n<p>(2)     Compact：具体见THRIFT-11</p>\n<p>(3)     Json</p>\n<p><strong>3.3   Processor</strong></p>\n<p>Processor封装了从输入数据流中读数据和向数据数据流中写数据的操作。读写数据流用Protocol对象表示。Processor的结构体非常简单:</p>\n<p>与服务相关的processor实现由编译器产生。Processor主要工作流程如下：从连接中读取数据（使用输入protocol），将处理授权给handler（由用户实现），最后将结果写到连接上（使用输出protocol）。</p>\n<p><strong>3.4   Server</strong></p>\n<p>Server将以上所有特性集成在一起：</p>\n<p>（1）  创建一个transport对象</p>\n<p>（2）  为transport对象创建输入输出protocol</p>\n<p>（3）  基于输入输出protocol创建processor</p>\n<p>（4）  等待连接请求并将之交给processor处理</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"thrift笔记\"><a href=\"#thrift笔记\" class=\"headerlink\" title=\"thrift笔记\"></a>thrift笔记</h1><blockquote>\n<p>Thrift实际上是实现了C/S模式，通过代码生成工具将接口定义文件生成服务器端和客户端代码（可以为不同语言），从而实现服务端和客户端跨语言的支持。用户在Thirft描述文件中声明自己的服务，这些服务经过编译后会生成相应语言的代码文件，然后用户实现服务（客户端调用服务，服务器端提服务）便可以了。其中protocol（协议层, 定义数据传输格式，可以为二进制或者XML等）和transport（传输层，定义数据传输方式，可以为TCP/IP传输，内存共享或者文件共享等）被用作运行时库。</p>\n</blockquote>\n<p>Thrift的网络栈如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/greyireland/images/master/img/20191007203916.png\" alt=\"\"></p>\n<p><strong>3.1   Transport</strong></p>\n<p>Transport层提供了一个简单的网络读写抽象层。这使得thrift底层的transport从系统其它部分（如：序列化/反序列化）解耦。以下是一些Transport接口提供的方法：</p>\n<p>除了以上几个接口，Thrift使用ServerTransport接口接受或者创建原始transport对象。正如名字暗示的那样，ServerTransport用在server端，为到来的连接创建Transport对象。</p>\n<p><strong>3.2   Protocol</strong></p>\n<p>Protocol抽象层定义了一种将内存中数据结构映射成可传输格式的机制。换句话说，Protocol定义了datatype怎样使用底层的Transport对自己进行编解码。因此，Protocol的实现要给出编码机制并负责对数据进行序列化。</p>\n<p>Protocol接口的定义如下：</p>\n<p>下面是一些对大部分thrift支持的语言均可用的protocol：</p>\n<p>(1)     binary：简单的二进制编码</p>\n<p>(2)     Compact：具体见THRIFT-11</p>\n<p>(3)     Json</p>\n<p><strong>3.3   Processor</strong></p>\n<p>Processor封装了从输入数据流中读数据和向数据数据流中写数据的操作。读写数据流用Protocol对象表示。Processor的结构体非常简单:</p>\n<p>与服务相关的processor实现由编译器产生。Processor主要工作流程如下：从连接中读取数据（使用输入protocol），将处理授权给handler（由用户实现），最后将结果写到连接上（使用输出protocol）。</p>\n<p><strong>3.4   Server</strong></p>\n<p>Server将以上所有特性集成在一起：</p>\n<p>（1）  创建一个transport对象</p>\n<p>（2）  为transport对象创建输入输出protocol</p>\n<p>（3）  基于输入输出protocol创建processor</p>\n<p>（4）  等待连接请求并将之交给processor处理</p>\n"},{"title":"boltdb使用","date":"2019-04-19T05:46:16.000Z","_content":"\n# golang boltdb的学习和实践\n\n## 1. 安装\n\n```\ngo get github.com/boltdb/bolt\n```\n\n## 2.创建和启动数据库\n\n```\ndb, err := bolt.Open(\"my.db\", 0600, nil)\n```\n\n其中`open`的第一个参数为路径,如果数据库不存在则会创建名为my.db的数据库， 第二个为文件操作，第三个参数是可选参数， 内部可以配置只读和超时时间等，\n特别需要注意的地方就是因为boltdb是文件操作类型的数据库，所以只能单点写入和读取，如果多个同时操作的话后者会被挂起直到前者关闭操作为止， boltdb一次只允许一个读写事务，但一次允许多个只读事务。所以数据具有较强的一致性。\n\n因此单个事务和从它们创建的所有对象（例如桶、键）都不是线程安全的。与数据在多个概念你必须为每一个或使用锁机制来保证只有一个goroutine里操作改变数据。\n只读事务和读写事物通常不应该在同一个goroutine里同时打开。由于读写事务需要周期性地重新映射数据文件，这可能导致死锁。\n\n## 3.读写事务\n\nboltdb的读写事务操作我们可以使用`DB.Update()`来完成形如：\n\n```\nerr := db.Update(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n在闭包fun中,在结束时返回nil来提交事务。您还可以通过返回一个错误在任何点回滚事务。所有数据库操作都允许在读写事务中进行。\n始终要关注err返回，因为它将报告导致您的事务不能完成的所有磁盘故障。\n\n## 4.批量读写事物\n\n每一次新的事物都需要等待上一次事物的结束，这种开销我们可以通过`DB.Batch()`批处理来完成\n\n```\nerr := db.Batch(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n在批处理过程中如果某个事务失败了,批处理会多次调用这个函数函数返回成功则成功。如果中途失败了，则整个事务会回滚。\n\n## 5.只读事务\n\n只读事务可以使用`DB.View()`来完成\n\n```\nerr := db.View(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n不改变数据的操作都可以通过只读事务来完成， 您只能检索桶、检索值，或在只读事务中复制数据库。\n\n## 6.启动事务\n\n`DB.Begin()`启动函数包含在db.update和db.batch中,该函数启动事务开始执行事务并返回结果关闭事务，这是boltdb推荐的方式，有时候你可能需要手动启动事物你可以使用`Tx.Begin()`来开始，切记不要忘记关闭事务。\n\n```\n// Start a writable transaction.\ntx, err := db.Begin(true)\nif err != nil {\n    return err\n}\ndefer tx.Rollback()\n\n// Use the transaction...\n_, err := tx.CreateBucket([]byte(\"MyBucket\"))\nif err != nil {\n    return err\n}\n\n// Commit the transaction and check for error.\nif err := tx.Commit(); err != nil {\n    return err\n}\n```\n\n## 7.使用桶\n\n桶是数据库中键/值对的集合。桶中的所有键必须是唯一的。您可以使用`DB.CreateBucket()`创建一个桶：\n\n```\ndb.Update(func(tx *bolt.Tx) error {\n    b, err := tx.CreateBucket([]byte(\"MyBucket\"))\n    if err != nil {\n        return fmt.Errorf(\"create bucket: %s\", err)\n    }\n    return nil\n})\n```\n\n你也可以是实用`Tx.CreateBucketIfNotExists()`来创建桶，该函数会先判断是否已经存在该桶不存在即创建， 删除桶可以使用`Tx.DeleteBucket()`来完成\n\n## 8.使用k-v对\n\n存储键值对到桶里可以使用`Bucket.Put()`来完成：\n\n```\ndb.Update(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyFriendsBucket\"))\n    err := b.Put([]byte(\"one\"), []byte(\"zhangsan\"))\n    return err\n})\n```\n\n获取键值`Bucket.Get()`：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyFriendsBucket\"))\n    v := b.Get([]byte(\"one\"))\n    fmt.Printf(\"The answer is: %s\\n\", v)\n    return nil\n})\n```\n\n`get()`函数不返回一个错误，因为它的运行是保证工作（除非有某种系统故障）。如果键存在，那么它将返回它的值。如果它不存在，那么它将返回nil。\n还需要注意的是当事务打开都get返回的值时唯一有效的，如果你需要将该值用于其他事务，你可以通过`copy`拷贝到其他的byte slice中\n\n## 9.桶的自增\n\n利用`nextsequence()`功能，你可以让boltdb生成序列作为你键值对的唯一标识。见下面的示例。\n\n```\nfunc (s *Store) CreateUser(u *User) error {\n    return s.db.Update(func(tx *bolt.Tx) error {\n        // 创建users桶\n        b := tx.Bucket([]byte(\"users\"))\n\n        // 生成自增序列\n        id, _ = b.NextSequence()\n        u.ID = int(id)\n\n        // Marshal user data into bytes.\n        buf, err := json.Marshal(u)\n        if err != nil {\n            return err\n        }\n\n        // Persist bytes to users bucket.\n        return b.Put(itob(u.ID), buf)\n    })\n}\n\n// itob returns an 8-byte big endian representation of v.\nfunc itob(v int) []byte {\n    b := make([]byte, 8)\n    binary.BigEndian.PutUint64(b, uint64(v))\n    return b\n}\n\ntype User struct {\n    ID int\n    ...\n}\n```\n\n## 10. 迭代键\n\nboltdb以桶中的字节排序顺序存储键。这使得在这些键上的顺序迭代非常快。要遍历键，我们将使用游标`Cursor()`：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    c := b.Cursor()\n\n    for k, v := c.First(); k != nil; k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n游标`Cursor()`允许您移动到键列表中的特定点，并一次一个地通过操作键前进或后退。\n光标上有以下函数：\n\n```\nFirst()  移动到第一个健.\nLast()   移动到最后一个健.\nSeek()   移动到特定的一个健.\nNext()   移动到下一个健.\nPrev()   移动到上一个健.\n```\n\n这些函数中的每一个都返回一个包含(key []byte, value []byte)的签名。当你有光标迭代结束，next()将返回一个nil。在调用next()或prev()之前，你必须寻求一个位置使用first()，last()，或seek()。如果您不寻求位置，则这些函数将返回一个nil键。\n在迭代过程中，如果键为非零，但值为0，则意味着键指向一个桶而不是一个值。用桶.bucket()访问子桶。\n\n## 11.前缀扫描\n\n遍历一个key的前缀，你可以结合`seek()`和`bytes.hasprefix()`：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    c := tx.Bucket([]byte(\"MyBucket\")).Cursor()\n\n    prefix := []byte(\"1234\")\n    for k, v := c.Seek(prefix); bytes.HasPrefix(k, prefix); k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n## 12.范围扫描\n\n另一个常见的用例是扫描范围，例如时间范围。如果你使用一个合适的时间编码，如rfc3339然后可以查询特定日期范围的数据：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    // Assume our events bucket exists and has RFC3339 encoded time keys.\n    c := tx.Bucket([]byte(\"Events\")).Cursor()\n\n    // Our time range spans the 90's decade.\n    min := []byte(\"1990-01-01T00:00:00Z\")\n    max := []byte(\"2000-01-01T00:00:00Z\")\n\n    // Iterate over the 90's.\n    for k, v := c.Seek(min); k != nil && bytes.Compare(k, max) <= 0; k, v = c.Next() {\n        fmt.Printf(\"%s: %s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n## 13.循环遍历每一个\n\n如果你知道所在桶中拥有键，你也可以使用`ForEach()`来迭代：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    b.ForEach(func(k, v []byte) error {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n        return nil\n    })\n    return nil\n})\n```\n\n## 14.嵌套桶\n\n还可以在一个键中存储一个桶，以创建嵌套的桶：\n\n```\nfunc (*Bucket) CreateBucket(key []byte) (*Bucket, error)\nfunc (*Bucket) CreateBucketIfNotExists(key []byte) (*Bucket, error)\nfunc (*Bucket) DeleteBucket(key []byte) error\n```\n\n## 15.数据库备份\n\nboltdb是一个单一的文件，所以很容易备份。你可以使用`TX.writeto()`函数写一致的数据库。如果从只读事务调用这个函数，它将执行热备份，而不会阻塞其他数据库的读写操作。\n默认情况下，它将使用一个常规文件句柄，该句柄将利用操作系统的页面缓存。有关优化大于RAM数据集的信息，请参见`Tx`文档。\n一个常见的用例是在HTTP上进行备份，这样您就可以使用像`cURL`这样的工具来进行数据库备份：\n\n```\nfunc BackupHandleFunc(w http.ResponseWriter, req *http.Request) {\n    err := db.View(func(tx *bolt.Tx) error {\n        w.Header().Set(\"Content-Type\", \"application/octet-stream\")\n        w.Header().Set(\"Content-Disposition\", `attachment; filename=\"my.db\"`)\n        w.Header().Set(\"Content-Length\", strconv.Itoa(int(tx.Size())))\n        _, err := tx.WriteTo(w)\n        return err\n    })\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n    }\n}\n```\n\n然后您可以使用此命令进行备份：\n`$ curl http://localhost/backup > my.db`\n或者你可以打开你的浏览器以<http://localhost/backup>，它会自动下载。\n如果你想备份到另一个文件，你可以使用`TX.copyfile()`辅助功能。\n\n## 16.统计\n\n数据库对运行的许多内部操作保持一个运行计数，这样您就可以更好地了解发生了什么。通过捕捉这些数据的快照，我们可以看到在这个时间范围内执行了哪些操作。\n例如，我们可以开始一个goroutine里记录统计每10秒：\n\n```\ngo func() {\n    // Grab the initial stats.\n    prev := db.Stats()\n\n    for {\n        // Wait for 10s.\n        time.Sleep(10 * time.Second)\n\n        // Grab the current stats and diff them.\n        stats := db.Stats()\n        diff := stats.Sub(&prev)\n\n        // Encode stats to JSON and print to STDERR.\n        json.NewEncoder(os.Stderr).Encode(diff)\n\n        // Save stats for the next loop.\n        prev = stats\n    }\n```\n\n## 17.只读模式\n\n有时创建一个共享的只读boltdb数据库是有用的。对此，设置options.readonly国旗打开数据库时。只读模式使用共享锁允许多个进程从数据库中读取，但它将阻塞任何以读写方式打开数据库的进程。\n\n```\ndb, err := bolt.Open(\"my.db\", 0666, &bolt.Options{ReadOnly: true})\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n## 18.移动端支持（ios/android）\n\nboltdb能够运行在移动设备上利用的工具结合特征GoMobile。创建一个结构体，包含您的数据库逻辑和参考一个bolt.db与初始化contstructor需要在文件路径，数据库文件将存储。使用这种方法，Android和iOS都不需要额外的权限或清理。\n\n```\nfunc NewBoltDB(filepath string) *BoltDB {\n    db, err := bolt.Open(filepath+\"/demo.db\", 0600, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    return &BoltDB{db}\n}\n\ntype BoltDB struct {\n    db *bolt.DB\n    ...\n}\n\nfunc (b *BoltDB) Path() string {\n    return b.db.Path()\n}\n\nfunc (b *BoltDB) Close() {\n    b.db.Close()\n}\n```\n\n数据库逻辑应定义为此包装器结构中的方法。\n要从本机语言初始化此结构（两个平台现在都将本地存储与云同步）。这些片段禁用数据库文件的功能）：\nAndroid\n\n```\nString path;\nif (android.os.Build.VERSION.SDK_INT >=android.os.Build.VERSION_CODES.LOLLIPOP){\n    path = getNoBackupFilesDir().getAbsolutePath();\n} else{\n    path = getFilesDir().getAbsolutePath();\n}\nBoltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)\n```\n\nIOS\n\n```\n- (void)demo {\n    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,\n                                                          NSUserDomainMask,\n                                                          YES) objectAtIndex:0];\n    GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);\n    [self addSkipBackupAttributeToItemAtPath:demo.path];\n    //Some DB Logic would go here\n    [demo close];\n}\n\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n```\n\n## 19.查看工具\n\n1.下载工具\n`go get github.com/boltdb/boltd`\n然后编译cmd下的main文件生成可执行文件改名为boltd\n拷贝boltd到 *.db同级目录，执行如下：`boltd my.db `\n\n2.命令行工具\n<https://github.com/hasit/bolter>\n\n`bolter -f my.db`\n\nboltdb源码解析TODO","source":"_posts/framework/boltdb使用.md","raw":"---\ntitle: boltdb使用\ntags:\n  - boltdb\ncategories:\n  - boltdb\ndate: 2019-04-19 13:46:16\n---\n\n# golang boltdb的学习和实践\n\n## 1. 安装\n\n```\ngo get github.com/boltdb/bolt\n```\n\n## 2.创建和启动数据库\n\n```\ndb, err := bolt.Open(\"my.db\", 0600, nil)\n```\n\n其中`open`的第一个参数为路径,如果数据库不存在则会创建名为my.db的数据库， 第二个为文件操作，第三个参数是可选参数， 内部可以配置只读和超时时间等，\n特别需要注意的地方就是因为boltdb是文件操作类型的数据库，所以只能单点写入和读取，如果多个同时操作的话后者会被挂起直到前者关闭操作为止， boltdb一次只允许一个读写事务，但一次允许多个只读事务。所以数据具有较强的一致性。\n\n因此单个事务和从它们创建的所有对象（例如桶、键）都不是线程安全的。与数据在多个概念你必须为每一个或使用锁机制来保证只有一个goroutine里操作改变数据。\n只读事务和读写事物通常不应该在同一个goroutine里同时打开。由于读写事务需要周期性地重新映射数据文件，这可能导致死锁。\n\n## 3.读写事务\n\nboltdb的读写事务操作我们可以使用`DB.Update()`来完成形如：\n\n```\nerr := db.Update(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n在闭包fun中,在结束时返回nil来提交事务。您还可以通过返回一个错误在任何点回滚事务。所有数据库操作都允许在读写事务中进行。\n始终要关注err返回，因为它将报告导致您的事务不能完成的所有磁盘故障。\n\n## 4.批量读写事物\n\n每一次新的事物都需要等待上一次事物的结束，这种开销我们可以通过`DB.Batch()`批处理来完成\n\n```\nerr := db.Batch(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n在批处理过程中如果某个事务失败了,批处理会多次调用这个函数函数返回成功则成功。如果中途失败了，则整个事务会回滚。\n\n## 5.只读事务\n\n只读事务可以使用`DB.View()`来完成\n\n```\nerr := db.View(func(tx *bolt.Tx) error {\n    ...\n    return nil\n})\n```\n\n不改变数据的操作都可以通过只读事务来完成， 您只能检索桶、检索值，或在只读事务中复制数据库。\n\n## 6.启动事务\n\n`DB.Begin()`启动函数包含在db.update和db.batch中,该函数启动事务开始执行事务并返回结果关闭事务，这是boltdb推荐的方式，有时候你可能需要手动启动事物你可以使用`Tx.Begin()`来开始，切记不要忘记关闭事务。\n\n```\n// Start a writable transaction.\ntx, err := db.Begin(true)\nif err != nil {\n    return err\n}\ndefer tx.Rollback()\n\n// Use the transaction...\n_, err := tx.CreateBucket([]byte(\"MyBucket\"))\nif err != nil {\n    return err\n}\n\n// Commit the transaction and check for error.\nif err := tx.Commit(); err != nil {\n    return err\n}\n```\n\n## 7.使用桶\n\n桶是数据库中键/值对的集合。桶中的所有键必须是唯一的。您可以使用`DB.CreateBucket()`创建一个桶：\n\n```\ndb.Update(func(tx *bolt.Tx) error {\n    b, err := tx.CreateBucket([]byte(\"MyBucket\"))\n    if err != nil {\n        return fmt.Errorf(\"create bucket: %s\", err)\n    }\n    return nil\n})\n```\n\n你也可以是实用`Tx.CreateBucketIfNotExists()`来创建桶，该函数会先判断是否已经存在该桶不存在即创建， 删除桶可以使用`Tx.DeleteBucket()`来完成\n\n## 8.使用k-v对\n\n存储键值对到桶里可以使用`Bucket.Put()`来完成：\n\n```\ndb.Update(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyFriendsBucket\"))\n    err := b.Put([]byte(\"one\"), []byte(\"zhangsan\"))\n    return err\n})\n```\n\n获取键值`Bucket.Get()`：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyFriendsBucket\"))\n    v := b.Get([]byte(\"one\"))\n    fmt.Printf(\"The answer is: %s\\n\", v)\n    return nil\n})\n```\n\n`get()`函数不返回一个错误，因为它的运行是保证工作（除非有某种系统故障）。如果键存在，那么它将返回它的值。如果它不存在，那么它将返回nil。\n还需要注意的是当事务打开都get返回的值时唯一有效的，如果你需要将该值用于其他事务，你可以通过`copy`拷贝到其他的byte slice中\n\n## 9.桶的自增\n\n利用`nextsequence()`功能，你可以让boltdb生成序列作为你键值对的唯一标识。见下面的示例。\n\n```\nfunc (s *Store) CreateUser(u *User) error {\n    return s.db.Update(func(tx *bolt.Tx) error {\n        // 创建users桶\n        b := tx.Bucket([]byte(\"users\"))\n\n        // 生成自增序列\n        id, _ = b.NextSequence()\n        u.ID = int(id)\n\n        // Marshal user data into bytes.\n        buf, err := json.Marshal(u)\n        if err != nil {\n            return err\n        }\n\n        // Persist bytes to users bucket.\n        return b.Put(itob(u.ID), buf)\n    })\n}\n\n// itob returns an 8-byte big endian representation of v.\nfunc itob(v int) []byte {\n    b := make([]byte, 8)\n    binary.BigEndian.PutUint64(b, uint64(v))\n    return b\n}\n\ntype User struct {\n    ID int\n    ...\n}\n```\n\n## 10. 迭代键\n\nboltdb以桶中的字节排序顺序存储键。这使得在这些键上的顺序迭代非常快。要遍历键，我们将使用游标`Cursor()`：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    c := b.Cursor()\n\n    for k, v := c.First(); k != nil; k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n游标`Cursor()`允许您移动到键列表中的特定点，并一次一个地通过操作键前进或后退。\n光标上有以下函数：\n\n```\nFirst()  移动到第一个健.\nLast()   移动到最后一个健.\nSeek()   移动到特定的一个健.\nNext()   移动到下一个健.\nPrev()   移动到上一个健.\n```\n\n这些函数中的每一个都返回一个包含(key []byte, value []byte)的签名。当你有光标迭代结束，next()将返回一个nil。在调用next()或prev()之前，你必须寻求一个位置使用first()，last()，或seek()。如果您不寻求位置，则这些函数将返回一个nil键。\n在迭代过程中，如果键为非零，但值为0，则意味着键指向一个桶而不是一个值。用桶.bucket()访问子桶。\n\n## 11.前缀扫描\n\n遍历一个key的前缀，你可以结合`seek()`和`bytes.hasprefix()`：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    c := tx.Bucket([]byte(\"MyBucket\")).Cursor()\n\n    prefix := []byte(\"1234\")\n    for k, v := c.Seek(prefix); bytes.HasPrefix(k, prefix); k, v = c.Next() {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n## 12.范围扫描\n\n另一个常见的用例是扫描范围，例如时间范围。如果你使用一个合适的时间编码，如rfc3339然后可以查询特定日期范围的数据：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    // Assume our events bucket exists and has RFC3339 encoded time keys.\n    c := tx.Bucket([]byte(\"Events\")).Cursor()\n\n    // Our time range spans the 90's decade.\n    min := []byte(\"1990-01-01T00:00:00Z\")\n    max := []byte(\"2000-01-01T00:00:00Z\")\n\n    // Iterate over the 90's.\n    for k, v := c.Seek(min); k != nil && bytes.Compare(k, max) <= 0; k, v = c.Next() {\n        fmt.Printf(\"%s: %s\\n\", k, v)\n    }\n\n    return nil\n})\n```\n\n## 13.循环遍历每一个\n\n如果你知道所在桶中拥有键，你也可以使用`ForEach()`来迭代：\n\n```\ndb.View(func(tx *bolt.Tx) error {\n    // Assume bucket exists and has keys\n    b := tx.Bucket([]byte(\"MyBucket\"))\n\n    b.ForEach(func(k, v []byte) error {\n        fmt.Printf(\"key=%s, value=%s\\n\", k, v)\n        return nil\n    })\n    return nil\n})\n```\n\n## 14.嵌套桶\n\n还可以在一个键中存储一个桶，以创建嵌套的桶：\n\n```\nfunc (*Bucket) CreateBucket(key []byte) (*Bucket, error)\nfunc (*Bucket) CreateBucketIfNotExists(key []byte) (*Bucket, error)\nfunc (*Bucket) DeleteBucket(key []byte) error\n```\n\n## 15.数据库备份\n\nboltdb是一个单一的文件，所以很容易备份。你可以使用`TX.writeto()`函数写一致的数据库。如果从只读事务调用这个函数，它将执行热备份，而不会阻塞其他数据库的读写操作。\n默认情况下，它将使用一个常规文件句柄，该句柄将利用操作系统的页面缓存。有关优化大于RAM数据集的信息，请参见`Tx`文档。\n一个常见的用例是在HTTP上进行备份，这样您就可以使用像`cURL`这样的工具来进行数据库备份：\n\n```\nfunc BackupHandleFunc(w http.ResponseWriter, req *http.Request) {\n    err := db.View(func(tx *bolt.Tx) error {\n        w.Header().Set(\"Content-Type\", \"application/octet-stream\")\n        w.Header().Set(\"Content-Disposition\", `attachment; filename=\"my.db\"`)\n        w.Header().Set(\"Content-Length\", strconv.Itoa(int(tx.Size())))\n        _, err := tx.WriteTo(w)\n        return err\n    })\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n    }\n}\n```\n\n然后您可以使用此命令进行备份：\n`$ curl http://localhost/backup > my.db`\n或者你可以打开你的浏览器以<http://localhost/backup>，它会自动下载。\n如果你想备份到另一个文件，你可以使用`TX.copyfile()`辅助功能。\n\n## 16.统计\n\n数据库对运行的许多内部操作保持一个运行计数，这样您就可以更好地了解发生了什么。通过捕捉这些数据的快照，我们可以看到在这个时间范围内执行了哪些操作。\n例如，我们可以开始一个goroutine里记录统计每10秒：\n\n```\ngo func() {\n    // Grab the initial stats.\n    prev := db.Stats()\n\n    for {\n        // Wait for 10s.\n        time.Sleep(10 * time.Second)\n\n        // Grab the current stats and diff them.\n        stats := db.Stats()\n        diff := stats.Sub(&prev)\n\n        // Encode stats to JSON and print to STDERR.\n        json.NewEncoder(os.Stderr).Encode(diff)\n\n        // Save stats for the next loop.\n        prev = stats\n    }\n```\n\n## 17.只读模式\n\n有时创建一个共享的只读boltdb数据库是有用的。对此，设置options.readonly国旗打开数据库时。只读模式使用共享锁允许多个进程从数据库中读取，但它将阻塞任何以读写方式打开数据库的进程。\n\n```\ndb, err := bolt.Open(\"my.db\", 0666, &bolt.Options{ReadOnly: true})\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n## 18.移动端支持（ios/android）\n\nboltdb能够运行在移动设备上利用的工具结合特征GoMobile。创建一个结构体，包含您的数据库逻辑和参考一个bolt.db与初始化contstructor需要在文件路径，数据库文件将存储。使用这种方法，Android和iOS都不需要额外的权限或清理。\n\n```\nfunc NewBoltDB(filepath string) *BoltDB {\n    db, err := bolt.Open(filepath+\"/demo.db\", 0600, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    return &BoltDB{db}\n}\n\ntype BoltDB struct {\n    db *bolt.DB\n    ...\n}\n\nfunc (b *BoltDB) Path() string {\n    return b.db.Path()\n}\n\nfunc (b *BoltDB) Close() {\n    b.db.Close()\n}\n```\n\n数据库逻辑应定义为此包装器结构中的方法。\n要从本机语言初始化此结构（两个平台现在都将本地存储与云同步）。这些片段禁用数据库文件的功能）：\nAndroid\n\n```\nString path;\nif (android.os.Build.VERSION.SDK_INT >=android.os.Build.VERSION_CODES.LOLLIPOP){\n    path = getNoBackupFilesDir().getAbsolutePath();\n} else{\n    path = getFilesDir().getAbsolutePath();\n}\nBoltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)\n```\n\nIOS\n\n```\n- (void)demo {\n    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,\n                                                          NSUserDomainMask,\n                                                          YES) objectAtIndex:0];\n    GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);\n    [self addSkipBackupAttributeToItemAtPath:demo.path];\n    //Some DB Logic would go here\n    [demo close];\n}\n\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n```\n\n## 19.查看工具\n\n1.下载工具\n`go get github.com/boltdb/boltd`\n然后编译cmd下的main文件生成可执行文件改名为boltd\n拷贝boltd到 *.db同级目录，执行如下：`boltd my.db `\n\n2.命令行工具\n<https://github.com/hasit/bolter>\n\n`bolter -f my.db`\n\nboltdb源码解析TODO","slug":"framework/boltdb使用","published":1,"updated":"2019-04-19T05:48:42.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0ct0019wl385sdfwf6m","content":"<h1 id=\"golang-boltdb的学习和实践\"><a href=\"#golang-boltdb的学习和实践\" class=\"headerlink\" title=\"golang boltdb的学习和实践\"></a>golang boltdb的学习和实践</h1><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/boltdb/bolt</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建和启动数据库\"><a href=\"#2-创建和启动数据库\" class=\"headerlink\" title=\"2.创建和启动数据库\"></a>2.创建和启动数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := bolt.Open(&quot;my.db&quot;, 0600, nil)</span><br></pre></td></tr></table></figure>\n<p>其中<code>open</code>的第一个参数为路径,如果数据库不存在则会创建名为my.db的数据库， 第二个为文件操作，第三个参数是可选参数， 内部可以配置只读和超时时间等，<br>特别需要注意的地方就是因为boltdb是文件操作类型的数据库，所以只能单点写入和读取，如果多个同时操作的话后者会被挂起直到前者关闭操作为止， boltdb一次只允许一个读写事务，但一次允许多个只读事务。所以数据具有较强的一致性。</p>\n<p>因此单个事务和从它们创建的所有对象（例如桶、键）都不是线程安全的。与数据在多个概念你必须为每一个或使用锁机制来保证只有一个goroutine里操作改变数据。<br>只读事务和读写事物通常不应该在同一个goroutine里同时打开。由于读写事务需要周期性地重新映射数据文件，这可能导致死锁。</p>\n<h2 id=\"3-读写事务\"><a href=\"#3-读写事务\" class=\"headerlink\" title=\"3.读写事务\"></a>3.读写事务</h2><p>boltdb的读写事务操作我们可以使用<code>DB.Update()</code>来完成形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.Update(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在闭包fun中,在结束时返回nil来提交事务。您还可以通过返回一个错误在任何点回滚事务。所有数据库操作都允许在读写事务中进行。<br>始终要关注err返回，因为它将报告导致您的事务不能完成的所有磁盘故障。</p>\n<h2 id=\"4-批量读写事物\"><a href=\"#4-批量读写事物\" class=\"headerlink\" title=\"4.批量读写事物\"></a>4.批量读写事物</h2><p>每一次新的事物都需要等待上一次事物的结束，这种开销我们可以通过<code>DB.Batch()</code>批处理来完成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.Batch(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在批处理过程中如果某个事务失败了,批处理会多次调用这个函数函数返回成功则成功。如果中途失败了，则整个事务会回滚。</p>\n<h2 id=\"5-只读事务\"><a href=\"#5-只读事务\" class=\"headerlink\" title=\"5.只读事务\"></a>5.只读事务</h2><p>只读事务可以使用<code>DB.View()</code>来完成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>不改变数据的操作都可以通过只读事务来完成， 您只能检索桶、检索值，或在只读事务中复制数据库。</p>\n<h2 id=\"6-启动事务\"><a href=\"#6-启动事务\" class=\"headerlink\" title=\"6.启动事务\"></a>6.启动事务</h2><p><code>DB.Begin()</code>启动函数包含在db.update和db.batch中,该函数启动事务开始执行事务并返回结果关闭事务，这是boltdb推荐的方式，有时候你可能需要手动启动事物你可以使用<code>Tx.Begin()</code>来开始，切记不要忘记关闭事务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Start a writable transaction.</span><br><span class=\"line\">tx, err := db.Begin(true)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">defer tx.Rollback()</span><br><span class=\"line\"></span><br><span class=\"line\">// Use the transaction...</span><br><span class=\"line\">_, err := tx.CreateBucket([]byte(&quot;MyBucket&quot;))</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Commit the transaction and check for error.</span><br><span class=\"line\">if err := tx.Commit(); err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-使用桶\"><a href=\"#7-使用桶\" class=\"headerlink\" title=\"7.使用桶\"></a>7.使用桶</h2><p>桶是数据库中键/值对的集合。桶中的所有键必须是唯一的。您可以使用<code>DB.CreateBucket()</code>创建一个桶：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Update(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    b, err := tx.CreateBucket([]byte(&quot;MyBucket&quot;))</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return fmt.Errorf(&quot;create bucket: %s&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你也可以是实用<code>Tx.CreateBucketIfNotExists()</code>来创建桶，该函数会先判断是否已经存在该桶不存在即创建， 删除桶可以使用<code>Tx.DeleteBucket()</code>来完成</p>\n<h2 id=\"8-使用k-v对\"><a href=\"#8-使用k-v对\" class=\"headerlink\" title=\"8.使用k-v对\"></a>8.使用k-v对</h2><p>存储键值对到桶里可以使用<code>Bucket.Put()</code>来完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Update(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    b := tx.Bucket([]byte(&quot;MyFriendsBucket&quot;))</span><br><span class=\"line\">    err := b.Put([]byte(&quot;one&quot;), []byte(&quot;zhangsan&quot;))</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>获取键值<code>Bucket.Get()</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    b := tx.Bucket([]byte(&quot;MyFriendsBucket&quot;))</span><br><span class=\"line\">    v := b.Get([]byte(&quot;one&quot;))</span><br><span class=\"line\">    fmt.Printf(&quot;The answer is: %s\\n&quot;, v)</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>get()</code>函数不返回一个错误，因为它的运行是保证工作（除非有某种系统故障）。如果键存在，那么它将返回它的值。如果它不存在，那么它将返回nil。<br>还需要注意的是当事务打开都get返回的值时唯一有效的，如果你需要将该值用于其他事务，你可以通过<code>copy</code>拷贝到其他的byte slice中</p>\n<h2 id=\"9-桶的自增\"><a href=\"#9-桶的自增\" class=\"headerlink\" title=\"9.桶的自增\"></a>9.桶的自增</h2><p>利用<code>nextsequence()</code>功能，你可以让boltdb生成序列作为你键值对的唯一标识。见下面的示例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (s *Store) CreateUser(u *User) error &#123;</span><br><span class=\"line\">    return s.db.Update(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">        // 创建users桶</span><br><span class=\"line\">        b := tx.Bucket([]byte(&quot;users&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">        // 生成自增序列</span><br><span class=\"line\">        id, _ = b.NextSequence()</span><br><span class=\"line\">        u.ID = int(id)</span><br><span class=\"line\"></span><br><span class=\"line\">        // Marshal user data into bytes.</span><br><span class=\"line\">        buf, err := json.Marshal(u)</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            return err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Persist bytes to users bucket.</span><br><span class=\"line\">        return b.Put(itob(u.ID), buf)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// itob returns an 8-byte big endian representation of v.</span><br><span class=\"line\">func itob(v int) []byte &#123;</span><br><span class=\"line\">    b := make([]byte, 8)</span><br><span class=\"line\">    binary.BigEndian.PutUint64(b, uint64(v))</span><br><span class=\"line\">    return b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    ID int</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-迭代键\"><a href=\"#10-迭代键\" class=\"headerlink\" title=\"10. 迭代键\"></a>10. 迭代键</h2><p>boltdb以桶中的字节排序顺序存储键。这使得在这些键上的顺序迭代非常快。要遍历键，我们将使用游标<code>Cursor()</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    // Assume bucket exists and has keys</span><br><span class=\"line\">    b := tx.Bucket([]byte(&quot;MyBucket&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">    c := b.Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    for k, v := c.First(); k != nil; k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;key=%s, value=%s\\n&quot;, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>游标<code>Cursor()</code>允许您移动到键列表中的特定点，并一次一个地通过操作键前进或后退。<br>光标上有以下函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First()  移动到第一个健.</span><br><span class=\"line\">Last()   移动到最后一个健.</span><br><span class=\"line\">Seek()   移动到特定的一个健.</span><br><span class=\"line\">Next()   移动到下一个健.</span><br><span class=\"line\">Prev()   移动到上一个健.</span><br></pre></td></tr></table></figure>\n<p>这些函数中的每一个都返回一个包含(key []byte, value []byte)的签名。当你有光标迭代结束，next()将返回一个nil。在调用next()或prev()之前，你必须寻求一个位置使用first()，last()，或seek()。如果您不寻求位置，则这些函数将返回一个nil键。<br>在迭代过程中，如果键为非零，但值为0，则意味着键指向一个桶而不是一个值。用桶.bucket()访问子桶。</p>\n<h2 id=\"11-前缀扫描\"><a href=\"#11-前缀扫描\" class=\"headerlink\" title=\"11.前缀扫描\"></a>11.前缀扫描</h2><p>遍历一个key的前缀，你可以结合<code>seek()</code>和<code>bytes.hasprefix()</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    // Assume bucket exists and has keys</span><br><span class=\"line\">    c := tx.Bucket([]byte(&quot;MyBucket&quot;)).Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    prefix := []byte(&quot;1234&quot;)</span><br><span class=\"line\">    for k, v := c.Seek(prefix); bytes.HasPrefix(k, prefix); k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;key=%s, value=%s\\n&quot;, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-范围扫描\"><a href=\"#12-范围扫描\" class=\"headerlink\" title=\"12.范围扫描\"></a>12.范围扫描</h2><p>另一个常见的用例是扫描范围，例如时间范围。如果你使用一个合适的时间编码，如rfc3339然后可以查询特定日期范围的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    // Assume our events bucket exists and has RFC3339 encoded time keys.</span><br><span class=\"line\">    c := tx.Bucket([]byte(&quot;Events&quot;)).Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    // Our time range spans the 90&apos;s decade.</span><br><span class=\"line\">    min := []byte(&quot;1990-01-01T00:00:00Z&quot;)</span><br><span class=\"line\">    max := []byte(&quot;2000-01-01T00:00:00Z&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    // Iterate over the 90&apos;s.</span><br><span class=\"line\">    for k, v := c.Seek(min); k != nil &amp;&amp; bytes.Compare(k, max) &lt;= 0; k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;%s: %s\\n&quot;, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-循环遍历每一个\"><a href=\"#13-循环遍历每一个\" class=\"headerlink\" title=\"13.循环遍历每一个\"></a>13.循环遍历每一个</h2><p>如果你知道所在桶中拥有键，你也可以使用<code>ForEach()</code>来迭代：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    // Assume bucket exists and has keys</span><br><span class=\"line\">    b := tx.Bucket([]byte(&quot;MyBucket&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">    b.ForEach(func(k, v []byte) error &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;key=%s, value=%s\\n&quot;, k, v)</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-嵌套桶\"><a href=\"#14-嵌套桶\" class=\"headerlink\" title=\"14.嵌套桶\"></a>14.嵌套桶</h2><p>还可以在一个键中存储一个桶，以创建嵌套的桶：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (*Bucket) CreateBucket(key []byte) (*Bucket, error)</span><br><span class=\"line\">func (*Bucket) CreateBucketIfNotExists(key []byte) (*Bucket, error)</span><br><span class=\"line\">func (*Bucket) DeleteBucket(key []byte) error</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-数据库备份\"><a href=\"#15-数据库备份\" class=\"headerlink\" title=\"15.数据库备份\"></a>15.数据库备份</h2><p>boltdb是一个单一的文件，所以很容易备份。你可以使用<code>TX.writeto()</code>函数写一致的数据库。如果从只读事务调用这个函数，它将执行热备份，而不会阻塞其他数据库的读写操作。<br>默认情况下，它将使用一个常规文件句柄，该句柄将利用操作系统的页面缓存。有关优化大于RAM数据集的信息，请参见<code>Tx</code>文档。<br>一个常见的用例是在HTTP上进行备份，这样您就可以使用像<code>cURL</code>这样的工具来进行数据库备份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func BackupHandleFunc(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">    err := db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">        w.Header().Set(&quot;Content-Type&quot;, &quot;application/octet-stream&quot;)</span><br><span class=\"line\">        w.Header().Set(&quot;Content-Disposition&quot;, `attachment; filename=&quot;my.db&quot;`)</span><br><span class=\"line\">        w.Header().Set(&quot;Content-Length&quot;, strconv.Itoa(int(tx.Size())))</span><br><span class=\"line\">        _, err := tx.WriteTo(w)</span><br><span class=\"line\">        return err</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后您可以使用此命令进行备份：<br><code>$ curl http://localhost/backup &gt; my.db</code><br>或者你可以打开你的浏览器以<a href=\"http://localhost/backup\" target=\"_blank\" rel=\"noopener\">http://localhost/backup</a>，它会自动下载。<br>如果你想备份到另一个文件，你可以使用<code>TX.copyfile()</code>辅助功能。</p>\n<h2 id=\"16-统计\"><a href=\"#16-统计\" class=\"headerlink\" title=\"16.统计\"></a>16.统计</h2><p>数据库对运行的许多内部操作保持一个运行计数，这样您就可以更好地了解发生了什么。通过捕捉这些数据的快照，我们可以看到在这个时间范围内执行了哪些操作。<br>例如，我们可以开始一个goroutine里记录统计每10秒：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go func() &#123;</span><br><span class=\"line\">    // Grab the initial stats.</span><br><span class=\"line\">    prev := db.Stats()</span><br><span class=\"line\"></span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        // Wait for 10s.</span><br><span class=\"line\">        time.Sleep(10 * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">        // Grab the current stats and diff them.</span><br><span class=\"line\">        stats := db.Stats()</span><br><span class=\"line\">        diff := stats.Sub(&amp;prev)</span><br><span class=\"line\"></span><br><span class=\"line\">        // Encode stats to JSON and print to STDERR.</span><br><span class=\"line\">        json.NewEncoder(os.Stderr).Encode(diff)</span><br><span class=\"line\"></span><br><span class=\"line\">        // Save stats for the next loop.</span><br><span class=\"line\">        prev = stats</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"17-只读模式\"><a href=\"#17-只读模式\" class=\"headerlink\" title=\"17.只读模式\"></a>17.只读模式</h2><p>有时创建一个共享的只读boltdb数据库是有用的。对此，设置options.readonly国旗打开数据库时。只读模式使用共享锁允许多个进程从数据库中读取，但它将阻塞任何以读写方式打开数据库的进程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := bolt.Open(&quot;my.db&quot;, 0666, &amp;bolt.Options&#123;ReadOnly: true&#125;)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"18-移动端支持（ios-android）\"><a href=\"#18-移动端支持（ios-android）\" class=\"headerlink\" title=\"18.移动端支持（ios/android）\"></a>18.移动端支持（ios/android）</h2><p>boltdb能够运行在移动设备上利用的工具结合特征GoMobile。创建一个结构体，包含您的数据库逻辑和参考一个bolt.db与初始化contstructor需要在文件路径，数据库文件将存储。使用这种方法，Android和iOS都不需要额外的权限或清理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func NewBoltDB(filepath string) *BoltDB &#123;</span><br><span class=\"line\">    db, err := bolt.Open(filepath+&quot;/demo.db&quot;, 0600, nil)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &amp;BoltDB&#123;db&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type BoltDB struct &#123;</span><br><span class=\"line\">    db *bolt.DB</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (b *BoltDB) Path() string &#123;</span><br><span class=\"line\">    return b.db.Path()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (b *BoltDB) Close() &#123;</span><br><span class=\"line\">    b.db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库逻辑应定义为此包装器结构中的方法。<br>要从本机语言初始化此结构（两个平台现在都将本地存储与云同步）。这些片段禁用数据库文件的功能）：<br>Android</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String path;</span><br><span class=\"line\">if (android.os.Build.VERSION.SDK_INT &gt;=android.os.Build.VERSION_CODES.LOLLIPOP)&#123;</span><br><span class=\"line\">    path = getNoBackupFilesDir().getAbsolutePath();</span><br><span class=\"line\">&#125; else&#123;</span><br><span class=\"line\">    path = getFilesDir().getAbsolutePath();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Boltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)</span><br></pre></td></tr></table></figure>\n<p>IOS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)demo &#123;</span><br><span class=\"line\">    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,</span><br><span class=\"line\">                                                          NSUserDomainMask,</span><br><span class=\"line\">                                                          YES) objectAtIndex:0];</span><br><span class=\"line\">    GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);</span><br><span class=\"line\">    [self addSkipBackupAttributeToItemAtPath:demo.path];</span><br><span class=\"line\">    //Some DB Logic would go here</span><br><span class=\"line\">    [demo close];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSURL* URL= [NSURL fileURLWithPath: filePathString];</span><br><span class=\"line\">    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    NSError *error = nil;</span><br><span class=\"line\">    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]</span><br><span class=\"line\">                                  forKey: NSURLIsExcludedFromBackupKey error: &amp;error];</span><br><span class=\"line\">    if(!success)&#123;</span><br><span class=\"line\">        NSLog(@&quot;Error excluding %@ from backup %@&quot;, [URL lastPathComponent], error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"19-查看工具\"><a href=\"#19-查看工具\" class=\"headerlink\" title=\"19.查看工具\"></a>19.查看工具</h2><p>1.下载工具<br><code>go get github.com/boltdb/boltd</code><br>然后编译cmd下的main文件生成可执行文件改名为boltd<br>拷贝boltd到 *.db同级目录，执行如下：<code>boltd my.db</code></p>\n<p>2.命令行工具<br><a href=\"https://github.com/hasit/bolter\" target=\"_blank\" rel=\"noopener\">https://github.com/hasit/bolter</a></p>\n<p><code>bolter -f my.db</code></p>\n<p>boltdb源码解析TODO</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"golang-boltdb的学习和实践\"><a href=\"#golang-boltdb的学习和实践\" class=\"headerlink\" title=\"golang boltdb的学习和实践\"></a>golang boltdb的学习和实践</h1><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/boltdb/bolt</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建和启动数据库\"><a href=\"#2-创建和启动数据库\" class=\"headerlink\" title=\"2.创建和启动数据库\"></a>2.创建和启动数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := bolt.Open(&quot;my.db&quot;, 0600, nil)</span><br></pre></td></tr></table></figure>\n<p>其中<code>open</code>的第一个参数为路径,如果数据库不存在则会创建名为my.db的数据库， 第二个为文件操作，第三个参数是可选参数， 内部可以配置只读和超时时间等，<br>特别需要注意的地方就是因为boltdb是文件操作类型的数据库，所以只能单点写入和读取，如果多个同时操作的话后者会被挂起直到前者关闭操作为止， boltdb一次只允许一个读写事务，但一次允许多个只读事务。所以数据具有较强的一致性。</p>\n<p>因此单个事务和从它们创建的所有对象（例如桶、键）都不是线程安全的。与数据在多个概念你必须为每一个或使用锁机制来保证只有一个goroutine里操作改变数据。<br>只读事务和读写事物通常不应该在同一个goroutine里同时打开。由于读写事务需要周期性地重新映射数据文件，这可能导致死锁。</p>\n<h2 id=\"3-读写事务\"><a href=\"#3-读写事务\" class=\"headerlink\" title=\"3.读写事务\"></a>3.读写事务</h2><p>boltdb的读写事务操作我们可以使用<code>DB.Update()</code>来完成形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.Update(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在闭包fun中,在结束时返回nil来提交事务。您还可以通过返回一个错误在任何点回滚事务。所有数据库操作都允许在读写事务中进行。<br>始终要关注err返回，因为它将报告导致您的事务不能完成的所有磁盘故障。</p>\n<h2 id=\"4-批量读写事物\"><a href=\"#4-批量读写事物\" class=\"headerlink\" title=\"4.批量读写事物\"></a>4.批量读写事物</h2><p>每一次新的事物都需要等待上一次事物的结束，这种开销我们可以通过<code>DB.Batch()</code>批处理来完成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.Batch(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在批处理过程中如果某个事务失败了,批处理会多次调用这个函数函数返回成功则成功。如果中途失败了，则整个事务会回滚。</p>\n<h2 id=\"5-只读事务\"><a href=\"#5-只读事务\" class=\"headerlink\" title=\"5.只读事务\"></a>5.只读事务</h2><p>只读事务可以使用<code>DB.View()</code>来完成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>不改变数据的操作都可以通过只读事务来完成， 您只能检索桶、检索值，或在只读事务中复制数据库。</p>\n<h2 id=\"6-启动事务\"><a href=\"#6-启动事务\" class=\"headerlink\" title=\"6.启动事务\"></a>6.启动事务</h2><p><code>DB.Begin()</code>启动函数包含在db.update和db.batch中,该函数启动事务开始执行事务并返回结果关闭事务，这是boltdb推荐的方式，有时候你可能需要手动启动事物你可以使用<code>Tx.Begin()</code>来开始，切记不要忘记关闭事务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Start a writable transaction.</span><br><span class=\"line\">tx, err := db.Begin(true)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">defer tx.Rollback()</span><br><span class=\"line\"></span><br><span class=\"line\">// Use the transaction...</span><br><span class=\"line\">_, err := tx.CreateBucket([]byte(&quot;MyBucket&quot;))</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Commit the transaction and check for error.</span><br><span class=\"line\">if err := tx.Commit(); err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-使用桶\"><a href=\"#7-使用桶\" class=\"headerlink\" title=\"7.使用桶\"></a>7.使用桶</h2><p>桶是数据库中键/值对的集合。桶中的所有键必须是唯一的。您可以使用<code>DB.CreateBucket()</code>创建一个桶：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Update(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    b, err := tx.CreateBucket([]byte(&quot;MyBucket&quot;))</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return fmt.Errorf(&quot;create bucket: %s&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你也可以是实用<code>Tx.CreateBucketIfNotExists()</code>来创建桶，该函数会先判断是否已经存在该桶不存在即创建， 删除桶可以使用<code>Tx.DeleteBucket()</code>来完成</p>\n<h2 id=\"8-使用k-v对\"><a href=\"#8-使用k-v对\" class=\"headerlink\" title=\"8.使用k-v对\"></a>8.使用k-v对</h2><p>存储键值对到桶里可以使用<code>Bucket.Put()</code>来完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.Update(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    b := tx.Bucket([]byte(&quot;MyFriendsBucket&quot;))</span><br><span class=\"line\">    err := b.Put([]byte(&quot;one&quot;), []byte(&quot;zhangsan&quot;))</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>获取键值<code>Bucket.Get()</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    b := tx.Bucket([]byte(&quot;MyFriendsBucket&quot;))</span><br><span class=\"line\">    v := b.Get([]byte(&quot;one&quot;))</span><br><span class=\"line\">    fmt.Printf(&quot;The answer is: %s\\n&quot;, v)</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>get()</code>函数不返回一个错误，因为它的运行是保证工作（除非有某种系统故障）。如果键存在，那么它将返回它的值。如果它不存在，那么它将返回nil。<br>还需要注意的是当事务打开都get返回的值时唯一有效的，如果你需要将该值用于其他事务，你可以通过<code>copy</code>拷贝到其他的byte slice中</p>\n<h2 id=\"9-桶的自增\"><a href=\"#9-桶的自增\" class=\"headerlink\" title=\"9.桶的自增\"></a>9.桶的自增</h2><p>利用<code>nextsequence()</code>功能，你可以让boltdb生成序列作为你键值对的唯一标识。见下面的示例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (s *Store) CreateUser(u *User) error &#123;</span><br><span class=\"line\">    return s.db.Update(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">        // 创建users桶</span><br><span class=\"line\">        b := tx.Bucket([]byte(&quot;users&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">        // 生成自增序列</span><br><span class=\"line\">        id, _ = b.NextSequence()</span><br><span class=\"line\">        u.ID = int(id)</span><br><span class=\"line\"></span><br><span class=\"line\">        // Marshal user data into bytes.</span><br><span class=\"line\">        buf, err := json.Marshal(u)</span><br><span class=\"line\">        if err != nil &#123;</span><br><span class=\"line\">            return err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Persist bytes to users bucket.</span><br><span class=\"line\">        return b.Put(itob(u.ID), buf)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// itob returns an 8-byte big endian representation of v.</span><br><span class=\"line\">func itob(v int) []byte &#123;</span><br><span class=\"line\">    b := make([]byte, 8)</span><br><span class=\"line\">    binary.BigEndian.PutUint64(b, uint64(v))</span><br><span class=\"line\">    return b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    ID int</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-迭代键\"><a href=\"#10-迭代键\" class=\"headerlink\" title=\"10. 迭代键\"></a>10. 迭代键</h2><p>boltdb以桶中的字节排序顺序存储键。这使得在这些键上的顺序迭代非常快。要遍历键，我们将使用游标<code>Cursor()</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    // Assume bucket exists and has keys</span><br><span class=\"line\">    b := tx.Bucket([]byte(&quot;MyBucket&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">    c := b.Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    for k, v := c.First(); k != nil; k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;key=%s, value=%s\\n&quot;, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>游标<code>Cursor()</code>允许您移动到键列表中的特定点，并一次一个地通过操作键前进或后退。<br>光标上有以下函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First()  移动到第一个健.</span><br><span class=\"line\">Last()   移动到最后一个健.</span><br><span class=\"line\">Seek()   移动到特定的一个健.</span><br><span class=\"line\">Next()   移动到下一个健.</span><br><span class=\"line\">Prev()   移动到上一个健.</span><br></pre></td></tr></table></figure>\n<p>这些函数中的每一个都返回一个包含(key []byte, value []byte)的签名。当你有光标迭代结束，next()将返回一个nil。在调用next()或prev()之前，你必须寻求一个位置使用first()，last()，或seek()。如果您不寻求位置，则这些函数将返回一个nil键。<br>在迭代过程中，如果键为非零，但值为0，则意味着键指向一个桶而不是一个值。用桶.bucket()访问子桶。</p>\n<h2 id=\"11-前缀扫描\"><a href=\"#11-前缀扫描\" class=\"headerlink\" title=\"11.前缀扫描\"></a>11.前缀扫描</h2><p>遍历一个key的前缀，你可以结合<code>seek()</code>和<code>bytes.hasprefix()</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    // Assume bucket exists and has keys</span><br><span class=\"line\">    c := tx.Bucket([]byte(&quot;MyBucket&quot;)).Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    prefix := []byte(&quot;1234&quot;)</span><br><span class=\"line\">    for k, v := c.Seek(prefix); bytes.HasPrefix(k, prefix); k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;key=%s, value=%s\\n&quot;, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-范围扫描\"><a href=\"#12-范围扫描\" class=\"headerlink\" title=\"12.范围扫描\"></a>12.范围扫描</h2><p>另一个常见的用例是扫描范围，例如时间范围。如果你使用一个合适的时间编码，如rfc3339然后可以查询特定日期范围的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    // Assume our events bucket exists and has RFC3339 encoded time keys.</span><br><span class=\"line\">    c := tx.Bucket([]byte(&quot;Events&quot;)).Cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    // Our time range spans the 90&apos;s decade.</span><br><span class=\"line\">    min := []byte(&quot;1990-01-01T00:00:00Z&quot;)</span><br><span class=\"line\">    max := []byte(&quot;2000-01-01T00:00:00Z&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    // Iterate over the 90&apos;s.</span><br><span class=\"line\">    for k, v := c.Seek(min); k != nil &amp;&amp; bytes.Compare(k, max) &lt;= 0; k, v = c.Next() &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;%s: %s\\n&quot;, k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-循环遍历每一个\"><a href=\"#13-循环遍历每一个\" class=\"headerlink\" title=\"13.循环遍历每一个\"></a>13.循环遍历每一个</h2><p>如果你知道所在桶中拥有键，你也可以使用<code>ForEach()</code>来迭代：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">    // Assume bucket exists and has keys</span><br><span class=\"line\">    b := tx.Bucket([]byte(&quot;MyBucket&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">    b.ForEach(func(k, v []byte) error &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;key=%s, value=%s\\n&quot;, k, v)</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return nil</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-嵌套桶\"><a href=\"#14-嵌套桶\" class=\"headerlink\" title=\"14.嵌套桶\"></a>14.嵌套桶</h2><p>还可以在一个键中存储一个桶，以创建嵌套的桶：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (*Bucket) CreateBucket(key []byte) (*Bucket, error)</span><br><span class=\"line\">func (*Bucket) CreateBucketIfNotExists(key []byte) (*Bucket, error)</span><br><span class=\"line\">func (*Bucket) DeleteBucket(key []byte) error</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-数据库备份\"><a href=\"#15-数据库备份\" class=\"headerlink\" title=\"15.数据库备份\"></a>15.数据库备份</h2><p>boltdb是一个单一的文件，所以很容易备份。你可以使用<code>TX.writeto()</code>函数写一致的数据库。如果从只读事务调用这个函数，它将执行热备份，而不会阻塞其他数据库的读写操作。<br>默认情况下，它将使用一个常规文件句柄，该句柄将利用操作系统的页面缓存。有关优化大于RAM数据集的信息，请参见<code>Tx</code>文档。<br>一个常见的用例是在HTTP上进行备份，这样您就可以使用像<code>cURL</code>这样的工具来进行数据库备份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func BackupHandleFunc(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">    err := db.View(func(tx *bolt.Tx) error &#123;</span><br><span class=\"line\">        w.Header().Set(&quot;Content-Type&quot;, &quot;application/octet-stream&quot;)</span><br><span class=\"line\">        w.Header().Set(&quot;Content-Disposition&quot;, `attachment; filename=&quot;my.db&quot;`)</span><br><span class=\"line\">        w.Header().Set(&quot;Content-Length&quot;, strconv.Itoa(int(tx.Size())))</span><br><span class=\"line\">        _, err := tx.WriteTo(w)</span><br><span class=\"line\">        return err</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后您可以使用此命令进行备份：<br><code>$ curl http://localhost/backup &gt; my.db</code><br>或者你可以打开你的浏览器以<a href=\"http://localhost/backup\" target=\"_blank\" rel=\"noopener\">http://localhost/backup</a>，它会自动下载。<br>如果你想备份到另一个文件，你可以使用<code>TX.copyfile()</code>辅助功能。</p>\n<h2 id=\"16-统计\"><a href=\"#16-统计\" class=\"headerlink\" title=\"16.统计\"></a>16.统计</h2><p>数据库对运行的许多内部操作保持一个运行计数，这样您就可以更好地了解发生了什么。通过捕捉这些数据的快照，我们可以看到在这个时间范围内执行了哪些操作。<br>例如，我们可以开始一个goroutine里记录统计每10秒：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go func() &#123;</span><br><span class=\"line\">    // Grab the initial stats.</span><br><span class=\"line\">    prev := db.Stats()</span><br><span class=\"line\"></span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        // Wait for 10s.</span><br><span class=\"line\">        time.Sleep(10 * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">        // Grab the current stats and diff them.</span><br><span class=\"line\">        stats := db.Stats()</span><br><span class=\"line\">        diff := stats.Sub(&amp;prev)</span><br><span class=\"line\"></span><br><span class=\"line\">        // Encode stats to JSON and print to STDERR.</span><br><span class=\"line\">        json.NewEncoder(os.Stderr).Encode(diff)</span><br><span class=\"line\"></span><br><span class=\"line\">        // Save stats for the next loop.</span><br><span class=\"line\">        prev = stats</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"17-只读模式\"><a href=\"#17-只读模式\" class=\"headerlink\" title=\"17.只读模式\"></a>17.只读模式</h2><p>有时创建一个共享的只读boltdb数据库是有用的。对此，设置options.readonly国旗打开数据库时。只读模式使用共享锁允许多个进程从数据库中读取，但它将阻塞任何以读写方式打开数据库的进程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := bolt.Open(&quot;my.db&quot;, 0666, &amp;bolt.Options&#123;ReadOnly: true&#125;)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"18-移动端支持（ios-android）\"><a href=\"#18-移动端支持（ios-android）\" class=\"headerlink\" title=\"18.移动端支持（ios/android）\"></a>18.移动端支持（ios/android）</h2><p>boltdb能够运行在移动设备上利用的工具结合特征GoMobile。创建一个结构体，包含您的数据库逻辑和参考一个bolt.db与初始化contstructor需要在文件路径，数据库文件将存储。使用这种方法，Android和iOS都不需要额外的权限或清理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func NewBoltDB(filepath string) *BoltDB &#123;</span><br><span class=\"line\">    db, err := bolt.Open(filepath+&quot;/demo.db&quot;, 0600, nil)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &amp;BoltDB&#123;db&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type BoltDB struct &#123;</span><br><span class=\"line\">    db *bolt.DB</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (b *BoltDB) Path() string &#123;</span><br><span class=\"line\">    return b.db.Path()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (b *BoltDB) Close() &#123;</span><br><span class=\"line\">    b.db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库逻辑应定义为此包装器结构中的方法。<br>要从本机语言初始化此结构（两个平台现在都将本地存储与云同步）。这些片段禁用数据库文件的功能）：<br>Android</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String path;</span><br><span class=\"line\">if (android.os.Build.VERSION.SDK_INT &gt;=android.os.Build.VERSION_CODES.LOLLIPOP)&#123;</span><br><span class=\"line\">    path = getNoBackupFilesDir().getAbsolutePath();</span><br><span class=\"line\">&#125; else&#123;</span><br><span class=\"line\">    path = getFilesDir().getAbsolutePath();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Boltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)</span><br></pre></td></tr></table></figure>\n<p>IOS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)demo &#123;</span><br><span class=\"line\">    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,</span><br><span class=\"line\">                                                          NSUserDomainMask,</span><br><span class=\"line\">                                                          YES) objectAtIndex:0];</span><br><span class=\"line\">    GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);</span><br><span class=\"line\">    [self addSkipBackupAttributeToItemAtPath:demo.path];</span><br><span class=\"line\">    //Some DB Logic would go here</span><br><span class=\"line\">    [demo close];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSURL* URL= [NSURL fileURLWithPath: filePathString];</span><br><span class=\"line\">    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    NSError *error = nil;</span><br><span class=\"line\">    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]</span><br><span class=\"line\">                                  forKey: NSURLIsExcludedFromBackupKey error: &amp;error];</span><br><span class=\"line\">    if(!success)&#123;</span><br><span class=\"line\">        NSLog(@&quot;Error excluding %@ from backup %@&quot;, [URL lastPathComponent], error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"19-查看工具\"><a href=\"#19-查看工具\" class=\"headerlink\" title=\"19.查看工具\"></a>19.查看工具</h2><p>1.下载工具<br><code>go get github.com/boltdb/boltd</code><br>然后编译cmd下的main文件生成可执行文件改名为boltd<br>拷贝boltd到 *.db同级目录，执行如下：<code>boltd my.db</code></p>\n<p>2.命令行工具<br><a href=\"https://github.com/hasit/bolter\" target=\"_blank\" rel=\"noopener\">https://github.com/hasit/bolter</a></p>\n<p><code>bolter -f my.db</code></p>\n<p>boltdb源码解析TODO</p>\n"},{"title":"go-bytes.Buffer","date":"2018-09-19T07:46:07.000Z","_content":"# bytes.Buffer\n\n## java StringBuilder\n\n```java\nStringBuilder sb = new StringBuilder();\nsb.append(\"hello\");\nsb.append(\",world\");\nSystem.out.println(sb.toString());\n```\n\n## go bytes.Buffer\n\n```go\nvar bb bytes.Buffer\nbb.WriteString(\"[\")\nbb.WriteString(\"]\")\nfmt.Println(bb.String())\n```","source":"_posts/golang/go-bytes-Buffer.md","raw":"---\ntitle: go-bytes.Buffer\ntags:\n  - buffer\ncategories:\n  - go\ndate: 2018-09-19 15:46:07\n---\n# bytes.Buffer\n\n## java StringBuilder\n\n```java\nStringBuilder sb = new StringBuilder();\nsb.append(\"hello\");\nsb.append(\",world\");\nSystem.out.println(sb.toString());\n```\n\n## go bytes.Buffer\n\n```go\nvar bb bytes.Buffer\nbb.WriteString(\"[\")\nbb.WriteString(\"]\")\nfmt.Println(bb.String())\n```","slug":"golang/go-bytes-Buffer","published":1,"updated":"2018-09-19T08:06:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cu001cwl38puslq6pf","content":"<h1 id=\"bytes-Buffer\"><a href=\"#bytes-Buffer\" class=\"headerlink\" title=\"bytes.Buffer\"></a>bytes.Buffer</h1><h2 id=\"java-StringBuilder\"><a href=\"#java-StringBuilder\" class=\"headerlink\" title=\"java StringBuilder\"></a>java StringBuilder</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\",world\"</span>);</span><br><span class=\"line\">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>\n<h2 id=\"go-bytes-Buffer\"><a href=\"#go-bytes-Buffer\" class=\"headerlink\" title=\"go bytes.Buffer\"></a>go bytes.Buffer</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bb bytes.Buffer</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"[\"</span>)</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"]\"</span>)</span><br><span class=\"line\">fmt.Println(bb.String())</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"bytes-Buffer\"><a href=\"#bytes-Buffer\" class=\"headerlink\" title=\"bytes.Buffer\"></a>bytes.Buffer</h1><h2 id=\"java-StringBuilder\"><a href=\"#java-StringBuilder\" class=\"headerlink\" title=\"java StringBuilder\"></a>java StringBuilder</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\",world\"</span>);</span><br><span class=\"line\">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>\n<h2 id=\"go-bytes-Buffer\"><a href=\"#go-bytes-Buffer\" class=\"headerlink\" title=\"go bytes.Buffer\"></a>go bytes.Buffer</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bb bytes.Buffer</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"[\"</span>)</span><br><span class=\"line\">bb.WriteString(<span class=\"string\">\"]\"</span>)</span><br><span class=\"line\">fmt.Println(bb.String())</span><br></pre></td></tr></table></figure>"},{"title":"go-standard-library-intro","date":"2018-09-26T12:00:02.000Z","_content":"\n# 简图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvn6xqiuk6j21b80undos.jpg)","source":"_posts/golang/go-standard-library-intro.md","raw":"---\ntitle: go-standard-library-intro\ntags:\n  - 标准库\ncategories:\n  - go\ndate: 2018-09-26 20:00:02\n---\n\n# 简图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvn6xqiuk6j21b80undos.jpg)","slug":"golang/go-standard-library-intro","published":1,"updated":"2018-09-26T12:00:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cv001ewl381f3gdjc9","content":"<h1 id=\"简图\"><a href=\"#简图\" class=\"headerlink\" title=\"简图\"></a>简图</h1><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvn6xqiuk6j21b80undos.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简图\"><a href=\"#简图\" class=\"headerlink\" title=\"简图\"></a>简图</h1><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvn6xqiuk6j21b80undos.jpg\" alt=\"\"></p>\n"},{"title":"go-test简介","date":"2019-03-13T03:16:46.000Z","_content":"\n# golang 测试基本用法\n\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"bytes\"\n)\n\nfunc StringPlus() string {\n\tvar s string\n\ts += \"昵称\" + \":\" + \"greyireland\" + \"\\n\"\n\ts += \"博客\" + \":\" + \"greyireland.com\" + \"\\n\"\n\ts += \"微信公众号\" + \":\" + \"没有\"\n\treturn s\n}\nfunc StringFmt() string {\n\treturn fmt.Sprint(\"昵称\", \":\", \"greyireland\", \"\\n\", \"博客\", \":\", \"greyireland.com\", \"\\n\", \"微信公众号\", \":\", \"没有\")\n}\nfunc StringJoin() string {\n\ts := []string{\"昵称\", \":\", \"greyireland\", \"\\n\", \"博客\", \":\", \"greyireland.com\", \"\\n\", \"微信公众号\", \":\", \"没有\"}\n\treturn strings.Join(s, \"\")\n}\n\nfunc StringBuffer() string {\n\tvar b bytes.Buffer\n\tb.WriteString(\"昵称\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"greyireland\")\n\tb.WriteString(\"\\n\")\n\tb.WriteString(\"博客\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"greyireland.com\")\n\tb.WriteString(\"\\n\")\n\tb.WriteString(\"微信公众号\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"没有\")\n\treturn b.String()\n}\n```\n\n测试源码【goland可以使用cmd+shift+T快键键生成测试用例】\n```go\npackage main\n\nimport (\n\t\"testing\"\n)\n\nfunc BenchmarkStringPlus(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringPlus()\n\t}\n}\nfunc BenchmarkStringJoin(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringJoin()\n\t}\n}\nfunc BenchmarkStringBuffer(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringBuffer()\n\t}\n}\nfunc BenchmarkStringFmt(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringFmt()\n\t}\n}\n\nfunc TestStringJoin(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant string\n\t}{\n\t\t{\"\", \"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := StringJoin(); got != tt.want {\n\t\t\t\tt.Errorf(\"StringJoin() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestStringBuffer(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant string\n\t}{\n\t\t{\"\", \"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := StringBuffer(); got != tt.want {\n\t\t\t\tt.Errorf(\"StringBuffer() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n//基准测试参数解释\n// func setUp() *bolt.DB {\n// \tdb, _ := bolt.Open(\"my.db\", 0600, nil)\n// \treturn db\n// }\nfunc BenchmarkWriteKV(b *testing.B) {\n\t// setUp()\n\tb.ResetTimer()       //重置前面的耗时\n\tb.SetParallelism(10) //设置并发因子\n\tb.ReportAllocs()     //报告内存\n\tb.SetBytes(24004)    //设置一次执行的内存大小，评估吞吐量\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() { //一直循环执行\n\t\t\tfmt.Sprintf(\"%v\", 1)\n\t\t}\n\t})\n}\n//BenchmarkWriteKV-4      30000000                70.2 ns/op      342031.82 MB/s         0 B/op          0 allocs/op\n\n```\n\n常见执行命令\n```go\n// 基本测试\ngo test -v  //执行所有Test方法\ngo test -v -run=^TestStringBuilder$ //只执行某个函数测试\n示例：\n➜  go-test go test -v -run=^TestStringFmt$\n=== RUN   TestStringFmt\n--- PASS: TestStringFmt (0.00s)\nPASS\nok      AAA/go-test     0.008s\n\n\n//基准测试\ngo test -v bench=. -benchmem //执行所有基准测试用例 \n示例：\n➜  go-test go test -v -bench=String -benchmem -cover \ngoos: darwin\ngoarch: amd64\npkg: AAA/go-test\nBenchmarkStringPlus-4           10000000               125 ns/op             144 B/op          2 allocs/op\nBenchmarkStringJoin-4           10000000               194 ns/op             160 B/op          2 allocs/op\nBenchmarkStringBuffer-4          5000000               349 ns/op             336 B/op          3 allocs/op\nBenchmarkStringFmt-4             5000000               390 ns/op              80 B/op          1 allocs/op\nPASS\ncoverage: 100.0% of statements\nok      AAA/go-test     8.019s\n\n说明：\n-benchmem显示内存使用  -cover显示代码覆盖率\n390 ns/op //一次操作耗时\n80 B/op //一次内存分配占用大小\n1 allocs/op //一次操作几次内存分配\n```\n\n### 常用命令\n```go\ngo test -v -run=^TestStringBuilder$\ngo test -v bench=^TestStringBuilder$ -benchmem\n```\n\n### 深入库\n\n[assert](https://godoc.org/github.com/stretchr/testify/assert)\n","source":"_posts/golang/go-test简介.md","raw":"---\ntitle: go-test简介\ntags:\n  - test\n  - bench test\ncategories:\n  - go\ndate: 2019-03-13 11:16:46\n---\n\n# golang 测试基本用法\n\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"bytes\"\n)\n\nfunc StringPlus() string {\n\tvar s string\n\ts += \"昵称\" + \":\" + \"greyireland\" + \"\\n\"\n\ts += \"博客\" + \":\" + \"greyireland.com\" + \"\\n\"\n\ts += \"微信公众号\" + \":\" + \"没有\"\n\treturn s\n}\nfunc StringFmt() string {\n\treturn fmt.Sprint(\"昵称\", \":\", \"greyireland\", \"\\n\", \"博客\", \":\", \"greyireland.com\", \"\\n\", \"微信公众号\", \":\", \"没有\")\n}\nfunc StringJoin() string {\n\ts := []string{\"昵称\", \":\", \"greyireland\", \"\\n\", \"博客\", \":\", \"greyireland.com\", \"\\n\", \"微信公众号\", \":\", \"没有\"}\n\treturn strings.Join(s, \"\")\n}\n\nfunc StringBuffer() string {\n\tvar b bytes.Buffer\n\tb.WriteString(\"昵称\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"greyireland\")\n\tb.WriteString(\"\\n\")\n\tb.WriteString(\"博客\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"greyireland.com\")\n\tb.WriteString(\"\\n\")\n\tb.WriteString(\"微信公众号\")\n\tb.WriteString(\":\")\n\tb.WriteString(\"没有\")\n\treturn b.String()\n}\n```\n\n测试源码【goland可以使用cmd+shift+T快键键生成测试用例】\n```go\npackage main\n\nimport (\n\t\"testing\"\n)\n\nfunc BenchmarkStringPlus(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringPlus()\n\t}\n}\nfunc BenchmarkStringJoin(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringJoin()\n\t}\n}\nfunc BenchmarkStringBuffer(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringBuffer()\n\t}\n}\nfunc BenchmarkStringFmt(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tStringFmt()\n\t}\n}\n\nfunc TestStringJoin(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant string\n\t}{\n\t\t{\"\", \"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := StringJoin(); got != tt.want {\n\t\t\t\tt.Errorf(\"StringJoin() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestStringBuffer(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant string\n\t}{\n\t\t{\"\", \"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := StringBuffer(); got != tt.want {\n\t\t\t\tt.Errorf(\"StringBuffer() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n//基准测试参数解释\n// func setUp() *bolt.DB {\n// \tdb, _ := bolt.Open(\"my.db\", 0600, nil)\n// \treturn db\n// }\nfunc BenchmarkWriteKV(b *testing.B) {\n\t// setUp()\n\tb.ResetTimer()       //重置前面的耗时\n\tb.SetParallelism(10) //设置并发因子\n\tb.ReportAllocs()     //报告内存\n\tb.SetBytes(24004)    //设置一次执行的内存大小，评估吞吐量\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() { //一直循环执行\n\t\t\tfmt.Sprintf(\"%v\", 1)\n\t\t}\n\t})\n}\n//BenchmarkWriteKV-4      30000000                70.2 ns/op      342031.82 MB/s         0 B/op          0 allocs/op\n\n```\n\n常见执行命令\n```go\n// 基本测试\ngo test -v  //执行所有Test方法\ngo test -v -run=^TestStringBuilder$ //只执行某个函数测试\n示例：\n➜  go-test go test -v -run=^TestStringFmt$\n=== RUN   TestStringFmt\n--- PASS: TestStringFmt (0.00s)\nPASS\nok      AAA/go-test     0.008s\n\n\n//基准测试\ngo test -v bench=. -benchmem //执行所有基准测试用例 \n示例：\n➜  go-test go test -v -bench=String -benchmem -cover \ngoos: darwin\ngoarch: amd64\npkg: AAA/go-test\nBenchmarkStringPlus-4           10000000               125 ns/op             144 B/op          2 allocs/op\nBenchmarkStringJoin-4           10000000               194 ns/op             160 B/op          2 allocs/op\nBenchmarkStringBuffer-4          5000000               349 ns/op             336 B/op          3 allocs/op\nBenchmarkStringFmt-4             5000000               390 ns/op              80 B/op          1 allocs/op\nPASS\ncoverage: 100.0% of statements\nok      AAA/go-test     8.019s\n\n说明：\n-benchmem显示内存使用  -cover显示代码覆盖率\n390 ns/op //一次操作耗时\n80 B/op //一次内存分配占用大小\n1 allocs/op //一次操作几次内存分配\n```\n\n### 常用命令\n```go\ngo test -v -run=^TestStringBuilder$\ngo test -v bench=^TestStringBuilder$ -benchmem\n```\n\n### 深入库\n\n[assert](https://godoc.org/github.com/stretchr/testify/assert)\n","slug":"golang/go-test简介","published":1,"updated":"2019-03-23T07:59:17.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cw001hwl38rm0b7w43","content":"<h1 id=\"golang-测试基本用法\"><a href=\"#golang-测试基本用法\" class=\"headerlink\" title=\"golang 测试基本用法\"></a>golang 测试基本用法</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringPlus</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"昵称\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"greyireland\"</span> + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"博客\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"greyireland.com\"</span> + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"微信公众号\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"没有\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringFmt</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprint(<span class=\"string\">\"昵称\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"博客\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland.com\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"微信公众号\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"没有\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringJoin</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"昵称\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"博客\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland.com\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"微信公众号\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"没有\"</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(s, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringBuffer</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b bytes.Buffer</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"昵称\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"greyireland\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"博客\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"greyireland.com\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"微信公众号\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"没有\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试源码【goland可以使用cmd+shift+T快键键生成测试用例】<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringPlus</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringPlus()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringJoin</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringJoin()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringBuffer</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringBuffer()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringFmt</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringFmt()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringJoin</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ttests := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\twant <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := StringJoin(); got != tt.want &#123;</span><br><span class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"StringJoin() = %v, want %v\"</span>, got, tt.want)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringBuffer</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ttests := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\twant <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := StringBuffer(); got != tt.want &#123;</span><br><span class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"StringBuffer() = %v, want %v\"</span>, got, tt.want)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//基准测试参数解释</span></span><br><span class=\"line\"><span class=\"comment\">// func setUp() *bolt.DB &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tdb, _ := bolt.Open(\"my.db\", 0600, nil)</span></span><br><span class=\"line\"><span class=\"comment\">// \treturn db</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkWriteKV</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// setUp()</span></span><br><span class=\"line\">\tb.ResetTimer()       <span class=\"comment\">//重置前面的耗时</span></span><br><span class=\"line\">\tb.SetParallelism(<span class=\"number\">10</span>) <span class=\"comment\">//设置并发因子</span></span><br><span class=\"line\">\tb.ReportAllocs()     <span class=\"comment\">//报告内存</span></span><br><span class=\"line\">\tb.SetBytes(<span class=\"number\">24004</span>)    <span class=\"comment\">//设置一次执行的内存大小，评估吞吐量</span></span><br><span class=\"line\">\tb.RunParallel(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pb *testing.PB)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pb.Next() &#123; <span class=\"comment\">//一直循环执行</span></span><br><span class=\"line\">\t\t\tfmt.Sprintf(<span class=\"string\">\"%v\"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//BenchmarkWriteKV-4      30000000                70.2 ns/op      342031.82 MB/s         0 B/op          0 allocs/op</span></span><br></pre></td></tr></table></figure></p>\n<p>常见执行命令<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本测试</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v  <span class=\"comment\">//执行所有Test方法</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v -run=^TestStringBuilder$ <span class=\"comment\">//只执行某个函数测试</span></span><br><span class=\"line\">示例：</span><br><span class=\"line\">➜  <span class=\"keyword\">go</span>-test <span class=\"keyword\">go</span> test -v -run=^TestStringFmt$</span><br><span class=\"line\">=== RUN   TestStringFmt</span><br><span class=\"line\">--- PASS: TestStringFmt (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      AAA/<span class=\"keyword\">go</span>-test     <span class=\"number\">0.008s</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基准测试</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v bench=. -benchmem <span class=\"comment\">//执行所有基准测试用例 </span></span><br><span class=\"line\">示例：</span><br><span class=\"line\">➜  <span class=\"keyword\">go</span>-test <span class=\"keyword\">go</span> test -v -bench=String -benchmem -cover </span><br><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: AAA/<span class=\"keyword\">go</span>-test</span><br><span class=\"line\">BenchmarkStringPlus<span class=\"number\">-4</span>           <span class=\"number\">10000000</span>               <span class=\"number\">125</span> ns/op             <span class=\"number\">144</span> B/op          <span class=\"number\">2</span> allocs/op</span><br><span class=\"line\">BenchmarkStringJoin<span class=\"number\">-4</span>           <span class=\"number\">10000000</span>               <span class=\"number\">194</span> ns/op             <span class=\"number\">160</span> B/op          <span class=\"number\">2</span> allocs/op</span><br><span class=\"line\">BenchmarkStringBuffer<span class=\"number\">-4</span>          <span class=\"number\">5000000</span>               <span class=\"number\">349</span> ns/op             <span class=\"number\">336</span> B/op          <span class=\"number\">3</span> allocs/op</span><br><span class=\"line\">BenchmarkStringFmt<span class=\"number\">-4</span>             <span class=\"number\">5000000</span>               <span class=\"number\">390</span> ns/op              <span class=\"number\">80</span> B/op          <span class=\"number\">1</span> allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: <span class=\"number\">100.0</span>% of statements</span><br><span class=\"line\">ok      AAA/<span class=\"keyword\">go</span>-test     <span class=\"number\">8.019s</span></span><br><span class=\"line\"></span><br><span class=\"line\">说明：</span><br><span class=\"line\">-benchmem显示内存使用  -cover显示代码覆盖率</span><br><span class=\"line\"><span class=\"number\">390</span> ns/op <span class=\"comment\">//一次操作耗时</span></span><br><span class=\"line\"><span class=\"number\">80</span> B/op <span class=\"comment\">//一次内存分配占用大小</span></span><br><span class=\"line\"><span class=\"number\">1</span> allocs/op <span class=\"comment\">//一次操作几次内存分配</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> test -v -run=^TestStringBuilder$</span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v bench=^TestStringBuilder$ -benchmem</span><br></pre></td></tr></table></figure>\n<h3 id=\"深入库\"><a href=\"#深入库\" class=\"headerlink\" title=\"深入库\"></a>深入库</h3><p><a href=\"https://godoc.org/github.com/stretchr/testify/assert\" target=\"_blank\" rel=\"noopener\">assert</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"golang-测试基本用法\"><a href=\"#golang-测试基本用法\" class=\"headerlink\" title=\"golang 测试基本用法\"></a>golang 测试基本用法</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringPlus</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"昵称\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"greyireland\"</span> + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"博客\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"greyireland.com\"</span> + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">\ts += <span class=\"string\">\"微信公众号\"</span> + <span class=\"string\">\":\"</span> + <span class=\"string\">\"没有\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringFmt</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprint(<span class=\"string\">\"昵称\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"博客\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland.com\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"微信公众号\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"没有\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringJoin</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"昵称\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"博客\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"greyireland.com\"</span>, <span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"微信公众号\"</span>, <span class=\"string\">\":\"</span>, <span class=\"string\">\"没有\"</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(s, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StringBuffer</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b bytes.Buffer</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"昵称\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"greyireland\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"博客\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"greyireland.com\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"微信公众号\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tb.WriteString(<span class=\"string\">\"没有\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试源码【goland可以使用cmd+shift+T快键键生成测试用例】<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringPlus</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringPlus()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringJoin</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringJoin()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringBuffer</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringBuffer()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringFmt</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tStringFmt()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringJoin</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ttests := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\twant <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := StringJoin(); got != tt.want &#123;</span><br><span class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"StringJoin() = %v, want %v\"</span>, got, tt.want)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringBuffer</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ttests := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\twant <span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"昵称:greyireland\\n博客:greyireland.com\\n微信公众号:没有\"</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tt := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tt.Run(tt.name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> got := StringBuffer(); got != tt.want &#123;</span><br><span class=\"line\">\t\t\t\tt.Errorf(<span class=\"string\">\"StringBuffer() = %v, want %v\"</span>, got, tt.want)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//基准测试参数解释</span></span><br><span class=\"line\"><span class=\"comment\">// func setUp() *bolt.DB &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tdb, _ := bolt.Open(\"my.db\", 0600, nil)</span></span><br><span class=\"line\"><span class=\"comment\">// \treturn db</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkWriteKV</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// setUp()</span></span><br><span class=\"line\">\tb.ResetTimer()       <span class=\"comment\">//重置前面的耗时</span></span><br><span class=\"line\">\tb.SetParallelism(<span class=\"number\">10</span>) <span class=\"comment\">//设置并发因子</span></span><br><span class=\"line\">\tb.ReportAllocs()     <span class=\"comment\">//报告内存</span></span><br><span class=\"line\">\tb.SetBytes(<span class=\"number\">24004</span>)    <span class=\"comment\">//设置一次执行的内存大小，评估吞吐量</span></span><br><span class=\"line\">\tb.RunParallel(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pb *testing.PB)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pb.Next() &#123; <span class=\"comment\">//一直循环执行</span></span><br><span class=\"line\">\t\t\tfmt.Sprintf(<span class=\"string\">\"%v\"</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//BenchmarkWriteKV-4      30000000                70.2 ns/op      342031.82 MB/s         0 B/op          0 allocs/op</span></span><br></pre></td></tr></table></figure></p>\n<p>常见执行命令<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本测试</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v  <span class=\"comment\">//执行所有Test方法</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v -run=^TestStringBuilder$ <span class=\"comment\">//只执行某个函数测试</span></span><br><span class=\"line\">示例：</span><br><span class=\"line\">➜  <span class=\"keyword\">go</span>-test <span class=\"keyword\">go</span> test -v -run=^TestStringFmt$</span><br><span class=\"line\">=== RUN   TestStringFmt</span><br><span class=\"line\">--- PASS: TestStringFmt (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      AAA/<span class=\"keyword\">go</span>-test     <span class=\"number\">0.008s</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基准测试</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v bench=. -benchmem <span class=\"comment\">//执行所有基准测试用例 </span></span><br><span class=\"line\">示例：</span><br><span class=\"line\">➜  <span class=\"keyword\">go</span>-test <span class=\"keyword\">go</span> test -v -bench=String -benchmem -cover </span><br><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: AAA/<span class=\"keyword\">go</span>-test</span><br><span class=\"line\">BenchmarkStringPlus<span class=\"number\">-4</span>           <span class=\"number\">10000000</span>               <span class=\"number\">125</span> ns/op             <span class=\"number\">144</span> B/op          <span class=\"number\">2</span> allocs/op</span><br><span class=\"line\">BenchmarkStringJoin<span class=\"number\">-4</span>           <span class=\"number\">10000000</span>               <span class=\"number\">194</span> ns/op             <span class=\"number\">160</span> B/op          <span class=\"number\">2</span> allocs/op</span><br><span class=\"line\">BenchmarkStringBuffer<span class=\"number\">-4</span>          <span class=\"number\">5000000</span>               <span class=\"number\">349</span> ns/op             <span class=\"number\">336</span> B/op          <span class=\"number\">3</span> allocs/op</span><br><span class=\"line\">BenchmarkStringFmt<span class=\"number\">-4</span>             <span class=\"number\">5000000</span>               <span class=\"number\">390</span> ns/op              <span class=\"number\">80</span> B/op          <span class=\"number\">1</span> allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: <span class=\"number\">100.0</span>% of statements</span><br><span class=\"line\">ok      AAA/<span class=\"keyword\">go</span>-test     <span class=\"number\">8.019s</span></span><br><span class=\"line\"></span><br><span class=\"line\">说明：</span><br><span class=\"line\">-benchmem显示内存使用  -cover显示代码覆盖率</span><br><span class=\"line\"><span class=\"number\">390</span> ns/op <span class=\"comment\">//一次操作耗时</span></span><br><span class=\"line\"><span class=\"number\">80</span> B/op <span class=\"comment\">//一次内存分配占用大小</span></span><br><span class=\"line\"><span class=\"number\">1</span> allocs/op <span class=\"comment\">//一次操作几次内存分配</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> test -v -run=^TestStringBuilder$</span><br><span class=\"line\"><span class=\"keyword\">go</span> test -v bench=^TestStringBuilder$ -benchmem</span><br></pre></td></tr></table></figure>\n<h3 id=\"深入库\"><a href=\"#深入库\" class=\"headerlink\" title=\"深入库\"></a>深入库</h3><p><a href=\"https://godoc.org/github.com/stretchr/testify/assert\" target=\"_blank\" rel=\"noopener\">assert</a></p>\n"},{"title":"go-context介绍","date":"2019-03-12T06:05:22.000Z","_content":"\n\n# context简介\n\n### 并发控制\n经典的并发控制方法\n1. waitgroup\n\n控制多个goroutine\n```go\nfunc main() {\n\tvar wg sync.WaitGroup\n\n\twg.Add(2)\n\tgo func() {\n\t\ttime.Sleep(2*time.Second)\n\t\tfmt.Println(\"1号完成\")\n\t\twg.Done()\n\t}()\n\tgo func() {\n\t\ttime.Sleep(2*time.Second)\n\t\tfmt.Println(\"2号完成\")\n\t\twg.Done()\n\t}()\n\twg.Wait()\n\tfmt.Println(\"好了，大家都干完了，放工\")\n}\n```\n\n2. chan通知\n\n全局chan控制【全局变量存在并发安全问题】\n```go\nfunc main() {\n\tstop := make(chan bool)\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-stop:\n\t\t\t\tfmt.Println(\"监控退出，停止了...\")\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tfmt.Println(\"goroutine监控中...\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t}\n\t\t}\n\t}()\n\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tstop<- true\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n}\n\n```\n\n3. context\n\ncontext树\n```go\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tgo func(ctx context.Context) {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\tfmt.Println(\"监控退出，停止了...\")\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tfmt.Println(\"goroutine监控中...\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t}\n\t\t}\n\t}(ctx)\n\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tcancel()\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n\n}\n```\n\n\n### context定义\n```go\ntype Context interface {\n\tDeadline() (deadline time.Time, ok bool)\n\n\tDone() <-chan struct{}\n\n\tErr() error\n\n\tValue(key interface{}) interface{}\n}\n```\nDeadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。\n\nDone方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。\n\nErr方法返回取消的错误原因，因为什么Context被取消。\n\nValue方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。\n\n常用的方法：Done()、Value()\n构建常用子类\n```go\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) //手动调用去掉函数\nfunc WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc) //自动超时取消\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) //自动超时取消\nfunc WithValue(parent Context, key, val interface{}) Context //附带kv context树\n```\n日常用法：\n```go\nvar key string=\"name\"\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\t//附加值\n\tvalueCtx:=context.WithValue(ctx,key,\"【监控1】\")\n\tgo watch(valueCtx)\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tcancel()\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n}\n\nfunc watch(ctx context.Context) {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t//取出值\n\t\t\tfmt.Println(ctx.Value(key),\"监控退出，停止了...\")\n\t\t\treturn\n\t\tdefault:\n\t\t\t//取出值\n\t\t\tfmt.Println(ctx.Value(key),\"goroutine监控中...\")\n\t\t\ttime.Sleep(2 * time.Second)\n\t\t}\n\t}\n}\n```\n\n### context实现细节\n\n- 是不可变的(immutable)树节点\n- Cancel 一个节点，会连带 Cancel 其所有子节点 （从上到下）\n- Context values 是一个节点\n- Value 查找是回溯树的方式 （从下到上）\n\ncontext树\n```go\npackage main\nfunc tree() {\n  ctx1 := context.Background()\n  ctx2, _ := context.WithCancel(ctx1)\n  ctx3, _ := context.WithTimeout(ctx2, time.Second * 5)\n  ctx4, _ := context.WithTimeout(ctx3, time.Second * 3)\n  ctx5, _ := context.WithTimeout(ctx3, time.Second * 6)\n  ctx6 := context.WithValue(ctx5, \"userID\", 12)\n}\n```\n![](https://ws1.sinaimg.cn/large/e5320b2aly1g0zzr8v1daj20ud0aidgl.jpg)\n\n5s超时之后\n![](https://ws1.sinaimg.cn/large/e5320b2aly1g0zzro55rgj20ud0aidgn.jpg)\n\n\n什么时候用context\n- 任何函数可能被阻塞，或者需要很长时间来完成的，都应该有个 context.Context\n\n\n### 深入了解\n- httptrace\n- errgroup\n\n\n\n### 常见注意点：\n\n1. 何时取消？\n\n```go\nctx, cancel := context.WithTimeout(parentCtx, time.Second * 2)\ndefer cancel()//立即defer取消\n```\n\n1. 值不变？\n\n```\ncontext.Context 从设计上就是按照 immutable （不可变的）模式设计的\n同样，Context.Value 也是 immutable 的\n不要试图在 Context.Value 里存某个可变更的值，然后改变，期望别的 Context 可以看到这个改变\n更别指望着在 Context.Value 里存可变的值，最后多个 goroutine 并发访问没竞争冒险啥的，因为自始至终，就是按照不可变来设计的\n比如设置了超时，就别以为可以改变这个设置的超时值\n```\n\n3. 为什么要采用树结构？\n\n因为需要：根节点可以控制子节点，子节点不能控制根节点【如果使用一个单独的context节点，里面数据变更会影响所有context控制的地方。采用树结构只会影响到当前这一块区域】\n\n\n### 参考连接：\n\nhttps://www.flysnow.org/2017/05/12/go-in-action-go-context.html\n\nhttps://juejin.im/post/5a6873fef265da3e317e55b6\n\nhttps://blog.lab99.org/post/golang-2017-10-27-video-how-to-correctly-use-package-context.html\n\n","source":"_posts/golang/go-context介绍.md","raw":"---\ntitle: go-context介绍\ntags:\n  - golang\n  - context\ncategories:\n  - go\ndate: 2019-03-12 14:05:22\n---\n\n\n# context简介\n\n### 并发控制\n经典的并发控制方法\n1. waitgroup\n\n控制多个goroutine\n```go\nfunc main() {\n\tvar wg sync.WaitGroup\n\n\twg.Add(2)\n\tgo func() {\n\t\ttime.Sleep(2*time.Second)\n\t\tfmt.Println(\"1号完成\")\n\t\twg.Done()\n\t}()\n\tgo func() {\n\t\ttime.Sleep(2*time.Second)\n\t\tfmt.Println(\"2号完成\")\n\t\twg.Done()\n\t}()\n\twg.Wait()\n\tfmt.Println(\"好了，大家都干完了，放工\")\n}\n```\n\n2. chan通知\n\n全局chan控制【全局变量存在并发安全问题】\n```go\nfunc main() {\n\tstop := make(chan bool)\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-stop:\n\t\t\t\tfmt.Println(\"监控退出，停止了...\")\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tfmt.Println(\"goroutine监控中...\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t}\n\t\t}\n\t}()\n\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tstop<- true\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n}\n\n```\n\n3. context\n\ncontext树\n```go\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tgo func(ctx context.Context) {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\tfmt.Println(\"监控退出，停止了...\")\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tfmt.Println(\"goroutine监控中...\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t}\n\t\t}\n\t}(ctx)\n\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tcancel()\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n\n}\n```\n\n\n### context定义\n```go\ntype Context interface {\n\tDeadline() (deadline time.Time, ok bool)\n\n\tDone() <-chan struct{}\n\n\tErr() error\n\n\tValue(key interface{}) interface{}\n}\n```\nDeadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。\n\nDone方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。\n\nErr方法返回取消的错误原因，因为什么Context被取消。\n\nValue方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。\n\n常用的方法：Done()、Value()\n构建常用子类\n```go\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) //手动调用去掉函数\nfunc WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc) //自动超时取消\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) //自动超时取消\nfunc WithValue(parent Context, key, val interface{}) Context //附带kv context树\n```\n日常用法：\n```go\nvar key string=\"name\"\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\t//附加值\n\tvalueCtx:=context.WithValue(ctx,key,\"【监控1】\")\n\tgo watch(valueCtx)\n\ttime.Sleep(10 * time.Second)\n\tfmt.Println(\"可以了，通知监控停止\")\n\tcancel()\n\t//为了检测监控过是否停止，如果没有监控输出，就表示停止了\n\ttime.Sleep(5 * time.Second)\n}\n\nfunc watch(ctx context.Context) {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t//取出值\n\t\t\tfmt.Println(ctx.Value(key),\"监控退出，停止了...\")\n\t\t\treturn\n\t\tdefault:\n\t\t\t//取出值\n\t\t\tfmt.Println(ctx.Value(key),\"goroutine监控中...\")\n\t\t\ttime.Sleep(2 * time.Second)\n\t\t}\n\t}\n}\n```\n\n### context实现细节\n\n- 是不可变的(immutable)树节点\n- Cancel 一个节点，会连带 Cancel 其所有子节点 （从上到下）\n- Context values 是一个节点\n- Value 查找是回溯树的方式 （从下到上）\n\ncontext树\n```go\npackage main\nfunc tree() {\n  ctx1 := context.Background()\n  ctx2, _ := context.WithCancel(ctx1)\n  ctx3, _ := context.WithTimeout(ctx2, time.Second * 5)\n  ctx4, _ := context.WithTimeout(ctx3, time.Second * 3)\n  ctx5, _ := context.WithTimeout(ctx3, time.Second * 6)\n  ctx6 := context.WithValue(ctx5, \"userID\", 12)\n}\n```\n![](https://ws1.sinaimg.cn/large/e5320b2aly1g0zzr8v1daj20ud0aidgl.jpg)\n\n5s超时之后\n![](https://ws1.sinaimg.cn/large/e5320b2aly1g0zzro55rgj20ud0aidgn.jpg)\n\n\n什么时候用context\n- 任何函数可能被阻塞，或者需要很长时间来完成的，都应该有个 context.Context\n\n\n### 深入了解\n- httptrace\n- errgroup\n\n\n\n### 常见注意点：\n\n1. 何时取消？\n\n```go\nctx, cancel := context.WithTimeout(parentCtx, time.Second * 2)\ndefer cancel()//立即defer取消\n```\n\n1. 值不变？\n\n```\ncontext.Context 从设计上就是按照 immutable （不可变的）模式设计的\n同样，Context.Value 也是 immutable 的\n不要试图在 Context.Value 里存某个可变更的值，然后改变，期望别的 Context 可以看到这个改变\n更别指望着在 Context.Value 里存可变的值，最后多个 goroutine 并发访问没竞争冒险啥的，因为自始至终，就是按照不可变来设计的\n比如设置了超时，就别以为可以改变这个设置的超时值\n```\n\n3. 为什么要采用树结构？\n\n因为需要：根节点可以控制子节点，子节点不能控制根节点【如果使用一个单独的context节点，里面数据变更会影响所有context控制的地方。采用树结构只会影响到当前这一块区域】\n\n\n### 参考连接：\n\nhttps://www.flysnow.org/2017/05/12/go-in-action-go-context.html\n\nhttps://juejin.im/post/5a6873fef265da3e317e55b6\n\nhttps://blog.lab99.org/post/golang-2017-10-27-video-how-to-correctly-use-package-context.html\n\n","slug":"golang/go-context介绍","published":1,"updated":"2019-03-12T11:59:53.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cx001kwl389r3pstqa","content":"<h1 id=\"context简介\"><a href=\"#context简介\" class=\"headerlink\" title=\"context简介\"></a>context简介</h1><h3 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h3><p>经典的并发控制方法</p>\n<ol>\n<li>waitgroup</li>\n</ol>\n<p>控制多个goroutine<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">2</span>*time.Second)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"1号完成\"</span>)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">2</span>*time.Second)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"2号完成\"</span>)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"好了，大家都干完了，放工\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>chan通知</li>\n</ol>\n<p>全局chan控制【全局变量存在并发安全问题】<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstop := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-stop:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tstop&lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>context</li>\n</ol>\n<p>context树<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"context定义\"><a href=\"#context定义\" class=\"headerlink\" title=\"context定义\"></a>context定义</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tDeadline() (deadline time.Time, ok <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tErr() error</span><br><span class=\"line\"></span><br><span class=\"line\">\tValue(key <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Deadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。</p>\n<p>Done方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。</p>\n<p>Err方法返回取消的错误原因，因为什么Context被取消。</p>\n<p>Value方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。</p>\n<p>常用的方法：Done()、Value()<br>构建常用子类<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithCancel</span><span class=\"params\">(parent Context)</span> <span class=\"params\">(ctx Context, cancel CancelFunc)</span> //手动调用去掉函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithDeadline</span><span class=\"params\">(parent Context, deadline time.Time)</span> <span class=\"params\">(Context, CancelFunc)</span> //自动超时取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithTimeout</span><span class=\"params\">(parent Context, timeout time.Duration)</span> <span class=\"params\">(Context, CancelFunc)</span> //自动超时取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithValue</span><span class=\"params\">(parent Context, key, val <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">Context</span> //附带<span class=\"title\">kv</span> <span class=\"title\">context</span>树</span></span><br></pre></td></tr></table></figure></p>\n<p>日常用法：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> key <span class=\"keyword\">string</span>=<span class=\"string\">\"name\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"comment\">//附加值</span></span><br><span class=\"line\">\tvalueCtx:=context.WithValue(ctx,key,<span class=\"string\">\"【监控1】\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(valueCtx)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">watch</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出值</span></span><br><span class=\"line\">\t\t\tfmt.Println(ctx.Value(key),<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出值</span></span><br><span class=\"line\">\t\t\tfmt.Println(ctx.Value(key),<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"context实现细节\"><a href=\"#context实现细节\" class=\"headerlink\" title=\"context实现细节\"></a>context实现细节</h3><ul>\n<li>是不可变的(immutable)树节点</li>\n<li>Cancel 一个节点，会连带 Cancel 其所有子节点 （从上到下）</li>\n<li>Context values 是一个节点</li>\n<li>Value 查找是回溯树的方式 （从下到上）</li>\n</ul>\n<p>context树<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tree</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ctx1 := context.Background()</span><br><span class=\"line\">  ctx2, _ := context.WithCancel(ctx1)</span><br><span class=\"line\">  ctx3, _ := context.WithTimeout(ctx2, time.Second * <span class=\"number\">5</span>)</span><br><span class=\"line\">  ctx4, _ := context.WithTimeout(ctx3, time.Second * <span class=\"number\">3</span>)</span><br><span class=\"line\">  ctx5, _ := context.WithTimeout(ctx3, time.Second * <span class=\"number\">6</span>)</span><br><span class=\"line\">  ctx6 := context.WithValue(ctx5, <span class=\"string\">\"userID\"</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1g0zzr8v1daj20ud0aidgl.jpg\" alt=\"\"></p>\n<p>5s超时之后<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1g0zzro55rgj20ud0aidgn.jpg\" alt=\"\"></p>\n<p>什么时候用context</p>\n<ul>\n<li>任何函数可能被阻塞，或者需要很长时间来完成的，都应该有个 context.Context</li>\n</ul>\n<h3 id=\"深入了解\"><a href=\"#深入了解\" class=\"headerlink\" title=\"深入了解\"></a>深入了解</h3><ul>\n<li>httptrace</li>\n<li>errgroup</li>\n</ul>\n<h3 id=\"常见注意点：\"><a href=\"#常见注意点：\" class=\"headerlink\" title=\"常见注意点：\"></a>常见注意点：</h3><ol>\n<li>何时取消？</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx, cancel := context.WithTimeout(parentCtx, time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> cancel()<span class=\"comment\">//立即defer取消</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>值不变？</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.Context 从设计上就是按照 immutable （不可变的）模式设计的</span><br><span class=\"line\">同样，Context.Value 也是 immutable 的</span><br><span class=\"line\">不要试图在 Context.Value 里存某个可变更的值，然后改变，期望别的 Context 可以看到这个改变</span><br><span class=\"line\">更别指望着在 Context.Value 里存可变的值，最后多个 goroutine 并发访问没竞争冒险啥的，因为自始至终，就是按照不可变来设计的</span><br><span class=\"line\">比如设置了超时，就别以为可以改变这个设置的超时值</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>为什么要采用树结构？</li>\n</ol>\n<p>因为需要：根节点可以控制子节点，子节点不能控制根节点【如果使用一个单独的context节点，里面数据变更会影响所有context控制的地方。采用树结构只会影响到当前这一块区域】</p>\n<h3 id=\"参考连接：\"><a href=\"#参考连接：\" class=\"headerlink\" title=\"参考连接：\"></a>参考连接：</h3><p><a href=\"https://www.flysnow.org/2017/05/12/go-in-action-go-context.html\" target=\"_blank\" rel=\"noopener\">https://www.flysnow.org/2017/05/12/go-in-action-go-context.html</a></p>\n<p><a href=\"https://juejin.im/post/5a6873fef265da3e317e55b6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a6873fef265da3e317e55b6</a></p>\n<p><a href=\"https://blog.lab99.org/post/golang-2017-10-27-video-how-to-correctly-use-package-context.html\" target=\"_blank\" rel=\"noopener\">https://blog.lab99.org/post/golang-2017-10-27-video-how-to-correctly-use-package-context.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"context简介\"><a href=\"#context简介\" class=\"headerlink\" title=\"context简介\"></a>context简介</h1><h3 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h3><p>经典的并发控制方法</p>\n<ol>\n<li>waitgroup</li>\n</ol>\n<p>控制多个goroutine<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">2</span>*time.Second)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"1号完成\"</span>)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">2</span>*time.Second)</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"2号完成\"</span>)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"好了，大家都干完了，放工\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>chan通知</li>\n</ol>\n<p>全局chan控制【全局变量存在并发安全问题】<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tstop := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-stop:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tstop&lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>context</li>\n</ol>\n<p>context树<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"context定义\"><a href=\"#context定义\" class=\"headerlink\" title=\"context定义\"></a>context定义</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tDeadline() (deadline time.Time, ok <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tErr() error</span><br><span class=\"line\"></span><br><span class=\"line\">\tValue(key <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Deadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。</p>\n<p>Done方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。</p>\n<p>Err方法返回取消的错误原因，因为什么Context被取消。</p>\n<p>Value方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。</p>\n<p>常用的方法：Done()、Value()<br>构建常用子类<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithCancel</span><span class=\"params\">(parent Context)</span> <span class=\"params\">(ctx Context, cancel CancelFunc)</span> //手动调用去掉函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithDeadline</span><span class=\"params\">(parent Context, deadline time.Time)</span> <span class=\"params\">(Context, CancelFunc)</span> //自动超时取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithTimeout</span><span class=\"params\">(parent Context, timeout time.Duration)</span> <span class=\"params\">(Context, CancelFunc)</span> //自动超时取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithValue</span><span class=\"params\">(parent Context, key, val <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">Context</span> //附带<span class=\"title\">kv</span> <span class=\"title\">context</span>树</span></span><br></pre></td></tr></table></figure></p>\n<p>日常用法：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> key <span class=\"keyword\">string</span>=<span class=\"string\">\"name\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"comment\">//附加值</span></span><br><span class=\"line\">\tvalueCtx:=context.WithValue(ctx,key,<span class=\"string\">\"【监控1】\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(valueCtx)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"可以了，通知监控停止\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\">\t<span class=\"comment\">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">watch</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出值</span></span><br><span class=\"line\">\t\t\tfmt.Println(ctx.Value(key),<span class=\"string\">\"监控退出，停止了...\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出值</span></span><br><span class=\"line\">\t\t\tfmt.Println(ctx.Value(key),<span class=\"string\">\"goroutine监控中...\"</span>)</span><br><span class=\"line\">\t\t\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"context实现细节\"><a href=\"#context实现细节\" class=\"headerlink\" title=\"context实现细节\"></a>context实现细节</h3><ul>\n<li>是不可变的(immutable)树节点</li>\n<li>Cancel 一个节点，会连带 Cancel 其所有子节点 （从上到下）</li>\n<li>Context values 是一个节点</li>\n<li>Value 查找是回溯树的方式 （从下到上）</li>\n</ul>\n<p>context树<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tree</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ctx1 := context.Background()</span><br><span class=\"line\">  ctx2, _ := context.WithCancel(ctx1)</span><br><span class=\"line\">  ctx3, _ := context.WithTimeout(ctx2, time.Second * <span class=\"number\">5</span>)</span><br><span class=\"line\">  ctx4, _ := context.WithTimeout(ctx3, time.Second * <span class=\"number\">3</span>)</span><br><span class=\"line\">  ctx5, _ := context.WithTimeout(ctx3, time.Second * <span class=\"number\">6</span>)</span><br><span class=\"line\">  ctx6 := context.WithValue(ctx5, <span class=\"string\">\"userID\"</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1g0zzr8v1daj20ud0aidgl.jpg\" alt=\"\"></p>\n<p>5s超时之后<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1g0zzro55rgj20ud0aidgn.jpg\" alt=\"\"></p>\n<p>什么时候用context</p>\n<ul>\n<li>任何函数可能被阻塞，或者需要很长时间来完成的，都应该有个 context.Context</li>\n</ul>\n<h3 id=\"深入了解\"><a href=\"#深入了解\" class=\"headerlink\" title=\"深入了解\"></a>深入了解</h3><ul>\n<li>httptrace</li>\n<li>errgroup</li>\n</ul>\n<h3 id=\"常见注意点：\"><a href=\"#常见注意点：\" class=\"headerlink\" title=\"常见注意点：\"></a>常见注意点：</h3><ol>\n<li>何时取消？</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx, cancel := context.WithTimeout(parentCtx, time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> cancel()<span class=\"comment\">//立即defer取消</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>值不变？</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.Context 从设计上就是按照 immutable （不可变的）模式设计的</span><br><span class=\"line\">同样，Context.Value 也是 immutable 的</span><br><span class=\"line\">不要试图在 Context.Value 里存某个可变更的值，然后改变，期望别的 Context 可以看到这个改变</span><br><span class=\"line\">更别指望着在 Context.Value 里存可变的值，最后多个 goroutine 并发访问没竞争冒险啥的，因为自始至终，就是按照不可变来设计的</span><br><span class=\"line\">比如设置了超时，就别以为可以改变这个设置的超时值</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>为什么要采用树结构？</li>\n</ol>\n<p>因为需要：根节点可以控制子节点，子节点不能控制根节点【如果使用一个单独的context节点，里面数据变更会影响所有context控制的地方。采用树结构只会影响到当前这一块区域】</p>\n<h3 id=\"参考连接：\"><a href=\"#参考连接：\" class=\"headerlink\" title=\"参考连接：\"></a>参考连接：</h3><p><a href=\"https://www.flysnow.org/2017/05/12/go-in-action-go-context.html\" target=\"_blank\" rel=\"noopener\">https://www.flysnow.org/2017/05/12/go-in-action-go-context.html</a></p>\n<p><a href=\"https://juejin.im/post/5a6873fef265da3e317e55b6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a6873fef265da3e317e55b6</a></p>\n<p><a href=\"https://blog.lab99.org/post/golang-2017-10-27-video-how-to-correctly-use-package-context.html\" target=\"_blank\" rel=\"noopener\">https://blog.lab99.org/post/golang-2017-10-27-video-how-to-correctly-use-package-context.html</a></p>\n"},{"title":"go-函数式可选项","date":"2019-03-10T13:52:22.000Z","_content":"\n# 函数式可选项\n\n通过参数创建实例，常见方式\n\n常用方式\n```go\nfunc NewStuffClient(conn Connection, timeout, retries int) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: timeout,\n        retries: retries,\n    }\n}\nfunc NewStuffClient(conn Connection) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: DEFAULT_TIMEOUT,\n        retries: DEFAULT_RETRIES,\n    }\n}\nfunc NewStuffClientWithOptions(conn Connection, timeout, retries int) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: timeout,\n        retries: retries,\n    }\n}\n```\n或者\n```go\ntype StuffClientOptions struct {\n    Retries int \n    Timeout int \n}\n//传入对象\nfunc NewStuffClient(conn Connection, options StuffClientOptions) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: options.Timeout,\n        retries: options.Retries,\n    }\n}\n\n```\n\n更高级的方式，通过闭包函数注入\n```go\ntype StuffClientOptions struct {\n    Retries int //number of times to retry the request before giving up\n    Timeout int //connection timeout in seconds\n}\ntype StuffClientOption func(*StuffClientOptions)\nfunc WithRetries(r int) StuffClientOption {\n    return func(o *StuffClientOptions) {\n        o.Retries = r\n    }\n}\nfunc WithTimeout(t int) StuffClientOption {\n    return func(o *StuffClientOptions) {\n        o.Timeout = t\n    }\n}\n\nvar defaultStuffClientOptions = StuffClientOptions{\n    Retries: 3,\n    Timeout: 2,\n}\n//使用可选函数注入选项\nfunc NewStuffClient(conn Connection, opts ...StuffClientOption) StuffClient {\n    options := defaultStuffClientOptions\n    for _, o := range opts {\n        o(&options)\n    }\n    return &stuffClient{\n        conn:    conn,\n        timeout: options.Timeout,\n        retries: options.Retries,\n    }\n}\n\n```\n\n使用方式\n```\nx := NewStuffClient(Connection{})\nfmt.Println(x) // prints &{{} 2 3}\nx = NewStuffClient(\n    Connection{},\n    WithRetries(1),\n)\nfmt.Println(x) // prints &{{} 2 1}\nx = NewStuffClient(\n    Connection{},\n    WithRetries(1),\n    WithTimeout(1),\n)\nfmt.Println(x) // prints &{{} 1 1}\n\n```\n\n### 模式步骤：\n1. 定义options\n2. 定义option\n3. 定义闭包函数\n4. 传入函数选项\n5. 调用函数,注入配置到选项\n\n### 实际项目使用\nredigo go的redis连接客户端代码片段\n```go\n\n//1 声明options\ntype dialOptions struct {\n\treadTimeout  time.Duration\n\twriteTimeout time.Duration\n\tdialer       *net.Dialer\n\tdial         func(network, addr string) (net.Conn, error)\n\tdb           int\n\tpassword     string\n\tuseTLS       bool\n\tskipVerify   bool\n\ttlsConfig    *tls.Config\n}\n//2 声明option\ntype DialOption struct {\n\tf func(*dialOptions)\n}\n// DialReadTimeout specifies the timeout for reading a single command reply\n//3 声明闭包函数\nfunc DialReadTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.readTimeout = d\n\t}}\n}\n\n// DialWriteTimeout specifies the timeout for writing a single command.\nfunc DialWriteTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.writeTimeout = d\n\t}}\n}\n\n// DialConnectTimeout specifies the timeout for connecting to the Redis server when\n// no DialNetDial option is specified.\nfunc DialConnectTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dialer.Timeout = d\n\t}}\n}\n\n// DialKeepAlive specifies the keep-alive period for TCP connections to the Redis server\n// when no DialNetDial option is specified.\n// If zero, keep-alives are not enabled. If no DialKeepAlive option is specified then\n// the default of 5 minutes is used to ensure that half-closed TCP sessions are detected.\nfunc DialKeepAlive(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dialer.KeepAlive = d\n\t}}\n}\n\n// DialNetDial specifies a custom dial function for creating TCP\n// connections, otherwise a net.Dialer customized via the other options is used.\n// DialNetDial overrides DialConnectTimeout and DialKeepAlive.\nfunc DialNetDial(dial func(network, addr string) (net.Conn, error)) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dial = dial\n\t}}\n}\n\n// DialDatabase specifies the database to select when dialing a connection.\nfunc DialDatabase(db int) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.db = db\n\t}}\n}\n\n// DialPassword specifies the password to use when connecting to\n// the Redis server.\nfunc DialPassword(password string) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.password = password\n\t}}\n}\n\n// DialTLSConfig specifies the config to use when a TLS connection is dialed.\n// Has no effect when not dialing a TLS connection.\nfunc DialTLSConfig(c *tls.Config) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.tlsConfig = c\n\t}}\n}\n\n// DialTLSSkipVerify disables server name verification when connecting over\n// TLS. Has no effect when not dialing a TLS connection.\nfunc DialTLSSkipVerify(skip bool) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.skipVerify = skip\n\t}}\n}\n\n// DialUseTLS specifies whether TLS should be used when connecting to the\n// server. This option is ignore by DialURL.\nfunc DialUseTLS(useTLS bool) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.useTLS = useTLS\n\t}}\n}\n\n// Dial connects to the Redis server at the given network and\n// address using the specified options.\n//4传入参数\nfunc Dial(network, address string, options ...DialOption) (Conn, error) {\n\tdo := dialOptions{\n\t\tdialer: &net.Dialer{\n\t\t\tKeepAlive: time.Minute * 5,\n\t\t},\n  }\n  //5 注入\n\tfor _, option := range options {\n\t\toption.f(&do)\n\t}\n\tif do.dial == nil {\n\t\tdo.dial = do.dialer.Dial\n\t}\n\n\tnetConn, err := do.dial(network, address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif do.useTLS {\n\t\tvar tlsConfig *tls.Config\n\t\tif do.tlsConfig == nil {\n\t\t\ttlsConfig = &tls.Config{InsecureSkipVerify: do.skipVerify}\n\t\t} else {\n\t\t\ttlsConfig = cloneTLSConfig(do.tlsConfig)\n\t\t}\n\t\tif tlsConfig.ServerName == \"\" {\n\t\t\thost, _, err := net.SplitHostPort(address)\n\t\t\tif err != nil {\n\t\t\t\tnetConn.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ttlsConfig.ServerName = host\n\t\t}\n\n\t\ttlsConn := tls.Client(netConn, tlsConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\tnetConn = tlsConn\n\t}\n\n\tc := &conn{\n\t\tconn:         netConn,\n\t\tbw:           bufio.NewWriter(netConn),\n\t\tbr:           bufio.NewReader(netConn),\n\t\treadTimeout:  do.readTimeout,\n\t\twriteTimeout: do.writeTimeout,\n\t}\n\n\tif do.password != \"\" {\n\t\tif _, err := c.Do(\"AUTH\", do.password); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif do.db != 0 {\n\t\tif _, err := c.Do(\"SELECT\", do.db); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn c, nil\n}\n```","source":"_posts/golang/go-函数式可选项.md","raw":"---\ntitle: go-函数式可选项\ntags:\n  - go\n  - 函数式选项\ncategories:\n  - 设计模式\n  - Go设计模式\ndate: 2019-03-10 21:52:22\n---\n\n# 函数式可选项\n\n通过参数创建实例，常见方式\n\n常用方式\n```go\nfunc NewStuffClient(conn Connection, timeout, retries int) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: timeout,\n        retries: retries,\n    }\n}\nfunc NewStuffClient(conn Connection) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: DEFAULT_TIMEOUT,\n        retries: DEFAULT_RETRIES,\n    }\n}\nfunc NewStuffClientWithOptions(conn Connection, timeout, retries int) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: timeout,\n        retries: retries,\n    }\n}\n```\n或者\n```go\ntype StuffClientOptions struct {\n    Retries int \n    Timeout int \n}\n//传入对象\nfunc NewStuffClient(conn Connection, options StuffClientOptions) StuffClient {\n    return &stuffClient{\n        conn:    conn,\n        timeout: options.Timeout,\n        retries: options.Retries,\n    }\n}\n\n```\n\n更高级的方式，通过闭包函数注入\n```go\ntype StuffClientOptions struct {\n    Retries int //number of times to retry the request before giving up\n    Timeout int //connection timeout in seconds\n}\ntype StuffClientOption func(*StuffClientOptions)\nfunc WithRetries(r int) StuffClientOption {\n    return func(o *StuffClientOptions) {\n        o.Retries = r\n    }\n}\nfunc WithTimeout(t int) StuffClientOption {\n    return func(o *StuffClientOptions) {\n        o.Timeout = t\n    }\n}\n\nvar defaultStuffClientOptions = StuffClientOptions{\n    Retries: 3,\n    Timeout: 2,\n}\n//使用可选函数注入选项\nfunc NewStuffClient(conn Connection, opts ...StuffClientOption) StuffClient {\n    options := defaultStuffClientOptions\n    for _, o := range opts {\n        o(&options)\n    }\n    return &stuffClient{\n        conn:    conn,\n        timeout: options.Timeout,\n        retries: options.Retries,\n    }\n}\n\n```\n\n使用方式\n```\nx := NewStuffClient(Connection{})\nfmt.Println(x) // prints &{{} 2 3}\nx = NewStuffClient(\n    Connection{},\n    WithRetries(1),\n)\nfmt.Println(x) // prints &{{} 2 1}\nx = NewStuffClient(\n    Connection{},\n    WithRetries(1),\n    WithTimeout(1),\n)\nfmt.Println(x) // prints &{{} 1 1}\n\n```\n\n### 模式步骤：\n1. 定义options\n2. 定义option\n3. 定义闭包函数\n4. 传入函数选项\n5. 调用函数,注入配置到选项\n\n### 实际项目使用\nredigo go的redis连接客户端代码片段\n```go\n\n//1 声明options\ntype dialOptions struct {\n\treadTimeout  time.Duration\n\twriteTimeout time.Duration\n\tdialer       *net.Dialer\n\tdial         func(network, addr string) (net.Conn, error)\n\tdb           int\n\tpassword     string\n\tuseTLS       bool\n\tskipVerify   bool\n\ttlsConfig    *tls.Config\n}\n//2 声明option\ntype DialOption struct {\n\tf func(*dialOptions)\n}\n// DialReadTimeout specifies the timeout for reading a single command reply\n//3 声明闭包函数\nfunc DialReadTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.readTimeout = d\n\t}}\n}\n\n// DialWriteTimeout specifies the timeout for writing a single command.\nfunc DialWriteTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.writeTimeout = d\n\t}}\n}\n\n// DialConnectTimeout specifies the timeout for connecting to the Redis server when\n// no DialNetDial option is specified.\nfunc DialConnectTimeout(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dialer.Timeout = d\n\t}}\n}\n\n// DialKeepAlive specifies the keep-alive period for TCP connections to the Redis server\n// when no DialNetDial option is specified.\n// If zero, keep-alives are not enabled. If no DialKeepAlive option is specified then\n// the default of 5 minutes is used to ensure that half-closed TCP sessions are detected.\nfunc DialKeepAlive(d time.Duration) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dialer.KeepAlive = d\n\t}}\n}\n\n// DialNetDial specifies a custom dial function for creating TCP\n// connections, otherwise a net.Dialer customized via the other options is used.\n// DialNetDial overrides DialConnectTimeout and DialKeepAlive.\nfunc DialNetDial(dial func(network, addr string) (net.Conn, error)) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.dial = dial\n\t}}\n}\n\n// DialDatabase specifies the database to select when dialing a connection.\nfunc DialDatabase(db int) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.db = db\n\t}}\n}\n\n// DialPassword specifies the password to use when connecting to\n// the Redis server.\nfunc DialPassword(password string) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.password = password\n\t}}\n}\n\n// DialTLSConfig specifies the config to use when a TLS connection is dialed.\n// Has no effect when not dialing a TLS connection.\nfunc DialTLSConfig(c *tls.Config) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.tlsConfig = c\n\t}}\n}\n\n// DialTLSSkipVerify disables server name verification when connecting over\n// TLS. Has no effect when not dialing a TLS connection.\nfunc DialTLSSkipVerify(skip bool) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.skipVerify = skip\n\t}}\n}\n\n// DialUseTLS specifies whether TLS should be used when connecting to the\n// server. This option is ignore by DialURL.\nfunc DialUseTLS(useTLS bool) DialOption {\n\treturn DialOption{func(do *dialOptions) {\n\t\tdo.useTLS = useTLS\n\t}}\n}\n\n// Dial connects to the Redis server at the given network and\n// address using the specified options.\n//4传入参数\nfunc Dial(network, address string, options ...DialOption) (Conn, error) {\n\tdo := dialOptions{\n\t\tdialer: &net.Dialer{\n\t\t\tKeepAlive: time.Minute * 5,\n\t\t},\n  }\n  //5 注入\n\tfor _, option := range options {\n\t\toption.f(&do)\n\t}\n\tif do.dial == nil {\n\t\tdo.dial = do.dialer.Dial\n\t}\n\n\tnetConn, err := do.dial(network, address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif do.useTLS {\n\t\tvar tlsConfig *tls.Config\n\t\tif do.tlsConfig == nil {\n\t\t\ttlsConfig = &tls.Config{InsecureSkipVerify: do.skipVerify}\n\t\t} else {\n\t\t\ttlsConfig = cloneTLSConfig(do.tlsConfig)\n\t\t}\n\t\tif tlsConfig.ServerName == \"\" {\n\t\t\thost, _, err := net.SplitHostPort(address)\n\t\t\tif err != nil {\n\t\t\t\tnetConn.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ttlsConfig.ServerName = host\n\t\t}\n\n\t\ttlsConn := tls.Client(netConn, tlsConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\tnetConn = tlsConn\n\t}\n\n\tc := &conn{\n\t\tconn:         netConn,\n\t\tbw:           bufio.NewWriter(netConn),\n\t\tbr:           bufio.NewReader(netConn),\n\t\treadTimeout:  do.readTimeout,\n\t\twriteTimeout: do.writeTimeout,\n\t}\n\n\tif do.password != \"\" {\n\t\tif _, err := c.Do(\"AUTH\", do.password); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif do.db != 0 {\n\t\tif _, err := c.Do(\"SELECT\", do.db); err != nil {\n\t\t\tnetConn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn c, nil\n}\n```","slug":"golang/go-函数式可选项","published":1,"updated":"2019-03-10T14:17:30.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0cy001mwl389gh2ubdl","content":"<h1 id=\"函数式可选项\"><a href=\"#函数式可选项\" class=\"headerlink\" title=\"函数式可选项\"></a>函数式可选项</h1><p>通过参数创建实例，常见方式</p>\n<p>常用方式<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, timeout, retries <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: timeout,</span><br><span class=\"line\">        retries: retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: DEFAULT_TIMEOUT,</span><br><span class=\"line\">        retries: DEFAULT_RETRIES,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClientWithOptions</span><span class=\"params\">(conn Connection, timeout, retries <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: timeout,</span><br><span class=\"line\">        retries: retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Retries <span class=\"keyword\">int</span> </span><br><span class=\"line\">    Timeout <span class=\"keyword\">int</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//传入对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, options StuffClientOptions)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: options.Timeout,</span><br><span class=\"line\">        retries: options.Retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>更高级的方式，通过闭包函数注入<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Retries <span class=\"keyword\">int</span> <span class=\"comment\">//number of times to retry the request before giving up</span></span><br><span class=\"line\">    Timeout <span class=\"keyword\">int</span> <span class=\"comment\">//connection timeout in seconds</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOption <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*StuffClientOptions)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithRetries</span><span class=\"params\">(r <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClientOption</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *StuffClientOptions)</span></span> &#123;</span><br><span class=\"line\">        o.Retries = r</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithTimeout</span><span class=\"params\">(t <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClientOption</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *StuffClientOptions)</span></span> &#123;</span><br><span class=\"line\">        o.Timeout = t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> defaultStuffClientOptions = StuffClientOptions&#123;</span><br><span class=\"line\">    Retries: <span class=\"number\">3</span>,</span><br><span class=\"line\">    Timeout: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用可选函数注入选项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, opts ...StuffClientOption)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    options := defaultStuffClientOptions</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, o := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">        o(&amp;options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: options.Timeout,</span><br><span class=\"line\">        retries: options.Retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x := NewStuffClient(Connection&#123;&#125;)</span><br><span class=\"line\">fmt.Println(x) // prints &amp;&#123;&#123;&#125; 2 3&#125;</span><br><span class=\"line\">x = NewStuffClient(</span><br><span class=\"line\">    Connection&#123;&#125;,</span><br><span class=\"line\">    WithRetries(1),</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(x) // prints &amp;&#123;&#123;&#125; 2 1&#125;</span><br><span class=\"line\">x = NewStuffClient(</span><br><span class=\"line\">    Connection&#123;&#125;,</span><br><span class=\"line\">    WithRetries(1),</span><br><span class=\"line\">    WithTimeout(1),</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(x) // prints &amp;&#123;&#123;&#125; 1 1&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"模式步骤：\"><a href=\"#模式步骤：\" class=\"headerlink\" title=\"模式步骤：\"></a>模式步骤：</h3><ol>\n<li>定义options</li>\n<li>定义option</li>\n<li>定义闭包函数</li>\n<li>传入函数选项</li>\n<li>调用函数,注入配置到选项</li>\n</ol>\n<h3 id=\"实际项目使用\"><a href=\"#实际项目使用\" class=\"headerlink\" title=\"实际项目使用\"></a>实际项目使用</h3><p>redigo go的redis连接客户端代码片段<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1 声明options</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> dialOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\treadTimeout  time.Duration</span><br><span class=\"line\">\twriteTimeout time.Duration</span><br><span class=\"line\">\tdialer       *net.Dialer</span><br><span class=\"line\">\tdial         <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(network, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(net.Conn, error)</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">db</span>           <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">password</span>     <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">useTLS</span>       <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">skipVerify</span>   <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">tlsConfig</span>    *<span class=\"title\">tls</span>.<span class=\"title\">Config</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\">//2 声明<span class=\"title\">option</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">DialOption</span> <span class=\"title\">struct</span></span> &#123;</span><br><span class=\"line\">\tf <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*dialOptions)</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">DialReadTimeout</span> <span class=\"title\">specifies</span> <span class=\"title\">the</span> <span class=\"title\">timeout</span> <span class=\"title\">for</span> <span class=\"title\">reading</span> <span class=\"title\">a</span> <span class=\"title\">single</span> <span class=\"title\">command</span> <span class=\"title\">reply</span></span></span><br><span class=\"line\"><span class=\"function\">//3 声明闭包函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">DialReadTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.readTimeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialWriteTimeout specifies the timeout for writing a single command.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialWriteTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.writeTimeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialConnectTimeout specifies the timeout for connecting to the Redis server when</span></span><br><span class=\"line\"><span class=\"comment\">// no DialNetDial option is specified.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialConnectTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dialer.Timeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialKeepAlive specifies the keep-alive period for TCP connections to the Redis server</span></span><br><span class=\"line\"><span class=\"comment\">// when no DialNetDial option is specified.</span></span><br><span class=\"line\"><span class=\"comment\">// If zero, keep-alives are not enabled. If no DialKeepAlive option is specified then</span></span><br><span class=\"line\"><span class=\"comment\">// the default of 5 minutes is used to ensure that half-closed TCP sessions are detected.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialKeepAlive</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dialer.KeepAlive = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialNetDial specifies a custom dial function for creating TCP</span></span><br><span class=\"line\"><span class=\"comment\">// connections, otherwise a net.Dialer customized via the other options is used.</span></span><br><span class=\"line\"><span class=\"comment\">// DialNetDial overrides DialConnectTimeout and DialKeepAlive.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialNetDial</span><span class=\"params\">(dial <span class=\"keyword\">func</span>(network, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(net.Conn, error)</span>) <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dial = dial</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialDatabase specifies the database to select when dialing a connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialDatabase</span><span class=\"params\">(db <span class=\"keyword\">int</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.db = db</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialPassword specifies the password to use when connecting to</span></span><br><span class=\"line\"><span class=\"comment\">// the Redis server.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialPassword</span><span class=\"params\">(password <span class=\"keyword\">string</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.password = password</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialTLSConfig specifies the config to use when a TLS connection is dialed.</span></span><br><span class=\"line\"><span class=\"comment\">// Has no effect when not dialing a TLS connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialTLSConfig</span><span class=\"params\">(c *tls.Config)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.tlsConfig = c</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialTLSSkipVerify disables server name verification when connecting over</span></span><br><span class=\"line\"><span class=\"comment\">// TLS. Has no effect when not dialing a TLS connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialTLSSkipVerify</span><span class=\"params\">(skip <span class=\"keyword\">bool</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.skipVerify = skip</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialUseTLS specifies whether TLS should be used when connecting to the</span></span><br><span class=\"line\"><span class=\"comment\">// server. This option is ignore by DialURL.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialUseTLS</span><span class=\"params\">(useTLS <span class=\"keyword\">bool</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.useTLS = useTLS</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dial connects to the Redis server at the given network and</span></span><br><span class=\"line\"><span class=\"comment\">// address using the specified options.</span></span><br><span class=\"line\"><span class=\"comment\">//4传入参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Dial</span><span class=\"params\">(network, address <span class=\"keyword\">string</span>, options ...DialOption)</span> <span class=\"params\">(Conn, error)</span></span> &#123;</span><br><span class=\"line\">\tdo := dialOptions&#123;</span><br><span class=\"line\">\t\tdialer: &amp;net.Dialer&#123;</span><br><span class=\"line\">\t\t\tKeepAlive: time.Minute * <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//5 注入</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, option := <span class=\"keyword\">range</span> options &#123;</span><br><span class=\"line\">\t\toption.f(&amp;do)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.dial == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tdo.dial = do.dialer.Dial</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetConn, err := do.dial(network, address)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.useTLS &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> tlsConfig *tls.Config</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> do.tlsConfig == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\ttlsConfig = &amp;tls.Config&#123;InsecureSkipVerify: do.skipVerify&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\ttlsConfig = cloneTLSConfig(do.tlsConfig)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> tlsConfig.ServerName == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\thost, _, err := net.SplitHostPort(address)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttlsConfig.ServerName = host</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttlsConn := tls.Client(netConn, tlsConfig)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := tlsConn.Handshake(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnetConn = tlsConn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := &amp;conn&#123;</span><br><span class=\"line\">\t\tconn:         netConn,</span><br><span class=\"line\">\t\tbw:           bufio.NewWriter(netConn),</span><br><span class=\"line\">\t\tbr:           bufio.NewReader(netConn),</span><br><span class=\"line\">\t\treadTimeout:  do.readTimeout,</span><br><span class=\"line\">\t\twriteTimeout: do.writeTimeout,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.password != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := c.Do(<span class=\"string\">\"AUTH\"</span>, do.password); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.db != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := c.Do(<span class=\"string\">\"SELECT\"</span>, do.db); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"函数式可选项\"><a href=\"#函数式可选项\" class=\"headerlink\" title=\"函数式可选项\"></a>函数式可选项</h1><p>通过参数创建实例，常见方式</p>\n<p>常用方式<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, timeout, retries <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: timeout,</span><br><span class=\"line\">        retries: retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: DEFAULT_TIMEOUT,</span><br><span class=\"line\">        retries: DEFAULT_RETRIES,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClientWithOptions</span><span class=\"params\">(conn Connection, timeout, retries <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: timeout,</span><br><span class=\"line\">        retries: retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Retries <span class=\"keyword\">int</span> </span><br><span class=\"line\">    Timeout <span class=\"keyword\">int</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//传入对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, options StuffClientOptions)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: options.Timeout,</span><br><span class=\"line\">        retries: options.Retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>更高级的方式，通过闭包函数注入<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Retries <span class=\"keyword\">int</span> <span class=\"comment\">//number of times to retry the request before giving up</span></span><br><span class=\"line\">    Timeout <span class=\"keyword\">int</span> <span class=\"comment\">//connection timeout in seconds</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> StuffClientOption <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*StuffClientOptions)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">WithRetries</span><span class=\"params\">(r <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClientOption</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *StuffClientOptions)</span></span> &#123;</span><br><span class=\"line\">        o.Retries = r</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithTimeout</span><span class=\"params\">(t <span class=\"keyword\">int</span>)</span> <span class=\"title\">StuffClientOption</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(o *StuffClientOptions)</span></span> &#123;</span><br><span class=\"line\">        o.Timeout = t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> defaultStuffClientOptions = StuffClientOptions&#123;</span><br><span class=\"line\">    Retries: <span class=\"number\">3</span>,</span><br><span class=\"line\">    Timeout: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用可选函数注入选项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStuffClient</span><span class=\"params\">(conn Connection, opts ...StuffClientOption)</span> <span class=\"title\">StuffClient</span></span> &#123;</span><br><span class=\"line\">    options := defaultStuffClientOptions</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, o := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">        o(&amp;options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stuffClient&#123;</span><br><span class=\"line\">        conn:    conn,</span><br><span class=\"line\">        timeout: options.Timeout,</span><br><span class=\"line\">        retries: options.Retries,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x := NewStuffClient(Connection&#123;&#125;)</span><br><span class=\"line\">fmt.Println(x) // prints &amp;&#123;&#123;&#125; 2 3&#125;</span><br><span class=\"line\">x = NewStuffClient(</span><br><span class=\"line\">    Connection&#123;&#125;,</span><br><span class=\"line\">    WithRetries(1),</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(x) // prints &amp;&#123;&#123;&#125; 2 1&#125;</span><br><span class=\"line\">x = NewStuffClient(</span><br><span class=\"line\">    Connection&#123;&#125;,</span><br><span class=\"line\">    WithRetries(1),</span><br><span class=\"line\">    WithTimeout(1),</span><br><span class=\"line\">)</span><br><span class=\"line\">fmt.Println(x) // prints &amp;&#123;&#123;&#125; 1 1&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"模式步骤：\"><a href=\"#模式步骤：\" class=\"headerlink\" title=\"模式步骤：\"></a>模式步骤：</h3><ol>\n<li>定义options</li>\n<li>定义option</li>\n<li>定义闭包函数</li>\n<li>传入函数选项</li>\n<li>调用函数,注入配置到选项</li>\n</ol>\n<h3 id=\"实际项目使用\"><a href=\"#实际项目使用\" class=\"headerlink\" title=\"实际项目使用\"></a>实际项目使用</h3><p>redigo go的redis连接客户端代码片段<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1 声明options</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> dialOptions <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\treadTimeout  time.Duration</span><br><span class=\"line\">\twriteTimeout time.Duration</span><br><span class=\"line\">\tdialer       *net.Dialer</span><br><span class=\"line\">\tdial         <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(network, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(net.Conn, error)</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">db</span>           <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">password</span>     <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">useTLS</span>       <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">skipVerify</span>   <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">tlsConfig</span>    *<span class=\"title\">tls</span>.<span class=\"title\">Config</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\">//2 声明<span class=\"title\">option</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">DialOption</span> <span class=\"title\">struct</span></span> &#123;</span><br><span class=\"line\">\tf <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*dialOptions)</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">DialReadTimeout</span> <span class=\"title\">specifies</span> <span class=\"title\">the</span> <span class=\"title\">timeout</span> <span class=\"title\">for</span> <span class=\"title\">reading</span> <span class=\"title\">a</span> <span class=\"title\">single</span> <span class=\"title\">command</span> <span class=\"title\">reply</span></span></span><br><span class=\"line\"><span class=\"function\">//3 声明闭包函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">DialReadTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.readTimeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialWriteTimeout specifies the timeout for writing a single command.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialWriteTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.writeTimeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialConnectTimeout specifies the timeout for connecting to the Redis server when</span></span><br><span class=\"line\"><span class=\"comment\">// no DialNetDial option is specified.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialConnectTimeout</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dialer.Timeout = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialKeepAlive specifies the keep-alive period for TCP connections to the Redis server</span></span><br><span class=\"line\"><span class=\"comment\">// when no DialNetDial option is specified.</span></span><br><span class=\"line\"><span class=\"comment\">// If zero, keep-alives are not enabled. If no DialKeepAlive option is specified then</span></span><br><span class=\"line\"><span class=\"comment\">// the default of 5 minutes is used to ensure that half-closed TCP sessions are detected.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialKeepAlive</span><span class=\"params\">(d time.Duration)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dialer.KeepAlive = d</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialNetDial specifies a custom dial function for creating TCP</span></span><br><span class=\"line\"><span class=\"comment\">// connections, otherwise a net.Dialer customized via the other options is used.</span></span><br><span class=\"line\"><span class=\"comment\">// DialNetDial overrides DialConnectTimeout and DialKeepAlive.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialNetDial</span><span class=\"params\">(dial <span class=\"keyword\">func</span>(network, addr <span class=\"keyword\">string</span>)</span> <span class=\"params\">(net.Conn, error)</span>) <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.dial = dial</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialDatabase specifies the database to select when dialing a connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialDatabase</span><span class=\"params\">(db <span class=\"keyword\">int</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.db = db</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialPassword specifies the password to use when connecting to</span></span><br><span class=\"line\"><span class=\"comment\">// the Redis server.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialPassword</span><span class=\"params\">(password <span class=\"keyword\">string</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.password = password</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialTLSConfig specifies the config to use when a TLS connection is dialed.</span></span><br><span class=\"line\"><span class=\"comment\">// Has no effect when not dialing a TLS connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialTLSConfig</span><span class=\"params\">(c *tls.Config)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.tlsConfig = c</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialTLSSkipVerify disables server name verification when connecting over</span></span><br><span class=\"line\"><span class=\"comment\">// TLS. Has no effect when not dialing a TLS connection.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialTLSSkipVerify</span><span class=\"params\">(skip <span class=\"keyword\">bool</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.skipVerify = skip</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DialUseTLS specifies whether TLS should be used when connecting to the</span></span><br><span class=\"line\"><span class=\"comment\">// server. This option is ignore by DialURL.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DialUseTLS</span><span class=\"params\">(useTLS <span class=\"keyword\">bool</span>)</span> <span class=\"title\">DialOption</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DialOption&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(do *dialOptions)</span></span> &#123;</span><br><span class=\"line\">\t\tdo.useTLS = useTLS</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dial connects to the Redis server at the given network and</span></span><br><span class=\"line\"><span class=\"comment\">// address using the specified options.</span></span><br><span class=\"line\"><span class=\"comment\">//4传入参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Dial</span><span class=\"params\">(network, address <span class=\"keyword\">string</span>, options ...DialOption)</span> <span class=\"params\">(Conn, error)</span></span> &#123;</span><br><span class=\"line\">\tdo := dialOptions&#123;</span><br><span class=\"line\">\t\tdialer: &amp;net.Dialer&#123;</span><br><span class=\"line\">\t\t\tKeepAlive: time.Minute * <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//5 注入</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, option := <span class=\"keyword\">range</span> options &#123;</span><br><span class=\"line\">\t\toption.f(&amp;do)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.dial == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tdo.dial = do.dialer.Dial</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnetConn, err := do.dial(network, address)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.useTLS &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> tlsConfig *tls.Config</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> do.tlsConfig == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\ttlsConfig = &amp;tls.Config&#123;InsecureSkipVerify: do.skipVerify&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\ttlsConfig = cloneTLSConfig(do.tlsConfig)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> tlsConfig.ServerName == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\thost, _, err := net.SplitHostPort(address)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttlsConfig.ServerName = host</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttlsConn := tls.Client(netConn, tlsConfig)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := tlsConn.Handshake(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnetConn = tlsConn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := &amp;conn&#123;</span><br><span class=\"line\">\t\tconn:         netConn,</span><br><span class=\"line\">\t\tbw:           bufio.NewWriter(netConn),</span><br><span class=\"line\">\t\tbr:           bufio.NewReader(netConn),</span><br><span class=\"line\">\t\treadTimeout:  do.readTimeout,</span><br><span class=\"line\">\t\twriteTimeout: do.writeTimeout,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.password != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := c.Do(<span class=\"string\">\"AUTH\"</span>, do.password); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> do.db != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, err := c.Do(<span class=\"string\">\"SELECT\"</span>, do.db); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tnetConn.Close()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"go-踩坑点","date":"2018-09-19T02:53:27.000Z","_content":"# go遇到的一些问题\n\n\n###  chan关闭之后，还可以读写吗？\n> 不能写，但可以读\n~~~\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar ret = make(chan []int, 1000)\n\tvar wg = sync.WaitGroup{}\n\twg.Add(3)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 10; i < 20; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 20; i < 30; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\twg.Wait()\n\t//go func() {\n\t//\tfor {\n\t//\t\tret <- []int{1}\n\t//\t\ttime.Sleep(time.Second)\n\t//\t}\n\t//}()\n\t//close(ret)\n\tfor v := range ret { //0 range if v==0 break ,or panic\n\t\tfor _, v := range v {\n\t\t\tfmt.Println(v)\n\t\t}\n\t}\n}\n\n~~~\n\n### 并发获取数据，常见问题\n~~~\nfor _,v:=range uids{\n\tgo func(){\n    \tfmt.Println(v)//v的值是一样的！\n    }()\n}\n==》\nfor _,v:=range uids{\n\tgo func(v int){\n    \tfmt.Println(v)//v的值正常\n    }(v)\n}\n~~~","source":"_posts/golang/go-踩坑点.md","raw":"---\ntitle: go-踩坑点\ndate: 2018-09-19 10:53:27\ncategories: \n- go\ntags:\n- go \n---\n# go遇到的一些问题\n\n\n###  chan关闭之后，还可以读写吗？\n> 不能写，但可以读\n~~~\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar ret = make(chan []int, 1000)\n\tvar wg = sync.WaitGroup{}\n\twg.Add(3)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 10; i < 20; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar result = make([]int, 0)\n\t\tfor i := 20; i < 30; i++ {\n\t\t\tresult = append(result, i)\n\t\t}\n\t\tret <- result\n\t}()\n\twg.Wait()\n\t//go func() {\n\t//\tfor {\n\t//\t\tret <- []int{1}\n\t//\t\ttime.Sleep(time.Second)\n\t//\t}\n\t//}()\n\t//close(ret)\n\tfor v := range ret { //0 range if v==0 break ,or panic\n\t\tfor _, v := range v {\n\t\t\tfmt.Println(v)\n\t\t}\n\t}\n}\n\n~~~\n\n### 并发获取数据，常见问题\n~~~\nfor _,v:=range uids{\n\tgo func(){\n    \tfmt.Println(v)//v的值是一样的！\n    }()\n}\n==》\nfor _,v:=range uids{\n\tgo func(v int){\n    \tfmt.Println(v)//v的值正常\n    }(v)\n}\n~~~","slug":"golang/go-踩坑点","published":1,"updated":"2018-09-19T08:06:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0d0001qwl388io0md33","content":"<h1 id=\"go遇到的一些问题\"><a href=\"#go遇到的一些问题\" class=\"headerlink\" title=\"go遇到的一些问题\"></a>go遇到的一些问题</h1><h3 id=\"chan关闭之后，还可以读写吗？\"><a href=\"#chan关闭之后，还可以读写吗？\" class=\"headerlink\" title=\"chan关闭之后，还可以读写吗？\"></a>chan关闭之后，还可以读写吗？</h3><blockquote>\n<p>不能写，但可以读<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar ret = make(chan []int, 1000)</span><br><span class=\"line\">\tvar wg = sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(3)</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 10; i &lt; 20; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 20; i &lt; 30; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\t//go func() &#123;</span><br><span class=\"line\">\t//\tfor &#123;</span><br><span class=\"line\">\t//\t\tret &lt;- []int&#123;1&#125;</span><br><span class=\"line\">\t//\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t//\t&#125;</span><br><span class=\"line\">\t//&#125;()</span><br><span class=\"line\">\t//close(ret)</span><br><span class=\"line\">\tfor v := range ret &#123; //0 range if v==0 break ,or panic</span><br><span class=\"line\">\t\tfor _, v := range v &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(v)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"并发获取数据，常见问题\"><a href=\"#并发获取数据，常见问题\" class=\"headerlink\" title=\"并发获取数据，常见问题\"></a>并发获取数据，常见问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for _,v:=range uids&#123;</span><br><span class=\"line\">\tgo func()&#123;</span><br><span class=\"line\">    \tfmt.Println(v)//v的值是一样的！</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==》</span><br><span class=\"line\">for _,v:=range uids&#123;</span><br><span class=\"line\">\tgo func(v int)&#123;</span><br><span class=\"line\">    \tfmt.Println(v)//v的值正常</span><br><span class=\"line\">    &#125;(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"go遇到的一些问题\"><a href=\"#go遇到的一些问题\" class=\"headerlink\" title=\"go遇到的一些问题\"></a>go遇到的一些问题</h1><h3 id=\"chan关闭之后，还可以读写吗？\"><a href=\"#chan关闭之后，还可以读写吗？\" class=\"headerlink\" title=\"chan关闭之后，还可以读写吗？\"></a>chan关闭之后，还可以读写吗？</h3><blockquote>\n<p>不能写，但可以读<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar ret = make(chan []int, 1000)</span><br><span class=\"line\">\tvar wg = sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(3)</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 10; i &lt; 20; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tdefer wg.Done()</span><br><span class=\"line\">\t\tvar result = make([]int, 0)</span><br><span class=\"line\">\t\tfor i := 20; i &lt; 30; i++ &#123;</span><br><span class=\"line\">\t\t\tresult = append(result, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tret &lt;- result</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\t//go func() &#123;</span><br><span class=\"line\">\t//\tfor &#123;</span><br><span class=\"line\">\t//\t\tret &lt;- []int&#123;1&#125;</span><br><span class=\"line\">\t//\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t//\t&#125;</span><br><span class=\"line\">\t//&#125;()</span><br><span class=\"line\">\t//close(ret)</span><br><span class=\"line\">\tfor v := range ret &#123; //0 range if v==0 break ,or panic</span><br><span class=\"line\">\t\tfor _, v := range v &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(v)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"并发获取数据，常见问题\"><a href=\"#并发获取数据，常见问题\" class=\"headerlink\" title=\"并发获取数据，常见问题\"></a>并发获取数据，常见问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for _,v:=range uids&#123;</span><br><span class=\"line\">\tgo func()&#123;</span><br><span class=\"line\">    \tfmt.Println(v)//v的值是一样的！</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==》</span><br><span class=\"line\">for _,v:=range uids&#123;</span><br><span class=\"line\">\tgo func(v int)&#123;</span><br><span class=\"line\">    \tfmt.Println(v)//v的值正常</span><br><span class=\"line\">    &#125;(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"go-通道channel","date":"2018-09-19T02:52:42.000Z","_content":"# 通道\n\n两种配合方式：\n- range\n- select\n\n### range 方式\n~~~\n//关闭之后会跳出循环\nfor v:=range c{\n\t//todo\n}\n~~~\n\n### select 方式\n~~~\nfor {\n\tselect {\n    \tcase val,ok:=<-c:\n        \tif !ok{break}\n    }\n}\n~~~\n\n### Close(ch)含义\n给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。\n\n### 注意点\n- 从一个nil channel中接收数据会一直被block。\n\n- 从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。\n\n~~~\n//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。\n//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)\nx, ok := <-ch\n~~~","source":"_posts/golang/go-通道channel.md","raw":"---\ntitle: go-通道channel\ndate: 2018-09-19 10:52:42\ncategories: \n- go\ntags:\n- go\n---\n# 通道\n\n两种配合方式：\n- range\n- select\n\n### range 方式\n~~~\n//关闭之后会跳出循环\nfor v:=range c{\n\t//todo\n}\n~~~\n\n### select 方式\n~~~\nfor {\n\tselect {\n    \tcase val,ok:=<-c:\n        \tif !ok{break}\n    }\n}\n~~~\n\n### Close(ch)含义\n给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。\n\n### 注意点\n- 从一个nil channel中接收数据会一直被block。\n\n- 从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。\n\n~~~\n//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。\n//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)\nx, ok := <-ch\n~~~","slug":"golang/go-通道channel","published":1,"updated":"2018-09-19T08:06:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0d1001rwl38rmkk3l7u","content":"<h1 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h1><p>两种配合方式：</p>\n<ul>\n<li>range</li>\n<li>select</li>\n</ul>\n<h3 id=\"range-方式\"><a href=\"#range-方式\" class=\"headerlink\" title=\"range 方式\"></a>range 方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//关闭之后会跳出循环</span><br><span class=\"line\">for v:=range c&#123;</span><br><span class=\"line\">\t//todo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select-方式\"><a href=\"#select-方式\" class=\"headerlink\" title=\"select 方式\"></a>select 方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">    \tcase val,ok:=&lt;-c:</span><br><span class=\"line\">        \tif !ok&#123;break&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Close-ch-含义\"><a href=\"#Close-ch-含义\" class=\"headerlink\" title=\"Close(ch)含义\"></a>Close(ch)含义</h3><p>给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li><p>从一个nil channel中接收数据会一直被block。</p>\n</li>\n<li><p>从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</span><br><span class=\"line\">//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)</span><br><span class=\"line\">x, ok := &lt;-ch</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h1><p>两种配合方式：</p>\n<ul>\n<li>range</li>\n<li>select</li>\n</ul>\n<h3 id=\"range-方式\"><a href=\"#range-方式\" class=\"headerlink\" title=\"range 方式\"></a>range 方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//关闭之后会跳出循环</span><br><span class=\"line\">for v:=range c&#123;</span><br><span class=\"line\">\t//todo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select-方式\"><a href=\"#select-方式\" class=\"headerlink\" title=\"select 方式\"></a>select 方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">    \tcase val,ok:=&lt;-c:</span><br><span class=\"line\">        \tif !ok&#123;break&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Close-ch-含义\"><a href=\"#Close-ch-含义\" class=\"headerlink\" title=\"Close(ch)含义\"></a>Close(ch)含义</h3><p>给通道写了一个结束标识值，接收到这个值表示通道已经关闭，有这个值就不能再写入了，还可以继续读取，读取到这个值的时候就表示已经读取完了，通道为空了。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><ul>\n<li><p>从一个nil channel中接收数据会一直被block。</p>\n</li>\n<li><p>从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</span><br><span class=\"line\">//从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值(使用range或者判断是否关闭可以跳出)</span><br><span class=\"line\">x, ok := &lt;-ch</span><br></pre></td></tr></table></figure>"},{"title":"golang-dep","date":"2018-12-09T07:48:45.000Z","_content":"\n# go dep \n\n\n### 使用\n```\n//优先使用本地包初始化【本地获取较快,-v查看安装过程】\ndep init -gopath -v\n\n//保证同步\ndep ensure\n\n//查看状态【mac】\nbrew install graphviz\ndep status -dot | dot -T png | open -f -a /Applications/Preview.app\n```\n\n### 文件说明\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fy0k6wfvtpj20pq0ao0tg.jpg)\n> `dep ensure` means: Hey dep, please make sure that my project is in sync: that Gopkg.lock satisfies all the imports in my project, and all the rules in Gopkg.toml, and that vendor/ contains exactly what Gopkg.lock says it should.\"\n\n### 什么时候使用 `dep ensure`\nUsing dep ensure\nThere are four times when you'll run dep ensure:\n\n- To add a new dependency\n`dep ensure -add github.com/pkg/errors`\n- To update an existing dependency\n`dep ensure -update`\n- To catch up after importing a package for the first time in your project, or removing the last import of a package in your project\n- To catch up to a change to a rule in Gopkg.toml\n\n\n\n\n### 参考链接\nhttps://studygolang.com/articles/10589\n\nhttps://golang.github.io/dep/docs/daily-dep.html","source":"_posts/golang/golang-dep.md","raw":"---\ntitle: golang-dep\ntags:\n  - tags\ncategories:\n  - categories\ndate: 2018-12-09 15:48:45\n---\n\n# go dep \n\n\n### 使用\n```\n//优先使用本地包初始化【本地获取较快,-v查看安装过程】\ndep init -gopath -v\n\n//保证同步\ndep ensure\n\n//查看状态【mac】\nbrew install graphviz\ndep status -dot | dot -T png | open -f -a /Applications/Preview.app\n```\n\n### 文件说明\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fy0k6wfvtpj20pq0ao0tg.jpg)\n> `dep ensure` means: Hey dep, please make sure that my project is in sync: that Gopkg.lock satisfies all the imports in my project, and all the rules in Gopkg.toml, and that vendor/ contains exactly what Gopkg.lock says it should.\"\n\n### 什么时候使用 `dep ensure`\nUsing dep ensure\nThere are four times when you'll run dep ensure:\n\n- To add a new dependency\n`dep ensure -add github.com/pkg/errors`\n- To update an existing dependency\n`dep ensure -update`\n- To catch up after importing a package for the first time in your project, or removing the last import of a package in your project\n- To catch up to a change to a rule in Gopkg.toml\n\n\n\n\n### 参考链接\nhttps://studygolang.com/articles/10589\n\nhttps://golang.github.io/dep/docs/daily-dep.html","slug":"golang/golang-dep","published":1,"updated":"2018-12-09T08:47:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0d2001uwl38144s1xb7","content":"<h1 id=\"go-dep\"><a href=\"#go-dep\" class=\"headerlink\" title=\"go dep\"></a>go dep</h1><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//优先使用本地包初始化【本地获取较快,-v查看安装过程】</span><br><span class=\"line\">dep init -gopath -v</span><br><span class=\"line\"></span><br><span class=\"line\">//保证同步</span><br><span class=\"line\">dep ensure</span><br><span class=\"line\"></span><br><span class=\"line\">//查看状态【mac】</span><br><span class=\"line\">brew install graphviz</span><br><span class=\"line\">dep status -dot | dot -T png | open -f -a /Applications/Preview.app</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fy0k6wfvtpj20pq0ao0tg.jpg\" alt=\"\"></p>\n<blockquote>\n<p><code>dep ensure</code> means: Hey dep, please make sure that my project is in sync: that Gopkg.lock satisfies all the imports in my project, and all the rules in Gopkg.toml, and that vendor/ contains exactly what Gopkg.lock says it should.”</p>\n</blockquote>\n<h3 id=\"什么时候使用-dep-ensure\"><a href=\"#什么时候使用-dep-ensure\" class=\"headerlink\" title=\"什么时候使用 dep ensure\"></a>什么时候使用 <code>dep ensure</code></h3><p>Using dep ensure<br>There are four times when you’ll run dep ensure:</p>\n<ul>\n<li>To add a new dependency<br><code>dep ensure -add github.com/pkg/errors</code></li>\n<li>To update an existing dependency<br><code>dep ensure -update</code></li>\n<li>To catch up after importing a package for the first time in your project, or removing the last import of a package in your project</li>\n<li>To catch up to a change to a rule in Gopkg.toml</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://studygolang.com/articles/10589\" target=\"_blank\" rel=\"noopener\">https://studygolang.com/articles/10589</a></p>\n<p><a href=\"https://golang.github.io/dep/docs/daily-dep.html\" target=\"_blank\" rel=\"noopener\">https://golang.github.io/dep/docs/daily-dep.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"go-dep\"><a href=\"#go-dep\" class=\"headerlink\" title=\"go dep\"></a>go dep</h1><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//优先使用本地包初始化【本地获取较快,-v查看安装过程】</span><br><span class=\"line\">dep init -gopath -v</span><br><span class=\"line\"></span><br><span class=\"line\">//保证同步</span><br><span class=\"line\">dep ensure</span><br><span class=\"line\"></span><br><span class=\"line\">//查看状态【mac】</span><br><span class=\"line\">brew install graphviz</span><br><span class=\"line\">dep status -dot | dot -T png | open -f -a /Applications/Preview.app</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fy0k6wfvtpj20pq0ao0tg.jpg\" alt=\"\"></p>\n<blockquote>\n<p><code>dep ensure</code> means: Hey dep, please make sure that my project is in sync: that Gopkg.lock satisfies all the imports in my project, and all the rules in Gopkg.toml, and that vendor/ contains exactly what Gopkg.lock says it should.”</p>\n</blockquote>\n<h3 id=\"什么时候使用-dep-ensure\"><a href=\"#什么时候使用-dep-ensure\" class=\"headerlink\" title=\"什么时候使用 dep ensure\"></a>什么时候使用 <code>dep ensure</code></h3><p>Using dep ensure<br>There are four times when you’ll run dep ensure:</p>\n<ul>\n<li>To add a new dependency<br><code>dep ensure -add github.com/pkg/errors</code></li>\n<li>To update an existing dependency<br><code>dep ensure -update</code></li>\n<li>To catch up after importing a package for the first time in your project, or removing the last import of a package in your project</li>\n<li>To catch up to a change to a rule in Gopkg.toml</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://studygolang.com/articles/10589\" target=\"_blank\" rel=\"noopener\">https://studygolang.com/articles/10589</a></p>\n<p><a href=\"https://golang.github.io/dep/docs/daily-dep.html\" target=\"_blank\" rel=\"noopener\">https://golang.github.io/dep/docs/daily-dep.html</a></p>\n"},{"title":"go-文件io","date":"2018-09-19T02:47:35.000Z","_content":"# golang 文件读写\n\n### 使用io/ioutil进行读写文件\n先回忆下之前的ioutil包介绍： \nGo语言学习之ioutil包(The way to go)\n\n其中提到了两个方法： \nfunc ReadFile\n\n`func ReadFile(filename string) ([]byte, error)`\n\nReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.\n\nfunc WriteFile\n\n\n`func WriteFile(filename string, data []byte, perm os.FileMode) error`\nWriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.\n\n读文件：\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n    b, err := ioutil.ReadFile(\"test.log\")\n    if err != nil {\n        fmt.Print(err)\n    }\n    fmt.Println(b)\n    str := string(b)\n    fmt.Println(str)\n}\n```\n\n写文件：\n```\npackage main\n\nimport (\n    \"io/ioutil\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    d1 := []byte(\"hello\\ngo\\n\")\n    err := ioutil.WriteFile(\"test.txt\", d1, 0644)\n    check(err)\n}\n```\n\n### 使用os进行读写文件\n同样，先回忆下之前的os包的介绍： \nGo语言学习之os包中文件相关的操作(The way to go)\n\n首先要注意的就是两个打开文件的方法： \nfunc Open\n\n`func Open(name string) (*File, error)`\n\nOpen opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.\n\n读文件：\n```\nfile, err := os.Open(path)\nif err != nil {\n    panic(err)\n}\ndefer file.Close()\n```\n\nfunc OpenFile \n需要提供文件路径、打开模式、文件权限\n\n`func OpenFile(name string, flag int, perm FileMode) (*File, error)`\n\nOpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.\n\n读文件：\n```\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    f, err := os.OpenFile(\"notes.txt\", os.O_RDWR|os.O_CREATE, 0755)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if err := f.Close(); err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n读方法\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Open(\"/tmp/dat\")\n    check(err)\n\n    b1 := make([]byte, 5)\n    n1, err := f.Read(b1)\n    \n    check(err)\n    fmt.Printf(\"%d bytes: %s\\n\", n1, string(b1))\n\n    o2, err := f.Seek(6, 0)\n    //n1, err := f.ReadAt(b1,offset)\n    check(err)\n    b2 := make([]byte, 2)\n    n2, err := f.Read(b2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n2, o2, string(b2))\n\n    o3, err := f.Seek(6, 0)\n    check(err)\n    b3 := make([]byte, 2)\n    n3, err := io.ReadAtLeast(f, b3, 2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))\n\n    _, err = f.Seek(0, 0)\n    check(err)\n\n    r4 := bufio.NewReader(f)\n    b4, err := r4.Peek(5)\n    check(err)\n    fmt.Printf(\"5 bytes: %s\\n\", string(b4))\n\n    f.Close()\n\n}\n```\n> 寻址取偏移量：`func (f *File) Seek(offset int64, whence int) (ret int64, err error)` \n> // Seek sets the offset for the next Read or Write on file to offset,interpreted\n> // according to whence: 0 means relative to the origin of the file, 1 means\n> // relative to the current offset, and 2 means relative to the end.\n> // It returns the new offset and an error, if any.\n> // The behavior of Seek on a file opened with O_APPEND is not specified.\n\n\n写方法\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Create(\"/tmp/dat2\")\n    check(err)\n\n    defer f.Close()\n\n    d2 := []byte{115, 111, 109, 101, 10}\n    n2, err := f.Write(d2)\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n2)\n\n    n3, err := f.WriteString(\"writes\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n3)\n    f.Sync()\n    w := bufio.NewWriter(f)\n    n4, err := w.WriteString(\"buffered\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n4)\n\n    w.Flush()\n\n}\n```\n\n几种读取文件方法速度比较\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n    \"time\"\n)\n\nfunc read0(path string) string {\n    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)\n    if err != nil {\n        fmt.Printf(\"%s\\n\", err)\n        panic(err)\n    }\n    return string(f)\n}\n\nfunc read1(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n\n    chunks := make([]byte, 1024, 1024)\n    buf := make([]byte, 1024)\n    for {\n        n, err := fi.Read(buf)//\b一块一块读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read2(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    r := bufio.NewReader(fi)\n\n    chunks := make([]byte, 1024, 1024)\n\n    buf := make([]byte, 1024)\n    for {\n        n, err := r.Read(buf)//缓存读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read3(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)\n    return string(fd)\n}\n\nfunc main() {\n\n    file := \"test.log\"\n\n    start := time.Now()\n\n    read0(file)\n    t0 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t0.Sub(start))\n\n    read1(file)\n    t1 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t1.Sub(t0))\n\n    read2(file)\n    t2 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t2.Sub(t1))\n\n    read3(file)\n    t3 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t3.Sub(t2))\n\n}\n```\n\n运行结果： \n```\nCost time 4.0105ms \nCost time 11.5043ms \nCost time 7.0042ms \nCost time 2.4983ms\n```\n# 读写分析\n### 底层IO\n~~~\n//os提供的功能\nfile=os.open(path)\nfile.read(buf)\nfile.write(buf)\nfile.readAt(buf,offset)\nfile.writeAt(buf,offset)\n~~~\n\n### 缓冲IO\n~~~\nbufio.Reader/Writer\nfile=open(path)\nbufFile=bufio.NewReader(file)\nbufFile.read(buf)\n\nfile=open(path)\nbufFile = bufio.NewWriter(file)\nbufFile.Write([]byte(\"haha\"))\nw.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！\n~~~\n>  标准IO操作数据流向路径：数据—>进程缓冲（用户态）—>内核缓存区（内核态）—>磁盘\n> 为什么包一层buf，buf读的时候读一大块，给你读取的时候，你只需要从buf里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况\n> \n\n#### 任务\n1.  内存大小为4G的电脑给10G的文件排序？\n\n","source":"_posts/golang/go-文件io.md","raw":"---\ntitle: go-文件io\ndate: 2018-09-19 10:47:35\ncategories: \n- go\ntags:\n- go\n---\n# golang 文件读写\n\n### 使用io/ioutil进行读写文件\n先回忆下之前的ioutil包介绍： \nGo语言学习之ioutil包(The way to go)\n\n其中提到了两个方法： \nfunc ReadFile\n\n`func ReadFile(filename string) ([]byte, error)`\n\nReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.\n\nfunc WriteFile\n\n\n`func WriteFile(filename string, data []byte, perm os.FileMode) error`\nWriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.\n\n读文件：\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n    b, err := ioutil.ReadFile(\"test.log\")\n    if err != nil {\n        fmt.Print(err)\n    }\n    fmt.Println(b)\n    str := string(b)\n    fmt.Println(str)\n}\n```\n\n写文件：\n```\npackage main\n\nimport (\n    \"io/ioutil\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    d1 := []byte(\"hello\\ngo\\n\")\n    err := ioutil.WriteFile(\"test.txt\", d1, 0644)\n    check(err)\n}\n```\n\n### 使用os进行读写文件\n同样，先回忆下之前的os包的介绍： \nGo语言学习之os包中文件相关的操作(The way to go)\n\n首先要注意的就是两个打开文件的方法： \nfunc Open\n\n`func Open(name string) (*File, error)`\n\nOpen opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.\n\n读文件：\n```\nfile, err := os.Open(path)\nif err != nil {\n    panic(err)\n}\ndefer file.Close()\n```\n\nfunc OpenFile \n需要提供文件路径、打开模式、文件权限\n\n`func OpenFile(name string, flag int, perm FileMode) (*File, error)`\n\nOpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.\n\n读文件：\n```\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    f, err := os.OpenFile(\"notes.txt\", os.O_RDWR|os.O_CREATE, 0755)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if err := f.Close(); err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n读方法\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Open(\"/tmp/dat\")\n    check(err)\n\n    b1 := make([]byte, 5)\n    n1, err := f.Read(b1)\n    \n    check(err)\n    fmt.Printf(\"%d bytes: %s\\n\", n1, string(b1))\n\n    o2, err := f.Seek(6, 0)\n    //n1, err := f.ReadAt(b1,offset)\n    check(err)\n    b2 := make([]byte, 2)\n    n2, err := f.Read(b2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n2, o2, string(b2))\n\n    o3, err := f.Seek(6, 0)\n    check(err)\n    b3 := make([]byte, 2)\n    n3, err := io.ReadAtLeast(f, b3, 2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))\n\n    _, err = f.Seek(0, 0)\n    check(err)\n\n    r4 := bufio.NewReader(f)\n    b4, err := r4.Peek(5)\n    check(err)\n    fmt.Printf(\"5 bytes: %s\\n\", string(b4))\n\n    f.Close()\n\n}\n```\n> 寻址取偏移量：`func (f *File) Seek(offset int64, whence int) (ret int64, err error)` \n> // Seek sets the offset for the next Read or Write on file to offset,interpreted\n> // according to whence: 0 means relative to the origin of the file, 1 means\n> // relative to the current offset, and 2 means relative to the end.\n> // It returns the new offset and an error, if any.\n> // The behavior of Seek on a file opened with O_APPEND is not specified.\n\n\n写方法\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc main() {\n\n    f, err := os.Create(\"/tmp/dat2\")\n    check(err)\n\n    defer f.Close()\n\n    d2 := []byte{115, 111, 109, 101, 10}\n    n2, err := f.Write(d2)\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n2)\n\n    n3, err := f.WriteString(\"writes\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n3)\n    f.Sync()\n    w := bufio.NewWriter(f)\n    n4, err := w.WriteString(\"buffered\\n\")\n    fmt.Printf(\"wrote %d bytes\\n\", n4)\n\n    w.Flush()\n\n}\n```\n\n几种读取文件方法速度比较\n```\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n    \"time\"\n)\n\nfunc read0(path string) string {\n    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)\n    if err != nil {\n        fmt.Printf(\"%s\\n\", err)\n        panic(err)\n    }\n    return string(f)\n}\n\nfunc read1(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n\n    chunks := make([]byte, 1024, 1024)\n    buf := make([]byte, 1024)\n    for {\n        n, err := fi.Read(buf)//\b一块一块读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read2(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    r := bufio.NewReader(fi)\n\n    chunks := make([]byte, 1024, 1024)\n\n    buf := make([]byte, 1024)\n    for {\n        n, err := r.Read(buf)//缓存读\n        if err != nil && err != io.EOF {\n            panic(err)\n        }\n        if 0 == n {\n            break\n        }\n        chunks = append(chunks, buf[:n]...)\n    }\n    return string(chunks)\n}\n\nfunc read3(path string) string {\n    fi, err := os.Open(path)\n    if err != nil {\n        panic(err)\n    }\n    defer fi.Close()\n    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)\n    return string(fd)\n}\n\nfunc main() {\n\n    file := \"test.log\"\n\n    start := time.Now()\n\n    read0(file)\n    t0 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t0.Sub(start))\n\n    read1(file)\n    t1 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t1.Sub(t0))\n\n    read2(file)\n    t2 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t2.Sub(t1))\n\n    read3(file)\n    t3 := time.Now()\n    fmt.Printf(\"Cost time %v\\n\", t3.Sub(t2))\n\n}\n```\n\n运行结果： \n```\nCost time 4.0105ms \nCost time 11.5043ms \nCost time 7.0042ms \nCost time 2.4983ms\n```\n# 读写分析\n### 底层IO\n~~~\n//os提供的功能\nfile=os.open(path)\nfile.read(buf)\nfile.write(buf)\nfile.readAt(buf,offset)\nfile.writeAt(buf,offset)\n~~~\n\n### 缓冲IO\n~~~\nbufio.Reader/Writer\nfile=open(path)\nbufFile=bufio.NewReader(file)\nbufFile.read(buf)\n\nfile=open(path)\nbufFile = bufio.NewWriter(file)\nbufFile.Write([]byte(\"haha\"))\nw.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！\n~~~\n>  标准IO操作数据流向路径：数据—>进程缓冲（用户态）—>内核缓存区（内核态）—>磁盘\n> 为什么包一层buf，buf读的时候读一大块，给你读取的时候，你只需要从buf里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况\n> \n\n#### 任务\n1.  内存大小为4G的电脑给10G的文件排序？\n\n","slug":"golang/go-文件io","published":1,"updated":"2019-03-04T01:52:26.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0d3001wwl38qg3y544a","content":"<h1 id=\"golang-文件读写\"><a href=\"#golang-文件读写\" class=\"headerlink\" title=\"golang 文件读写\"></a>golang 文件读写</h1><h3 id=\"使用io-ioutil进行读写文件\"><a href=\"#使用io-ioutil进行读写文件\" class=\"headerlink\" title=\"使用io/ioutil进行读写文件\"></a>使用io/ioutil进行读写文件</h3><p>先回忆下之前的ioutil包介绍：<br>Go语言学习之ioutil包(The way to go)</p>\n<p>其中提到了两个方法：<br>func ReadFile</p>\n<p><code>func ReadFile(filename string) ([]byte, error)</code></p>\n<p>ReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.</p>\n<p>func WriteFile</p>\n<p><code>func WriteFile(filename string, data []byte, perm os.FileMode) error</code><br>WriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    b, err := ioutil.ReadFile(&quot;test.log&quot;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Print(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">    str := string(b)</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>写文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    d1 := []byte(&quot;hello\\ngo\\n&quot;)</span><br><span class=\"line\">    err := ioutil.WriteFile(&quot;test.txt&quot;, d1, 0644)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用os进行读写文件\"><a href=\"#使用os进行读写文件\" class=\"headerlink\" title=\"使用os进行读写文件\"></a>使用os进行读写文件</h3><p>同样，先回忆下之前的os包的介绍：<br>Go语言学习之os包中文件相关的操作(The way to go)</p>\n<p>首先要注意的就是两个打开文件的方法：<br>func Open</p>\n<p><code>func Open(name string) (*File, error)</code></p>\n<p>Open opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file, err := os.Open(path)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    panic(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">defer file.Close()</span><br></pre></td></tr></table></figure></p>\n<p>func OpenFile<br>需要提供文件路径、打开模式、文件权限</p>\n<p><code>func OpenFile(name string, flag int, perm FileMode) (*File, error)</code></p>\n<p>OpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;log&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    f, err := os.OpenFile(&quot;notes.txt&quot;, os.O_RDWR|os.O_CREATE, 0755)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if err := f.Close(); err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>读方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Open(&quot;/tmp/dat&quot;)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    b1 := make([]byte, 5)</span><br><span class=\"line\">    n1, err := f.Read(b1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes: %s\\n&quot;, n1, string(b1))</span><br><span class=\"line\"></span><br><span class=\"line\">    o2, err := f.Seek(6, 0)</span><br><span class=\"line\">    //n1, err := f.ReadAt(b1,offset)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b2 := make([]byte, 2)</span><br><span class=\"line\">    n2, err := f.Read(b2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes @ %d: %s\\n&quot;, n2, o2, string(b2))</span><br><span class=\"line\"></span><br><span class=\"line\">    o3, err := f.Seek(6, 0)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b3 := make([]byte, 2)</span><br><span class=\"line\">    n3, err := io.ReadAtLeast(f, b3, 2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes @ %d: %s\\n&quot;, n3, o3, string(b3))</span><br><span class=\"line\"></span><br><span class=\"line\">    _, err = f.Seek(0, 0)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    r4 := bufio.NewReader(f)</span><br><span class=\"line\">    b4, err := r4.Peek(5)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;5 bytes: %s\\n&quot;, string(b4))</span><br><span class=\"line\"></span><br><span class=\"line\">    f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>寻址取偏移量：<code>func (f *File) Seek(offset int64, whence int) (ret int64, err error)</code><br>// Seek sets the offset for the next Read or Write on file to offset,interpreted<br>// according to whence: 0 means relative to the origin of the file, 1 means<br>// relative to the current offset, and 2 means relative to the end.<br>// It returns the new offset and an error, if any.<br>// The behavior of Seek on a file opened with O_APPEND is not specified.</p>\n</blockquote>\n<p>写方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Create(&quot;/tmp/dat2&quot;)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    defer f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    d2 := []byte&#123;115, 111, 109, 101, 10&#125;</span><br><span class=\"line\">    n2, err := f.Write(d2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n2)</span><br><span class=\"line\"></span><br><span class=\"line\">    n3, err := f.WriteString(&quot;writes\\n&quot;)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n3)</span><br><span class=\"line\">    f.Sync()</span><br><span class=\"line\">    w := bufio.NewWriter(f)</span><br><span class=\"line\">    n4, err := w.WriteString(&quot;buffered\\n&quot;)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n4)</span><br><span class=\"line\"></span><br><span class=\"line\">    w.Flush()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>几种读取文件方法速度比较<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func read0(path string) string &#123;</span><br><span class=\"line\">    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;%s\\n&quot;, err)</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read1(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := make([]byte, 1024, 1024)</span><br><span class=\"line\">    buf := make([]byte, 1024)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        n, err := fi.Read(buf)//\b一块一块读</span><br><span class=\"line\">        if err != nil &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if 0 == n &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = append(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read2(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\">    r := bufio.NewReader(fi)</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := make([]byte, 1024, 1024)</span><br><span class=\"line\"></span><br><span class=\"line\">    buf := make([]byte, 1024)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        n, err := r.Read(buf)//缓存读</span><br><span class=\"line\">        if err != nil &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if 0 == n &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = append(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read3(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\">    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)</span><br><span class=\"line\">    return string(fd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    file := &quot;test.log&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    start := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">    read0(file)</span><br><span class=\"line\">    t0 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t0.Sub(start))</span><br><span class=\"line\"></span><br><span class=\"line\">    read1(file)</span><br><span class=\"line\">    t1 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t1.Sub(t0))</span><br><span class=\"line\"></span><br><span class=\"line\">    read2(file)</span><br><span class=\"line\">    t2 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t2.Sub(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">    read3(file)</span><br><span class=\"line\">    t3 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t3.Sub(t2))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cost time 4.0105ms </span><br><span class=\"line\">Cost time 11.5043ms </span><br><span class=\"line\">Cost time 7.0042ms </span><br><span class=\"line\">Cost time 2.4983ms</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"读写分析\"><a href=\"#读写分析\" class=\"headerlink\" title=\"读写分析\"></a>读写分析</h1><h3 id=\"底层IO\"><a href=\"#底层IO\" class=\"headerlink\" title=\"底层IO\"></a>底层IO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//os提供的功能</span><br><span class=\"line\">file=os.open(path)</span><br><span class=\"line\">file.read(buf)</span><br><span class=\"line\">file.write(buf)</span><br><span class=\"line\">file.readAt(buf,offset)</span><br><span class=\"line\">file.writeAt(buf,offset)</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓冲IO\"><a href=\"#缓冲IO\" class=\"headerlink\" title=\"缓冲IO\"></a>缓冲IO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufio.Reader/Writer</span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile=bufio.NewReader(file)</span><br><span class=\"line\">bufFile.read(buf)</span><br><span class=\"line\"></span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile = bufio.NewWriter(file)</span><br><span class=\"line\">bufFile.Write([]byte(&quot;haha&quot;))</span><br><span class=\"line\">w.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 标准IO操作数据流向路径：数据—&gt;进程缓冲（用户态）—&gt;内核缓存区（内核态）—&gt;磁盘<br>为什么包一层buf，buf读的时候读一大块，给你读取的时候，你只需要从buf里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况</p>\n</blockquote>\n<h4 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h4><ol>\n<li>内存大小为4G的电脑给10G的文件排序？</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"golang-文件读写\"><a href=\"#golang-文件读写\" class=\"headerlink\" title=\"golang 文件读写\"></a>golang 文件读写</h1><h3 id=\"使用io-ioutil进行读写文件\"><a href=\"#使用io-ioutil进行读写文件\" class=\"headerlink\" title=\"使用io/ioutil进行读写文件\"></a>使用io/ioutil进行读写文件</h3><p>先回忆下之前的ioutil包介绍：<br>Go语言学习之ioutil包(The way to go)</p>\n<p>其中提到了两个方法：<br>func ReadFile</p>\n<p><code>func ReadFile(filename string) ([]byte, error)</code></p>\n<p>ReadFile reads the file named by filename and returns the contents. A successful call returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported.</p>\n<p>func WriteFile</p>\n<p><code>func WriteFile(filename string, data []byte, perm os.FileMode) error</code><br>WriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    b, err := ioutil.ReadFile(&quot;test.log&quot;)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Print(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">    str := string(b)</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>写文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    d1 := []byte(&quot;hello\\ngo\\n&quot;)</span><br><span class=\"line\">    err := ioutil.WriteFile(&quot;test.txt&quot;, d1, 0644)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用os进行读写文件\"><a href=\"#使用os进行读写文件\" class=\"headerlink\" title=\"使用os进行读写文件\"></a>使用os进行读写文件</h3><p>同样，先回忆下之前的os包的介绍：<br>Go语言学习之os包中文件相关的操作(The way to go)</p>\n<p>首先要注意的就是两个打开文件的方法：<br>func Open</p>\n<p><code>func Open(name string) (*File, error)</code></p>\n<p>Open opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file, err := os.Open(path)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    panic(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">defer file.Close()</span><br></pre></td></tr></table></figure></p>\n<p>func OpenFile<br>需要提供文件路径、打开模式、文件权限</p>\n<p><code>func OpenFile(name string, flag int, perm FileMode) (*File, error)</code></p>\n<p>OpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm, (0666 etc.) if applicable. If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.</p>\n<p>读文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;log&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    f, err := os.OpenFile(&quot;notes.txt&quot;, os.O_RDWR|os.O_CREATE, 0755)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if err := f.Close(); err != nil &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>读方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Open(&quot;/tmp/dat&quot;)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    b1 := make([]byte, 5)</span><br><span class=\"line\">    n1, err := f.Read(b1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes: %s\\n&quot;, n1, string(b1))</span><br><span class=\"line\"></span><br><span class=\"line\">    o2, err := f.Seek(6, 0)</span><br><span class=\"line\">    //n1, err := f.ReadAt(b1,offset)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b2 := make([]byte, 2)</span><br><span class=\"line\">    n2, err := f.Read(b2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes @ %d: %s\\n&quot;, n2, o2, string(b2))</span><br><span class=\"line\"></span><br><span class=\"line\">    o3, err := f.Seek(6, 0)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    b3 := make([]byte, 2)</span><br><span class=\"line\">    n3, err := io.ReadAtLeast(f, b3, 2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;%d bytes @ %d: %s\\n&quot;, n3, o3, string(b3))</span><br><span class=\"line\"></span><br><span class=\"line\">    _, err = f.Seek(0, 0)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    r4 := bufio.NewReader(f)</span><br><span class=\"line\">    b4, err := r4.Peek(5)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;5 bytes: %s\\n&quot;, string(b4))</span><br><span class=\"line\"></span><br><span class=\"line\">    f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>寻址取偏移量：<code>func (f *File) Seek(offset int64, whence int) (ret int64, err error)</code><br>// Seek sets the offset for the next Read or Write on file to offset,interpreted<br>// according to whence: 0 means relative to the origin of the file, 1 means<br>// relative to the current offset, and 2 means relative to the end.<br>// It returns the new offset and an error, if any.<br>// The behavior of Seek on a file opened with O_APPEND is not specified.</p>\n</blockquote>\n<p>写方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func check(e error) &#123;</span><br><span class=\"line\">    if e != nil &#123;</span><br><span class=\"line\">        panic(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    f, err := os.Create(&quot;/tmp/dat2&quot;)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    defer f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    d2 := []byte&#123;115, 111, 109, 101, 10&#125;</span><br><span class=\"line\">    n2, err := f.Write(d2)</span><br><span class=\"line\">    check(err)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n2)</span><br><span class=\"line\"></span><br><span class=\"line\">    n3, err := f.WriteString(&quot;writes\\n&quot;)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n3)</span><br><span class=\"line\">    f.Sync()</span><br><span class=\"line\">    w := bufio.NewWriter(f)</span><br><span class=\"line\">    n4, err := w.WriteString(&quot;buffered\\n&quot;)</span><br><span class=\"line\">    fmt.Printf(&quot;wrote %d bytes\\n&quot;, n4)</span><br><span class=\"line\"></span><br><span class=\"line\">    w.Flush()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>几种读取文件方法速度比较<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;bufio&quot;</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&quot;</span><br><span class=\"line\">    &quot;io/ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func read0(path string) string &#123;</span><br><span class=\"line\">    f, err := ioutil.ReadFile(path)//底层调用file.read(fileSizeBuf)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Printf(&quot;%s\\n&quot;, err)</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read1(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := make([]byte, 1024, 1024)</span><br><span class=\"line\">    buf := make([]byte, 1024)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        n, err := fi.Read(buf)//\b一块一块读</span><br><span class=\"line\">        if err != nil &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if 0 == n &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = append(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read2(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\">    r := bufio.NewReader(fi)</span><br><span class=\"line\"></span><br><span class=\"line\">    chunks := make([]byte, 1024, 1024)</span><br><span class=\"line\"></span><br><span class=\"line\">    buf := make([]byte, 1024)</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        n, err := r.Read(buf)//缓存读</span><br><span class=\"line\">        if err != nil &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if 0 == n &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks = append(chunks, buf[:n]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return string(chunks)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func read3(path string) string &#123;</span><br><span class=\"line\">    fi, err := os.Open(path)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        panic(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defer fi.Close()</span><br><span class=\"line\">    fd, err := ioutil.ReadAll(fi)//底层实现使用bytes.Buffer缓存读(和io.Reader/io.Writer一样)</span><br><span class=\"line\">    return string(fd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    file := &quot;test.log&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    start := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">    read0(file)</span><br><span class=\"line\">    t0 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t0.Sub(start))</span><br><span class=\"line\"></span><br><span class=\"line\">    read1(file)</span><br><span class=\"line\">    t1 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t1.Sub(t0))</span><br><span class=\"line\"></span><br><span class=\"line\">    read2(file)</span><br><span class=\"line\">    t2 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t2.Sub(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">    read3(file)</span><br><span class=\"line\">    t3 := time.Now()</span><br><span class=\"line\">    fmt.Printf(&quot;Cost time %v\\n&quot;, t3.Sub(t2))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cost time 4.0105ms </span><br><span class=\"line\">Cost time 11.5043ms </span><br><span class=\"line\">Cost time 7.0042ms </span><br><span class=\"line\">Cost time 2.4983ms</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"读写分析\"><a href=\"#读写分析\" class=\"headerlink\" title=\"读写分析\"></a>读写分析</h1><h3 id=\"底层IO\"><a href=\"#底层IO\" class=\"headerlink\" title=\"底层IO\"></a>底层IO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//os提供的功能</span><br><span class=\"line\">file=os.open(path)</span><br><span class=\"line\">file.read(buf)</span><br><span class=\"line\">file.write(buf)</span><br><span class=\"line\">file.readAt(buf,offset)</span><br><span class=\"line\">file.writeAt(buf,offset)</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓冲IO\"><a href=\"#缓冲IO\" class=\"headerlink\" title=\"缓冲IO\"></a>缓冲IO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufio.Reader/Writer</span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile=bufio.NewReader(file)</span><br><span class=\"line\">bufFile.read(buf)</span><br><span class=\"line\"></span><br><span class=\"line\">file=open(path)</span><br><span class=\"line\">bufFile = bufio.NewWriter(file)</span><br><span class=\"line\">bufFile.Write([]byte(&quot;haha&quot;))</span><br><span class=\"line\">w.Flush()//将bufFile里面的数据刷到file里面去，操作系统可能还有一层buf！</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 标准IO操作数据流向路径：数据—&gt;进程缓冲（用户态）—&gt;内核缓存区（内核态）—&gt;磁盘<br>为什么包一层buf，buf读的时候读一大块，给你读取的时候，你只需要从buf里面去读一点数据，下次再读一点数据，不用每次读取都去调用系统库，buf写的时候，当写满一大块的时候，才真正调用系统写，因为不用每次写都去调用系统写，这样会提高性能，但数据可能丢失或是不一致的情况</p>\n</blockquote>\n<h4 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h4><ol>\n<li>内存大小为4G的电脑给10G的文件排序？</li>\n</ol>\n"},{"title":"golang-pprof","date":"2019-01-04T08:30:20.000Z","_content":"\n# pprof 的使用【mark】\n\n什么是 Profiling?\nProfiling 这个词比较难翻译，一般译成画像。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。\n\n在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用使用 CPU 和内存的情况。也就是说应用使用了多少 CPU 资源？都是哪些部分在使用？每个函数使用的比例是多少？有哪些函数在等待 CPU 资源？知道了这些，我们就能对应用进行规划，也能快速定位性能瓶颈。\n\ngolang 是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。\n\n在 go 语言中，主要关注的应用运行情况主要包括以下几种：\n\nCPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据\nMemory Profile（Heap Profile）：报告程序的内存使用情况\nBlock Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈\nGoroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的\n两种收集方式\n做 Profiling 第一步就是怎么获取应用程序的运行情况数据。go 语言提供了 runtime/pprof 和 net/http/pprof 两个库，这部分我们讲讲它们的用法以及使用场景。\n\n### 工具型应用\n如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用 runtime/pprof 库。\n\npprof 封装了很好的接口供我们使用，比如要想进行 CPU Profiling，可以调用 pprof.StartCPUProfile() 方法，它会对当前应用程序进行 CPU profiling，并写入到提供的参数中（w io.Writer），要停止调用 StopCPUProfile() 即可。\n\n去除错误处理只需要三行内容，一般把部分内容写在 main.go 文件中，应用程序启动之后就开始执行：\n\nf, err := os.Create(*cpuprofile) ... pprof.StartCPUProfile(f) defer pprof.StopCPUProfile() \n应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。\n\n想要获得内存的数据，直接使用 WriteHeapProfile 就行，不用 start 和 stop 这两个步骤了：\n\nf, err := os.Create(*memprofile) pprof.WriteHeapProfile(f) f.Close() \n\n### 服务型应用\n如果你的应用是一直运行的，比如 web 应用，那么可以使用 net/http/pprof 库，它能够在提供 HTTP 服务进行分析。\n\n如果使用了默认的 http.DefaultServeMux（通常是代码直接使用 http.ListenAndServe(\"0.0.0.0:8000\", nil)），只需要添加一行：\n\nimport _ \"net/http/pprof\"\n如果你使用自定义的 Mux，则需要手动注册一些路由规则：\n\n```\nr.HandleFunc(\"/debug/pprof/\", pprof.Index)\nr.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\nr.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\nr.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\nr.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n```\n不管哪种方式，你的 HTTP 服务都会多出 /debug/pprof endpoint，访问它会得到类似下面的内容：\n\n/debug/pprof/\n\nprofiles:\n0\tblock\n62\tgoroutine\n444\theap\n30\tthreadcreate\n\nfull goroutine stack dump\n这个路径下还有几个子页面：\n\n```\n/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载\n/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件\n/debug/pprof/block：block Profiling 的路径\n/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系\n```\ngo tool pprof 命令：获取和分析 Profiling 数据\n能通过对应的库获取想要的 Profiling 数据之后（不管是文件还是 http），下一步就是要对这些数据进行保存和分析，我们可以使用 go tool pprof 命令行工具。\n\n在后面我们会生成调用关系图和火焰图，需要安装 graphviz 软件包，在 ubuntu 系统可以使用下面的命令：\n\n$ sudo apt-get install -y graphviz\nNOTE：获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。否则如果应用处于空闲状态，得到的结果可能没有任何意义。\n\nCPU Profiling\ngo tool pprof 最简单的使用方式为 `go tool pprof [binary] [source]`，binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。比如：\n\n➜  go tool pprof ./hyperkube http://172.16.3.232:10251/debug/pprof/profile\nFetching profile from http://172.16.3.232:10251/debug/pprof/profile\nPlease wait... (30s)\nSaved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.samples.cpu.002.pb.gz Entering interactive mode (type \"help\" for commands) (pprof) \n这个命令会进行 CPU profiling 分析，等待一段时间（默认是 30s，如果在 url 最后加上 ?seconds=60 参数可以调整采集数据的时间为 60s）之后，我们就进入了一个交互式命令行，可以对解析的结果进行查看和导出。可以通过 help 来查看支持的自命令有哪些。\n\n一个有用的命令是 topN，它列出最耗时间的地方：\n\n(pprof) top10\n \n每一行表示一个函数的信息。前两列表示函数在 CPU 上运行的时间以及百分比；第三列是当前所有函数累加使用 CPU 的比例；第四列和第五列代表这个函数以及子函数运行所占用的时间和比例（也被称为累加值 cumulative），应该大于等于前两列的值；最后一列就是函数的名字。如果应用程序有性能问题，上面这些信息应该能告诉我们时间都花费在哪些函数的执行上了。\n\npprof 不仅能打印出最耗时的地方(top)，还能列出函数代码以及对应的取样数据(list)、汇编代码以及对应的取样数据(disasm)，而且能以各种样式进行输出，比如 svg、gv、callgrind、png、gif等等。\n\n其中一个非常便利的是 web 命令，在交互模式下输入 web，就能自动生成一个 svg 文件，并跳转到浏览器打开，生成了一个函数调用图：\n\n\n\n这个调用图包含了更多的信息，而且可视化的图像能让我们更清楚地理解整个应用程序的全貌。图中每个方框对应一个函数，方框越大代表执行的时间越久（包括它调用的子函数执行时间，但并不是正比的关系）；方框之间的箭头代表着调用关系，箭头上的数字代表被调用函数的执行时间。\n\n因为原图比较大，这里只截取了其中一部分，但是能明显看到 encoding/json.(*decodeState).object 是这里耗时比较多的地方，而且能看到它调用了哪些函数，分别函数多少。这些更详细的信息对于定位和调优性能是非常有帮助的！\n\n要想更细致分析，就要精确到代码级别了，看看每行代码的耗时，直接定位到出现性能问题的那行代码。pprof 也能做到，list 命令后面跟着一个正则表达式，就能查看匹配函数的代码以及每行代码的耗时：\n\n(pprof) list podFitsOnNode\n\n如果想要了解对应的汇编代码，可以使用 disadm <regex> 命令。这两个命令虽然强大，但是在命令行中查看代码并不是很方面，所以你可以使用 weblist 命令，用法和两者一样，但它会在浏览器打开一个页面，能够同时显示源代码和汇编代码。\n\nNOTE：更详细的 pprof 使用方法可以参考 pprof --help 或者 pprof 文档。\n\nMemory Profiling\n要想获得内存使用 Profiling 信息，只需要把数据源修改一下就行（对于 http 方式来说就是修改 url 的地址，从 /debug/pprof/profile 改成 /debug/pprof/heap）：\n\n➜  go tool pprof ./hyperkube http://172.16.3.232:10251/debug/pprof/heap \nFetching profile from http://172.16.3.232:10251/debug/pprof/heap\nSaved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.inuse_objects.inuse_space.002.pb.gz Entering interactive mode (type \"help\" for commands) (pprof) \n和 CPU Profiling 使用一样，使用 top N 可以打印出使用内存最多的函数列表：\n\n(pprof) top\n\n每一列的含义也是类似的，只不过从 CPU 使用时间变成了内存使用大小，就不多解释了。\n\n类似的，web 命令也能生成 svg 图片在浏览器中打开，从中可以看到函数调用关系，以及每个函数的内存使用多少。\n\n需要注意的是，默认情况下，统计的是内存使用大小，如果执行命令的时候加上 --inuse_objects 可以查看每个函数分配的对象数；--alloc-space 查看分配的内存空间大小。\n\n这里还要提两个比较有用的方法，如果应用比较复杂，生成的调用图特别大，看起来很乱，有两个办法可以优化：\n\n使用 web funcName 的方式，只打印和某个函数相关的内容\n运行 go tool pprof 命令时加上 --nodefration=0.05 参数，表示如果调用的子函数使用的 CPU、memory 不超过 5%，就忽略它，不要显示在图片中\npprof 已经支持动态的 web 浏览方式：https://github.com/google/pprof/commit/f83a3d89c18c445178f794d525bf3013ef7b3330\n\n测试工具的集成\ngo test 命令有两个参数和 pprof 相关，它们分别指定生成的 CPU 和 Memory profiling 保存的文件：\n\n-cpuprofile：cpu profiling 数据要保存的文件地址\n-memprofile：memory profiling 数据要报文的文件地址\n比如下面执行测试的同时，也会执行 CPU profiling，并把结果保存在 cpu.prof 文件中：\n\n$ go test -bench . -cpuprofile=cpu.prof\n执行结束之后，就会生成 main.test 和 cpu.prof 文件。要想使用 go tool pprof，需要指定的二进制文件就是 main.test。\n\n需要注意的是，Profiling 一般和性能测试一起使用，这个原因在前文也提到过，只有应用在负载高的情况下 Profiling 才有意义。\n\n \n\ngo-torch 和火焰图\n火焰图（Flame Graph）是 Bredan Gregg 创建的一种性能分析图表。上面的 profiling 结果也转换成火焰图，如果对火焰图比较了解可以手动来操作，不过这里我们要介绍一个工具：go-torch。这是 uber 开源的一个工具，可以直接读取 golang profiling 数据，并生成一个火焰图的 svg 文件。\n\n\n\n火焰图 svg 文件可以通过浏览器打开，它对于调用图的最优点是它是动态的：可以通过点击每个方块来 zoom in 分析它上面的内容。\n\n火焰图的调用顺序从下到上，每个方块代表一个函数，它上面一层表示这个函数会调用哪些函数，方块的大小代表了占用 CPU 使用的长短。火焰图的配色并没有特殊的意义，默认的红、黄配色是为了更像火焰而已。\n\ngo-torch 工具的使用非常简单，没有任何参数的话，它会尝试从 http://localhost:8080/debug/pprof/profile 获取 profiling 数据。它有三个常用的参数可以调整：\n\n-u --url：要访问的 URL，这里只是主机和端口部分\n-s --suffix：pprof profile 的路径，默认为 /debug/pprof/profile\n--seconds：要执行 profiling 的时间长度，默认为 30s\n要生成火焰图，需要事先安装 FlameGraph工具，这个工具的安装很简单，只要把对应的可执行文件放到 $PATH 目录下就行。\n\n \n\n参考资料\nThe Go Blog: Profiling Go Programs\ngo command tutorial: go tool pprof\nProfiling and optimizing Go web applications\nDebugging performance issues in Go programs","source":"_posts/golang/golang-pprof.md","raw":"---\ntitle: golang-pprof\ntags:\n  - tags\ncategories:\n  - categories\ndate: 2019-01-04 16:30:20\n---\n\n# pprof 的使用【mark】\n\n什么是 Profiling?\nProfiling 这个词比较难翻译，一般译成画像。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。\n\n在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用使用 CPU 和内存的情况。也就是说应用使用了多少 CPU 资源？都是哪些部分在使用？每个函数使用的比例是多少？有哪些函数在等待 CPU 资源？知道了这些，我们就能对应用进行规划，也能快速定位性能瓶颈。\n\ngolang 是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。\n\n在 go 语言中，主要关注的应用运行情况主要包括以下几种：\n\nCPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据\nMemory Profile（Heap Profile）：报告程序的内存使用情况\nBlock Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈\nGoroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的\n两种收集方式\n做 Profiling 第一步就是怎么获取应用程序的运行情况数据。go 语言提供了 runtime/pprof 和 net/http/pprof 两个库，这部分我们讲讲它们的用法以及使用场景。\n\n### 工具型应用\n如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用 runtime/pprof 库。\n\npprof 封装了很好的接口供我们使用，比如要想进行 CPU Profiling，可以调用 pprof.StartCPUProfile() 方法，它会对当前应用程序进行 CPU profiling，并写入到提供的参数中（w io.Writer），要停止调用 StopCPUProfile() 即可。\n\n去除错误处理只需要三行内容，一般把部分内容写在 main.go 文件中，应用程序启动之后就开始执行：\n\nf, err := os.Create(*cpuprofile) ... pprof.StartCPUProfile(f) defer pprof.StopCPUProfile() \n应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。\n\n想要获得内存的数据，直接使用 WriteHeapProfile 就行，不用 start 和 stop 这两个步骤了：\n\nf, err := os.Create(*memprofile) pprof.WriteHeapProfile(f) f.Close() \n\n### 服务型应用\n如果你的应用是一直运行的，比如 web 应用，那么可以使用 net/http/pprof 库，它能够在提供 HTTP 服务进行分析。\n\n如果使用了默认的 http.DefaultServeMux（通常是代码直接使用 http.ListenAndServe(\"0.0.0.0:8000\", nil)），只需要添加一行：\n\nimport _ \"net/http/pprof\"\n如果你使用自定义的 Mux，则需要手动注册一些路由规则：\n\n```\nr.HandleFunc(\"/debug/pprof/\", pprof.Index)\nr.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\nr.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\nr.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\nr.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n```\n不管哪种方式，你的 HTTP 服务都会多出 /debug/pprof endpoint，访问它会得到类似下面的内容：\n\n/debug/pprof/\n\nprofiles:\n0\tblock\n62\tgoroutine\n444\theap\n30\tthreadcreate\n\nfull goroutine stack dump\n这个路径下还有几个子页面：\n\n```\n/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载\n/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件\n/debug/pprof/block：block Profiling 的路径\n/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系\n```\ngo tool pprof 命令：获取和分析 Profiling 数据\n能通过对应的库获取想要的 Profiling 数据之后（不管是文件还是 http），下一步就是要对这些数据进行保存和分析，我们可以使用 go tool pprof 命令行工具。\n\n在后面我们会生成调用关系图和火焰图，需要安装 graphviz 软件包，在 ubuntu 系统可以使用下面的命令：\n\n$ sudo apt-get install -y graphviz\nNOTE：获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。否则如果应用处于空闲状态，得到的结果可能没有任何意义。\n\nCPU Profiling\ngo tool pprof 最简单的使用方式为 `go tool pprof [binary] [source]`，binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。比如：\n\n➜  go tool pprof ./hyperkube http://172.16.3.232:10251/debug/pprof/profile\nFetching profile from http://172.16.3.232:10251/debug/pprof/profile\nPlease wait... (30s)\nSaved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.samples.cpu.002.pb.gz Entering interactive mode (type \"help\" for commands) (pprof) \n这个命令会进行 CPU profiling 分析，等待一段时间（默认是 30s，如果在 url 最后加上 ?seconds=60 参数可以调整采集数据的时间为 60s）之后，我们就进入了一个交互式命令行，可以对解析的结果进行查看和导出。可以通过 help 来查看支持的自命令有哪些。\n\n一个有用的命令是 topN，它列出最耗时间的地方：\n\n(pprof) top10\n \n每一行表示一个函数的信息。前两列表示函数在 CPU 上运行的时间以及百分比；第三列是当前所有函数累加使用 CPU 的比例；第四列和第五列代表这个函数以及子函数运行所占用的时间和比例（也被称为累加值 cumulative），应该大于等于前两列的值；最后一列就是函数的名字。如果应用程序有性能问题，上面这些信息应该能告诉我们时间都花费在哪些函数的执行上了。\n\npprof 不仅能打印出最耗时的地方(top)，还能列出函数代码以及对应的取样数据(list)、汇编代码以及对应的取样数据(disasm)，而且能以各种样式进行输出，比如 svg、gv、callgrind、png、gif等等。\n\n其中一个非常便利的是 web 命令，在交互模式下输入 web，就能自动生成一个 svg 文件，并跳转到浏览器打开，生成了一个函数调用图：\n\n\n\n这个调用图包含了更多的信息，而且可视化的图像能让我们更清楚地理解整个应用程序的全貌。图中每个方框对应一个函数，方框越大代表执行的时间越久（包括它调用的子函数执行时间，但并不是正比的关系）；方框之间的箭头代表着调用关系，箭头上的数字代表被调用函数的执行时间。\n\n因为原图比较大，这里只截取了其中一部分，但是能明显看到 encoding/json.(*decodeState).object 是这里耗时比较多的地方，而且能看到它调用了哪些函数，分别函数多少。这些更详细的信息对于定位和调优性能是非常有帮助的！\n\n要想更细致分析，就要精确到代码级别了，看看每行代码的耗时，直接定位到出现性能问题的那行代码。pprof 也能做到，list 命令后面跟着一个正则表达式，就能查看匹配函数的代码以及每行代码的耗时：\n\n(pprof) list podFitsOnNode\n\n如果想要了解对应的汇编代码，可以使用 disadm <regex> 命令。这两个命令虽然强大，但是在命令行中查看代码并不是很方面，所以你可以使用 weblist 命令，用法和两者一样，但它会在浏览器打开一个页面，能够同时显示源代码和汇编代码。\n\nNOTE：更详细的 pprof 使用方法可以参考 pprof --help 或者 pprof 文档。\n\nMemory Profiling\n要想获得内存使用 Profiling 信息，只需要把数据源修改一下就行（对于 http 方式来说就是修改 url 的地址，从 /debug/pprof/profile 改成 /debug/pprof/heap）：\n\n➜  go tool pprof ./hyperkube http://172.16.3.232:10251/debug/pprof/heap \nFetching profile from http://172.16.3.232:10251/debug/pprof/heap\nSaved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.inuse_objects.inuse_space.002.pb.gz Entering interactive mode (type \"help\" for commands) (pprof) \n和 CPU Profiling 使用一样，使用 top N 可以打印出使用内存最多的函数列表：\n\n(pprof) top\n\n每一列的含义也是类似的，只不过从 CPU 使用时间变成了内存使用大小，就不多解释了。\n\n类似的，web 命令也能生成 svg 图片在浏览器中打开，从中可以看到函数调用关系，以及每个函数的内存使用多少。\n\n需要注意的是，默认情况下，统计的是内存使用大小，如果执行命令的时候加上 --inuse_objects 可以查看每个函数分配的对象数；--alloc-space 查看分配的内存空间大小。\n\n这里还要提两个比较有用的方法，如果应用比较复杂，生成的调用图特别大，看起来很乱，有两个办法可以优化：\n\n使用 web funcName 的方式，只打印和某个函数相关的内容\n运行 go tool pprof 命令时加上 --nodefration=0.05 参数，表示如果调用的子函数使用的 CPU、memory 不超过 5%，就忽略它，不要显示在图片中\npprof 已经支持动态的 web 浏览方式：https://github.com/google/pprof/commit/f83a3d89c18c445178f794d525bf3013ef7b3330\n\n测试工具的集成\ngo test 命令有两个参数和 pprof 相关，它们分别指定生成的 CPU 和 Memory profiling 保存的文件：\n\n-cpuprofile：cpu profiling 数据要保存的文件地址\n-memprofile：memory profiling 数据要报文的文件地址\n比如下面执行测试的同时，也会执行 CPU profiling，并把结果保存在 cpu.prof 文件中：\n\n$ go test -bench . -cpuprofile=cpu.prof\n执行结束之后，就会生成 main.test 和 cpu.prof 文件。要想使用 go tool pprof，需要指定的二进制文件就是 main.test。\n\n需要注意的是，Profiling 一般和性能测试一起使用，这个原因在前文也提到过，只有应用在负载高的情况下 Profiling 才有意义。\n\n \n\ngo-torch 和火焰图\n火焰图（Flame Graph）是 Bredan Gregg 创建的一种性能分析图表。上面的 profiling 结果也转换成火焰图，如果对火焰图比较了解可以手动来操作，不过这里我们要介绍一个工具：go-torch。这是 uber 开源的一个工具，可以直接读取 golang profiling 数据，并生成一个火焰图的 svg 文件。\n\n\n\n火焰图 svg 文件可以通过浏览器打开，它对于调用图的最优点是它是动态的：可以通过点击每个方块来 zoom in 分析它上面的内容。\n\n火焰图的调用顺序从下到上，每个方块代表一个函数，它上面一层表示这个函数会调用哪些函数，方块的大小代表了占用 CPU 使用的长短。火焰图的配色并没有特殊的意义，默认的红、黄配色是为了更像火焰而已。\n\ngo-torch 工具的使用非常简单，没有任何参数的话，它会尝试从 http://localhost:8080/debug/pprof/profile 获取 profiling 数据。它有三个常用的参数可以调整：\n\n-u --url：要访问的 URL，这里只是主机和端口部分\n-s --suffix：pprof profile 的路径，默认为 /debug/pprof/profile\n--seconds：要执行 profiling 的时间长度，默认为 30s\n要生成火焰图，需要事先安装 FlameGraph工具，这个工具的安装很简单，只要把对应的可执行文件放到 $PATH 目录下就行。\n\n \n\n参考资料\nThe Go Blog: Profiling Go Programs\ngo command tutorial: go tool pprof\nProfiling and optimizing Go web applications\nDebugging performance issues in Go programs","slug":"golang/golang-pprof","published":1,"updated":"2019-01-07T03:59:22.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0d50020wl38nxhih6cb","content":"<h1 id=\"pprof-的使用【mark】\"><a href=\"#pprof-的使用【mark】\" class=\"headerlink\" title=\"pprof 的使用【mark】\"></a>pprof 的使用【mark】</h1><p>什么是 Profiling?<br>Profiling 这个词比较难翻译，一般译成画像。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。</p>\n<p>在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用使用 CPU 和内存的情况。也就是说应用使用了多少 CPU 资源？都是哪些部分在使用？每个函数使用的比例是多少？有哪些函数在等待 CPU 资源？知道了这些，我们就能对应用进行规划，也能快速定位性能瓶颈。</p>\n<p>golang 是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。</p>\n<p>在 go 语言中，主要关注的应用运行情况主要包括以下几种：</p>\n<p>CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据<br>Memory Profile（Heap Profile）：报告程序的内存使用情况<br>Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈<br>Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的<br>两种收集方式<br>做 Profiling 第一步就是怎么获取应用程序的运行情况数据。go 语言提供了 runtime/pprof 和 net/http/pprof 两个库，这部分我们讲讲它们的用法以及使用场景。</p>\n<h3 id=\"工具型应用\"><a href=\"#工具型应用\" class=\"headerlink\" title=\"工具型应用\"></a>工具型应用</h3><p>如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用 runtime/pprof 库。</p>\n<p>pprof 封装了很好的接口供我们使用，比如要想进行 CPU Profiling，可以调用 pprof.StartCPUProfile() 方法，它会对当前应用程序进行 CPU profiling，并写入到提供的参数中（w io.Writer），要停止调用 StopCPUProfile() 即可。</p>\n<p>去除错误处理只需要三行内容，一般把部分内容写在 main.go 文件中，应用程序启动之后就开始执行：</p>\n<p>f, err := os.Create(*cpuprofile) … pprof.StartCPUProfile(f) defer pprof.StopCPUProfile()<br>应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。</p>\n<p>想要获得内存的数据，直接使用 WriteHeapProfile 就行，不用 start 和 stop 这两个步骤了：</p>\n<p>f, err := os.Create(*memprofile) pprof.WriteHeapProfile(f) f.Close() </p>\n<h3 id=\"服务型应用\"><a href=\"#服务型应用\" class=\"headerlink\" title=\"服务型应用\"></a>服务型应用</h3><p>如果你的应用是一直运行的，比如 web 应用，那么可以使用 net/http/pprof 库，它能够在提供 HTTP 服务进行分析。</p>\n<p>如果使用了默认的 http.DefaultServeMux（通常是代码直接使用 http.ListenAndServe(“0.0.0.0:8000”, nil)），只需要添加一行：</p>\n<p>import _ “net/http/pprof”<br>如果你使用自定义的 Mux，则需要手动注册一些路由规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/&quot;, pprof.Index)</span><br><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/cmdline&quot;, pprof.Cmdline)</span><br><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/profile&quot;, pprof.Profile)</span><br><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/symbol&quot;, pprof.Symbol)</span><br><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/trace&quot;, pprof.Trace)</span><br></pre></td></tr></table></figure>\n<p>不管哪种方式，你的 HTTP 服务都会多出 /debug/pprof endpoint，访问它会得到类似下面的内容：</p>\n<p>/debug/pprof/</p>\n<p>profiles:<br>0    block<br>62    goroutine<br>444    heap<br>30    threadcreate</p>\n<p>full goroutine stack dump<br>这个路径下还有几个子页面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载</span><br><span class=\"line\">/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件</span><br><span class=\"line\">/debug/pprof/block：block Profiling 的路径</span><br><span class=\"line\">/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系</span><br></pre></td></tr></table></figure>\n<p>go tool pprof 命令：获取和分析 Profiling 数据<br>能通过对应的库获取想要的 Profiling 数据之后（不管是文件还是 http），下一步就是要对这些数据进行保存和分析，我们可以使用 go tool pprof 命令行工具。</p>\n<p>在后面我们会生成调用关系图和火焰图，需要安装 graphviz 软件包，在 ubuntu 系统可以使用下面的命令：</p>\n<p>$ sudo apt-get install -y graphviz<br>NOTE：获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。否则如果应用处于空闲状态，得到的结果可能没有任何意义。</p>\n<p>CPU Profiling<br>go tool pprof 最简单的使用方式为 <code>go tool pprof [binary] [source]</code>，binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。比如：</p>\n<p>➜  go tool pprof ./hyperkube <a href=\"http://172.16.3.232:10251/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://172.16.3.232:10251/debug/pprof/profile</a><br>Fetching profile from <a href=\"http://172.16.3.232:10251/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://172.16.3.232:10251/debug/pprof/profile</a><br>Please wait… (30s)<br>Saved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.samples.cpu.002.pb.gz Entering interactive mode (type “help” for commands) (pprof)<br>这个命令会进行 CPU profiling 分析，等待一段时间（默认是 30s，如果在 url 最后加上 ?seconds=60 参数可以调整采集数据的时间为 60s）之后，我们就进入了一个交互式命令行，可以对解析的结果进行查看和导出。可以通过 help 来查看支持的自命令有哪些。</p>\n<p>一个有用的命令是 topN，它列出最耗时间的地方：</p>\n<p>(pprof) top10</p>\n<p>每一行表示一个函数的信息。前两列表示函数在 CPU 上运行的时间以及百分比；第三列是当前所有函数累加使用 CPU 的比例；第四列和第五列代表这个函数以及子函数运行所占用的时间和比例（也被称为累加值 cumulative），应该大于等于前两列的值；最后一列就是函数的名字。如果应用程序有性能问题，上面这些信息应该能告诉我们时间都花费在哪些函数的执行上了。</p>\n<p>pprof 不仅能打印出最耗时的地方(top)，还能列出函数代码以及对应的取样数据(list)、汇编代码以及对应的取样数据(disasm)，而且能以各种样式进行输出，比如 svg、gv、callgrind、png、gif等等。</p>\n<p>其中一个非常便利的是 web 命令，在交互模式下输入 web，就能自动生成一个 svg 文件，并跳转到浏览器打开，生成了一个函数调用图：</p>\n<p>这个调用图包含了更多的信息，而且可视化的图像能让我们更清楚地理解整个应用程序的全貌。图中每个方框对应一个函数，方框越大代表执行的时间越久（包括它调用的子函数执行时间，但并不是正比的关系）；方框之间的箭头代表着调用关系，箭头上的数字代表被调用函数的执行时间。</p>\n<p>因为原图比较大，这里只截取了其中一部分，但是能明显看到 encoding/json.(*decodeState).object 是这里耗时比较多的地方，而且能看到它调用了哪些函数，分别函数多少。这些更详细的信息对于定位和调优性能是非常有帮助的！</p>\n<p>要想更细致分析，就要精确到代码级别了，看看每行代码的耗时，直接定位到出现性能问题的那行代码。pprof 也能做到，list 命令后面跟着一个正则表达式，就能查看匹配函数的代码以及每行代码的耗时：</p>\n<p>(pprof) list podFitsOnNode</p>\n<p>如果想要了解对应的汇编代码，可以使用 disadm <regex> 命令。这两个命令虽然强大，但是在命令行中查看代码并不是很方面，所以你可以使用 weblist 命令，用法和两者一样，但它会在浏览器打开一个页面，能够同时显示源代码和汇编代码。</regex></p>\n<p>NOTE：更详细的 pprof 使用方法可以参考 pprof –help 或者 pprof 文档。</p>\n<p>Memory Profiling<br>要想获得内存使用 Profiling 信息，只需要把数据源修改一下就行（对于 http 方式来说就是修改 url 的地址，从 /debug/pprof/profile 改成 /debug/pprof/heap）：</p>\n<p>➜  go tool pprof ./hyperkube <a href=\"http://172.16.3.232:10251/debug/pprof/heap\" target=\"_blank\" rel=\"noopener\">http://172.16.3.232:10251/debug/pprof/heap</a><br>Fetching profile from <a href=\"http://172.16.3.232:10251/debug/pprof/heap\" target=\"_blank\" rel=\"noopener\">http://172.16.3.232:10251/debug/pprof/heap</a><br>Saved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.inuse_objects.inuse_space.002.pb.gz Entering interactive mode (type “help” for commands) (pprof)<br>和 CPU Profiling 使用一样，使用 top N 可以打印出使用内存最多的函数列表：</p>\n<p>(pprof) top</p>\n<p>每一列的含义也是类似的，只不过从 CPU 使用时间变成了内存使用大小，就不多解释了。</p>\n<p>类似的，web 命令也能生成 svg 图片在浏览器中打开，从中可以看到函数调用关系，以及每个函数的内存使用多少。</p>\n<p>需要注意的是，默认情况下，统计的是内存使用大小，如果执行命令的时候加上 –inuse_objects 可以查看每个函数分配的对象数；–alloc-space 查看分配的内存空间大小。</p>\n<p>这里还要提两个比较有用的方法，如果应用比较复杂，生成的调用图特别大，看起来很乱，有两个办法可以优化：</p>\n<p>使用 web funcName 的方式，只打印和某个函数相关的内容<br>运行 go tool pprof 命令时加上 –nodefration=0.05 参数，表示如果调用的子函数使用的 CPU、memory 不超过 5%，就忽略它，不要显示在图片中<br>pprof 已经支持动态的 web 浏览方式：<a href=\"https://github.com/google/pprof/commit/f83a3d89c18c445178f794d525bf3013ef7b3330\" target=\"_blank\" rel=\"noopener\">https://github.com/google/pprof/commit/f83a3d89c18c445178f794d525bf3013ef7b3330</a></p>\n<p>测试工具的集成<br>go test 命令有两个参数和 pprof 相关，它们分别指定生成的 CPU 和 Memory profiling 保存的文件：</p>\n<p>-cpuprofile：cpu profiling 数据要保存的文件地址<br>-memprofile：memory profiling 数据要报文的文件地址<br>比如下面执行测试的同时，也会执行 CPU profiling，并把结果保存在 cpu.prof 文件中：</p>\n<p>$ go test -bench . -cpuprofile=cpu.prof<br>执行结束之后，就会生成 main.test 和 cpu.prof 文件。要想使用 go tool pprof，需要指定的二进制文件就是 main.test。</p>\n<p>需要注意的是，Profiling 一般和性能测试一起使用，这个原因在前文也提到过，只有应用在负载高的情况下 Profiling 才有意义。</p>\n<p>go-torch 和火焰图<br>火焰图（Flame Graph）是 Bredan Gregg 创建的一种性能分析图表。上面的 profiling 结果也转换成火焰图，如果对火焰图比较了解可以手动来操作，不过这里我们要介绍一个工具：go-torch。这是 uber 开源的一个工具，可以直接读取 golang profiling 数据，并生成一个火焰图的 svg 文件。</p>\n<p>火焰图 svg 文件可以通过浏览器打开，它对于调用图的最优点是它是动态的：可以通过点击每个方块来 zoom in 分析它上面的内容。</p>\n<p>火焰图的调用顺序从下到上，每个方块代表一个函数，它上面一层表示这个函数会调用哪些函数，方块的大小代表了占用 CPU 使用的长短。火焰图的配色并没有特殊的意义，默认的红、黄配色是为了更像火焰而已。</p>\n<p>go-torch 工具的使用非常简单，没有任何参数的话，它会尝试从 <a href=\"http://localhost:8080/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/debug/pprof/profile</a> 获取 profiling 数据。它有三个常用的参数可以调整：</p>\n<p>-u –url：要访问的 URL，这里只是主机和端口部分<br>-s –suffix：pprof profile 的路径，默认为 /debug/pprof/profile<br>–seconds：要执行 profiling 的时间长度，默认为 30s<br>要生成火焰图，需要事先安装 FlameGraph工具，这个工具的安装很简单，只要把对应的可执行文件放到 $PATH 目录下就行。</p>\n<p>参考资料<br>The Go Blog: Profiling Go Programs<br>go command tutorial: go tool pprof<br>Profiling and optimizing Go web applications<br>Debugging performance issues in Go programs</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"pprof-的使用【mark】\"><a href=\"#pprof-的使用【mark】\" class=\"headerlink\" title=\"pprof 的使用【mark】\"></a>pprof 的使用【mark】</h1><p>什么是 Profiling?<br>Profiling 这个词比较难翻译，一般译成画像。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。</p>\n<p>在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用使用 CPU 和内存的情况。也就是说应用使用了多少 CPU 资源？都是哪些部分在使用？每个函数使用的比例是多少？有哪些函数在等待 CPU 资源？知道了这些，我们就能对应用进行规划，也能快速定位性能瓶颈。</p>\n<p>golang 是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。</p>\n<p>在 go 语言中，主要关注的应用运行情况主要包括以下几种：</p>\n<p>CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据<br>Memory Profile（Heap Profile）：报告程序的内存使用情况<br>Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈<br>Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的<br>两种收集方式<br>做 Profiling 第一步就是怎么获取应用程序的运行情况数据。go 语言提供了 runtime/pprof 和 net/http/pprof 两个库，这部分我们讲讲它们的用法以及使用场景。</p>\n<h3 id=\"工具型应用\"><a href=\"#工具型应用\" class=\"headerlink\" title=\"工具型应用\"></a>工具型应用</h3><p>如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用 runtime/pprof 库。</p>\n<p>pprof 封装了很好的接口供我们使用，比如要想进行 CPU Profiling，可以调用 pprof.StartCPUProfile() 方法，它会对当前应用程序进行 CPU profiling，并写入到提供的参数中（w io.Writer），要停止调用 StopCPUProfile() 即可。</p>\n<p>去除错误处理只需要三行内容，一般把部分内容写在 main.go 文件中，应用程序启动之后就开始执行：</p>\n<p>f, err := os.Create(*cpuprofile) … pprof.StartCPUProfile(f) defer pprof.StopCPUProfile()<br>应用执行结束后，就会生成一个文件，保存了我们的 CPU profiling 数据。</p>\n<p>想要获得内存的数据，直接使用 WriteHeapProfile 就行，不用 start 和 stop 这两个步骤了：</p>\n<p>f, err := os.Create(*memprofile) pprof.WriteHeapProfile(f) f.Close() </p>\n<h3 id=\"服务型应用\"><a href=\"#服务型应用\" class=\"headerlink\" title=\"服务型应用\"></a>服务型应用</h3><p>如果你的应用是一直运行的，比如 web 应用，那么可以使用 net/http/pprof 库，它能够在提供 HTTP 服务进行分析。</p>\n<p>如果使用了默认的 http.DefaultServeMux（通常是代码直接使用 http.ListenAndServe(“0.0.0.0:8000”, nil)），只需要添加一行：</p>\n<p>import _ “net/http/pprof”<br>如果你使用自定义的 Mux，则需要手动注册一些路由规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/&quot;, pprof.Index)</span><br><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/cmdline&quot;, pprof.Cmdline)</span><br><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/profile&quot;, pprof.Profile)</span><br><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/symbol&quot;, pprof.Symbol)</span><br><span class=\"line\">r.HandleFunc(&quot;/debug/pprof/trace&quot;, pprof.Trace)</span><br></pre></td></tr></table></figure>\n<p>不管哪种方式，你的 HTTP 服务都会多出 /debug/pprof endpoint，访问它会得到类似下面的内容：</p>\n<p>/debug/pprof/</p>\n<p>profiles:<br>0    block<br>62    goroutine<br>444    heap<br>30    threadcreate</p>\n<p>full goroutine stack dump<br>这个路径下还有几个子页面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载</span><br><span class=\"line\">/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件</span><br><span class=\"line\">/debug/pprof/block：block Profiling 的路径</span><br><span class=\"line\">/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系</span><br></pre></td></tr></table></figure>\n<p>go tool pprof 命令：获取和分析 Profiling 数据<br>能通过对应的库获取想要的 Profiling 数据之后（不管是文件还是 http），下一步就是要对这些数据进行保存和分析，我们可以使用 go tool pprof 命令行工具。</p>\n<p>在后面我们会生成调用关系图和火焰图，需要安装 graphviz 软件包，在 ubuntu 系统可以使用下面的命令：</p>\n<p>$ sudo apt-get install -y graphviz<br>NOTE：获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。否则如果应用处于空闲状态，得到的结果可能没有任何意义。</p>\n<p>CPU Profiling<br>go tool pprof 最简单的使用方式为 <code>go tool pprof [binary] [source]</code>，binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。比如：</p>\n<p>➜  go tool pprof ./hyperkube <a href=\"http://172.16.3.232:10251/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://172.16.3.232:10251/debug/pprof/profile</a><br>Fetching profile from <a href=\"http://172.16.3.232:10251/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://172.16.3.232:10251/debug/pprof/profile</a><br>Please wait… (30s)<br>Saved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.samples.cpu.002.pb.gz Entering interactive mode (type “help” for commands) (pprof)<br>这个命令会进行 CPU profiling 分析，等待一段时间（默认是 30s，如果在 url 最后加上 ?seconds=60 参数可以调整采集数据的时间为 60s）之后，我们就进入了一个交互式命令行，可以对解析的结果进行查看和导出。可以通过 help 来查看支持的自命令有哪些。</p>\n<p>一个有用的命令是 topN，它列出最耗时间的地方：</p>\n<p>(pprof) top10</p>\n<p>每一行表示一个函数的信息。前两列表示函数在 CPU 上运行的时间以及百分比；第三列是当前所有函数累加使用 CPU 的比例；第四列和第五列代表这个函数以及子函数运行所占用的时间和比例（也被称为累加值 cumulative），应该大于等于前两列的值；最后一列就是函数的名字。如果应用程序有性能问题，上面这些信息应该能告诉我们时间都花费在哪些函数的执行上了。</p>\n<p>pprof 不仅能打印出最耗时的地方(top)，还能列出函数代码以及对应的取样数据(list)、汇编代码以及对应的取样数据(disasm)，而且能以各种样式进行输出，比如 svg、gv、callgrind、png、gif等等。</p>\n<p>其中一个非常便利的是 web 命令，在交互模式下输入 web，就能自动生成一个 svg 文件，并跳转到浏览器打开，生成了一个函数调用图：</p>\n<p>这个调用图包含了更多的信息，而且可视化的图像能让我们更清楚地理解整个应用程序的全貌。图中每个方框对应一个函数，方框越大代表执行的时间越久（包括它调用的子函数执行时间，但并不是正比的关系）；方框之间的箭头代表着调用关系，箭头上的数字代表被调用函数的执行时间。</p>\n<p>因为原图比较大，这里只截取了其中一部分，但是能明显看到 encoding/json.(*decodeState).object 是这里耗时比较多的地方，而且能看到它调用了哪些函数，分别函数多少。这些更详细的信息对于定位和调优性能是非常有帮助的！</p>\n<p>要想更细致分析，就要精确到代码级别了，看看每行代码的耗时，直接定位到出现性能问题的那行代码。pprof 也能做到，list 命令后面跟着一个正则表达式，就能查看匹配函数的代码以及每行代码的耗时：</p>\n<p>(pprof) list podFitsOnNode</p>\n<p>如果想要了解对应的汇编代码，可以使用 disadm <regex> 命令。这两个命令虽然强大，但是在命令行中查看代码并不是很方面，所以你可以使用 weblist 命令，用法和两者一样，但它会在浏览器打开一个页面，能够同时显示源代码和汇编代码。</regex></p>\n<p>NOTE：更详细的 pprof 使用方法可以参考 pprof –help 或者 pprof 文档。</p>\n<p>Memory Profiling<br>要想获得内存使用 Profiling 信息，只需要把数据源修改一下就行（对于 http 方式来说就是修改 url 的地址，从 /debug/pprof/profile 改成 /debug/pprof/heap）：</p>\n<p>➜  go tool pprof ./hyperkube <a href=\"http://172.16.3.232:10251/debug/pprof/heap\" target=\"_blank\" rel=\"noopener\">http://172.16.3.232:10251/debug/pprof/heap</a><br>Fetching profile from <a href=\"http://172.16.3.232:10251/debug/pprof/heap\" target=\"_blank\" rel=\"noopener\">http://172.16.3.232:10251/debug/pprof/heap</a><br>Saved profile in /home/cizixs/pprof/pprof.hyperkube.172.16.3.232:10251.inuse_objects.inuse_space.002.pb.gz Entering interactive mode (type “help” for commands) (pprof)<br>和 CPU Profiling 使用一样，使用 top N 可以打印出使用内存最多的函数列表：</p>\n<p>(pprof) top</p>\n<p>每一列的含义也是类似的，只不过从 CPU 使用时间变成了内存使用大小，就不多解释了。</p>\n<p>类似的，web 命令也能生成 svg 图片在浏览器中打开，从中可以看到函数调用关系，以及每个函数的内存使用多少。</p>\n<p>需要注意的是，默认情况下，统计的是内存使用大小，如果执行命令的时候加上 –inuse_objects 可以查看每个函数分配的对象数；–alloc-space 查看分配的内存空间大小。</p>\n<p>这里还要提两个比较有用的方法，如果应用比较复杂，生成的调用图特别大，看起来很乱，有两个办法可以优化：</p>\n<p>使用 web funcName 的方式，只打印和某个函数相关的内容<br>运行 go tool pprof 命令时加上 –nodefration=0.05 参数，表示如果调用的子函数使用的 CPU、memory 不超过 5%，就忽略它，不要显示在图片中<br>pprof 已经支持动态的 web 浏览方式：<a href=\"https://github.com/google/pprof/commit/f83a3d89c18c445178f794d525bf3013ef7b3330\" target=\"_blank\" rel=\"noopener\">https://github.com/google/pprof/commit/f83a3d89c18c445178f794d525bf3013ef7b3330</a></p>\n<p>测试工具的集成<br>go test 命令有两个参数和 pprof 相关，它们分别指定生成的 CPU 和 Memory profiling 保存的文件：</p>\n<p>-cpuprofile：cpu profiling 数据要保存的文件地址<br>-memprofile：memory profiling 数据要报文的文件地址<br>比如下面执行测试的同时，也会执行 CPU profiling，并把结果保存在 cpu.prof 文件中：</p>\n<p>$ go test -bench . -cpuprofile=cpu.prof<br>执行结束之后，就会生成 main.test 和 cpu.prof 文件。要想使用 go tool pprof，需要指定的二进制文件就是 main.test。</p>\n<p>需要注意的是，Profiling 一般和性能测试一起使用，这个原因在前文也提到过，只有应用在负载高的情况下 Profiling 才有意义。</p>\n<p>go-torch 和火焰图<br>火焰图（Flame Graph）是 Bredan Gregg 创建的一种性能分析图表。上面的 profiling 结果也转换成火焰图，如果对火焰图比较了解可以手动来操作，不过这里我们要介绍一个工具：go-torch。这是 uber 开源的一个工具，可以直接读取 golang profiling 数据，并生成一个火焰图的 svg 文件。</p>\n<p>火焰图 svg 文件可以通过浏览器打开，它对于调用图的最优点是它是动态的：可以通过点击每个方块来 zoom in 分析它上面的内容。</p>\n<p>火焰图的调用顺序从下到上，每个方块代表一个函数，它上面一层表示这个函数会调用哪些函数，方块的大小代表了占用 CPU 使用的长短。火焰图的配色并没有特殊的意义，默认的红、黄配色是为了更像火焰而已。</p>\n<p>go-torch 工具的使用非常简单，没有任何参数的话，它会尝试从 <a href=\"http://localhost:8080/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/debug/pprof/profile</a> 获取 profiling 数据。它有三个常用的参数可以调整：</p>\n<p>-u –url：要访问的 URL，这里只是主机和端口部分<br>-s –suffix：pprof profile 的路径，默认为 /debug/pprof/profile<br>–seconds：要执行 profiling 的时间长度，默认为 30s<br>要生成火焰图，需要事先安装 FlameGraph工具，这个工具的安装很简单，只要把对应的可执行文件放到 $PATH 目录下就行。</p>\n<p>参考资料<br>The Go Blog: Profiling Go Programs<br>go command tutorial: go tool pprof<br>Profiling and optimizing Go web applications<br>Debugging performance issues in Go programs</p>\n"},{"title":"golang代码规范","date":"2019-03-19T03:38:02.000Z","_content":"\n\n# 代码规范\n\n1. package注释\n2. 导出函数注释\n3. 日志语句描述，不要直接打印大结构体【能看出什么样子】\n4. 常用函数指针接收者\n5. 内部函数不要导出\n6. 一行不超过80个字符\n7. 多返回值命名\n8. 导出函数写测试test、bench\n9. 面向接口编程\n\n","source":"_posts/golang/golang代码规范.md","raw":"---\ntitle: golang代码规范\ntags:\n  - 代码规范\ncategories:\n  - go\ndate: 2019-03-19 11:38:02\n---\n\n\n# 代码规范\n\n1. package注释\n2. 导出函数注释\n3. 日志语句描述，不要直接打印大结构体【能看出什么样子】\n4. 常用函数指针接收者\n5. 内部函数不要导出\n6. 一行不超过80个字符\n7. 多返回值命名\n8. 导出函数写测试test、bench\n9. 面向接口编程\n\n","slug":"golang/golang代码规范","published":1,"updated":"2019-03-19T07:50:59.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0d60022wl38yyx13k4k","content":"<h1 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h1><ol>\n<li>package注释</li>\n<li>导出函数注释</li>\n<li>日志语句描述，不要直接打印大结构体【能看出什么样子】</li>\n<li>常用函数指针接收者</li>\n<li>内部函数不要导出</li>\n<li>一行不超过80个字符</li>\n<li>多返回值命名</li>\n<li>导出函数写测试test、bench</li>\n<li>面向接口编程</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h1><ol>\n<li>package注释</li>\n<li>导出函数注释</li>\n<li>日志语句描述，不要直接打印大结构体【能看出什么样子】</li>\n<li>常用函数指针接收者</li>\n<li>内部函数不要导出</li>\n<li>一行不超过80个字符</li>\n<li>多返回值命名</li>\n<li>导出函数写测试test、bench</li>\n<li>面向接口编程</li>\n</ol>\n"},{"title":"golang入门笔记","date":"2019-10-07T13:10:08.000Z","_content":"# GO笔记\n\n需要掌握的点：\n\n- http请求==ok\n- http服务==ok\n- json解析==ok\n- 日志==ok\n- mysql库==ok\n- redis库==ok\n- list和map使用==ok\n- goroutine使用==ok\n- 网络框架使用==ok\n\n\n\n基本库和概念\n\n```\n//*T 可以传给值接收，也可以传给指针接收，所以传入尽量*T,接收也尽量用*T呗\n//使用接口：1.定义接口 2.定义类 3.类实现接口\n//a:=[2]byte{'a','1',2}//byte ascii 1 2等这些是显示不出来的，他和'1','2'不一样，后面ascii码：31 32\n\t\n//传入的所有参数都是interface{}，传出的所有参数也是interface{} 所以出来的时候必须要转为所需要的类型\n```\n\n1. 模块 类概念\n\n#### go的包和文件夹名是一样的（跟文件名关系不大）\n\n> java:com.alibaba.dubbo.xxx\n>\n> c++:namespace std\n\n> go: package 包 \n\n#### 类\n\n##### 继承、封装、多态\n\n```go\ntype Person struct{\n  Book //==组合继承\n  name string\n  age int\n}\n\n//构造函数-一般自己创建构造函数\nfunc NewPerson(){\n  return &Person{Book{},name:\"jack\",age:19}\n}\n\n//类函数外置\nfunc (p *Person)say(){//小写函数 包内访问==封装\n  p.name=\"jack ma\"//指针(引用)接受者和普通\n}\n\n\n//==多态\ntype Flyable interface {\n\tFly()\n}\n\ntype Duck struct{\n\tFlyable//隐式继承接口\n}\ntype Cat struct {\n\t\n}\n\nfunc (t *Duck)Fly()  {\n\tfmt.Println(\"duck flying\")\n}\nfunc (t *Cat)Fly()  {//隐式继承接口\n\tfmt.Println(\"cat flying\")\n}\n```\n\n#### 类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\n\n```\n类型\ntype 类型名字 底层类型\n1.代表类型别名，附带新方法\n2.代表新类型\n\n方法\n包方法-静态方法\n类型方法-实例方法\n```\n\n```go\nfunc main()  {\n\ta:=&A{}\n\tfmt.Println(a,)\n\tfmt.Println(a.Age)\n\tfmt.Println(a.Dd.Birth)//初始化为空对象\n\t//fmt.Println(a.Ee.Gender)//初始化为空指针，拿不到实例的熟悉，所以报错\n\ta.Ee.Efunc() //空指针可以调用方法\n}\ntype A struct{//\n\tB //嵌入B类型所有财产\n\t*C //这里和嵌入C类型区别是，指针类型不能调用其属性\n\tDd D //嵌入D类型的实例，有实例了什么都可以干(嵌入实例和嵌入指针比较多一些)\n\tEe *E //嵌入E类型的指针，有了指针天下无敌(嵌入实例和嵌入指针比较多一些)\n\tName string //本身自带的财产，自己的属性(属性一般是大写，大写导出和c一样私有字段set()get())\n  \tCheckArg func(*context.Context) error //属性的类型的是一个func，可以直接调用a.CheckArg()\n}\ntype B struct{\n\tAge int\n}\ntype C struct{\n\tEmail string\n}\n\nfunc (*C)Cfunc()  {\n\tfmt.Println(\"c func\")\n}\ntype D struct{\n\tBirth string\n}\ntype E struct{\n\tGender bool\n}\n\nfunc (*E)Efunc()  {\n\tfmt.Println(\"e func\")\n}\n```\n\n\n\n#### 可变参数...interface{}，传入的当做[]interface{}切片\n\n```go\nfunc Println(vals ...interface{}){\n  fmt.Println(vals)\n}\n类似：\nfunc Println(vals []interface{}){}\n```\n\n\n\n#### http.Request请求（服务端需要Request,和Response往里面写数据）\n\n包括：\n\n1.第一行\n\n2.请求头\n\n3.请求体（一般post才有）\n\n```\nresp:=DefaultTransport.send(req)//创建一个连接，然后通过这条连接发送req数据，服务端通过这条连接读取req然后构建resp，（也通过resp可以拿到连接的标识，去某个地方获取到这条连接），然后通过连接把resp发送回去\n```\n\n#### http.Response响应（客户端需要Response从里面读数据，读完了就关闭）\n\n包括：\n\n1.第一行数据\n\n2.返回头\n\n3.返回body\n\n4.请求实例http.Request\n\n可拿到底层连接net.Conn(可读可写)\n\n\n\n#### 读写锁\n\n```\nfunc (rw *RWMutex) Lock()　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则lock就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 Lock 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定\nfunc (rw *RWMutex) Unlock()　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误\n\nfunc (rw *RWMutex) RLock() 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景\n\nfunc (rw *RWMutex)RUnlock()　读锁解锁，RUnlock 撤销单次RLock 调用，它对于其它同时存在的读取器则没有效果。若 rw 并没有为读取而锁定，调用 RUnlock 就会引发一个运行时错误(注：这种说法在go1.3版本中是不对的，例如下面这个例子)。\n```\n\n#### context\n\n##### 三种ctx：\n\n```\ntimerCtx:超时的ctx，超过某个时间就close(chan)\ncancelCtx:可取消的ctx，使用close(chan)\nvalueCtx:保存键值的ctx\n```\n\n\n\n\n\n#### 并发、channel、select、sync\n\n##### 超时控制：\n\n```go\ntaskdone:=make(chan struct{},1)\n//1.任务异步做，做完发一个taskdone消息\ngo func() {\n  //dosomething\n  time.Sleep(time.Second)\n  taskdone<- struct {}{}\n}()\n//2.等待taskdone 或者等待超时\nselect {\ncase <-taskdone:\n\tfmt.Println(\"task done\")\ncase <-time.After(time.Millisecond*5000):\n\tfmt.Println(\"task timeout\")\n}\n```\n\n\n\n##### scanf 扫描，一行一行读取数据嘛，或者一个个字符的读取\n\n\n\n#### go buffer\n\n读完之后就丢弃掉数据\n\n```go\nbuf:=bytes.NewBuffer(sli)//buffer读完之后就丢弃掉数据\ndata0,_,_:=buf.ReadRune()\nfmt.Println(string(data0),buf.String())\n```\n\n#### go time\n\n```go\n转为ts:t.unix()\n转为str:t.Format(layout,val)\n转为Time:time.parse(str,layout)\n```\n\n#### json,xml,gob\n\n```go\nvar network bytes.Buffer\nenc:=gob.NewEncoder(&network)//编码到什么地方去\nenc.Encode(map[string]string{\"k1\": \"v1\"})//编码什么东西\nfmt.Println(network.Bytes())\n\ndec:=gob.NewDecoder(&network)//从什么地方解码\nvar m map[string]string\ndec.Decode(&m)//解码到哪里\nfmt.Println(m)\n```\n\n#### 字符串拼接：\n\n```go\na+=\"hello\"\nvar b bytes.Buffer\nfor condition {\n    b.WriteString(str) // 将字符串str写入缓存buffer\n}\n    return b.String()\n```\n\n#### 指针\n\n> **永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。**\n\n```\nwrite(w io.Writer)//没有w *io.Writer这种\n```\n\n\n\n#### 包管理\n\n```\n自己clone\nmkdir -p github.com/user\ngit clone repo\ncd github.com/user/repo\ngo build xxx//缺啥去下载啥\n```\n\n```\ngolang.org/x/net ，其实镜像托管在在 github.com/golang/net\n你可以用 go get github.com/golang/net 之后，到 GOPATH/src 中\nmv github.com/golang/net golang.org/x/net\n\ngolang.org/x/text\ngo get github.com/golang/text\nmv github.com/golang/text golang.org/x/text\n```\n\n```\nmkdir -p $GOPATH/src/golang.org/x/\ncd !$\ngit clone https://github.com/golang/net.git\ngit clone https://github.com/golang/sys.git\ngit clone https://github.com/golang/tools.git\n```\n\n#### http参数解析\n\n```\nr.ParseForm()\nuid :=r.Form.Get(\"uid\")//get post/form-data\nfmt.Println(uid)\nbody,_:=ioutil.ReadAll(r.Body)//json post\nfmt.Println(string(body))\n```\n\n#### error错误处理\n\n```\n//1.最普通\nif err!=nil{\n  return result,err\n}\n//2.recover() panic()\ndefer func(){\n  if err:=recover();err!=nil{\n    //dosomething()\n  }\n}\npanic()\t\n\n//有些错误可以处理，有些选择处理\n\n```\n\n#### go的http请求比Java的http请求\n\n> 有一个[]byte到string的一个转换\n\n#### =默认值和nil\n\n```\nbool      -> false                              \nnumbers -> 0                                 \nstring    -> \"\"      \n\npointers -> nil\nslices -> nil\nmaps -> nil\nchannels -> nil\nfunctions -> nil\ninterfaces -> nil\n\n//可以使用len(slice)==0\n```\n\n#### TCP和UDP\n\n```\n//tcp\nfunc ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error)\nfunc ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.Error)\nfunc DialTCP(net string, laddr, raddr *TCPAddr) (c *TCPConn, err os.Error)\nfunc (l *TCPListener) Accept() (c Conn, err os.Error)\nfunc (c *TCPConn) Write(b []byte) (n int, err os.Error)\nfunc (c *TCPConn) Read(b []byte) (n int, err os.Error)\n\n//udp\nfunc ResolveUDPAddr(net, addr string) (*UDPAddr, os.Error)\nfunc DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err os.Error)\nfunc ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err os.Error)\nfunc (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err os.Error\nfunc (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err os.Error)\n\n//通用Conn, PacketConn and Listener\nnet.Dial(\"tcp\",addr)\n```\n\n```go\nfunc main() {\n  encoder := json.NewEncoder(conn)\n  decoder := json.NewDecoder(conn)\n  for n := 0; n < 10; n++ {\n    encoder.Encode(person)//类似于write\n    var newPerson Person\n    decoder.Decode(&newPerson)//类似于read\n    fmt.Println(newPerson.String())\n  }\n}\n```\n\n```go\n/**\n* Base64\n*/\npackage main\nimport (\n\"bytes\"\n\"encoding/base64\"\n\"fmt\"\n)\nfunc main() {\n  eightBitData := []byte{1, 2, 3, 4, 5, 6, 7, 8}\n  bb := &bytes.Buffer{}\n  encoder := base64.NewEncoder(base64.StdEncoding, bb)//转为base64字符串\n  encoder.Write(eightBitData)\n  encoder.Close()\n  fmt.Println(bb)\n  dbuf := make([]byte, 12)\n  decoder := base64.NewDecoder(base64.StdEncoding, bb)\n  decoder.Read(dbuf)\n  for _, ch := range dbuf {\n  \tfmt.Print(ch)\n  }\n}\n```\n\n\n\n#### #项目分层\n\n\n\n\n\n#### 笔记\n\n```\nselect{}//阻塞\n\n```\n\n\n\n```\nSERVE_HTTP=\":3030\" go run 43.go\naddress = os.Getenv(\"SERVE_HTTP\")//直接从上面拿\n```\n\n\n\n# 类型\n\n```\nnil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值\n```\n\n\n\n# 注意注意\n\ngo 修改值全部用指针\n\n切片，map先make，再取地址比较好\n\n\n\n问题代码：\n\n```\n问题代码\n//下面是一个坑\n\t//for _, v := range *userInfos {\n\t//\tuserInfoTempMap[v.User.ID] = &v\n\t//}\n\n```\n\n\n\n```\nfunc fillUserInfo(queryUids *[]int64, userInfoTempMap map[int64]*model.RUserInfo, selfU int64) {\n\tif queryUids == nil || len(*queryUids) == 0 {\n\t\treturn\n\t}\n\t//获取用户信息\n\tuserInfos, err := manager.MGetUserInfo(queryUids, selfU)\n\tif err != nil || userInfos == nil {\n\t\tlog.Errorf(\"get user info error:|%#v|\", err)\n\t\treturn\n\t}\n\t//创建临时map给后面直接使用\n\tfor i:=0;i<len(*userInfos);i++{\n\t\tuserInfoTempMap[(*userInfos)[i].User.ID] = &(*userInfos)[i]\n\t}\n\tfor _, v := range *userInfos {\n\t\tuserInfoTempMap[v.User.ID] = &v\n\t}\n\tfmt.Println(userInfoTempMap)\n}\n```\n\n","source":"_posts/golang/golang入门笔记.md","raw":"---\ntitle: golang入门笔记\ntags:\n  - go\ncategories:\n  - go\ndate: 2019-10-07 21:10:08\n---\n# GO笔记\n\n需要掌握的点：\n\n- http请求==ok\n- http服务==ok\n- json解析==ok\n- 日志==ok\n- mysql库==ok\n- redis库==ok\n- list和map使用==ok\n- goroutine使用==ok\n- 网络框架使用==ok\n\n\n\n基本库和概念\n\n```\n//*T 可以传给值接收，也可以传给指针接收，所以传入尽量*T,接收也尽量用*T呗\n//使用接口：1.定义接口 2.定义类 3.类实现接口\n//a:=[2]byte{'a','1',2}//byte ascii 1 2等这些是显示不出来的，他和'1','2'不一样，后面ascii码：31 32\n\t\n//传入的所有参数都是interface{}，传出的所有参数也是interface{} 所以出来的时候必须要转为所需要的类型\n```\n\n1. 模块 类概念\n\n#### go的包和文件夹名是一样的（跟文件名关系不大）\n\n> java:com.alibaba.dubbo.xxx\n>\n> c++:namespace std\n\n> go: package 包 \n\n#### 类\n\n##### 继承、封装、多态\n\n```go\ntype Person struct{\n  Book //==组合继承\n  name string\n  age int\n}\n\n//构造函数-一般自己创建构造函数\nfunc NewPerson(){\n  return &Person{Book{},name:\"jack\",age:19}\n}\n\n//类函数外置\nfunc (p *Person)say(){//小写函数 包内访问==封装\n  p.name=\"jack ma\"//指针(引用)接受者和普通\n}\n\n\n//==多态\ntype Flyable interface {\n\tFly()\n}\n\ntype Duck struct{\n\tFlyable//隐式继承接口\n}\ntype Cat struct {\n\t\n}\n\nfunc (t *Duck)Fly()  {\n\tfmt.Println(\"duck flying\")\n}\nfunc (t *Cat)Fly()  {//隐式继承接口\n\tfmt.Println(\"cat flying\")\n}\n```\n\n#### 类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\n\n```\n类型\ntype 类型名字 底层类型\n1.代表类型别名，附带新方法\n2.代表新类型\n\n方法\n包方法-静态方法\n类型方法-实例方法\n```\n\n```go\nfunc main()  {\n\ta:=&A{}\n\tfmt.Println(a,)\n\tfmt.Println(a.Age)\n\tfmt.Println(a.Dd.Birth)//初始化为空对象\n\t//fmt.Println(a.Ee.Gender)//初始化为空指针，拿不到实例的熟悉，所以报错\n\ta.Ee.Efunc() //空指针可以调用方法\n}\ntype A struct{//\n\tB //嵌入B类型所有财产\n\t*C //这里和嵌入C类型区别是，指针类型不能调用其属性\n\tDd D //嵌入D类型的实例，有实例了什么都可以干(嵌入实例和嵌入指针比较多一些)\n\tEe *E //嵌入E类型的指针，有了指针天下无敌(嵌入实例和嵌入指针比较多一些)\n\tName string //本身自带的财产，自己的属性(属性一般是大写，大写导出和c一样私有字段set()get())\n  \tCheckArg func(*context.Context) error //属性的类型的是一个func，可以直接调用a.CheckArg()\n}\ntype B struct{\n\tAge int\n}\ntype C struct{\n\tEmail string\n}\n\nfunc (*C)Cfunc()  {\n\tfmt.Println(\"c func\")\n}\ntype D struct{\n\tBirth string\n}\ntype E struct{\n\tGender bool\n}\n\nfunc (*E)Efunc()  {\n\tfmt.Println(\"e func\")\n}\n```\n\n\n\n#### 可变参数...interface{}，传入的当做[]interface{}切片\n\n```go\nfunc Println(vals ...interface{}){\n  fmt.Println(vals)\n}\n类似：\nfunc Println(vals []interface{}){}\n```\n\n\n\n#### http.Request请求（服务端需要Request,和Response往里面写数据）\n\n包括：\n\n1.第一行\n\n2.请求头\n\n3.请求体（一般post才有）\n\n```\nresp:=DefaultTransport.send(req)//创建一个连接，然后通过这条连接发送req数据，服务端通过这条连接读取req然后构建resp，（也通过resp可以拿到连接的标识，去某个地方获取到这条连接），然后通过连接把resp发送回去\n```\n\n#### http.Response响应（客户端需要Response从里面读数据，读完了就关闭）\n\n包括：\n\n1.第一行数据\n\n2.返回头\n\n3.返回body\n\n4.请求实例http.Request\n\n可拿到底层连接net.Conn(可读可写)\n\n\n\n#### 读写锁\n\n```\nfunc (rw *RWMutex) Lock()　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则lock就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 Lock 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定\nfunc (rw *RWMutex) Unlock()　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误\n\nfunc (rw *RWMutex) RLock() 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景\n\nfunc (rw *RWMutex)RUnlock()　读锁解锁，RUnlock 撤销单次RLock 调用，它对于其它同时存在的读取器则没有效果。若 rw 并没有为读取而锁定，调用 RUnlock 就会引发一个运行时错误(注：这种说法在go1.3版本中是不对的，例如下面这个例子)。\n```\n\n#### context\n\n##### 三种ctx：\n\n```\ntimerCtx:超时的ctx，超过某个时间就close(chan)\ncancelCtx:可取消的ctx，使用close(chan)\nvalueCtx:保存键值的ctx\n```\n\n\n\n\n\n#### 并发、channel、select、sync\n\n##### 超时控制：\n\n```go\ntaskdone:=make(chan struct{},1)\n//1.任务异步做，做完发一个taskdone消息\ngo func() {\n  //dosomething\n  time.Sleep(time.Second)\n  taskdone<- struct {}{}\n}()\n//2.等待taskdone 或者等待超时\nselect {\ncase <-taskdone:\n\tfmt.Println(\"task done\")\ncase <-time.After(time.Millisecond*5000):\n\tfmt.Println(\"task timeout\")\n}\n```\n\n\n\n##### scanf 扫描，一行一行读取数据嘛，或者一个个字符的读取\n\n\n\n#### go buffer\n\n读完之后就丢弃掉数据\n\n```go\nbuf:=bytes.NewBuffer(sli)//buffer读完之后就丢弃掉数据\ndata0,_,_:=buf.ReadRune()\nfmt.Println(string(data0),buf.String())\n```\n\n#### go time\n\n```go\n转为ts:t.unix()\n转为str:t.Format(layout,val)\n转为Time:time.parse(str,layout)\n```\n\n#### json,xml,gob\n\n```go\nvar network bytes.Buffer\nenc:=gob.NewEncoder(&network)//编码到什么地方去\nenc.Encode(map[string]string{\"k1\": \"v1\"})//编码什么东西\nfmt.Println(network.Bytes())\n\ndec:=gob.NewDecoder(&network)//从什么地方解码\nvar m map[string]string\ndec.Decode(&m)//解码到哪里\nfmt.Println(m)\n```\n\n#### 字符串拼接：\n\n```go\na+=\"hello\"\nvar b bytes.Buffer\nfor condition {\n    b.WriteString(str) // 将字符串str写入缓存buffer\n}\n    return b.String()\n```\n\n#### 指针\n\n> **永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。**\n\n```\nwrite(w io.Writer)//没有w *io.Writer这种\n```\n\n\n\n#### 包管理\n\n```\n自己clone\nmkdir -p github.com/user\ngit clone repo\ncd github.com/user/repo\ngo build xxx//缺啥去下载啥\n```\n\n```\ngolang.org/x/net ，其实镜像托管在在 github.com/golang/net\n你可以用 go get github.com/golang/net 之后，到 GOPATH/src 中\nmv github.com/golang/net golang.org/x/net\n\ngolang.org/x/text\ngo get github.com/golang/text\nmv github.com/golang/text golang.org/x/text\n```\n\n```\nmkdir -p $GOPATH/src/golang.org/x/\ncd !$\ngit clone https://github.com/golang/net.git\ngit clone https://github.com/golang/sys.git\ngit clone https://github.com/golang/tools.git\n```\n\n#### http参数解析\n\n```\nr.ParseForm()\nuid :=r.Form.Get(\"uid\")//get post/form-data\nfmt.Println(uid)\nbody,_:=ioutil.ReadAll(r.Body)//json post\nfmt.Println(string(body))\n```\n\n#### error错误处理\n\n```\n//1.最普通\nif err!=nil{\n  return result,err\n}\n//2.recover() panic()\ndefer func(){\n  if err:=recover();err!=nil{\n    //dosomething()\n  }\n}\npanic()\t\n\n//有些错误可以处理，有些选择处理\n\n```\n\n#### go的http请求比Java的http请求\n\n> 有一个[]byte到string的一个转换\n\n#### =默认值和nil\n\n```\nbool      -> false                              \nnumbers -> 0                                 \nstring    -> \"\"      \n\npointers -> nil\nslices -> nil\nmaps -> nil\nchannels -> nil\nfunctions -> nil\ninterfaces -> nil\n\n//可以使用len(slice)==0\n```\n\n#### TCP和UDP\n\n```\n//tcp\nfunc ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error)\nfunc ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.Error)\nfunc DialTCP(net string, laddr, raddr *TCPAddr) (c *TCPConn, err os.Error)\nfunc (l *TCPListener) Accept() (c Conn, err os.Error)\nfunc (c *TCPConn) Write(b []byte) (n int, err os.Error)\nfunc (c *TCPConn) Read(b []byte) (n int, err os.Error)\n\n//udp\nfunc ResolveUDPAddr(net, addr string) (*UDPAddr, os.Error)\nfunc DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err os.Error)\nfunc ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err os.Error)\nfunc (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err os.Error\nfunc (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err os.Error)\n\n//通用Conn, PacketConn and Listener\nnet.Dial(\"tcp\",addr)\n```\n\n```go\nfunc main() {\n  encoder := json.NewEncoder(conn)\n  decoder := json.NewDecoder(conn)\n  for n := 0; n < 10; n++ {\n    encoder.Encode(person)//类似于write\n    var newPerson Person\n    decoder.Decode(&newPerson)//类似于read\n    fmt.Println(newPerson.String())\n  }\n}\n```\n\n```go\n/**\n* Base64\n*/\npackage main\nimport (\n\"bytes\"\n\"encoding/base64\"\n\"fmt\"\n)\nfunc main() {\n  eightBitData := []byte{1, 2, 3, 4, 5, 6, 7, 8}\n  bb := &bytes.Buffer{}\n  encoder := base64.NewEncoder(base64.StdEncoding, bb)//转为base64字符串\n  encoder.Write(eightBitData)\n  encoder.Close()\n  fmt.Println(bb)\n  dbuf := make([]byte, 12)\n  decoder := base64.NewDecoder(base64.StdEncoding, bb)\n  decoder.Read(dbuf)\n  for _, ch := range dbuf {\n  \tfmt.Print(ch)\n  }\n}\n```\n\n\n\n#### #项目分层\n\n\n\n\n\n#### 笔记\n\n```\nselect{}//阻塞\n\n```\n\n\n\n```\nSERVE_HTTP=\":3030\" go run 43.go\naddress = os.Getenv(\"SERVE_HTTP\")//直接从上面拿\n```\n\n\n\n# 类型\n\n```\nnil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值\n```\n\n\n\n# 注意注意\n\ngo 修改值全部用指针\n\n切片，map先make，再取地址比较好\n\n\n\n问题代码：\n\n```\n问题代码\n//下面是一个坑\n\t//for _, v := range *userInfos {\n\t//\tuserInfoTempMap[v.User.ID] = &v\n\t//}\n\n```\n\n\n\n```\nfunc fillUserInfo(queryUids *[]int64, userInfoTempMap map[int64]*model.RUserInfo, selfU int64) {\n\tif queryUids == nil || len(*queryUids) == 0 {\n\t\treturn\n\t}\n\t//获取用户信息\n\tuserInfos, err := manager.MGetUserInfo(queryUids, selfU)\n\tif err != nil || userInfos == nil {\n\t\tlog.Errorf(\"get user info error:|%#v|\", err)\n\t\treturn\n\t}\n\t//创建临时map给后面直接使用\n\tfor i:=0;i<len(*userInfos);i++{\n\t\tuserInfoTempMap[(*userInfos)[i].User.ID] = &(*userInfos)[i]\n\t}\n\tfor _, v := range *userInfos {\n\t\tuserInfoTempMap[v.User.ID] = &v\n\t}\n\tfmt.Println(userInfoTempMap)\n}\n```\n\n","slug":"golang/golang入门笔记","published":1,"updated":"2019-10-07T13:10:31.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0d70025wl38f0lz0j44","content":"<h1 id=\"GO笔记\"><a href=\"#GO笔记\" class=\"headerlink\" title=\"GO笔记\"></a>GO笔记</h1><p>需要掌握的点：</p>\n<ul>\n<li>http请求==ok</li>\n<li>http服务==ok</li>\n<li>json解析==ok</li>\n<li>日志==ok</li>\n<li>mysql库==ok</li>\n<li>redis库==ok</li>\n<li>list和map使用==ok</li>\n<li>goroutine使用==ok</li>\n<li>网络框架使用==ok</li>\n</ul>\n<p>基本库和概念</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//*T 可以传给值接收，也可以传给指针接收，所以传入尽量*T,接收也尽量用*T呗</span><br><span class=\"line\">//使用接口：1.定义接口 2.定义类 3.类实现接口</span><br><span class=\"line\">//a:=[2]byte&#123;&apos;a&apos;,&apos;1&apos;,2&#125;//byte ascii 1 2等这些是显示不出来的，他和&apos;1&apos;,&apos;2&apos;不一样，后面ascii码：31 32</span><br><span class=\"line\">\t</span><br><span class=\"line\">//传入的所有参数都是interface&#123;&#125;，传出的所有参数也是interface&#123;&#125; 所以出来的时候必须要转为所需要的类型</span><br></pre></td></tr></table></figure>\n<ol>\n<li>模块 类概念</li>\n</ol>\n<h4 id=\"go的包和文件夹名是一样的（跟文件名关系不大）\"><a href=\"#go的包和文件夹名是一样的（跟文件名关系不大）\" class=\"headerlink\" title=\"go的包和文件夹名是一样的（跟文件名关系不大）\"></a>go的包和文件夹名是一样的（跟文件名关系不大）</h4><blockquote>\n<p>java:com.alibaba.dubbo.xxx</p>\n<p>c++:namespace std</p>\n</blockquote>\n<blockquote>\n<p>go: package 包 </p>\n</blockquote>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><h5 id=\"继承、封装、多态\"><a href=\"#继承、封装、多态\" class=\"headerlink\" title=\"继承、封装、多态\"></a>继承、封装、多态</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Book <span class=\"comment\">//==组合继承</span></span><br><span class=\"line\">  name <span class=\"keyword\">string</span></span><br><span class=\"line\">  age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造函数-一般自己创建构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPerson</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Person&#123;Book&#123;&#125;,name:<span class=\"string\">\"jack\"</span>,age:<span class=\"number\">19</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类函数外置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span><span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//小写函数 包内访问==封装</span></span><br><span class=\"line\">  p.name=<span class=\"string\">\"jack ma\"</span><span class=\"comment\">//指针(引用)接受者和普通</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==多态</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Flyable <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tFly()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Duck <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tFlyable<span class=\"comment\">//隐式继承接口</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Duck)</span><span class=\"title\">Fly</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"duck flying\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Cat)</span><span class=\"title\">Fly</span><span class=\"params\">()</span></span>  &#123;<span class=\"comment\">//隐式继承接口</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"cat flying\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\"><a href=\"#类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\" class=\"headerlink\" title=\"类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\"></a>类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型</span><br><span class=\"line\">type 类型名字 底层类型</span><br><span class=\"line\">1.代表类型别名，附带新方法</span><br><span class=\"line\">2.代表新类型</span><br><span class=\"line\"></span><br><span class=\"line\">方法</span><br><span class=\"line\">包方法-静态方法</span><br><span class=\"line\">类型方法-实例方法</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\ta:=&amp;A&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(a,)</span><br><span class=\"line\">\tfmt.Println(a.Age)</span><br><span class=\"line\">\tfmt.Println(a.Dd.Birth)<span class=\"comment\">//初始化为空对象</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(a.Ee.Gender)//初始化为空指针，拿不到实例的熟悉，所以报错</span></span><br><span class=\"line\">\ta.Ee.Efunc() <span class=\"comment\">//空指针可以调用方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A <span class=\"keyword\">struct</span>&#123;<span class=\"comment\">//</span></span><br><span class=\"line\">\tB <span class=\"comment\">//嵌入B类型所有财产</span></span><br><span class=\"line\">\t*C <span class=\"comment\">//这里和嵌入C类型区别是，指针类型不能调用其属性</span></span><br><span class=\"line\">\tDd D <span class=\"comment\">//嵌入D类型的实例，有实例了什么都可以干(嵌入实例和嵌入指针比较多一些)</span></span><br><span class=\"line\">\tEe *E <span class=\"comment\">//嵌入E类型的指针，有了指针天下无敌(嵌入实例和嵌入指针比较多一些)</span></span><br><span class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"comment\">//本身自带的财产，自己的属性(属性一般是大写，大写导出和c一样私有字段set()get())</span></span><br><span class=\"line\">  \tCheckArg <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*context.Context)</span> <span class=\"title\">error</span> //属性的类型的是一个<span class=\"title\">func</span>，可以直接调用<span class=\"title\">a</span>.<span class=\"title\">CheckArg</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">B</span> <span class=\"title\">struct</span></span>&#123;</span><br><span class=\"line\">\tAge <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> C <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tEmail <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*C)</span><span class=\"title\">Cfunc</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"c func\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> D <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tBirth <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> E <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tGender <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*E)</span><span class=\"title\">Efunc</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"e func\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"可变参数…interface-，传入的当做-interface-切片\"><a href=\"#可变参数…interface-，传入的当做-interface-切片\" class=\"headerlink\" title=\"可变参数…interface{}，传入的当做[]interface{}切片\"></a>可变参数…interface{}，传入的当做[]interface{}切片</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Println</span><span class=\"params\">(vals ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">  fmt.Println(vals)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">类似：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Println</span><span class=\"params\">(vals []<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"http-Request请求（服务端需要Request-和Response往里面写数据）\"><a href=\"#http-Request请求（服务端需要Request-和Response往里面写数据）\" class=\"headerlink\" title=\"http.Request请求（服务端需要Request,和Response往里面写数据）\"></a>http.Request请求（服务端需要Request,和Response往里面写数据）</h4><p>包括：</p>\n<p>1.第一行</p>\n<p>2.请求头</p>\n<p>3.请求体（一般post才有）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp:=DefaultTransport.send(req)//创建一个连接，然后通过这条连接发送req数据，服务端通过这条连接读取req然后构建resp，（也通过resp可以拿到连接的标识，去某个地方获取到这条连接），然后通过连接把resp发送回去</span><br></pre></td></tr></table></figure>\n<h4 id=\"http-Response响应（客户端需要Response从里面读数据，读完了就关闭）\"><a href=\"#http-Response响应（客户端需要Response从里面读数据，读完了就关闭）\" class=\"headerlink\" title=\"http.Response响应（客户端需要Response从里面读数据，读完了就关闭）\"></a>http.Response响应（客户端需要Response从里面读数据，读完了就关闭）</h4><p>包括：</p>\n<p>1.第一行数据</p>\n<p>2.返回头</p>\n<p>3.返回body</p>\n<p>4.请求实例http.Request</p>\n<p>可拿到底层连接net.Conn(可读可写)</p>\n<h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (rw *RWMutex) Lock()　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则lock就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 Lock 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定</span><br><span class=\"line\">func (rw *RWMutex) Unlock()　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误</span><br><span class=\"line\"></span><br><span class=\"line\">func (rw *RWMutex) RLock() 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景</span><br><span class=\"line\"></span><br><span class=\"line\">func (rw *RWMutex)RUnlock()　读锁解锁，RUnlock 撤销单次RLock 调用，它对于其它同时存在的读取器则没有效果。若 rw 并没有为读取而锁定，调用 RUnlock 就会引发一个运行时错误(注：这种说法在go1.3版本中是不对的，例如下面这个例子)。</span><br></pre></td></tr></table></figure>\n<h4 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h4><h5 id=\"三种ctx：\"><a href=\"#三种ctx：\" class=\"headerlink\" title=\"三种ctx：\"></a>三种ctx：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timerCtx:超时的ctx，超过某个时间就close(chan)</span><br><span class=\"line\">cancelCtx:可取消的ctx，使用close(chan)</span><br><span class=\"line\">valueCtx:保存键值的ctx</span><br></pre></td></tr></table></figure>\n<h4 id=\"并发、channel、select、sync\"><a href=\"#并发、channel、select、sync\" class=\"headerlink\" title=\"并发、channel、select、sync\"></a>并发、channel、select、sync</h4><h5 id=\"超时控制：\"><a href=\"#超时控制：\" class=\"headerlink\" title=\"超时控制：\"></a>超时控制：</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskdone:=<span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//1.任务异步做，做完发一个taskdone消息</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//dosomething</span></span><br><span class=\"line\">  time.Sleep(time.Second)</span><br><span class=\"line\">  taskdone&lt;- <span class=\"keyword\">struct</span> &#123;&#125;&#123;&#125;</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//2.等待taskdone 或者等待超时</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-taskdone:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"task done\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-time.After(time.Millisecond*<span class=\"number\">5000</span>):</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"task timeout\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"scanf-扫描，一行一行读取数据嘛，或者一个个字符的读取\"><a href=\"#scanf-扫描，一行一行读取数据嘛，或者一个个字符的读取\" class=\"headerlink\" title=\"scanf 扫描，一行一行读取数据嘛，或者一个个字符的读取\"></a>scanf 扫描，一行一行读取数据嘛，或者一个个字符的读取</h5><h4 id=\"go-buffer\"><a href=\"#go-buffer\" class=\"headerlink\" title=\"go buffer\"></a>go buffer</h4><p>读完之后就丢弃掉数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf:=bytes.NewBuffer(sli)<span class=\"comment\">//buffer读完之后就丢弃掉数据</span></span><br><span class=\"line\">data0,_,_:=buf.ReadRune()</span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(data0),buf.String())</span><br></pre></td></tr></table></figure>\n<h4 id=\"go-time\"><a href=\"#go-time\" class=\"headerlink\" title=\"go time\"></a>go time</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转为ts:t.unix()</span><br><span class=\"line\">转为str:t.Format(layout,val)</span><br><span class=\"line\">转为Time:time.parse(str,layout)</span><br></pre></td></tr></table></figure>\n<h4 id=\"json-xml-gob\"><a href=\"#json-xml-gob\" class=\"headerlink\" title=\"json,xml,gob\"></a>json,xml,gob</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> network bytes.Buffer</span><br><span class=\"line\">enc:=gob.NewEncoder(&amp;network)<span class=\"comment\">//编码到什么地方去</span></span><br><span class=\"line\">enc.Encode(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"k1\"</span>: <span class=\"string\">\"v1\"</span>&#125;)<span class=\"comment\">//编码什么东西</span></span><br><span class=\"line\">fmt.Println(network.Bytes())</span><br><span class=\"line\"></span><br><span class=\"line\">dec:=gob.NewDecoder(&amp;network)<span class=\"comment\">//从什么地方解码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\">dec.Decode(&amp;m)<span class=\"comment\">//解码到哪里</span></span><br><span class=\"line\">fmt.Println(m)</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串拼接：\"><a href=\"#字符串拼接：\" class=\"headerlink\" title=\"字符串拼接：\"></a>字符串拼接：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a+=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b bytes.Buffer</span><br><span class=\"line\"><span class=\"keyword\">for</span> condition &#123;</span><br><span class=\"line\">    b.WriteString(str) <span class=\"comment\">// 将字符串str写入缓存buffer</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.String()</span><br></pre></td></tr></table></figure>\n<h4 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h4><blockquote>\n<p><strong>永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">write(w io.Writer)//没有w *io.Writer这种</span><br></pre></td></tr></table></figure>\n<h4 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自己clone</span><br><span class=\"line\">mkdir -p github.com/user</span><br><span class=\"line\">git clone repo</span><br><span class=\"line\">cd github.com/user/repo</span><br><span class=\"line\">go build xxx//缺啥去下载啥</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">golang.org/x/net ，其实镜像托管在在 github.com/golang/net</span><br><span class=\"line\">你可以用 go get github.com/golang/net 之后，到 GOPATH/src 中</span><br><span class=\"line\">mv github.com/golang/net golang.org/x/net</span><br><span class=\"line\"></span><br><span class=\"line\">golang.org/x/text</span><br><span class=\"line\">go get github.com/golang/text</span><br><span class=\"line\">mv github.com/golang/text golang.org/x/text</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $GOPATH/src/golang.org/x/</span><br><span class=\"line\">cd !$</span><br><span class=\"line\">git clone https://github.com/golang/net.git</span><br><span class=\"line\">git clone https://github.com/golang/sys.git</span><br><span class=\"line\">git clone https://github.com/golang/tools.git</span><br></pre></td></tr></table></figure>\n<h4 id=\"http参数解析\"><a href=\"#http参数解析\" class=\"headerlink\" title=\"http参数解析\"></a>http参数解析</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.ParseForm()</span><br><span class=\"line\">uid :=r.Form.Get(&quot;uid&quot;)//get post/form-data</span><br><span class=\"line\">fmt.Println(uid)</span><br><span class=\"line\">body,_:=ioutil.ReadAll(r.Body)//json post</span><br><span class=\"line\">fmt.Println(string(body))</span><br></pre></td></tr></table></figure>\n<h4 id=\"error错误处理\"><a href=\"#error错误处理\" class=\"headerlink\" title=\"error错误处理\"></a>error错误处理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.最普通</span><br><span class=\"line\">if err!=nil&#123;</span><br><span class=\"line\">  return result,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2.recover() panic()</span><br><span class=\"line\">defer func()&#123;</span><br><span class=\"line\">  if err:=recover();err!=nil&#123;</span><br><span class=\"line\">    //dosomething()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">panic()\t</span><br><span class=\"line\"></span><br><span class=\"line\">//有些错误可以处理，有些选择处理</span><br></pre></td></tr></table></figure>\n<h4 id=\"go的http请求比Java的http请求\"><a href=\"#go的http请求比Java的http请求\" class=\"headerlink\" title=\"go的http请求比Java的http请求\"></a>go的http请求比Java的http请求</h4><blockquote>\n<p>有一个[]byte到string的一个转换</p>\n</blockquote>\n<h4 id=\"默认值和nil\"><a href=\"#默认值和nil\" class=\"headerlink\" title=\"=默认值和nil\"></a>=默认值和nil</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool      -&gt; false                              </span><br><span class=\"line\">numbers -&gt; 0                                 </span><br><span class=\"line\">string    -&gt; &quot;&quot;      </span><br><span class=\"line\"></span><br><span class=\"line\">pointers -&gt; nil</span><br><span class=\"line\">slices -&gt; nil</span><br><span class=\"line\">maps -&gt; nil</span><br><span class=\"line\">channels -&gt; nil</span><br><span class=\"line\">functions -&gt; nil</span><br><span class=\"line\">interfaces -&gt; nil</span><br><span class=\"line\"></span><br><span class=\"line\">//可以使用len(slice)==0</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP和UDP\"><a href=\"#TCP和UDP\" class=\"headerlink\" title=\"TCP和UDP\"></a>TCP和UDP</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//tcp</span><br><span class=\"line\">func ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error)</span><br><span class=\"line\">func ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.Error)</span><br><span class=\"line\">func DialTCP(net string, laddr, raddr *TCPAddr) (c *TCPConn, err os.Error)</span><br><span class=\"line\">func (l *TCPListener) Accept() (c Conn, err os.Error)</span><br><span class=\"line\">func (c *TCPConn) Write(b []byte) (n int, err os.Error)</span><br><span class=\"line\">func (c *TCPConn) Read(b []byte) (n int, err os.Error)</span><br><span class=\"line\"></span><br><span class=\"line\">//udp</span><br><span class=\"line\">func ResolveUDPAddr(net, addr string) (*UDPAddr, os.Error)</span><br><span class=\"line\">func DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err os.Error)</span><br><span class=\"line\">func ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err os.Error)</span><br><span class=\"line\">func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err os.Error</span><br><span class=\"line\">func (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err os.Error)</span><br><span class=\"line\"></span><br><span class=\"line\">//通用Conn, PacketConn and Listener</span><br><span class=\"line\">net.Dial(&quot;tcp&quot;,addr)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  encoder := json.NewEncoder(conn)</span><br><span class=\"line\">  decoder := json.NewDecoder(conn)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; <span class=\"number\">10</span>; n++ &#123;</span><br><span class=\"line\">    encoder.Encode(person)<span class=\"comment\">//类似于write</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPerson Person</span><br><span class=\"line\">    decoder.Decode(&amp;newPerson)<span class=\"comment\">//类似于read</span></span><br><span class=\"line\">    fmt.Println(newPerson.String())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Base64</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"><span class=\"string\">\"bytes\"</span></span><br><span class=\"line\"><span class=\"string\">\"encoding/base64\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  eightBitData := []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">  bb := &amp;bytes.Buffer&#123;&#125;</span><br><span class=\"line\">  encoder := base64.NewEncoder(base64.StdEncoding, bb)<span class=\"comment\">//转为base64字符串</span></span><br><span class=\"line\">  encoder.Write(eightBitData)</span><br><span class=\"line\">  encoder.Close()</span><br><span class=\"line\">  fmt.Println(bb)</span><br><span class=\"line\">  dbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">  decoder := base64.NewDecoder(base64.StdEncoding, bb)</span><br><span class=\"line\">  decoder.Read(dbuf)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, ch := <span class=\"keyword\">range</span> dbuf &#123;</span><br><span class=\"line\">  \tfmt.Print(ch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"项目分层\"><a href=\"#项目分层\" class=\"headerlink\" title=\"#项目分层\"></a>#项目分层</h4><h4 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select&#123;&#125;//阻塞</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SERVE_HTTP=&quot;:3030&quot; go run 43.go</span><br><span class=\"line\">address = os.Getenv(&quot;SERVE_HTTP&quot;)//直接从上面拿</span><br></pre></td></tr></table></figure>\n<h1 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值</span><br></pre></td></tr></table></figure>\n<h1 id=\"注意注意\"><a href=\"#注意注意\" class=\"headerlink\" title=\"注意注意\"></a>注意注意</h1><p>go 修改值全部用指针</p>\n<p>切片，map先make，再取地址比较好</p>\n<p>问题代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">问题代码</span><br><span class=\"line\">//下面是一个坑</span><br><span class=\"line\">\t//for _, v := range *userInfos &#123;</span><br><span class=\"line\">\t//\tuserInfoTempMap[v.User.ID] = &amp;v</span><br><span class=\"line\">\t//&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func fillUserInfo(queryUids *[]int64, userInfoTempMap map[int64]*model.RUserInfo, selfU int64) &#123;</span><br><span class=\"line\">\tif queryUids == nil || len(*queryUids) == 0 &#123;</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//获取用户信息</span><br><span class=\"line\">\tuserInfos, err := manager.MGetUserInfo(queryUids, selfU)</span><br><span class=\"line\">\tif err != nil || userInfos == nil &#123;</span><br><span class=\"line\">\t\tlog.Errorf(&quot;get user info error:|%#v|&quot;, err)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//创建临时map给后面直接使用</span><br><span class=\"line\">\tfor i:=0;i&lt;len(*userInfos);i++&#123;</span><br><span class=\"line\">\t\tuserInfoTempMap[(*userInfos)[i].User.ID] = &amp;(*userInfos)[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor _, v := range *userInfos &#123;</span><br><span class=\"line\">\t\tuserInfoTempMap[v.User.ID] = &amp;v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(userInfoTempMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GO笔记\"><a href=\"#GO笔记\" class=\"headerlink\" title=\"GO笔记\"></a>GO笔记</h1><p>需要掌握的点：</p>\n<ul>\n<li>http请求==ok</li>\n<li>http服务==ok</li>\n<li>json解析==ok</li>\n<li>日志==ok</li>\n<li>mysql库==ok</li>\n<li>redis库==ok</li>\n<li>list和map使用==ok</li>\n<li>goroutine使用==ok</li>\n<li>网络框架使用==ok</li>\n</ul>\n<p>基本库和概念</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//*T 可以传给值接收，也可以传给指针接收，所以传入尽量*T,接收也尽量用*T呗</span><br><span class=\"line\">//使用接口：1.定义接口 2.定义类 3.类实现接口</span><br><span class=\"line\">//a:=[2]byte&#123;&apos;a&apos;,&apos;1&apos;,2&#125;//byte ascii 1 2等这些是显示不出来的，他和&apos;1&apos;,&apos;2&apos;不一样，后面ascii码：31 32</span><br><span class=\"line\">\t</span><br><span class=\"line\">//传入的所有参数都是interface&#123;&#125;，传出的所有参数也是interface&#123;&#125; 所以出来的时候必须要转为所需要的类型</span><br></pre></td></tr></table></figure>\n<ol>\n<li>模块 类概念</li>\n</ol>\n<h4 id=\"go的包和文件夹名是一样的（跟文件名关系不大）\"><a href=\"#go的包和文件夹名是一样的（跟文件名关系不大）\" class=\"headerlink\" title=\"go的包和文件夹名是一样的（跟文件名关系不大）\"></a>go的包和文件夹名是一样的（跟文件名关系不大）</h4><blockquote>\n<p>java:com.alibaba.dubbo.xxx</p>\n<p>c++:namespace std</p>\n</blockquote>\n<blockquote>\n<p>go: package 包 </p>\n</blockquote>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><h5 id=\"继承、封装、多态\"><a href=\"#继承、封装、多态\" class=\"headerlink\" title=\"继承、封装、多态\"></a>继承、封装、多态</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Book <span class=\"comment\">//==组合继承</span></span><br><span class=\"line\">  name <span class=\"keyword\">string</span></span><br><span class=\"line\">  age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造函数-一般自己创建构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPerson</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Person&#123;Book&#123;&#125;,name:<span class=\"string\">\"jack\"</span>,age:<span class=\"number\">19</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类函数外置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span><span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//小写函数 包内访问==封装</span></span><br><span class=\"line\">  p.name=<span class=\"string\">\"jack ma\"</span><span class=\"comment\">//指针(引用)接受者和普通</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==多态</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Flyable <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tFly()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Duck <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tFlyable<span class=\"comment\">//隐式继承接口</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Duck)</span><span class=\"title\">Fly</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"duck flying\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Cat)</span><span class=\"title\">Fly</span><span class=\"params\">()</span></span>  &#123;<span class=\"comment\">//隐式继承接口</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"cat flying\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\"><a href=\"#类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\" class=\"headerlink\" title=\"类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）\"></a>类型包含嵌入类型，就包含嵌入类型所有的财产（你是我的，你所有东西都是我的）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型</span><br><span class=\"line\">type 类型名字 底层类型</span><br><span class=\"line\">1.代表类型别名，附带新方法</span><br><span class=\"line\">2.代表新类型</span><br><span class=\"line\"></span><br><span class=\"line\">方法</span><br><span class=\"line\">包方法-静态方法</span><br><span class=\"line\">类型方法-实例方法</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\ta:=&amp;A&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(a,)</span><br><span class=\"line\">\tfmt.Println(a.Age)</span><br><span class=\"line\">\tfmt.Println(a.Dd.Birth)<span class=\"comment\">//初始化为空对象</span></span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(a.Ee.Gender)//初始化为空指针，拿不到实例的熟悉，所以报错</span></span><br><span class=\"line\">\ta.Ee.Efunc() <span class=\"comment\">//空指针可以调用方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A <span class=\"keyword\">struct</span>&#123;<span class=\"comment\">//</span></span><br><span class=\"line\">\tB <span class=\"comment\">//嵌入B类型所有财产</span></span><br><span class=\"line\">\t*C <span class=\"comment\">//这里和嵌入C类型区别是，指针类型不能调用其属性</span></span><br><span class=\"line\">\tDd D <span class=\"comment\">//嵌入D类型的实例，有实例了什么都可以干(嵌入实例和嵌入指针比较多一些)</span></span><br><span class=\"line\">\tEe *E <span class=\"comment\">//嵌入E类型的指针，有了指针天下无敌(嵌入实例和嵌入指针比较多一些)</span></span><br><span class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"comment\">//本身自带的财产，自己的属性(属性一般是大写，大写导出和c一样私有字段set()get())</span></span><br><span class=\"line\">  \tCheckArg <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*context.Context)</span> <span class=\"title\">error</span> //属性的类型的是一个<span class=\"title\">func</span>，可以直接调用<span class=\"title\">a</span>.<span class=\"title\">CheckArg</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">B</span> <span class=\"title\">struct</span></span>&#123;</span><br><span class=\"line\">\tAge <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> C <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tEmail <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*C)</span><span class=\"title\">Cfunc</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"c func\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> D <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tBirth <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> E <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tGender <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*E)</span><span class=\"title\">Efunc</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"e func\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"可变参数…interface-，传入的当做-interface-切片\"><a href=\"#可变参数…interface-，传入的当做-interface-切片\" class=\"headerlink\" title=\"可变参数…interface{}，传入的当做[]interface{}切片\"></a>可变参数…interface{}，传入的当做[]interface{}切片</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Println</span><span class=\"params\">(vals ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">  fmt.Println(vals)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">类似：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Println</span><span class=\"params\">(vals []<span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"http-Request请求（服务端需要Request-和Response往里面写数据）\"><a href=\"#http-Request请求（服务端需要Request-和Response往里面写数据）\" class=\"headerlink\" title=\"http.Request请求（服务端需要Request,和Response往里面写数据）\"></a>http.Request请求（服务端需要Request,和Response往里面写数据）</h4><p>包括：</p>\n<p>1.第一行</p>\n<p>2.请求头</p>\n<p>3.请求体（一般post才有）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp:=DefaultTransport.send(req)//创建一个连接，然后通过这条连接发送req数据，服务端通过这条连接读取req然后构建resp，（也通过resp可以拿到连接的标识，去某个地方获取到这条连接），然后通过连接把resp发送回去</span><br></pre></td></tr></table></figure>\n<h4 id=\"http-Response响应（客户端需要Response从里面读数据，读完了就关闭）\"><a href=\"#http-Response响应（客户端需要Response从里面读数据，读完了就关闭）\" class=\"headerlink\" title=\"http.Response响应（客户端需要Response从里面读数据，读完了就关闭）\"></a>http.Response响应（客户端需要Response从里面读数据，读完了就关闭）</h4><p>包括：</p>\n<p>1.第一行数据</p>\n<p>2.返回头</p>\n<p>3.返回body</p>\n<p>4.请求实例http.Request</p>\n<p>可拿到底层连接net.Conn(可读可写)</p>\n<h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (rw *RWMutex) Lock()　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则lock就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 Lock 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定</span><br><span class=\"line\">func (rw *RWMutex) Unlock()　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误</span><br><span class=\"line\"></span><br><span class=\"line\">func (rw *RWMutex) RLock() 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景</span><br><span class=\"line\"></span><br><span class=\"line\">func (rw *RWMutex)RUnlock()　读锁解锁，RUnlock 撤销单次RLock 调用，它对于其它同时存在的读取器则没有效果。若 rw 并没有为读取而锁定，调用 RUnlock 就会引发一个运行时错误(注：这种说法在go1.3版本中是不对的，例如下面这个例子)。</span><br></pre></td></tr></table></figure>\n<h4 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h4><h5 id=\"三种ctx：\"><a href=\"#三种ctx：\" class=\"headerlink\" title=\"三种ctx：\"></a>三种ctx：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timerCtx:超时的ctx，超过某个时间就close(chan)</span><br><span class=\"line\">cancelCtx:可取消的ctx，使用close(chan)</span><br><span class=\"line\">valueCtx:保存键值的ctx</span><br></pre></td></tr></table></figure>\n<h4 id=\"并发、channel、select、sync\"><a href=\"#并发、channel、select、sync\" class=\"headerlink\" title=\"并发、channel、select、sync\"></a>并发、channel、select、sync</h4><h5 id=\"超时控制：\"><a href=\"#超时控制：\" class=\"headerlink\" title=\"超时控制：\"></a>超时控制：</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskdone:=<span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//1.任务异步做，做完发一个taskdone消息</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//dosomething</span></span><br><span class=\"line\">  time.Sleep(time.Second)</span><br><span class=\"line\">  taskdone&lt;- <span class=\"keyword\">struct</span> &#123;&#125;&#123;&#125;</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//2.等待taskdone 或者等待超时</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-taskdone:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"task done\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-time.After(time.Millisecond*<span class=\"number\">5000</span>):</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"task timeout\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"scanf-扫描，一行一行读取数据嘛，或者一个个字符的读取\"><a href=\"#scanf-扫描，一行一行读取数据嘛，或者一个个字符的读取\" class=\"headerlink\" title=\"scanf 扫描，一行一行读取数据嘛，或者一个个字符的读取\"></a>scanf 扫描，一行一行读取数据嘛，或者一个个字符的读取</h5><h4 id=\"go-buffer\"><a href=\"#go-buffer\" class=\"headerlink\" title=\"go buffer\"></a>go buffer</h4><p>读完之后就丢弃掉数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf:=bytes.NewBuffer(sli)<span class=\"comment\">//buffer读完之后就丢弃掉数据</span></span><br><span class=\"line\">data0,_,_:=buf.ReadRune()</span><br><span class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(data0),buf.String())</span><br></pre></td></tr></table></figure>\n<h4 id=\"go-time\"><a href=\"#go-time\" class=\"headerlink\" title=\"go time\"></a>go time</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转为ts:t.unix()</span><br><span class=\"line\">转为str:t.Format(layout,val)</span><br><span class=\"line\">转为Time:time.parse(str,layout)</span><br></pre></td></tr></table></figure>\n<h4 id=\"json-xml-gob\"><a href=\"#json-xml-gob\" class=\"headerlink\" title=\"json,xml,gob\"></a>json,xml,gob</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> network bytes.Buffer</span><br><span class=\"line\">enc:=gob.NewEncoder(&amp;network)<span class=\"comment\">//编码到什么地方去</span></span><br><span class=\"line\">enc.Encode(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"k1\"</span>: <span class=\"string\">\"v1\"</span>&#125;)<span class=\"comment\">//编码什么东西</span></span><br><span class=\"line\">fmt.Println(network.Bytes())</span><br><span class=\"line\"></span><br><span class=\"line\">dec:=gob.NewDecoder(&amp;network)<span class=\"comment\">//从什么地方解码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span></span><br><span class=\"line\">dec.Decode(&amp;m)<span class=\"comment\">//解码到哪里</span></span><br><span class=\"line\">fmt.Println(m)</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串拼接：\"><a href=\"#字符串拼接：\" class=\"headerlink\" title=\"字符串拼接：\"></a>字符串拼接：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a+=<span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b bytes.Buffer</span><br><span class=\"line\"><span class=\"keyword\">for</span> condition &#123;</span><br><span class=\"line\">    b.WriteString(str) <span class=\"comment\">// 将字符串str写入缓存buffer</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.String()</span><br></pre></td></tr></table></figure>\n<h4 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h4><blockquote>\n<p><strong>永远不要使用一个指针指向一个接口类型，因为它已经是一个指针。</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">write(w io.Writer)//没有w *io.Writer这种</span><br></pre></td></tr></table></figure>\n<h4 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自己clone</span><br><span class=\"line\">mkdir -p github.com/user</span><br><span class=\"line\">git clone repo</span><br><span class=\"line\">cd github.com/user/repo</span><br><span class=\"line\">go build xxx//缺啥去下载啥</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">golang.org/x/net ，其实镜像托管在在 github.com/golang/net</span><br><span class=\"line\">你可以用 go get github.com/golang/net 之后，到 GOPATH/src 中</span><br><span class=\"line\">mv github.com/golang/net golang.org/x/net</span><br><span class=\"line\"></span><br><span class=\"line\">golang.org/x/text</span><br><span class=\"line\">go get github.com/golang/text</span><br><span class=\"line\">mv github.com/golang/text golang.org/x/text</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $GOPATH/src/golang.org/x/</span><br><span class=\"line\">cd !$</span><br><span class=\"line\">git clone https://github.com/golang/net.git</span><br><span class=\"line\">git clone https://github.com/golang/sys.git</span><br><span class=\"line\">git clone https://github.com/golang/tools.git</span><br></pre></td></tr></table></figure>\n<h4 id=\"http参数解析\"><a href=\"#http参数解析\" class=\"headerlink\" title=\"http参数解析\"></a>http参数解析</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.ParseForm()</span><br><span class=\"line\">uid :=r.Form.Get(&quot;uid&quot;)//get post/form-data</span><br><span class=\"line\">fmt.Println(uid)</span><br><span class=\"line\">body,_:=ioutil.ReadAll(r.Body)//json post</span><br><span class=\"line\">fmt.Println(string(body))</span><br></pre></td></tr></table></figure>\n<h4 id=\"error错误处理\"><a href=\"#error错误处理\" class=\"headerlink\" title=\"error错误处理\"></a>error错误处理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.最普通</span><br><span class=\"line\">if err!=nil&#123;</span><br><span class=\"line\">  return result,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2.recover() panic()</span><br><span class=\"line\">defer func()&#123;</span><br><span class=\"line\">  if err:=recover();err!=nil&#123;</span><br><span class=\"line\">    //dosomething()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">panic()\t</span><br><span class=\"line\"></span><br><span class=\"line\">//有些错误可以处理，有些选择处理</span><br></pre></td></tr></table></figure>\n<h4 id=\"go的http请求比Java的http请求\"><a href=\"#go的http请求比Java的http请求\" class=\"headerlink\" title=\"go的http请求比Java的http请求\"></a>go的http请求比Java的http请求</h4><blockquote>\n<p>有一个[]byte到string的一个转换</p>\n</blockquote>\n<h4 id=\"默认值和nil\"><a href=\"#默认值和nil\" class=\"headerlink\" title=\"=默认值和nil\"></a>=默认值和nil</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool      -&gt; false                              </span><br><span class=\"line\">numbers -&gt; 0                                 </span><br><span class=\"line\">string    -&gt; &quot;&quot;      </span><br><span class=\"line\"></span><br><span class=\"line\">pointers -&gt; nil</span><br><span class=\"line\">slices -&gt; nil</span><br><span class=\"line\">maps -&gt; nil</span><br><span class=\"line\">channels -&gt; nil</span><br><span class=\"line\">functions -&gt; nil</span><br><span class=\"line\">interfaces -&gt; nil</span><br><span class=\"line\"></span><br><span class=\"line\">//可以使用len(slice)==0</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP和UDP\"><a href=\"#TCP和UDP\" class=\"headerlink\" title=\"TCP和UDP\"></a>TCP和UDP</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//tcp</span><br><span class=\"line\">func ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error)</span><br><span class=\"line\">func ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.Error)</span><br><span class=\"line\">func DialTCP(net string, laddr, raddr *TCPAddr) (c *TCPConn, err os.Error)</span><br><span class=\"line\">func (l *TCPListener) Accept() (c Conn, err os.Error)</span><br><span class=\"line\">func (c *TCPConn) Write(b []byte) (n int, err os.Error)</span><br><span class=\"line\">func (c *TCPConn) Read(b []byte) (n int, err os.Error)</span><br><span class=\"line\"></span><br><span class=\"line\">//udp</span><br><span class=\"line\">func ResolveUDPAddr(net, addr string) (*UDPAddr, os.Error)</span><br><span class=\"line\">func DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err os.Error)</span><br><span class=\"line\">func ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err os.Error)</span><br><span class=\"line\">func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err os.Error</span><br><span class=\"line\">func (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err os.Error)</span><br><span class=\"line\"></span><br><span class=\"line\">//通用Conn, PacketConn and Listener</span><br><span class=\"line\">net.Dial(&quot;tcp&quot;,addr)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  encoder := json.NewEncoder(conn)</span><br><span class=\"line\">  decoder := json.NewDecoder(conn)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; <span class=\"number\">10</span>; n++ &#123;</span><br><span class=\"line\">    encoder.Encode(person)<span class=\"comment\">//类似于write</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPerson Person</span><br><span class=\"line\">    decoder.Decode(&amp;newPerson)<span class=\"comment\">//类似于read</span></span><br><span class=\"line\">    fmt.Println(newPerson.String())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Base64</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"><span class=\"string\">\"bytes\"</span></span><br><span class=\"line\"><span class=\"string\">\"encoding/base64\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  eightBitData := []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">  bb := &amp;bytes.Buffer&#123;&#125;</span><br><span class=\"line\">  encoder := base64.NewEncoder(base64.StdEncoding, bb)<span class=\"comment\">//转为base64字符串</span></span><br><span class=\"line\">  encoder.Write(eightBitData)</span><br><span class=\"line\">  encoder.Close()</span><br><span class=\"line\">  fmt.Println(bb)</span><br><span class=\"line\">  dbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">  decoder := base64.NewDecoder(base64.StdEncoding, bb)</span><br><span class=\"line\">  decoder.Read(dbuf)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, ch := <span class=\"keyword\">range</span> dbuf &#123;</span><br><span class=\"line\">  \tfmt.Print(ch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"项目分层\"><a href=\"#项目分层\" class=\"headerlink\" title=\"#项目分层\"></a>#项目分层</h4><h4 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select&#123;&#125;//阻塞</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SERVE_HTTP=&quot;:3030&quot; go run 43.go</span><br><span class=\"line\">address = os.Getenv(&quot;SERVE_HTTP&quot;)//直接从上面拿</span><br></pre></td></tr></table></figure>\n<h1 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值</span><br></pre></td></tr></table></figure>\n<h1 id=\"注意注意\"><a href=\"#注意注意\" class=\"headerlink\" title=\"注意注意\"></a>注意注意</h1><p>go 修改值全部用指针</p>\n<p>切片，map先make，再取地址比较好</p>\n<p>问题代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">问题代码</span><br><span class=\"line\">//下面是一个坑</span><br><span class=\"line\">\t//for _, v := range *userInfos &#123;</span><br><span class=\"line\">\t//\tuserInfoTempMap[v.User.ID] = &amp;v</span><br><span class=\"line\">\t//&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func fillUserInfo(queryUids *[]int64, userInfoTempMap map[int64]*model.RUserInfo, selfU int64) &#123;</span><br><span class=\"line\">\tif queryUids == nil || len(*queryUids) == 0 &#123;</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//获取用户信息</span><br><span class=\"line\">\tuserInfos, err := manager.MGetUserInfo(queryUids, selfU)</span><br><span class=\"line\">\tif err != nil || userInfos == nil &#123;</span><br><span class=\"line\">\t\tlog.Errorf(&quot;get user info error:|%#v|&quot;, err)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//创建临时map给后面直接使用</span><br><span class=\"line\">\tfor i:=0;i&lt;len(*userInfos);i++&#123;</span><br><span class=\"line\">\t\tuserInfoTempMap[(*userInfos)[i].User.ID] = &amp;(*userInfos)[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor _, v := range *userInfos &#123;</span><br><span class=\"line\">\t\tuserInfoTempMap[v.User.ID] = &amp;v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(userInfoTempMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"go协程调度","date":"2018-09-19T02:34:08.000Z","_content":"\n### go协程调度\n\n### 核心图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvenffzk2mj20lu0izq74.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvenfxq3kpj20io0ao0w1.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fv6vtv5mjxj20fa0b4myk.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fv6vuds7fjj20zk0mxdgx.jpg)\n### G-P-M 模型调度\nGo调度器工作时会维护两种用来保存G的任务队列：一种是一个Global任务队列，一种是每个P维护的Local任务队列。\n\n当通过go关键字创建一个新的goroutine的时候，它会优先被放入P的本地队列。为了运行goroutine，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个goroutine并执行。当然还有上文提及的 work-stealing调度算法：当M执行完了当前P的Local队列里的所有G后，P也不会就这么在那躺尸啥都不干，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里中拿走一半的G到自己的队列中执行。\n\n如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析goroutine在两种例外情况下的行为。\n\nGo runtime会在下面的goroutine被阻塞的情况下运行另外一个goroutine：\n\n- blocking syscall (for example opening a file)\n- network input\n- channel operations\n- primitives in the sync package\n这四种场景又可归类为两种类型：\n\n### 用户态阻塞/唤醒\n当goroutine因为channel操作或者network I/O而阻塞时（实际上golang已经用netpoller实现了goroutine网络I/O阻塞不会导致M被阻塞，仅阻塞G，这里仅仅是举个栗子），对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。\n\n### 系统调用阻塞\n当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，此时的M可被抢占调度（可以抢占其他M）：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，如果没有idle的P，G会被标记为runnable加入到Global队列。（全局队列用武之地）\n\n以上就是从宏观的角度对Goroutine和它的调度器进行的一些概要性的介绍，当然，Go的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到Go调度器的基本调度过程，为后面自己实现一个Goroutine Pool提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚Go调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看Go调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M模型的定义放在src/runtime/runtime2.go里面，而调度过程则放在了src/runtime/proc.go里。\n\n\n### 问题？\n#### 0.go协程阻塞时如何进行调度？\n> 在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。\n> Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。\n> 1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。\n> 2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。\n\n\n\n\n#### 1.go为什么要实现自己的协程调度，而不用系统调度？\n> 1.线程较多时，开销较大。\n> 2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。\n\n#### 2.GM为啥不行？P有什么作用？\n> 1.每个 P 都有一个队列，用来存正在执行的 G。避免 Global Sched Lock。\n> 2.每个 M 运行都需要一个 MCache 结构。M Pool 中通常有较多 M，但执行的只有几个，为每个池子中的每个 M 分配一个 MCache 则会形成不必要的浪费，通过把 cache 从 M 移到 P，每个运行的 M 都有关联的 P，这样只有运行的 M 才有自己的 MCache。\n\n#### 3.Goroutine vs OS thread 有什么区别？\n> 其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。\n\n\n#### 4.sysmon功能是什么？\n\n>释放闲置超过5分钟的span物理内存；\n>如果超过2分钟没有垃圾回收，强制执行；\n>将长时间未处理的netpoll结果添加到任务队列；\n>向长时间运行的G任务发出抢占调度；\n>收回因syscall长时间阻塞的P；","source":"_posts/golang/go协程调度.md","raw":"---\ntitle: go协程调度\ndate: 2018-09-19 10:34:08\ntags:\n- go\ncategories: \n- go\n---\n\n### go协程调度\n\n### 核心图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvenffzk2mj20lu0izq74.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fvenfxq3kpj20io0ao0w1.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fv6vtv5mjxj20fa0b4myk.jpg)\n\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fv6vuds7fjj20zk0mxdgx.jpg)\n### G-P-M 模型调度\nGo调度器工作时会维护两种用来保存G的任务队列：一种是一个Global任务队列，一种是每个P维护的Local任务队列。\n\n当通过go关键字创建一个新的goroutine的时候，它会优先被放入P的本地队列。为了运行goroutine，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个goroutine并执行。当然还有上文提及的 work-stealing调度算法：当M执行完了当前P的Local队列里的所有G后，P也不会就这么在那躺尸啥都不干，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里中拿走一半的G到自己的队列中执行。\n\n如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析goroutine在两种例外情况下的行为。\n\nGo runtime会在下面的goroutine被阻塞的情况下运行另外一个goroutine：\n\n- blocking syscall (for example opening a file)\n- network input\n- channel operations\n- primitives in the sync package\n这四种场景又可归类为两种类型：\n\n### 用户态阻塞/唤醒\n当goroutine因为channel操作或者network I/O而阻塞时（实际上golang已经用netpoller实现了goroutine网络I/O阻塞不会导致M被阻塞，仅阻塞G，这里仅仅是举个栗子），对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。\n\n### 系统调用阻塞\n当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，此时的M可被抢占调度（可以抢占其他M）：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，如果没有idle的P，G会被标记为runnable加入到Global队列。（全局队列用武之地）\n\n以上就是从宏观的角度对Goroutine和它的调度器进行的一些概要性的介绍，当然，Go的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到Go调度器的基本调度过程，为后面自己实现一个Goroutine Pool提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚Go调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看Go调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M模型的定义放在src/runtime/runtime2.go里面，而调度过程则放在了src/runtime/proc.go里。\n\n\n### 问题？\n#### 0.go协程阻塞时如何进行调度？\n> 在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。\n> Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。\n> 1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。\n> 2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。\n\n\n\n\n#### 1.go为什么要实现自己的协程调度，而不用系统调度？\n> 1.线程较多时，开销较大。\n> 2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。\n\n#### 2.GM为啥不行？P有什么作用？\n> 1.每个 P 都有一个队列，用来存正在执行的 G。避免 Global Sched Lock。\n> 2.每个 M 运行都需要一个 MCache 结构。M Pool 中通常有较多 M，但执行的只有几个，为每个池子中的每个 M 分配一个 MCache 则会形成不必要的浪费，通过把 cache 从 M 移到 P，每个运行的 M 都有关联的 P，这样只有运行的 M 才有自己的 MCache。\n\n#### 3.Goroutine vs OS thread 有什么区别？\n> 其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。\n\n\n#### 4.sysmon功能是什么？\n\n>释放闲置超过5分钟的span物理内存；\n>如果超过2分钟没有垃圾回收，强制执行；\n>将长时间未处理的netpoll结果添加到任务队列；\n>向长时间运行的G任务发出抢占调度；\n>收回因syscall长时间阻塞的P；","slug":"golang/go协程调度","published":1,"updated":"2018-09-19T08:06:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0d8002awl38qvsb382s","content":"<h3 id=\"go协程调度\"><a href=\"#go协程调度\" class=\"headerlink\" title=\"go协程调度\"></a>go协程调度</h3><h3 id=\"核心图\"><a href=\"#核心图\" class=\"headerlink\" title=\"核心图\"></a>核心图</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvenffzk2mj20lu0izq74.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvenfxq3kpj20io0ao0w1.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fv6vtv5mjxj20fa0b4myk.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fv6vuds7fjj20zk0mxdgx.jpg\" alt=\"\"></p>\n<h3 id=\"G-P-M-模型调度\"><a href=\"#G-P-M-模型调度\" class=\"headerlink\" title=\"G-P-M 模型调度\"></a>G-P-M 模型调度</h3><p>Go调度器工作时会维护两种用来保存G的任务队列：一种是一个Global任务队列，一种是每个P维护的Local任务队列。</p>\n<p>当通过go关键字创建一个新的goroutine的时候，它会优先被放入P的本地队列。为了运行goroutine，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个goroutine并执行。当然还有上文提及的 work-stealing调度算法：当M执行完了当前P的Local队列里的所有G后，P也不会就这么在那躺尸啥都不干，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里中拿走一半的G到自己的队列中执行。</p>\n<p>如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析goroutine在两种例外情况下的行为。</p>\n<p>Go runtime会在下面的goroutine被阻塞的情况下运行另外一个goroutine：</p>\n<ul>\n<li>blocking syscall (for example opening a file)</li>\n<li>network input</li>\n<li>channel operations</li>\n<li>primitives in the sync package<br>这四种场景又可归类为两种类型：</li>\n</ul>\n<h3 id=\"用户态阻塞-唤醒\"><a href=\"#用户态阻塞-唤醒\" class=\"headerlink\" title=\"用户态阻塞/唤醒\"></a>用户态阻塞/唤醒</h3><p>当goroutine因为channel操作或者network I/O而阻塞时（实际上golang已经用netpoller实现了goroutine网络I/O阻塞不会导致M被阻塞，仅阻塞G，这里仅仅是举个栗子），对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。</p>\n<h3 id=\"系统调用阻塞\"><a href=\"#系统调用阻塞\" class=\"headerlink\" title=\"系统调用阻塞\"></a>系统调用阻塞</h3><p>当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，此时的M可被抢占调度（可以抢占其他M）：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，如果没有idle的P，G会被标记为runnable加入到Global队列。（全局队列用武之地）</p>\n<p>以上就是从宏观的角度对Goroutine和它的调度器进行的一些概要性的介绍，当然，Go的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到Go调度器的基本调度过程，为后面自己实现一个Goroutine Pool提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚Go调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看Go调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M模型的定义放在src/runtime/runtime2.go里面，而调度过程则放在了src/runtime/proc.go里。</p>\n<h3 id=\"问题？\"><a href=\"#问题？\" class=\"headerlink\" title=\"问题？\"></a>问题？</h3><h4 id=\"0-go协程阻塞时如何进行调度？\"><a href=\"#0-go协程阻塞时如何进行调度？\" class=\"headerlink\" title=\"0.go协程阻塞时如何进行调度？\"></a>0.go协程阻塞时如何进行调度？</h4><blockquote>\n<p>在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。<br>Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。<br>1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。<br>2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。</p>\n</blockquote>\n<h4 id=\"1-go为什么要实现自己的协程调度，而不用系统调度？\"><a href=\"#1-go为什么要实现自己的协程调度，而不用系统调度？\" class=\"headerlink\" title=\"1.go为什么要实现自己的协程调度，而不用系统调度？\"></a>1.go为什么要实现自己的协程调度，而不用系统调度？</h4><blockquote>\n<p>1.线程较多时，开销较大。<br>2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。</p>\n</blockquote>\n<h4 id=\"2-GM为啥不行？P有什么作用？\"><a href=\"#2-GM为啥不行？P有什么作用？\" class=\"headerlink\" title=\"2.GM为啥不行？P有什么作用？\"></a>2.GM为啥不行？P有什么作用？</h4><blockquote>\n<p>1.每个 P 都有一个队列，用来存正在执行的 G。避免 Global Sched Lock。<br>2.每个 M 运行都需要一个 MCache 结构。M Pool 中通常有较多 M，但执行的只有几个，为每个池子中的每个 M 分配一个 MCache 则会形成不必要的浪费，通过把 cache 从 M 移到 P，每个运行的 M 都有关联的 P，这样只有运行的 M 才有自己的 MCache。</p>\n</blockquote>\n<h4 id=\"3-Goroutine-vs-OS-thread-有什么区别？\"><a href=\"#3-Goroutine-vs-OS-thread-有什么区别？\" class=\"headerlink\" title=\"3.Goroutine vs OS thread 有什么区别？\"></a>3.Goroutine vs OS thread 有什么区别？</h4><blockquote>\n<p>其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。</p>\n</blockquote>\n<h4 id=\"4-sysmon功能是什么？\"><a href=\"#4-sysmon功能是什么？\" class=\"headerlink\" title=\"4.sysmon功能是什么？\"></a>4.sysmon功能是什么？</h4><blockquote>\n<p>释放闲置超过5分钟的span物理内存；<br>如果超过2分钟没有垃圾回收，强制执行；<br>将长时间未处理的netpoll结果添加到任务队列；<br>向长时间运行的G任务发出抢占调度；<br>收回因syscall长时间阻塞的P；</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"go协程调度\"><a href=\"#go协程调度\" class=\"headerlink\" title=\"go协程调度\"></a>go协程调度</h3><h3 id=\"核心图\"><a href=\"#核心图\" class=\"headerlink\" title=\"核心图\"></a>核心图</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvenffzk2mj20lu0izq74.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fvenfxq3kpj20io0ao0w1.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fv6vtv5mjxj20fa0b4myk.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fv6vuds7fjj20zk0mxdgx.jpg\" alt=\"\"></p>\n<h3 id=\"G-P-M-模型调度\"><a href=\"#G-P-M-模型调度\" class=\"headerlink\" title=\"G-P-M 模型调度\"></a>G-P-M 模型调度</h3><p>Go调度器工作时会维护两种用来保存G的任务队列：一种是一个Global任务队列，一种是每个P维护的Local任务队列。</p>\n<p>当通过go关键字创建一个新的goroutine的时候，它会优先被放入P的本地队列。为了运行goroutine，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个goroutine并执行。当然还有上文提及的 work-stealing调度算法：当M执行完了当前P的Local队列里的所有G后，P也不会就这么在那躺尸啥都不干，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里中拿走一半的G到自己的队列中执行。</p>\n<p>如果一切正常，调度器会以上述的那种方式顺畅地运行，但这个世界没这么美好，总有意外发生，以下分析goroutine在两种例外情况下的行为。</p>\n<p>Go runtime会在下面的goroutine被阻塞的情况下运行另外一个goroutine：</p>\n<ul>\n<li>blocking syscall (for example opening a file)</li>\n<li>network input</li>\n<li>channel operations</li>\n<li>primitives in the sync package<br>这四种场景又可归类为两种类型：</li>\n</ul>\n<h3 id=\"用户态阻塞-唤醒\"><a href=\"#用户态阻塞-唤醒\" class=\"headerlink\" title=\"用户态阻塞/唤醒\"></a>用户态阻塞/唤醒</h3><p>当goroutine因为channel操作或者network I/O而阻塞时（实际上golang已经用netpoller实现了goroutine网络I/O阻塞不会导致M被阻塞，仅阻塞G，这里仅仅是举个栗子），对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。</p>\n<h3 id=\"系统调用阻塞\"><a href=\"#系统调用阻塞\" class=\"headerlink\" title=\"系统调用阻塞\"></a>系统调用阻塞</h3><p>当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，此时的M可被抢占调度（可以抢占其他M）：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，如果没有idle的P，G会被标记为runnable加入到Global队列。（全局队列用武之地）</p>\n<p>以上就是从宏观的角度对Goroutine和它的调度器进行的一些概要性的介绍，当然，Go的调度中更复杂的抢占式调度、阻塞调度的更多细节，大家可以自行去找相关资料深入理解，本文只讲到Go调度器的基本调度过程，为后面自己实现一个Goroutine Pool提供理论基础，这里便不再继续深入上述说的那几个调度了，事实上如果要完全讲清楚Go调度器，一篇文章的篇幅也实在是捉襟见肘，所以想了解更多细节的同学可以去看看Go调度器 G-P-M 模型的设计者 Dmitry Vyukov 写的该模型的设计文档《Go Preemptive Scheduler Design》以及直接去看源码，G-P-M模型的定义放在src/runtime/runtime2.go里面，而调度过程则放在了src/runtime/proc.go里。</p>\n<h3 id=\"问题？\"><a href=\"#问题？\" class=\"headerlink\" title=\"问题？\"></a>问题？</h3><h4 id=\"0-go协程阻塞时如何进行调度？\"><a href=\"#0-go协程阻塞时如何进行调度？\" class=\"headerlink\" title=\"0.go协程阻塞时如何进行调度？\"></a>0.go协程阻塞时如何进行调度？</h4><blockquote>\n<p>在程序中任何对系统 API 的调用，都会被 runtime 层拦截来方便调度。<br>Goroutine 在 system call 和 channel call 时都可能发生阻塞，但这两种阻塞发生后，处理方式又不一样的。<br>1.当程序发生 system call，M 会发生阻塞，同时唤起（或创建）一个新的 M 继续执行其他的 G。当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。<br>2.当程序发起一个 channel call，程序可能会阻塞，但不会阻塞 M，G 的状态会设置为 waiting，M 继续执行其他的 G。当 G 的调用完成，会有一个可用的 M 继续执行它。</p>\n</blockquote>\n<h4 id=\"1-go为什么要实现自己的协程调度，而不用系统调度？\"><a href=\"#1-go为什么要实现自己的协程调度，而不用系统调度？\" class=\"headerlink\" title=\"1.go为什么要实现自己的协程调度，而不用系统调度？\"></a>1.go为什么要实现自己的协程调度，而不用系统调度？</h4><blockquote>\n<p>1.线程较多时，开销较大。<br>2.OS 的调度，程序不可控。而 Go GC 需要停止所有的线程，使内存达到一致状态。</p>\n</blockquote>\n<h4 id=\"2-GM为啥不行？P有什么作用？\"><a href=\"#2-GM为啥不行？P有什么作用？\" class=\"headerlink\" title=\"2.GM为啥不行？P有什么作用？\"></a>2.GM为啥不行？P有什么作用？</h4><blockquote>\n<p>1.每个 P 都有一个队列，用来存正在执行的 G。避免 Global Sched Lock。<br>2.每个 M 运行都需要一个 MCache 结构。M Pool 中通常有较多 M，但执行的只有几个，为每个池子中的每个 M 分配一个 MCache 则会形成不必要的浪费，通过把 cache 从 M 移到 P，每个运行的 M 都有关联的 P，这样只有运行的 M 才有自己的 MCache。</p>\n</blockquote>\n<h4 id=\"3-Goroutine-vs-OS-thread-有什么区别？\"><a href=\"#3-Goroutine-vs-OS-thread-有什么区别？\" class=\"headerlink\" title=\"3.Goroutine vs OS thread 有什么区别？\"></a>3.Goroutine vs OS thread 有什么区别？</h4><blockquote>\n<p>其实 goroutine 用到的就是线程池的技术，当 goroutine 需要执行时，会从 thread pool 中选出一个可用的 M 或者新建一个 M。而 thread pool 中如何选取线程，扩建线程，回收线程，Go Scheduler 进行了封装，对程序透明，只管调用就行，从而简化了 thread pool 的使用。</p>\n</blockquote>\n<h4 id=\"4-sysmon功能是什么？\"><a href=\"#4-sysmon功能是什么？\" class=\"headerlink\" title=\"4.sysmon功能是什么？\"></a>4.sysmon功能是什么？</h4><blockquote>\n<p>释放闲置超过5分钟的span物理内存；<br>如果超过2分钟没有垃圾回收，强制执行；<br>将长时间未处理的netpoll结果添加到任务队列；<br>向长时间运行的G任务发出抢占调度；<br>收回因syscall长时间阻塞的P；</p>\n</blockquote>\n"},{"title":"golang闭包","date":"2019-03-16T10:54:36.000Z","_content":"\n# 闭包\n### 关键点\n- 闭包也是类，运行闭包等同于创建对象【类是数据附带行为，闭包是行为附带数据】\n- 区分全局变量和局部变量\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc add() func() int {\n\tsum := 1//全局变量\n\treturn func() int {\n\t\tvar a = 1//局部变量\n\t\tsum += a\n\t\treturn sum\n\t}\n}\n\nfunc main() {\n\tpos, neg := add(), add()\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Println(pos(), neg())\n\t}\n\n}\n\n```","source":"_posts/golang/golang闭包.md","raw":"---\ntitle: golang闭包\ntags:\n  - 闭包\ncategories:\n  - golang\ndate: 2019-03-16 18:54:36\n---\n\n# 闭包\n### 关键点\n- 闭包也是类，运行闭包等同于创建对象【类是数据附带行为，闭包是行为附带数据】\n- 区分全局变量和局部变量\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc add() func() int {\n\tsum := 1//全局变量\n\treturn func() int {\n\t\tvar a = 1//局部变量\n\t\tsum += a\n\t\treturn sum\n\t}\n}\n\nfunc main() {\n\tpos, neg := add(), add()\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Println(pos(), neg())\n\t}\n\n}\n\n```","slug":"golang/golang闭包","published":1,"updated":"2019-03-16T10:58:33.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0da002dwl38w36xt8hs","content":"<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><h3 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h3><ul>\n<li>闭包也是类，运行闭包等同于创建对象【类是数据附带行为，闭包是行为附带数据】</li>\n<li>区分全局变量和局部变量</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span><span class=\"comment\">//全局变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> a = <span class=\"number\">1</span><span class=\"comment\">//局部变量</span></span><br><span class=\"line\">\t\tsum += a</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpos, neg := add(), add()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(pos(), neg())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><h3 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h3><ul>\n<li>闭包也是类，运行闭包等同于创建对象【类是数据附带行为，闭包是行为附带数据】</li>\n<li>区分全局变量和局部变量</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span><span class=\"comment\">//全局变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> a = <span class=\"number\">1</span><span class=\"comment\">//局部变量</span></span><br><span class=\"line\">\t\tsum += a</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpos, neg := add(), add()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(pos(), neg())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"es6","date":"2018-12-19T08:13:42.000Z","_content":"# ES6\n\n### Babel是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码\n\nBabel 的配置文件是`.babelrc`，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。Babel 使用`babel-cli`工具，用于命令行转码。\n\n```\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n\n### let和const\n\n```\nlet 局部作用域，var全局作用域，const静态变量\n直接使用未声明，输出为：undefined\n```\n\n### 变量解析\n\n变量的解构赋值用途很多。\n\n**（1）交换变量的值**\n\n```\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n**（2）从函数返回多个值**\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nlet { foo, bar } = example();\n```\n\n**（3）函数参数的定义**\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n**（4）提取 JSON 数据**\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```\nlet jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n**（5）函数参数的默认值**\n\n```\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n} = {}) {\n  // ... do stuff\n};\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n**（6）遍历 Map 结构**\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```\nconst map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n```\n\n**（7）输入模块的指定方法**\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```\n\n\n\n### 字符串使用\n\n##### Unicode表示\n\n```\n'\\z' === 'z'  // true\n'\\172' === 'z' // true\n'\\x7A' === 'z' // true\n'\\u007A' === 'z' // true\n'\\u{7A}' === 'z' // true\n```\n\n##### codePointAt()\n\n```\nvar s = \"𠮷\";\n\ns.length // 2\ns.charAt(0) // ''\ns.charAt(1) // ''\ns.charCodeAt(0) // 55362\ns.charCodeAt(1) // 57271\n```\n\n##### String.fromCodePoint()\n\n```\nString.fromCodePoint(0x20BB7)\n// \"𠮷\"\nString.fromCodePoint(0x78, 0x1f680, 0x79) === 'x\\uD83D\\uDE80y'\n// true\n```\n\n##### 遍历 for let i of x\n\n```\nfor (let codePoint of 'foo') {\n  console.log(codePoint)\n}\n// \"f\"\n// \"o\"\n// \"o\"\n```\n\n##### 字符串常用函数\n\n```\nincludes()\nstartsWitch()\nendsWith()\nrepeat()\nmatchAll()\nmatch()、replace()、search()、split()\n```\n\n\n\n#### 函数\n\n```\n//默认值\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\nlog('Hello', 'China') // Hello China\nlog('Hello', '') // Hello\n\n//...函数[和golang差不多]\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\nadd(...numbers) \n\n//lamda表达式\nvar sum = (num1, num2) => { return num1 + num2; }\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n\n\n\n### 数组\n\n```\n//Array.from()\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n//Array.of()\nArray.of(3, 11, 8) // [3,11,8]\n\n//遍历数组\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n\n\n### SET\n\n```\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n```\n\n\n\n### class\n\n```\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\n### 模块加载\n\n```\n// ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\nimport { stat, exists, readFile } from 'fs';\nexport { area as circleArea } from 'circle';\n\n```\n\n","source":"_posts/javascript/es6.md","raw":"---\ntitle: es6\ntags:\n  - ES6\ncategories:\n  - front-end\ndate: 2018-12-19 16:13:42\n---\n# ES6\n\n### Babel是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码\n\nBabel 的配置文件是`.babelrc`，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。Babel 使用`babel-cli`工具，用于命令行转码。\n\n```\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n\n### let和const\n\n```\nlet 局部作用域，var全局作用域，const静态变量\n直接使用未声明，输出为：undefined\n```\n\n### 变量解析\n\n变量的解构赋值用途很多。\n\n**（1）交换变量的值**\n\n```\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n**（2）从函数返回多个值**\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nlet { foo, bar } = example();\n```\n\n**（3）函数参数的定义**\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n**（4）提取 JSON 数据**\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```\nlet jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n**（5）函数参数的默认值**\n\n```\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n} = {}) {\n  // ... do stuff\n};\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n**（6）遍历 Map 结构**\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```\nconst map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n```\n\n**（7）输入模块的指定方法**\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```\n\n\n\n### 字符串使用\n\n##### Unicode表示\n\n```\n'\\z' === 'z'  // true\n'\\172' === 'z' // true\n'\\x7A' === 'z' // true\n'\\u007A' === 'z' // true\n'\\u{7A}' === 'z' // true\n```\n\n##### codePointAt()\n\n```\nvar s = \"𠮷\";\n\ns.length // 2\ns.charAt(0) // ''\ns.charAt(1) // ''\ns.charCodeAt(0) // 55362\ns.charCodeAt(1) // 57271\n```\n\n##### String.fromCodePoint()\n\n```\nString.fromCodePoint(0x20BB7)\n// \"𠮷\"\nString.fromCodePoint(0x78, 0x1f680, 0x79) === 'x\\uD83D\\uDE80y'\n// true\n```\n\n##### 遍历 for let i of x\n\n```\nfor (let codePoint of 'foo') {\n  console.log(codePoint)\n}\n// \"f\"\n// \"o\"\n// \"o\"\n```\n\n##### 字符串常用函数\n\n```\nincludes()\nstartsWitch()\nendsWith()\nrepeat()\nmatchAll()\nmatch()、replace()、search()、split()\n```\n\n\n\n#### 函数\n\n```\n//默认值\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\nlog('Hello', 'China') // Hello China\nlog('Hello', '') // Hello\n\n//...函数[和golang差不多]\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\nadd(...numbers) \n\n//lamda表达式\nvar sum = (num1, num2) => { return num1 + num2; }\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n\n\n\n### 数组\n\n```\n//Array.from()\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n//Array.of()\nArray.of(3, 11, 8) // [3,11,8]\n\n//遍历数组\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n\n\n### SET\n\n```\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n```\n\n\n\n### class\n\n```\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\n### 模块加载\n\n```\n// ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\nimport { stat, exists, readFile } from 'fs';\nexport { area as circleArea } from 'circle';\n\n```\n\n","slug":"javascript/es6","published":1,"updated":"2018-12-19T08:14:08.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0db002iwl38b2cp1sck","content":"<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h3 id=\"Babel是一个广泛使用的-ES6-转码器，可以将-ES6-代码转为-ES5-代码\"><a href=\"#Babel是一个广泛使用的-ES6-转码器，可以将-ES6-代码转为-ES5-代码\" class=\"headerlink\" title=\"Babel是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码\"></a>Babel是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码</h3><p>Babel 的配置文件是<code>.babelrc</code>，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。Babel 使用<code>babel-cli</code>工具，用于命令行转码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 转码前</span><br><span class=\"line\">input.map(item =&gt; item + 1);</span><br><span class=\"line\"></span><br><span class=\"line\">// 转码后</span><br><span class=\"line\">input.map(function (item) &#123;</span><br><span class=\"line\">  return item + 1;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a>let和const</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let 局部作用域，var全局作用域，const静态变量</span><br><span class=\"line\">直接使用未声明，输出为：undefined</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量解析\"><a href=\"#变量解析\" class=\"headerlink\" title=\"变量解析\"></a>变量解析</h3><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = 1;</span><br><span class=\"line\">let y = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 返回一个数组</span><br><span class=\"line\"></span><br><span class=\"line\">function example() &#123;</span><br><span class=\"line\">  return [1, 2, 3];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回一个对象</span><br><span class=\"line\"></span><br><span class=\"line\">function example() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    foo: 1,</span><br><span class=\"line\">    bar: 2</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 参数是一组有次序的值</span><br><span class=\"line\">function f([x, y, z]) &#123; ... &#125;</span><br><span class=\"line\">f([1, 2, 3]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 参数是一组无次序的值</span><br><span class=\"line\">function f(&#123;x, y, z&#125;) &#123; ... &#125;</span><br><span class=\"line\">f(&#123;z: 3, y: 2, x: 1&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jsonData = &#123;</span><br><span class=\"line\">  id: 42,</span><br><span class=\"line\">  status: &quot;OK&quot;,</span><br><span class=\"line\">  data: [867, 5309]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123; id, status, data: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(id, status, number);</span><br><span class=\"line\">// 42, &quot;OK&quot;, [867, 5309]</span><br></pre></td></tr></table></figure>\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = function (url, &#123;</span><br><span class=\"line\">  async = true,</span><br><span class=\"line\">  beforeSend = function () &#123;&#125;,</span><br><span class=\"line\">  cache = true,</span><br><span class=\"line\">  complete = function () &#123;&#125;,</span><br><span class=\"line\">  crossDomain = false,</span><br><span class=\"line\">  global = true,</span><br><span class=\"line\">  // ... more config</span><br><span class=\"line\">&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">  // ... do stuff</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set(&apos;first&apos;, &apos;hello&apos;);</span><br><span class=\"line\">map.set(&apos;second&apos;, &apos;world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">for (let [key, value] of map) &#123;</span><br><span class=\"line\">  console.log(key + &quot; is &quot; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// first is hello</span><br><span class=\"line\">// second is world</span><br></pre></td></tr></table></figure>\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取键名</span><br><span class=\"line\">for (let [key] of map) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取键值</span><br><span class=\"line\">for (let [,value] of map) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; SourceMapConsumer, SourceNode &#125; = require(&quot;source-map&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串使用\"><a href=\"#字符串使用\" class=\"headerlink\" title=\"字符串使用\"></a>字符串使用</h3><h5 id=\"Unicode表示\"><a href=\"#Unicode表示\" class=\"headerlink\" title=\"Unicode表示\"></a>Unicode表示</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;\\z&apos; === &apos;z&apos;  // true</span><br><span class=\"line\">&apos;\\172&apos; === &apos;z&apos; // true</span><br><span class=\"line\">&apos;\\x7A&apos; === &apos;z&apos; // true</span><br><span class=\"line\">&apos;\\u007A&apos; === &apos;z&apos; // true</span><br><span class=\"line\">&apos;\\u&#123;7A&#125;&apos; === &apos;z&apos; // true</span><br></pre></td></tr></table></figure>\n<h5 id=\"codePointAt\"><a href=\"#codePointAt\" class=\"headerlink\" title=\"codePointAt()\"></a>codePointAt()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = &quot;𠮷&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">s.length // 2</span><br><span class=\"line\">s.charAt(0) // &apos;&apos;</span><br><span class=\"line\">s.charAt(1) // &apos;&apos;</span><br><span class=\"line\">s.charCodeAt(0) // 55362</span><br><span class=\"line\">s.charCodeAt(1) // 57271</span><br></pre></td></tr></table></figure>\n<h5 id=\"String-fromCodePoint\"><a href=\"#String-fromCodePoint\" class=\"headerlink\" title=\"String.fromCodePoint()\"></a>String.fromCodePoint()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.fromCodePoint(0x20BB7)</span><br><span class=\"line\">// &quot;𠮷&quot;</span><br><span class=\"line\">String.fromCodePoint(0x78, 0x1f680, 0x79) === &apos;x\\uD83D\\uDE80y&apos;</span><br><span class=\"line\">// true</span><br></pre></td></tr></table></figure>\n<h5 id=\"遍历-for-let-i-of-x\"><a href=\"#遍历-for-let-i-of-x\" class=\"headerlink\" title=\"遍历 for let i of x\"></a>遍历 for let i of x</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let codePoint of &apos;foo&apos;) &#123;</span><br><span class=\"line\">  console.log(codePoint)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// &quot;f&quot;</span><br><span class=\"line\">// &quot;o&quot;</span><br><span class=\"line\">// &quot;o&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"字符串常用函数\"><a href=\"#字符串常用函数\" class=\"headerlink\" title=\"字符串常用函数\"></a>字符串常用函数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">includes()</span><br><span class=\"line\">startsWitch()</span><br><span class=\"line\">endsWith()</span><br><span class=\"line\">repeat()</span><br><span class=\"line\">matchAll()</span><br><span class=\"line\">match()、replace()、search()、split()</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//默认值</span><br><span class=\"line\">function log(x, y = &apos;World&apos;) &#123;</span><br><span class=\"line\">  console.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log(&apos;Hello&apos;) // Hello World</span><br><span class=\"line\">log(&apos;Hello&apos;, &apos;China&apos;) // Hello China</span><br><span class=\"line\">log(&apos;Hello&apos;, &apos;&apos;) // Hello</span><br><span class=\"line\"></span><br><span class=\"line\">//...函数[和golang差不多]</span><br><span class=\"line\">function add(...values) &#123;</span><br><span class=\"line\">  let sum = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (var val of values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(2, 5, 3) // 10</span><br><span class=\"line\">add(...numbers) </span><br><span class=\"line\"></span><br><span class=\"line\">//lamda表达式</span><br><span class=\"line\">var sum = (num1, num2) =&gt; &#123; return num1 + num2; &#125;</span><br><span class=\"line\">var sum = (num1, num2) =&gt; num1 + num2;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">var sum = function(num1, num2) &#123;</span><br><span class=\"line\">  return num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Array.from()</span><br><span class=\"line\">let arrayLike = &#123;</span><br><span class=\"line\">    &apos;0&apos;: &apos;a&apos;,</span><br><span class=\"line\">    &apos;1&apos;: &apos;b&apos;,</span><br><span class=\"line\">    &apos;2&apos;: &apos;c&apos;,</span><br><span class=\"line\">    length: 3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// ES6的写法</span><br><span class=\"line\">let arr2 = Array.from(arrayLike); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class=\"line\">//Array.of()</span><br><span class=\"line\">Array.of(3, 11, 8) // [3,11,8]</span><br><span class=\"line\"></span><br><span class=\"line\">//遍历数组</span><br><span class=\"line\">for (let [index, elem] of [&apos;a&apos;, &apos;b&apos;].entries()) &#123;</span><br><span class=\"line\">  console.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0 &quot;a&quot;</span><br><span class=\"line\">// 1 &quot;b&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例一</span><br><span class=\"line\">const set = new Set([1, 2, 3, 4, 4]);</span><br><span class=\"line\">[...set]</span><br><span class=\"line\">// [1, 2, 3, 4]</span><br><span class=\"line\"></span><br><span class=\"line\">// 例二</span><br><span class=\"line\">const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);</span><br><span class=\"line\">items.size // 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x, y) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块加载\"><a href=\"#模块加载\" class=\"headerlink\" title=\"模块加载\"></a>模块加载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。</span><br><span class=\"line\">export var firstName = &apos;Michael&apos;;</span><br><span class=\"line\">export var lastName = &apos;Jackson&apos;;</span><br><span class=\"line\">export var year = 1958;</span><br><span class=\"line\">import &#123; stat, exists, readFile &#125; from &apos;fs&apos;;</span><br><span class=\"line\">export &#123; area as circleArea &#125; from &apos;circle&apos;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h3 id=\"Babel是一个广泛使用的-ES6-转码器，可以将-ES6-代码转为-ES5-代码\"><a href=\"#Babel是一个广泛使用的-ES6-转码器，可以将-ES6-代码转为-ES5-代码\" class=\"headerlink\" title=\"Babel是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码\"></a>Babel是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码</h3><p>Babel 的配置文件是<code>.babelrc</code>，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。Babel 使用<code>babel-cli</code>工具，用于命令行转码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 转码前</span><br><span class=\"line\">input.map(item =&gt; item + 1);</span><br><span class=\"line\"></span><br><span class=\"line\">// 转码后</span><br><span class=\"line\">input.map(function (item) &#123;</span><br><span class=\"line\">  return item + 1;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a>let和const</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let 局部作用域，var全局作用域，const静态变量</span><br><span class=\"line\">直接使用未声明，输出为：undefined</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量解析\"><a href=\"#变量解析\" class=\"headerlink\" title=\"变量解析\"></a>变量解析</h3><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = 1;</span><br><span class=\"line\">let y = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 返回一个数组</span><br><span class=\"line\"></span><br><span class=\"line\">function example() &#123;</span><br><span class=\"line\">  return [1, 2, 3];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回一个对象</span><br><span class=\"line\"></span><br><span class=\"line\">function example() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    foo: 1,</span><br><span class=\"line\">    bar: 2</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 参数是一组有次序的值</span><br><span class=\"line\">function f([x, y, z]) &#123; ... &#125;</span><br><span class=\"line\">f([1, 2, 3]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 参数是一组无次序的值</span><br><span class=\"line\">function f(&#123;x, y, z&#125;) &#123; ... &#125;</span><br><span class=\"line\">f(&#123;z: 3, y: 2, x: 1&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let jsonData = &#123;</span><br><span class=\"line\">  id: 42,</span><br><span class=\"line\">  status: &quot;OK&quot;,</span><br><span class=\"line\">  data: [867, 5309]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123; id, status, data: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(id, status, number);</span><br><span class=\"line\">// 42, &quot;OK&quot;, [867, 5309]</span><br></pre></td></tr></table></figure>\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = function (url, &#123;</span><br><span class=\"line\">  async = true,</span><br><span class=\"line\">  beforeSend = function () &#123;&#125;,</span><br><span class=\"line\">  cache = true,</span><br><span class=\"line\">  complete = function () &#123;&#125;,</span><br><span class=\"line\">  crossDomain = false,</span><br><span class=\"line\">  global = true,</span><br><span class=\"line\">  // ... more config</span><br><span class=\"line\">&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">  // ... do stuff</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const map = new Map();</span><br><span class=\"line\">map.set(&apos;first&apos;, &apos;hello&apos;);</span><br><span class=\"line\">map.set(&apos;second&apos;, &apos;world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">for (let [key, value] of map) &#123;</span><br><span class=\"line\">  console.log(key + &quot; is &quot; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// first is hello</span><br><span class=\"line\">// second is world</span><br></pre></td></tr></table></figure>\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取键名</span><br><span class=\"line\">for (let [key] of map) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取键值</span><br><span class=\"line\">for (let [,value] of map) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; SourceMapConsumer, SourceNode &#125; = require(&quot;source-map&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串使用\"><a href=\"#字符串使用\" class=\"headerlink\" title=\"字符串使用\"></a>字符串使用</h3><h5 id=\"Unicode表示\"><a href=\"#Unicode表示\" class=\"headerlink\" title=\"Unicode表示\"></a>Unicode表示</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;\\z&apos; === &apos;z&apos;  // true</span><br><span class=\"line\">&apos;\\172&apos; === &apos;z&apos; // true</span><br><span class=\"line\">&apos;\\x7A&apos; === &apos;z&apos; // true</span><br><span class=\"line\">&apos;\\u007A&apos; === &apos;z&apos; // true</span><br><span class=\"line\">&apos;\\u&#123;7A&#125;&apos; === &apos;z&apos; // true</span><br></pre></td></tr></table></figure>\n<h5 id=\"codePointAt\"><a href=\"#codePointAt\" class=\"headerlink\" title=\"codePointAt()\"></a>codePointAt()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = &quot;𠮷&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">s.length // 2</span><br><span class=\"line\">s.charAt(0) // &apos;&apos;</span><br><span class=\"line\">s.charAt(1) // &apos;&apos;</span><br><span class=\"line\">s.charCodeAt(0) // 55362</span><br><span class=\"line\">s.charCodeAt(1) // 57271</span><br></pre></td></tr></table></figure>\n<h5 id=\"String-fromCodePoint\"><a href=\"#String-fromCodePoint\" class=\"headerlink\" title=\"String.fromCodePoint()\"></a>String.fromCodePoint()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.fromCodePoint(0x20BB7)</span><br><span class=\"line\">// &quot;𠮷&quot;</span><br><span class=\"line\">String.fromCodePoint(0x78, 0x1f680, 0x79) === &apos;x\\uD83D\\uDE80y&apos;</span><br><span class=\"line\">// true</span><br></pre></td></tr></table></figure>\n<h5 id=\"遍历-for-let-i-of-x\"><a href=\"#遍历-for-let-i-of-x\" class=\"headerlink\" title=\"遍历 for let i of x\"></a>遍历 for let i of x</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let codePoint of &apos;foo&apos;) &#123;</span><br><span class=\"line\">  console.log(codePoint)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// &quot;f&quot;</span><br><span class=\"line\">// &quot;o&quot;</span><br><span class=\"line\">// &quot;o&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"字符串常用函数\"><a href=\"#字符串常用函数\" class=\"headerlink\" title=\"字符串常用函数\"></a>字符串常用函数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">includes()</span><br><span class=\"line\">startsWitch()</span><br><span class=\"line\">endsWith()</span><br><span class=\"line\">repeat()</span><br><span class=\"line\">matchAll()</span><br><span class=\"line\">match()、replace()、search()、split()</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//默认值</span><br><span class=\"line\">function log(x, y = &apos;World&apos;) &#123;</span><br><span class=\"line\">  console.log(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log(&apos;Hello&apos;) // Hello World</span><br><span class=\"line\">log(&apos;Hello&apos;, &apos;China&apos;) // Hello China</span><br><span class=\"line\">log(&apos;Hello&apos;, &apos;&apos;) // Hello</span><br><span class=\"line\"></span><br><span class=\"line\">//...函数[和golang差不多]</span><br><span class=\"line\">function add(...values) &#123;</span><br><span class=\"line\">  let sum = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (var val of values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(2, 5, 3) // 10</span><br><span class=\"line\">add(...numbers) </span><br><span class=\"line\"></span><br><span class=\"line\">//lamda表达式</span><br><span class=\"line\">var sum = (num1, num2) =&gt; &#123; return num1 + num2; &#125;</span><br><span class=\"line\">var sum = (num1, num2) =&gt; num1 + num2;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">var sum = function(num1, num2) &#123;</span><br><span class=\"line\">  return num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Array.from()</span><br><span class=\"line\">let arrayLike = &#123;</span><br><span class=\"line\">    &apos;0&apos;: &apos;a&apos;,</span><br><span class=\"line\">    &apos;1&apos;: &apos;b&apos;,</span><br><span class=\"line\">    &apos;2&apos;: &apos;c&apos;,</span><br><span class=\"line\">    length: 3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// ES6的写法</span><br><span class=\"line\">let arr2 = Array.from(arrayLike); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class=\"line\">//Array.of()</span><br><span class=\"line\">Array.of(3, 11, 8) // [3,11,8]</span><br><span class=\"line\"></span><br><span class=\"line\">//遍历数组</span><br><span class=\"line\">for (let [index, elem] of [&apos;a&apos;, &apos;b&apos;].entries()) &#123;</span><br><span class=\"line\">  console.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 0 &quot;a&quot;</span><br><span class=\"line\">// 1 &quot;b&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例一</span><br><span class=\"line\">const set = new Set([1, 2, 3, 4, 4]);</span><br><span class=\"line\">[...set]</span><br><span class=\"line\">// [1, 2, 3, 4]</span><br><span class=\"line\"></span><br><span class=\"line\">// 例二</span><br><span class=\"line\">const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);</span><br><span class=\"line\">items.size // 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x, y) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块加载\"><a href=\"#模块加载\" class=\"headerlink\" title=\"模块加载\"></a>模块加载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。</span><br><span class=\"line\">export var firstName = &apos;Michael&apos;;</span><br><span class=\"line\">export var lastName = &apos;Jackson&apos;;</span><br><span class=\"line\">export var year = 1958;</span><br><span class=\"line\">import &#123; stat, exists, readFile &#125; from &apos;fs&apos;;</span><br><span class=\"line\">export &#123; area as circleArea &#125; from &apos;circle&apos;;</span><br></pre></td></tr></table></figure>\n"},{"title":"govendor-quickstart","date":"2018-12-25T05:16:56.000Z","_content":"\n# 安装\n`go get -u -v github.com/kardianos/govendor`\n\n\n# 使用\n```\n0. 安装\ngo get -u -v github.com/kardianos/govendor\n\n1. 初始化\ncd \"my project in GOPATH\"\ngovendor init\n\n2. 添加依赖\n# Add existing GOPATH files to vendor.\ngovendor add +external\n```\n\n# 详细教程\nwiki:https://github.com/kardianos/govendor\n```\nQuick Start, also see the FAQ\n# Setup your project.\ncd \"my project in GOPATH\"\ngovendor init\n\n# Add existing GOPATH files to vendor.\ngovendor add +external\n\n# View your work.\ngovendor list\n\n# Look at what is using a package\ngovendor list -v fmt\n\n# Specify a specific version or revision to fetch\ngovendor fetch golang.org/x/net/context@a4bbce9fcae005b22ae5443f6af064d80a6f5a55\ngovendor fetch golang.org/x/net/context@v1   # Get latest v1.*.* tag or branch.\ngovendor fetch golang.org/x/net/context@=v1  # Get the tag or branch named \"v1\".\n\n# Update a package to latest, given any prior version constraint\ngovendor fetch golang.org/x/net/context\n\n# Format your repository only\ngovendor fmt +local\n\n# Build everything in your repository only\ngovendor install +local\n\n# Test your repository only\ngovendor test +local\n\nSub-commands\n\tinit     Create the \"vendor\" folder and the \"vendor.json\" file.\n\tlist     List and filter existing dependencies and packages.\n\tadd      Add packages from $GOPATH.\n\tupdate   Update packages from $GOPATH.\n\tremove   Remove packages from the vendor folder.\n\tstatus   Lists any packages missing, out-of-date, or modified locally.\n\tfetch    Add new or update vendor folder packages from remote repository.\n\tsync     Pull packages into vendor folder from remote repository with revisions\n  \t             from vendor.json file.\n\tmigrate  Move packages from a legacy tool to the vendor folder with metadata.\n\tget      Like \"go get\" but copies dependencies into a \"vendor\" folder.\n\tlicense  List discovered licenses for the given status or import paths.\n\tshell    Run a \"shell\" to make multiple sub-commands more efficient for large\n\t             projects.\n\n\tgo tool commands that are wrapped:\n\t  `+<status>` package selection may be used with them\n\tfmt, build, install, clean, test, vet, generate, tool\nStatus\nPackages can be specified by their \"status\".\n\n\t+local    (l) packages in your project\n\t+external (e) referenced packages in GOPATH but not in current project\n\t+vendor   (v) packages in the vendor folder\n\t+std      (s) packages in the standard library\n\n\t+excluded (x) external packages explicitly excluded from vendoring\n\t+unused   (u) packages in the vendor folder, but unused\n\t+missing  (m) referenced packages but not found\n\n\t+program  (p) package is a main package\n\n\t+outside  +external +missing\n\t+all      +all packages\nStatus can be referenced by their initial letters.\n\n+std same as +s\n+external same as +ext same as +e\n+excluded same as +exc same as +x\nStatus can be logically composed:\n\n+local,program (local AND program) local packages that are also programs\n+local +vendor (local OR vendor) local packages or vendor packages\n+vendor,program +std ((vendor AND program) OR std) vendor packages that are also programs or std library packages\n+vendor,^program (vendor AND NOT program) vendor package that are not \"main\" packages.\n```\n","source":"_posts/golang/govendor-quickstart.md","raw":"---\ntitle: govendor-quickstart\ntags:\n  - go\ncategories:\n  - go\ndate: 2018-12-25 13:16:56\n---\n\n# 安装\n`go get -u -v github.com/kardianos/govendor`\n\n\n# 使用\n```\n0. 安装\ngo get -u -v github.com/kardianos/govendor\n\n1. 初始化\ncd \"my project in GOPATH\"\ngovendor init\n\n2. 添加依赖\n# Add existing GOPATH files to vendor.\ngovendor add +external\n```\n\n# 详细教程\nwiki:https://github.com/kardianos/govendor\n```\nQuick Start, also see the FAQ\n# Setup your project.\ncd \"my project in GOPATH\"\ngovendor init\n\n# Add existing GOPATH files to vendor.\ngovendor add +external\n\n# View your work.\ngovendor list\n\n# Look at what is using a package\ngovendor list -v fmt\n\n# Specify a specific version or revision to fetch\ngovendor fetch golang.org/x/net/context@a4bbce9fcae005b22ae5443f6af064d80a6f5a55\ngovendor fetch golang.org/x/net/context@v1   # Get latest v1.*.* tag or branch.\ngovendor fetch golang.org/x/net/context@=v1  # Get the tag or branch named \"v1\".\n\n# Update a package to latest, given any prior version constraint\ngovendor fetch golang.org/x/net/context\n\n# Format your repository only\ngovendor fmt +local\n\n# Build everything in your repository only\ngovendor install +local\n\n# Test your repository only\ngovendor test +local\n\nSub-commands\n\tinit     Create the \"vendor\" folder and the \"vendor.json\" file.\n\tlist     List and filter existing dependencies and packages.\n\tadd      Add packages from $GOPATH.\n\tupdate   Update packages from $GOPATH.\n\tremove   Remove packages from the vendor folder.\n\tstatus   Lists any packages missing, out-of-date, or modified locally.\n\tfetch    Add new or update vendor folder packages from remote repository.\n\tsync     Pull packages into vendor folder from remote repository with revisions\n  \t             from vendor.json file.\n\tmigrate  Move packages from a legacy tool to the vendor folder with metadata.\n\tget      Like \"go get\" but copies dependencies into a \"vendor\" folder.\n\tlicense  List discovered licenses for the given status or import paths.\n\tshell    Run a \"shell\" to make multiple sub-commands more efficient for large\n\t             projects.\n\n\tgo tool commands that are wrapped:\n\t  `+<status>` package selection may be used with them\n\tfmt, build, install, clean, test, vet, generate, tool\nStatus\nPackages can be specified by their \"status\".\n\n\t+local    (l) packages in your project\n\t+external (e) referenced packages in GOPATH but not in current project\n\t+vendor   (v) packages in the vendor folder\n\t+std      (s) packages in the standard library\n\n\t+excluded (x) external packages explicitly excluded from vendoring\n\t+unused   (u) packages in the vendor folder, but unused\n\t+missing  (m) referenced packages but not found\n\n\t+program  (p) package is a main package\n\n\t+outside  +external +missing\n\t+all      +all packages\nStatus can be referenced by their initial letters.\n\n+std same as +s\n+external same as +ext same as +e\n+excluded same as +exc same as +x\nStatus can be logically composed:\n\n+local,program (local AND program) local packages that are also programs\n+local +vendor (local OR vendor) local packages or vendor packages\n+vendor,program +std ((vendor AND program) OR std) vendor packages that are also programs or std library packages\n+vendor,^program (vendor AND NOT program) vendor package that are not \"main\" packages.\n```\n","slug":"golang/govendor-quickstart","published":1,"updated":"2018-12-25T05:22:18.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dc002kwl38ibybbd5x","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><code>go get -u -v github.com/kardianos/govendor</code></p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0. 安装</span><br><span class=\"line\">go get -u -v github.com/kardianos/govendor</span><br><span class=\"line\"></span><br><span class=\"line\">1. 初始化</span><br><span class=\"line\">cd &quot;my project in GOPATH&quot;</span><br><span class=\"line\">govendor init</span><br><span class=\"line\"></span><br><span class=\"line\">2. 添加依赖</span><br><span class=\"line\"># Add existing GOPATH files to vendor.</span><br><span class=\"line\">govendor add +external</span><br></pre></td></tr></table></figure>\n<h1 id=\"详细教程\"><a href=\"#详细教程\" class=\"headerlink\" title=\"详细教程\"></a>详细教程</h1><p>wiki:<a href=\"https://github.com/kardianos/govendor\" target=\"_blank\" rel=\"noopener\">https://github.com/kardianos/govendor</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Quick Start, also see the FAQ</span><br><span class=\"line\"># Setup your project.</span><br><span class=\"line\">cd &quot;my project in GOPATH&quot;</span><br><span class=\"line\">govendor init</span><br><span class=\"line\"></span><br><span class=\"line\"># Add existing GOPATH files to vendor.</span><br><span class=\"line\">govendor add +external</span><br><span class=\"line\"></span><br><span class=\"line\"># View your work.</span><br><span class=\"line\">govendor list</span><br><span class=\"line\"></span><br><span class=\"line\"># Look at what is using a package</span><br><span class=\"line\">govendor list -v fmt</span><br><span class=\"line\"></span><br><span class=\"line\"># Specify a specific version or revision to fetch</span><br><span class=\"line\">govendor fetch golang.org/x/net/context@a4bbce9fcae005b22ae5443f6af064d80a6f5a55</span><br><span class=\"line\">govendor fetch golang.org/x/net/context@v1   # Get latest v1.*.* tag or branch.</span><br><span class=\"line\">govendor fetch golang.org/x/net/context@=v1  # Get the tag or branch named &quot;v1&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\"># Update a package to latest, given any prior version constraint</span><br><span class=\"line\">govendor fetch golang.org/x/net/context</span><br><span class=\"line\"></span><br><span class=\"line\"># Format your repository only</span><br><span class=\"line\">govendor fmt +local</span><br><span class=\"line\"></span><br><span class=\"line\"># Build everything in your repository only</span><br><span class=\"line\">govendor install +local</span><br><span class=\"line\"></span><br><span class=\"line\"># Test your repository only</span><br><span class=\"line\">govendor test +local</span><br><span class=\"line\"></span><br><span class=\"line\">Sub-commands</span><br><span class=\"line\">\tinit     Create the &quot;vendor&quot; folder and the &quot;vendor.json&quot; file.</span><br><span class=\"line\">\tlist     List and filter existing dependencies and packages.</span><br><span class=\"line\">\tadd      Add packages from $GOPATH.</span><br><span class=\"line\">\tupdate   Update packages from $GOPATH.</span><br><span class=\"line\">\tremove   Remove packages from the vendor folder.</span><br><span class=\"line\">\tstatus   Lists any packages missing, out-of-date, or modified locally.</span><br><span class=\"line\">\tfetch    Add new or update vendor folder packages from remote repository.</span><br><span class=\"line\">\tsync     Pull packages into vendor folder from remote repository with revisions</span><br><span class=\"line\">  \t             from vendor.json file.</span><br><span class=\"line\">\tmigrate  Move packages from a legacy tool to the vendor folder with metadata.</span><br><span class=\"line\">\tget      Like &quot;go get&quot; but copies dependencies into a &quot;vendor&quot; folder.</span><br><span class=\"line\">\tlicense  List discovered licenses for the given status or import paths.</span><br><span class=\"line\">\tshell    Run a &quot;shell&quot; to make multiple sub-commands more efficient for large</span><br><span class=\"line\">\t             projects.</span><br><span class=\"line\"></span><br><span class=\"line\">\tgo tool commands that are wrapped:</span><br><span class=\"line\">\t  `+&lt;status&gt;` package selection may be used with them</span><br><span class=\"line\">\tfmt, build, install, clean, test, vet, generate, tool</span><br><span class=\"line\">Status</span><br><span class=\"line\">Packages can be specified by their &quot;status&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">\t+local    (l) packages in your project</span><br><span class=\"line\">\t+external (e) referenced packages in GOPATH but not in current project</span><br><span class=\"line\">\t+vendor   (v) packages in the vendor folder</span><br><span class=\"line\">\t+std      (s) packages in the standard library</span><br><span class=\"line\"></span><br><span class=\"line\">\t+excluded (x) external packages explicitly excluded from vendoring</span><br><span class=\"line\">\t+unused   (u) packages in the vendor folder, but unused</span><br><span class=\"line\">\t+missing  (m) referenced packages but not found</span><br><span class=\"line\"></span><br><span class=\"line\">\t+program  (p) package is a main package</span><br><span class=\"line\"></span><br><span class=\"line\">\t+outside  +external +missing</span><br><span class=\"line\">\t+all      +all packages</span><br><span class=\"line\">Status can be referenced by their initial letters.</span><br><span class=\"line\"></span><br><span class=\"line\">+std same as +s</span><br><span class=\"line\">+external same as +ext same as +e</span><br><span class=\"line\">+excluded same as +exc same as +x</span><br><span class=\"line\">Status can be logically composed:</span><br><span class=\"line\"></span><br><span class=\"line\">+local,program (local AND program) local packages that are also programs</span><br><span class=\"line\">+local +vendor (local OR vendor) local packages or vendor packages</span><br><span class=\"line\">+vendor,program +std ((vendor AND program) OR std) vendor packages that are also programs or std library packages</span><br><span class=\"line\">+vendor,^program (vendor AND NOT program) vendor package that are not &quot;main&quot; packages.</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><code>go get -u -v github.com/kardianos/govendor</code></p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0. 安装</span><br><span class=\"line\">go get -u -v github.com/kardianos/govendor</span><br><span class=\"line\"></span><br><span class=\"line\">1. 初始化</span><br><span class=\"line\">cd &quot;my project in GOPATH&quot;</span><br><span class=\"line\">govendor init</span><br><span class=\"line\"></span><br><span class=\"line\">2. 添加依赖</span><br><span class=\"line\"># Add existing GOPATH files to vendor.</span><br><span class=\"line\">govendor add +external</span><br></pre></td></tr></table></figure>\n<h1 id=\"详细教程\"><a href=\"#详细教程\" class=\"headerlink\" title=\"详细教程\"></a>详细教程</h1><p>wiki:<a href=\"https://github.com/kardianos/govendor\" target=\"_blank\" rel=\"noopener\">https://github.com/kardianos/govendor</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Quick Start, also see the FAQ</span><br><span class=\"line\"># Setup your project.</span><br><span class=\"line\">cd &quot;my project in GOPATH&quot;</span><br><span class=\"line\">govendor init</span><br><span class=\"line\"></span><br><span class=\"line\"># Add existing GOPATH files to vendor.</span><br><span class=\"line\">govendor add +external</span><br><span class=\"line\"></span><br><span class=\"line\"># View your work.</span><br><span class=\"line\">govendor list</span><br><span class=\"line\"></span><br><span class=\"line\"># Look at what is using a package</span><br><span class=\"line\">govendor list -v fmt</span><br><span class=\"line\"></span><br><span class=\"line\"># Specify a specific version or revision to fetch</span><br><span class=\"line\">govendor fetch golang.org/x/net/context@a4bbce9fcae005b22ae5443f6af064d80a6f5a55</span><br><span class=\"line\">govendor fetch golang.org/x/net/context@v1   # Get latest v1.*.* tag or branch.</span><br><span class=\"line\">govendor fetch golang.org/x/net/context@=v1  # Get the tag or branch named &quot;v1&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\"># Update a package to latest, given any prior version constraint</span><br><span class=\"line\">govendor fetch golang.org/x/net/context</span><br><span class=\"line\"></span><br><span class=\"line\"># Format your repository only</span><br><span class=\"line\">govendor fmt +local</span><br><span class=\"line\"></span><br><span class=\"line\"># Build everything in your repository only</span><br><span class=\"line\">govendor install +local</span><br><span class=\"line\"></span><br><span class=\"line\"># Test your repository only</span><br><span class=\"line\">govendor test +local</span><br><span class=\"line\"></span><br><span class=\"line\">Sub-commands</span><br><span class=\"line\">\tinit     Create the &quot;vendor&quot; folder and the &quot;vendor.json&quot; file.</span><br><span class=\"line\">\tlist     List and filter existing dependencies and packages.</span><br><span class=\"line\">\tadd      Add packages from $GOPATH.</span><br><span class=\"line\">\tupdate   Update packages from $GOPATH.</span><br><span class=\"line\">\tremove   Remove packages from the vendor folder.</span><br><span class=\"line\">\tstatus   Lists any packages missing, out-of-date, or modified locally.</span><br><span class=\"line\">\tfetch    Add new or update vendor folder packages from remote repository.</span><br><span class=\"line\">\tsync     Pull packages into vendor folder from remote repository with revisions</span><br><span class=\"line\">  \t             from vendor.json file.</span><br><span class=\"line\">\tmigrate  Move packages from a legacy tool to the vendor folder with metadata.</span><br><span class=\"line\">\tget      Like &quot;go get&quot; but copies dependencies into a &quot;vendor&quot; folder.</span><br><span class=\"line\">\tlicense  List discovered licenses for the given status or import paths.</span><br><span class=\"line\">\tshell    Run a &quot;shell&quot; to make multiple sub-commands more efficient for large</span><br><span class=\"line\">\t             projects.</span><br><span class=\"line\"></span><br><span class=\"line\">\tgo tool commands that are wrapped:</span><br><span class=\"line\">\t  `+&lt;status&gt;` package selection may be used with them</span><br><span class=\"line\">\tfmt, build, install, clean, test, vet, generate, tool</span><br><span class=\"line\">Status</span><br><span class=\"line\">Packages can be specified by their &quot;status&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">\t+local    (l) packages in your project</span><br><span class=\"line\">\t+external (e) referenced packages in GOPATH but not in current project</span><br><span class=\"line\">\t+vendor   (v) packages in the vendor folder</span><br><span class=\"line\">\t+std      (s) packages in the standard library</span><br><span class=\"line\"></span><br><span class=\"line\">\t+excluded (x) external packages explicitly excluded from vendoring</span><br><span class=\"line\">\t+unused   (u) packages in the vendor folder, but unused</span><br><span class=\"line\">\t+missing  (m) referenced packages but not found</span><br><span class=\"line\"></span><br><span class=\"line\">\t+program  (p) package is a main package</span><br><span class=\"line\"></span><br><span class=\"line\">\t+outside  +external +missing</span><br><span class=\"line\">\t+all      +all packages</span><br><span class=\"line\">Status can be referenced by their initial letters.</span><br><span class=\"line\"></span><br><span class=\"line\">+std same as +s</span><br><span class=\"line\">+external same as +ext same as +e</span><br><span class=\"line\">+excluded same as +exc same as +x</span><br><span class=\"line\">Status can be logically composed:</span><br><span class=\"line\"></span><br><span class=\"line\">+local,program (local AND program) local packages that are also programs</span><br><span class=\"line\">+local +vendor (local OR vendor) local packages or vendor packages</span><br><span class=\"line\">+vendor,program +std ((vendor AND program) OR std) vendor packages that are also programs or std library packages</span><br><span class=\"line\">+vendor,^program (vendor AND NOT program) vendor package that are not &quot;main&quot; packages.</span><br></pre></td></tr></table></figure></p>\n"},{"title":"net/http包关键点解析","date":"2019-03-03T05:23:19.000Z","_content":"\n# net/http包关键点解析\n## Go创建一个http server\n如何创建http server服务端?\n\n核心：\n\n1.保存path和handler的对应关系\n\n2.请求过来时，查找path对应的handler，然后调用handler的ServeHTTP(w, r)方法\n```go\npackage main\n\nimport (\n    \"net/http\"\n)\n\nfunc SayHello(w http.ResponseWriter, req *http.Request) {\n    w.Write([]byte(\"Hello\"))\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", SayHello)\n    http.ListenAndServe(\":8001\", nil)\n\n}\n\n```\n首先调用Http.HandleFunc\n\n按顺序做了几件事：\n\n1. 调用了DefaultServerMux的HandleFunc\n2. 调用了DefaultServerMux的Handle\n3. 往DefaultServeMux的map[string]muxEntry中增加对应的handler和路由规则\n\n其次调用http.ListenAndServe(“:8001”, nil)\n按顺序做了几件事情：\n1. 实例化Server\n2. 调用Server的ListenAndServe()\n3. 调用net.Listen(“tcp”, addr)监听端口\n4. 启动一个for循环，在循环体中Accept请求\n对每个请求实例化一个Conn，并且开启一个goroutine为这个请求进行服务go c.serve()\n读取每个请求的内容w, err := c.readRequest()\n判断header是否为空，如果没有设置handler（这个例子就没有设置handler），handler就设置为DefaultServeMux调用handler的ServeHttp\n5. 下面就进入到DefaultServerMux.ServeHttp\n根据request选择handler，并且进入到这个handler的ServeHTTP mux.handler(r).ServeHTTP(w, r)选择handler：\n    - 判断是否有路由能满足这个request（循环遍历ServerMux的muxEntry）\n\n    - 如果有路由满足，调用这个路由handler的ServeHttp\n\n    - 如果没有路由满足，调用NotFoundHandler的ServeHttp\n\n\n\n\n\n## Go 发送http请求\n步骤：\n1. 创建request\n2. 创建一个Client将request发送出去，依赖底层RT实现，可以是默认的Transport，也可以是Mock的Transport或者带缓存的Transport\n\n\n```go\nfunc httpDo() {\n    //默认的往返车RT,RoundTripper ，http.Transport默认的网络传输器net.Conn读写\n    tr := &http.Transport{\n    MaxIdleConns:       10,\n    IdleConnTimeout:    30 * time.Second,\n    DisableCompression: true,\n  }\n    client := &http.Client{Transport: tr}\n \n    req, err := http.NewRequest(\"POST\", \"http://www.baidu.com\", strings.NewReader(\"name=cjb\"))\n    if err != nil {\n        // handle error\n    }\n    req.Header.Set(\"Cookie\", \"name=anny\")\n \n    resp, err := client.Do(req)\n \n    defer resp.Body.Close()\n \n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        // handle error\n    }\n \n    fmt.Println(string(body))\n}\n```\n\n```go\n//带缓存的传输器\nfunc (c *cacheTransport) RoundTrip(r *http.Request) (*http.Response, error) {\n\n    // Check if we have the response cached..\n    // If yes, we don't have to hit the server\n    // We just return it as is from the cache store.\n    if val, err := c.Get(r); err == nil {\n        fmt.Println(\"Fetching the response from the cache\")\n        return cachedResponse([]byte(val), r)\n    }\n\n    // Ok, we don't have the response cached, the store was probably cleared.\n    // Make the request to the server.\n    resp, err := c.originalTransport.RoundTrip(r)\n\n    if err != nil {\n        return nil, err\n    }\n\n    // Get the body of the response so we can save it in the cache for the next request.\n    buf, err := httputil.DumpResponse(resp, true)\n\n    if err != nil {\n        return nil, err\n    }\n\n    // Saving it to the cache store\n    c.Set(r, string(buf))\n\n    fmt.Println(\"Fetching the data from the real source\")\n    return resp, nil\n}\n//使用：\ncachedTransport := newTransport()\n// cachedTransport 是自定义实现http.RoundTripper接口的 Transport\nclient := &http.Client{\n    Transport: cachedTransport,\n    Timeout:   time.Second * 5,\n}\n\n```\n\n\n### QA问题？\n0. net/http相关类介绍？\n```go\nServer： 服务器类，接收请求后起协程 处理请求：go srv.newConn(rw).serve(ctx)\n\nconn：server的连接实例，负责解析请求，构建Request和Response，并将参数传递给路由Mux处理\n\nDefaultServerMux：默认路由，负责根据path找对应的handler执行，对应的ServeHTTP(w,r)\n\nHandler：业务自己写的逻辑函数，包含一个ServeHTTP(w,r)方法\n\nRequest：请求体，包含请求头和请求体等各种参数\n\nResponse：返回体，包含请求体，返回的conn实例\n\nClient：客户端client，调用底层传输器发送请求\n\nTransport：Http默认传输器，发送网络请求\n\n\n```\n\n1. 函数HandlerFunc变成handler?【设计模式之适配器模式】\n```go\ntype Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n\n//适配器模式，函数是一个类，也可以拥有函数\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n\tf(w, r)\n}\n\n```\n\n2. DefaultServerMux可以替换吗？\n\n可以，如使用httprouter替换默认的DefaultServerMux路由\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/julienschmidt/httprouter\"\n    \"net/http\"\n    \"log\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n    fmt.Fprint(w, \"Welcome!\\n\")\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    fmt.Fprintf(w, \"hello, %s!\\n\", ps.ByName(\"name\"))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\"/\", Index)\n    router.GET(\"/hello/:name\", Hello)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n\n```","source":"_posts/golang/net-http包关键点解析.md","raw":"---\ntitle: net/http包关键点解析\ntags:\n  - net/http\ncategories:\n  - go\ndate: 2019-03-03 13:23:19\n---\n\n# net/http包关键点解析\n## Go创建一个http server\n如何创建http server服务端?\n\n核心：\n\n1.保存path和handler的对应关系\n\n2.请求过来时，查找path对应的handler，然后调用handler的ServeHTTP(w, r)方法\n```go\npackage main\n\nimport (\n    \"net/http\"\n)\n\nfunc SayHello(w http.ResponseWriter, req *http.Request) {\n    w.Write([]byte(\"Hello\"))\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", SayHello)\n    http.ListenAndServe(\":8001\", nil)\n\n}\n\n```\n首先调用Http.HandleFunc\n\n按顺序做了几件事：\n\n1. 调用了DefaultServerMux的HandleFunc\n2. 调用了DefaultServerMux的Handle\n3. 往DefaultServeMux的map[string]muxEntry中增加对应的handler和路由规则\n\n其次调用http.ListenAndServe(“:8001”, nil)\n按顺序做了几件事情：\n1. 实例化Server\n2. 调用Server的ListenAndServe()\n3. 调用net.Listen(“tcp”, addr)监听端口\n4. 启动一个for循环，在循环体中Accept请求\n对每个请求实例化一个Conn，并且开启一个goroutine为这个请求进行服务go c.serve()\n读取每个请求的内容w, err := c.readRequest()\n判断header是否为空，如果没有设置handler（这个例子就没有设置handler），handler就设置为DefaultServeMux调用handler的ServeHttp\n5. 下面就进入到DefaultServerMux.ServeHttp\n根据request选择handler，并且进入到这个handler的ServeHTTP mux.handler(r).ServeHTTP(w, r)选择handler：\n    - 判断是否有路由能满足这个request（循环遍历ServerMux的muxEntry）\n\n    - 如果有路由满足，调用这个路由handler的ServeHttp\n\n    - 如果没有路由满足，调用NotFoundHandler的ServeHttp\n\n\n\n\n\n## Go 发送http请求\n步骤：\n1. 创建request\n2. 创建一个Client将request发送出去，依赖底层RT实现，可以是默认的Transport，也可以是Mock的Transport或者带缓存的Transport\n\n\n```go\nfunc httpDo() {\n    //默认的往返车RT,RoundTripper ，http.Transport默认的网络传输器net.Conn读写\n    tr := &http.Transport{\n    MaxIdleConns:       10,\n    IdleConnTimeout:    30 * time.Second,\n    DisableCompression: true,\n  }\n    client := &http.Client{Transport: tr}\n \n    req, err := http.NewRequest(\"POST\", \"http://www.baidu.com\", strings.NewReader(\"name=cjb\"))\n    if err != nil {\n        // handle error\n    }\n    req.Header.Set(\"Cookie\", \"name=anny\")\n \n    resp, err := client.Do(req)\n \n    defer resp.Body.Close()\n \n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        // handle error\n    }\n \n    fmt.Println(string(body))\n}\n```\n\n```go\n//带缓存的传输器\nfunc (c *cacheTransport) RoundTrip(r *http.Request) (*http.Response, error) {\n\n    // Check if we have the response cached..\n    // If yes, we don't have to hit the server\n    // We just return it as is from the cache store.\n    if val, err := c.Get(r); err == nil {\n        fmt.Println(\"Fetching the response from the cache\")\n        return cachedResponse([]byte(val), r)\n    }\n\n    // Ok, we don't have the response cached, the store was probably cleared.\n    // Make the request to the server.\n    resp, err := c.originalTransport.RoundTrip(r)\n\n    if err != nil {\n        return nil, err\n    }\n\n    // Get the body of the response so we can save it in the cache for the next request.\n    buf, err := httputil.DumpResponse(resp, true)\n\n    if err != nil {\n        return nil, err\n    }\n\n    // Saving it to the cache store\n    c.Set(r, string(buf))\n\n    fmt.Println(\"Fetching the data from the real source\")\n    return resp, nil\n}\n//使用：\ncachedTransport := newTransport()\n// cachedTransport 是自定义实现http.RoundTripper接口的 Transport\nclient := &http.Client{\n    Transport: cachedTransport,\n    Timeout:   time.Second * 5,\n}\n\n```\n\n\n### QA问题？\n0. net/http相关类介绍？\n```go\nServer： 服务器类，接收请求后起协程 处理请求：go srv.newConn(rw).serve(ctx)\n\nconn：server的连接实例，负责解析请求，构建Request和Response，并将参数传递给路由Mux处理\n\nDefaultServerMux：默认路由，负责根据path找对应的handler执行，对应的ServeHTTP(w,r)\n\nHandler：业务自己写的逻辑函数，包含一个ServeHTTP(w,r)方法\n\nRequest：请求体，包含请求头和请求体等各种参数\n\nResponse：返回体，包含请求体，返回的conn实例\n\nClient：客户端client，调用底层传输器发送请求\n\nTransport：Http默认传输器，发送网络请求\n\n\n```\n\n1. 函数HandlerFunc变成handler?【设计模式之适配器模式】\n```go\ntype Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n\n//适配器模式，函数是一个类，也可以拥有函数\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n\tf(w, r)\n}\n\n```\n\n2. DefaultServerMux可以替换吗？\n\n可以，如使用httprouter替换默认的DefaultServerMux路由\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/julienschmidt/httprouter\"\n    \"net/http\"\n    \"log\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n    fmt.Fprint(w, \"Welcome!\\n\")\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    fmt.Fprintf(w, \"hello, %s!\\n\", ps.ByName(\"name\"))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\"/\", Index)\n    router.GET(\"/hello/:name\", Hello)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n\n```","slug":"golang/net-http包关键点解析","published":1,"updated":"2019-03-03T08:18:21.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dd002owl38p557pztp","content":"<h1 id=\"net-http包关键点解析\"><a href=\"#net-http包关键点解析\" class=\"headerlink\" title=\"net/http包关键点解析\"></a>net/http包关键点解析</h1><h2 id=\"Go创建一个http-server\"><a href=\"#Go创建一个http-server\" class=\"headerlink\" title=\"Go创建一个http server\"></a>Go创建一个http server</h2><p>如何创建http server服务端?</p>\n<p>核心：</p>\n<p>1.保存path和handler的对应关系</p>\n<p>2.请求过来时，查找path对应的handler，然后调用handler的ServeHTTP(w, r)方法<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SayHello</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Hello\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/hello\"</span>, SayHello)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8001\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先调用Http.HandleFunc</p>\n<p>按顺序做了几件事：</p>\n<ol>\n<li>调用了DefaultServerMux的HandleFunc</li>\n<li>调用了DefaultServerMux的Handle</li>\n<li>往DefaultServeMux的map[string]muxEntry中增加对应的handler和路由规则</li>\n</ol>\n<p>其次调用http.ListenAndServe(“:8001”, nil)<br>按顺序做了几件事情：</p>\n<ol>\n<li>实例化Server</li>\n<li>调用Server的ListenAndServe()</li>\n<li>调用net.Listen(“tcp”, addr)监听端口</li>\n<li>启动一个for循环，在循环体中Accept请求<br>对每个请求实例化一个Conn，并且开启一个goroutine为这个请求进行服务go c.serve()<br>读取每个请求的内容w, err := c.readRequest()<br>判断header是否为空，如果没有设置handler（这个例子就没有设置handler），handler就设置为DefaultServeMux调用handler的ServeHttp</li>\n<li><p>下面就进入到DefaultServerMux.ServeHttp<br>根据request选择handler，并且进入到这个handler的ServeHTTP mux.handler(r).ServeHTTP(w, r)选择handler：</p>\n<ul>\n<li><p>判断是否有路由能满足这个request（循环遍历ServerMux的muxEntry）</p>\n</li>\n<li><p>如果有路由满足，调用这个路由handler的ServeHttp</p>\n</li>\n<li><p>如果没有路由满足，调用NotFoundHandler的ServeHttp</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Go-发送http请求\"><a href=\"#Go-发送http请求\" class=\"headerlink\" title=\"Go 发送http请求\"></a>Go 发送http请求</h2><p>步骤：</p>\n<ol>\n<li>创建request</li>\n<li>创建一个Client将request发送出去，依赖底层RT实现，可以是默认的Transport，也可以是Mock的Transport或者带缓存的Transport</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">httpDo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认的往返车RT,RoundTripper ，http.Transport默认的网络传输器net.Conn读写</span></span><br><span class=\"line\">    tr := &amp;http.Transport&#123;</span><br><span class=\"line\">    MaxIdleConns:       <span class=\"number\">10</span>,</span><br><span class=\"line\">    IdleConnTimeout:    <span class=\"number\">30</span> * time.Second,</span><br><span class=\"line\">    DisableCompression: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    client := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    req, err := http.NewRequest(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"http://www.baidu.com\"</span>, strings.NewReader(<span class=\"string\">\"name=cjb\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    req.Header.Set(<span class=\"string\">\"Cookie\"</span>, <span class=\"string\">\"name=anny\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    resp, err := client.Do(req)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">defer</span> resp.Body.Close()</span><br><span class=\"line\"> </span><br><span class=\"line\">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(body))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//带缓存的传输器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *cacheTransport)</span> <span class=\"title\">RoundTrip</span><span class=\"params\">(r *http.Request)</span> <span class=\"params\">(*http.Response, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if we have the response cached..</span></span><br><span class=\"line\">    <span class=\"comment\">// If yes, we don't have to hit the server</span></span><br><span class=\"line\">    <span class=\"comment\">// We just return it as is from the cache store.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> val, err := c.Get(r); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"Fetching the response from the cache\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedResponse([]<span class=\"keyword\">byte</span>(val), r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ok, we don't have the response cached, the store was probably cleared.</span></span><br><span class=\"line\">    <span class=\"comment\">// Make the request to the server.</span></span><br><span class=\"line\">    resp, err := c.originalTransport.RoundTrip(r)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get the body of the response so we can save it in the cache for the next request.</span></span><br><span class=\"line\">    buf, err := httputil.DumpResponse(resp, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Saving it to the cache store</span></span><br><span class=\"line\">    c.Set(r, <span class=\"keyword\">string</span>(buf))</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Fetching the data from the real source\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用：</span></span><br><span class=\"line\">cachedTransport := newTransport()</span><br><span class=\"line\"><span class=\"comment\">// cachedTransport 是自定义实现http.RoundTripper接口的 Transport</span></span><br><span class=\"line\">client := &amp;http.Client&#123;</span><br><span class=\"line\">    Transport: cachedTransport,</span><br><span class=\"line\">    Timeout:   time.Second * <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"QA问题？\"><a href=\"#QA问题？\" class=\"headerlink\" title=\"QA问题？\"></a>QA问题？</h3><ol start=\"0\">\n<li><p>net/http相关类介绍？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server： 服务器类，接收请求后起协程 处理请求：<span class=\"keyword\">go</span> srv.newConn(rw).serve(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">conn：server的连接实例，负责解析请求，构建Request和Response，并将参数传递给路由Mux处理</span><br><span class=\"line\"></span><br><span class=\"line\">DefaultServerMux：默认路由，负责根据path找对应的handler执行，对应的ServeHTTP(w,r)</span><br><span class=\"line\"></span><br><span class=\"line\">Handler：业务自己写的逻辑函数，包含一个ServeHTTP(w,r)方法</span><br><span class=\"line\"></span><br><span class=\"line\">Request：请求体，包含请求头和请求体等各种参数</span><br><span class=\"line\"></span><br><span class=\"line\">Response：返回体，包含请求体，返回的conn实例</span><br><span class=\"line\"></span><br><span class=\"line\">Client：客户端client，调用底层传输器发送请求</span><br><span class=\"line\"></span><br><span class=\"line\">Transport：Http默认传输器，发送网络请求</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数HandlerFunc变成handler?【设计模式之适配器模式】</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Handler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServeHTTP(ResponseWriter, *Request)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//适配器模式，函数是一个类，也可以拥有函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f HandlerFunc)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class=\"line\">\tf(w, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DefaultServerMux可以替换吗？</p>\n</li>\n</ol>\n<p>可以，如使用httprouter替换默认的DefaultServerMux路由<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/julienschmidt/httprouter\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprint(w, <span class=\"string\">\"Welcome!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintf(w, <span class=\"string\">\"hello, %s!\\n\"</span>, ps.ByName(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    router := httprouter.New()</span><br><span class=\"line\">    router.GET(<span class=\"string\">\"/\"</span>, Index)</span><br><span class=\"line\">    router.GET(<span class=\"string\">\"/hello/:name\"</span>, Hello)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"net-http包关键点解析\"><a href=\"#net-http包关键点解析\" class=\"headerlink\" title=\"net/http包关键点解析\"></a>net/http包关键点解析</h1><h2 id=\"Go创建一个http-server\"><a href=\"#Go创建一个http-server\" class=\"headerlink\" title=\"Go创建一个http server\"></a>Go创建一个http server</h2><p>如何创建http server服务端?</p>\n<p>核心：</p>\n<p>1.保存path和handler的对应关系</p>\n<p>2.请求过来时，查找path对应的handler，然后调用handler的ServeHTTP(w, r)方法<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SayHello</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Hello\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/hello\"</span>, SayHello)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8001\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先调用Http.HandleFunc</p>\n<p>按顺序做了几件事：</p>\n<ol>\n<li>调用了DefaultServerMux的HandleFunc</li>\n<li>调用了DefaultServerMux的Handle</li>\n<li>往DefaultServeMux的map[string]muxEntry中增加对应的handler和路由规则</li>\n</ol>\n<p>其次调用http.ListenAndServe(“:8001”, nil)<br>按顺序做了几件事情：</p>\n<ol>\n<li>实例化Server</li>\n<li>调用Server的ListenAndServe()</li>\n<li>调用net.Listen(“tcp”, addr)监听端口</li>\n<li>启动一个for循环，在循环体中Accept请求<br>对每个请求实例化一个Conn，并且开启一个goroutine为这个请求进行服务go c.serve()<br>读取每个请求的内容w, err := c.readRequest()<br>判断header是否为空，如果没有设置handler（这个例子就没有设置handler），handler就设置为DefaultServeMux调用handler的ServeHttp</li>\n<li><p>下面就进入到DefaultServerMux.ServeHttp<br>根据request选择handler，并且进入到这个handler的ServeHTTP mux.handler(r).ServeHTTP(w, r)选择handler：</p>\n<ul>\n<li><p>判断是否有路由能满足这个request（循环遍历ServerMux的muxEntry）</p>\n</li>\n<li><p>如果有路由满足，调用这个路由handler的ServeHttp</p>\n</li>\n<li><p>如果没有路由满足，调用NotFoundHandler的ServeHttp</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Go-发送http请求\"><a href=\"#Go-发送http请求\" class=\"headerlink\" title=\"Go 发送http请求\"></a>Go 发送http请求</h2><p>步骤：</p>\n<ol>\n<li>创建request</li>\n<li>创建一个Client将request发送出去，依赖底层RT实现，可以是默认的Transport，也可以是Mock的Transport或者带缓存的Transport</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">httpDo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认的往返车RT,RoundTripper ，http.Transport默认的网络传输器net.Conn读写</span></span><br><span class=\"line\">    tr := &amp;http.Transport&#123;</span><br><span class=\"line\">    MaxIdleConns:       <span class=\"number\">10</span>,</span><br><span class=\"line\">    IdleConnTimeout:    <span class=\"number\">30</span> * time.Second,</span><br><span class=\"line\">    DisableCompression: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    client := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    req, err := http.NewRequest(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"http://www.baidu.com\"</span>, strings.NewReader(<span class=\"string\">\"name=cjb\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    req.Header.Set(<span class=\"string\">\"Cookie\"</span>, <span class=\"string\">\"name=anny\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    resp, err := client.Do(req)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">defer</span> resp.Body.Close()</span><br><span class=\"line\"> </span><br><span class=\"line\">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(body))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//带缓存的传输器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *cacheTransport)</span> <span class=\"title\">RoundTrip</span><span class=\"params\">(r *http.Request)</span> <span class=\"params\">(*http.Response, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if we have the response cached..</span></span><br><span class=\"line\">    <span class=\"comment\">// If yes, we don't have to hit the server</span></span><br><span class=\"line\">    <span class=\"comment\">// We just return it as is from the cache store.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> val, err := c.Get(r); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"Fetching the response from the cache\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedResponse([]<span class=\"keyword\">byte</span>(val), r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ok, we don't have the response cached, the store was probably cleared.</span></span><br><span class=\"line\">    <span class=\"comment\">// Make the request to the server.</span></span><br><span class=\"line\">    resp, err := c.originalTransport.RoundTrip(r)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get the body of the response so we can save it in the cache for the next request.</span></span><br><span class=\"line\">    buf, err := httputil.DumpResponse(resp, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Saving it to the cache store</span></span><br><span class=\"line\">    c.Set(r, <span class=\"keyword\">string</span>(buf))</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Fetching the data from the real source\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用：</span></span><br><span class=\"line\">cachedTransport := newTransport()</span><br><span class=\"line\"><span class=\"comment\">// cachedTransport 是自定义实现http.RoundTripper接口的 Transport</span></span><br><span class=\"line\">client := &amp;http.Client&#123;</span><br><span class=\"line\">    Transport: cachedTransport,</span><br><span class=\"line\">    Timeout:   time.Second * <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"QA问题？\"><a href=\"#QA问题？\" class=\"headerlink\" title=\"QA问题？\"></a>QA问题？</h3><ol start=\"0\">\n<li><p>net/http相关类介绍？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server： 服务器类，接收请求后起协程 处理请求：<span class=\"keyword\">go</span> srv.newConn(rw).serve(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">conn：server的连接实例，负责解析请求，构建Request和Response，并将参数传递给路由Mux处理</span><br><span class=\"line\"></span><br><span class=\"line\">DefaultServerMux：默认路由，负责根据path找对应的handler执行，对应的ServeHTTP(w,r)</span><br><span class=\"line\"></span><br><span class=\"line\">Handler：业务自己写的逻辑函数，包含一个ServeHTTP(w,r)方法</span><br><span class=\"line\"></span><br><span class=\"line\">Request：请求体，包含请求头和请求体等各种参数</span><br><span class=\"line\"></span><br><span class=\"line\">Response：返回体，包含请求体，返回的conn实例</span><br><span class=\"line\"></span><br><span class=\"line\">Client：客户端client，调用底层传输器发送请求</span><br><span class=\"line\"></span><br><span class=\"line\">Transport：Http默认传输器，发送网络请求</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数HandlerFunc变成handler?【设计模式之适配器模式】</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Handler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServeHTTP(ResponseWriter, *Request)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//适配器模式，函数是一个类，也可以拥有函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f HandlerFunc)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class=\"line\">\tf(w, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DefaultServerMux可以替换吗？</p>\n</li>\n</ol>\n<p>可以，如使用httprouter替换默认的DefaultServerMux路由<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/julienschmidt/httprouter\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprint(w, <span class=\"string\">\"Welcome!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintf(w, <span class=\"string\">\"hello, %s!\\n\"</span>, ps.ByName(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    router := httprouter.New()</span><br><span class=\"line\">    router.GET(<span class=\"string\">\"/\"</span>, Index)</span><br><span class=\"line\">    router.GET(<span class=\"string\">\"/hello/:name\"</span>, Hello)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"nodejs问题","date":"2019-10-07T12:59:21.000Z","_content":"Nodejs踩坑\n\n1.执行函数后面记得加分号结束;\n\n```\nfunction hello(uid,callback)\n\nhello(uid,function(){});//一定要加;\n\n```\n\nfunctionfunction\n\n2.判断条件\n\n```\na = []\nb = \"\"\nc = {}\nd = 0\nf = false\ng=\"0\"\nh=undefined\ni=null\n//{}对象\nif (a) {\n    console.info(\"a\")\n}\nif (a.length) {\n    console.info(\"a.length\")\n}\nif (b) {\n    console.info(\"b\")\n}\nif (b.length) {\n    console.info(\"b.length\")\n}\n//[]也是对象\nif (c) {\n    console.info(\"c\")\n}\n\nif (d) {\n    console.info(\"d\")\n}\nif(d.length) {\n    console.info(\"d.length\")\n}\n\nif (f) {\n    console.info(\"f\")\n}\nif (f.length) {\n    console.info(\"f.length\")\n}\n//字符串\nif (g) {\n    console.info('g')\n}\n//转为0了\nif(parseInt(g)){\n    console.info('parseInt g')\n}\nif (h) {\n    console.info('h')\n}\nif (i) {\n    console.info('i')\n}\n\n\n//a\n//c\n//g\n\n```\n\n","source":"_posts/javascript/nodejs问题.md","raw":"---\ntitle: nodejs问题\ntags:\n  - tags\ncategories:\n  - categories\ndate: 2019-10-07 20:59:21\n---\nNodejs踩坑\n\n1.执行函数后面记得加分号结束;\n\n```\nfunction hello(uid,callback)\n\nhello(uid,function(){});//一定要加;\n\n```\n\nfunctionfunction\n\n2.判断条件\n\n```\na = []\nb = \"\"\nc = {}\nd = 0\nf = false\ng=\"0\"\nh=undefined\ni=null\n//{}对象\nif (a) {\n    console.info(\"a\")\n}\nif (a.length) {\n    console.info(\"a.length\")\n}\nif (b) {\n    console.info(\"b\")\n}\nif (b.length) {\n    console.info(\"b.length\")\n}\n//[]也是对象\nif (c) {\n    console.info(\"c\")\n}\n\nif (d) {\n    console.info(\"d\")\n}\nif(d.length) {\n    console.info(\"d.length\")\n}\n\nif (f) {\n    console.info(\"f\")\n}\nif (f.length) {\n    console.info(\"f.length\")\n}\n//字符串\nif (g) {\n    console.info('g')\n}\n//转为0了\nif(parseInt(g)){\n    console.info('parseInt g')\n}\nif (h) {\n    console.info('h')\n}\nif (i) {\n    console.info('i')\n}\n\n\n//a\n//c\n//g\n\n```\n\n","slug":"javascript/nodejs问题","published":1,"updated":"2019-10-07T13:00:22.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0de002rwl38vhjfp2bm","content":"<p>Nodejs踩坑</p>\n<p>1.执行函数后面记得加分号结束;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function hello(uid,callback)</span><br><span class=\"line\"></span><br><span class=\"line\">hello(uid,function()&#123;&#125;);//一定要加;</span><br></pre></td></tr></table></figure>\n<p>functionfunction</p>\n<p>2.判断条件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = []</span><br><span class=\"line\">b = &quot;&quot;</span><br><span class=\"line\">c = &#123;&#125;</span><br><span class=\"line\">d = 0</span><br><span class=\"line\">f = false</span><br><span class=\"line\">g=&quot;0&quot;</span><br><span class=\"line\">h=undefined</span><br><span class=\"line\">i=null</span><br><span class=\"line\">//&#123;&#125;对象</span><br><span class=\"line\">if (a) &#123;</span><br><span class=\"line\">    console.info(&quot;a&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (a.length) &#123;</span><br><span class=\"line\">    console.info(&quot;a.length&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (b) &#123;</span><br><span class=\"line\">    console.info(&quot;b&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (b.length) &#123;</span><br><span class=\"line\">    console.info(&quot;b.length&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//[]也是对象</span><br><span class=\"line\">if (c) &#123;</span><br><span class=\"line\">    console.info(&quot;c&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (d) &#123;</span><br><span class=\"line\">    console.info(&quot;d&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(d.length) &#123;</span><br><span class=\"line\">    console.info(&quot;d.length&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (f) &#123;</span><br><span class=\"line\">    console.info(&quot;f&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (f.length) &#123;</span><br><span class=\"line\">    console.info(&quot;f.length&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//字符串</span><br><span class=\"line\">if (g) &#123;</span><br><span class=\"line\">    console.info(&apos;g&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//转为0了</span><br><span class=\"line\">if(parseInt(g))&#123;</span><br><span class=\"line\">    console.info(&apos;parseInt g&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (h) &#123;</span><br><span class=\"line\">    console.info(&apos;h&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (i) &#123;</span><br><span class=\"line\">    console.info(&apos;i&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//a</span><br><span class=\"line\">//c</span><br><span class=\"line\">//g</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Nodejs踩坑</p>\n<p>1.执行函数后面记得加分号结束;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function hello(uid,callback)</span><br><span class=\"line\"></span><br><span class=\"line\">hello(uid,function()&#123;&#125;);//一定要加;</span><br></pre></td></tr></table></figure>\n<p>functionfunction</p>\n<p>2.判断条件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = []</span><br><span class=\"line\">b = &quot;&quot;</span><br><span class=\"line\">c = &#123;&#125;</span><br><span class=\"line\">d = 0</span><br><span class=\"line\">f = false</span><br><span class=\"line\">g=&quot;0&quot;</span><br><span class=\"line\">h=undefined</span><br><span class=\"line\">i=null</span><br><span class=\"line\">//&#123;&#125;对象</span><br><span class=\"line\">if (a) &#123;</span><br><span class=\"line\">    console.info(&quot;a&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (a.length) &#123;</span><br><span class=\"line\">    console.info(&quot;a.length&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (b) &#123;</span><br><span class=\"line\">    console.info(&quot;b&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (b.length) &#123;</span><br><span class=\"line\">    console.info(&quot;b.length&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//[]也是对象</span><br><span class=\"line\">if (c) &#123;</span><br><span class=\"line\">    console.info(&quot;c&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (d) &#123;</span><br><span class=\"line\">    console.info(&quot;d&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(d.length) &#123;</span><br><span class=\"line\">    console.info(&quot;d.length&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (f) &#123;</span><br><span class=\"line\">    console.info(&quot;f&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (f.length) &#123;</span><br><span class=\"line\">    console.info(&quot;f.length&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//字符串</span><br><span class=\"line\">if (g) &#123;</span><br><span class=\"line\">    console.info(&apos;g&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//转为0了</span><br><span class=\"line\">if(parseInt(g))&#123;</span><br><span class=\"line\">    console.info(&apos;parseInt g&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (h) &#123;</span><br><span class=\"line\">    console.info(&apos;h&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (i) &#123;</span><br><span class=\"line\">    console.info(&apos;i&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//a</span><br><span class=\"line\">//c</span><br><span class=\"line\">//g</span><br></pre></td></tr></table></figure>\n"},{"title":"linux 服务器常用命令整理","date":"2018-07-21T13:24:15.000Z","_content":"\n# linux 服务器常用命令整理\n\n### 目录\n\n- **网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload**\n- **网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc**\n- **抓包工具 - charles**\n- **内存检查 - free \\ meminfo**\n- **系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat**\n- **系统调用追踪 - strace \\ gcore**\n- **文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate**\n- **开发效率 - tmux**\n\n### 常见命令\n\n#### tcpdump\n\n1. tcp:用来过滤数据报的类型\n2. -i eth1 : 只抓经过接口eth1的包\n3. -t : 不显示时间戳\n4. -s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包\n5. -c 100 : 只抓取100个数据包\n6. dst port !22: 不抓取目标端口是22数据包\n7. src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24\n8. -A：显示数据包内容 \n\n示例：\n\n`tcpdump -i any -v port 8888`\n\n`tcpdump -i any -A port 8888  `\n\nsudo tcpdump port 17280 -i lo0  -X\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg)\n\n\n\n#### netstat\n\n查看所有连接\n\n`netstat -autnp`\n\n查看监听的tcp服务\n\n`netstat -altnp`  \n\n看tcp端口\n\n`netstat -ltnp`\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg)\n\n\n\n#### ss\n\n- `ss -pl`   查看每个进程及其监听的端口\n- `ss -t -a`  查看所有的tcp连接\n- `ss -u -a`  查看所有的udp连接\n\n#### lsof\n\n- `lsof -i :8888`  查看端口8888进程信息\n- `lsof -p 7915` 查看进程7915打开的fd信息\n\n#### scp\n\n- `scp -r src remote:/tmp`  本地拷贝到远端\n- `scp -r remote:/tmp/src .`  远端拷贝到本地\n- `scp -3  remote:/tmp/a.tar   remote2:/tmp/`  以本地为跳板机，将remote机器上文件拷贝到remote2\n\n#### rsync\n\n- `rsync -av /home/mail/ 192.168.11.12:/home/mail/`\n- `rsync -av 192.168.11.11:/home/mail/ /home/mail/`\n\n#### nc\n\n- `nc -l 8888`   本地启动8888端口\n- `nc -l 8888 > a.tgz`   接收文件\n- `nc ali-a-bpc-userdevelop01.bj:8888   < a.tgz` 发送文件到远端\n\n#### vmstat\n\n- `vmstat 1 10`对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。\n- 对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg)\n\n\n\n#### iostat\n\n- `iostat -x` 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg)\n\n\n\n#### top\n\n- 1  按CPU核数查看\n- P\n- M\n- c 查看完整进程命令\n- top -Hp pid  查看线程数\n\n#### ps\n\n- `ps -eo “pid,cmd,lstart”  | grep pid`   查看进程启动时间\n- `ps -ef f`  查看最近进程（常用）\n\n#### find\n\n- `find . -type f -mtime +3`   修改时间大于3天的文件\n- `find . -type f -mtime +3 | xargs rm -rf`  查找并删除\n\n#### du\n\n- `du -sk * | sort -n | cut -f2 | xargs -d '\\n' du -sh` 按文件大小排序显示\n- `du -hs` 常用\n\n#### awk\n\n`grep 'update_profile.*Android' access-20180131.log |awk -F 'POST' '{print $2}'|awk -F '&' '{print $26}'|awk -F ' ' '{print $1}'|awk -F '=' '{print $2}'|sort -n|uniq -c|sort -nr|head -100`\n\n-F 以空格分割\n\n\n### 扩展\n```\n\n# xargs 使用\n//查询redis members里面的值\nredis-cli smembers myset|awk '{print $1}'|xargs -I {} redis-cli get {}\n\n```\n\n\n### 查看进程监听的端口\n```\n\n查看程序对应进程号：ps –ef|grep 进程名\n\nREDHAT :查看进程号所占用的端口号：netstat –nltp|grep 进程号\n\nubuntu:查看进程占用端口号：netstat -anp|grep pid\n\nLinux下查看端口号所使用的进程号：\n\n使用lsof命令： lsof –i:端口号\n\nvim 块注释\nctrl+v\n选择\n大写I\n输入注释符号\nESC 等一秒\n\n```","source":"_posts/linux/linux常用命令.md","raw":"---\ntitle: linux 服务器常用命令整理\ndate: 2018-07-21 21:24:15\ncategories: \n- linux\ntags: \n- linux\n- cmd\n---\n\n# linux 服务器常用命令整理\n\n### 目录\n\n- **网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload**\n- **网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc**\n- **抓包工具 - charles**\n- **内存检查 - free \\ meminfo**\n- **系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat**\n- **系统调用追踪 - strace \\ gcore**\n- **文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate**\n- **开发效率 - tmux**\n\n### 常见命令\n\n#### tcpdump\n\n1. tcp:用来过滤数据报的类型\n2. -i eth1 : 只抓经过接口eth1的包\n3. -t : 不显示时间戳\n4. -s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包\n5. -c 100 : 只抓取100个数据包\n6. dst port !22: 不抓取目标端口是22数据包\n7. src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24\n8. -A：显示数据包内容 \n\n示例：\n\n`tcpdump -i any -v port 8888`\n\n`tcpdump -i any -A port 8888  `\n\nsudo tcpdump port 17280 -i lo0  -X\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg)\n\n\n\n#### netstat\n\n查看所有连接\n\n`netstat -autnp`\n\n查看监听的tcp服务\n\n`netstat -altnp`  \n\n看tcp端口\n\n`netstat -ltnp`\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg)\n\n\n\n#### ss\n\n- `ss -pl`   查看每个进程及其监听的端口\n- `ss -t -a`  查看所有的tcp连接\n- `ss -u -a`  查看所有的udp连接\n\n#### lsof\n\n- `lsof -i :8888`  查看端口8888进程信息\n- `lsof -p 7915` 查看进程7915打开的fd信息\n\n#### scp\n\n- `scp -r src remote:/tmp`  本地拷贝到远端\n- `scp -r remote:/tmp/src .`  远端拷贝到本地\n- `scp -3  remote:/tmp/a.tar   remote2:/tmp/`  以本地为跳板机，将remote机器上文件拷贝到remote2\n\n#### rsync\n\n- `rsync -av /home/mail/ 192.168.11.12:/home/mail/`\n- `rsync -av 192.168.11.11:/home/mail/ /home/mail/`\n\n#### nc\n\n- `nc -l 8888`   本地启动8888端口\n- `nc -l 8888 > a.tgz`   接收文件\n- `nc ali-a-bpc-userdevelop01.bj:8888   < a.tgz` 发送文件到远端\n\n#### vmstat\n\n- `vmstat 1 10`对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。\n- 对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。\n\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg)\n\n\n\n#### iostat\n\n- `iostat -x` 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg)\n\n\n\n#### top\n\n- 1  按CPU核数查看\n- P\n- M\n- c 查看完整进程命令\n- top -Hp pid  查看线程数\n\n#### ps\n\n- `ps -eo “pid,cmd,lstart”  | grep pid`   查看进程启动时间\n- `ps -ef f`  查看最近进程（常用）\n\n#### find\n\n- `find . -type f -mtime +3`   修改时间大于3天的文件\n- `find . -type f -mtime +3 | xargs rm -rf`  查找并删除\n\n#### du\n\n- `du -sk * | sort -n | cut -f2 | xargs -d '\\n' du -sh` 按文件大小排序显示\n- `du -hs` 常用\n\n#### awk\n\n`grep 'update_profile.*Android' access-20180131.log |awk -F 'POST' '{print $2}'|awk -F '&' '{print $26}'|awk -F ' ' '{print $1}'|awk -F '=' '{print $2}'|sort -n|uniq -c|sort -nr|head -100`\n\n-F 以空格分割\n\n\n### 扩展\n```\n\n# xargs 使用\n//查询redis members里面的值\nredis-cli smembers myset|awk '{print $1}'|xargs -I {} redis-cli get {}\n\n```\n\n\n### 查看进程监听的端口\n```\n\n查看程序对应进程号：ps –ef|grep 进程名\n\nREDHAT :查看进程号所占用的端口号：netstat –nltp|grep 进程号\n\nubuntu:查看进程占用端口号：netstat -anp|grep pid\n\nLinux下查看端口号所使用的进程号：\n\n使用lsof命令： lsof –i:端口号\n\nvim 块注释\nctrl+v\n选择\n大写I\n输入注释符号\nESC 等一秒\n\n```","slug":"linux/linux常用命令","published":1,"updated":"2019-10-07T12:36:16.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dg002uwl38163e0efq","content":"<h1 id=\"linux-服务器常用命令整理\"><a href=\"#linux-服务器常用命令整理\" class=\"headerlink\" title=\"linux 服务器常用命令整理\"></a>linux 服务器常用命令整理</h1><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><strong>网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload</strong></li>\n<li><strong>网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc</strong></li>\n<li><strong>抓包工具 - charles</strong></li>\n<li><strong>内存检查 - free \\ meminfo</strong></li>\n<li><strong>系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat</strong></li>\n<li><strong>系统调用追踪 - strace \\ gcore</strong></li>\n<li><strong>文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate</strong></li>\n<li><strong>开发效率 - tmux</strong></li>\n</ul>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><h4 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h4><ol>\n<li>tcp:用来过滤数据报的类型</li>\n<li>-i eth1 : 只抓经过接口eth1的包</li>\n<li>-t : 不显示时间戳</li>\n<li>-s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包</li>\n<li>-c 100 : 只抓取100个数据包</li>\n<li>dst port !22: 不抓取目标端口是22数据包</li>\n<li>src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24</li>\n<li>-A：显示数据包内容 </li>\n</ol>\n<p>示例：</p>\n<p><code>tcpdump -i any -v port 8888</code></p>\n<p><code>tcpdump -i any -A port 8888</code></p>\n<p>sudo tcpdump port 17280 -i lo0  -X</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg\" alt=\"\"></p>\n<h4 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h4><p>查看所有连接</p>\n<p><code>netstat -autnp</code></p>\n<p>查看监听的tcp服务</p>\n<p><code>netstat -altnp</code>  </p>\n<p>看tcp端口</p>\n<p><code>netstat -ltnp</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg\" alt=\"\"></p>\n<h4 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h4><ul>\n<li><code>ss -pl</code>   查看每个进程及其监听的端口</li>\n<li><code>ss -t -a</code>  查看所有的tcp连接</li>\n<li><code>ss -u -a</code>  查看所有的udp连接</li>\n</ul>\n<h4 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h4><ul>\n<li><code>lsof -i :8888</code>  查看端口8888进程信息</li>\n<li><code>lsof -p 7915</code> 查看进程7915打开的fd信息</li>\n</ul>\n<h4 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h4><ul>\n<li><code>scp -r src remote:/tmp</code>  本地拷贝到远端</li>\n<li><code>scp -r remote:/tmp/src .</code>  远端拷贝到本地</li>\n<li><code>scp -3  remote:/tmp/a.tar   remote2:/tmp/</code>  以本地为跳板机，将remote机器上文件拷贝到remote2</li>\n</ul>\n<h4 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h4><ul>\n<li><code>rsync -av /home/mail/ 192.168.11.12:/home/mail/</code></li>\n<li><code>rsync -av 192.168.11.11:/home/mail/ /home/mail/</code></li>\n</ul>\n<h4 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h4><ul>\n<li><code>nc -l 8888</code>   本地启动8888端口</li>\n<li><code>nc -l 8888 &gt; a.tgz</code>   接收文件</li>\n<li><code>nc ali-a-bpc-userdevelop01.bj:8888   &lt; a.tgz</code> 发送文件到远端</li>\n</ul>\n<h4 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h4><ul>\n<li><code>vmstat 1 10</code>对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。</li>\n<li>对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg\" alt=\"\"></p>\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><ul>\n<li><code>iostat -x</code> 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的</li>\n</ul>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg\" alt=\"\"></p>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><ul>\n<li>1  按CPU核数查看</li>\n<li>P</li>\n<li>M</li>\n<li>c 查看完整进程命令</li>\n<li>top -Hp pid  查看线程数</li>\n</ul>\n<h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><ul>\n<li><code>ps -eo “pid,cmd,lstart”  | grep pid</code>   查看进程启动时间</li>\n<li><code>ps -ef f</code>  查看最近进程（常用）</li>\n</ul>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><ul>\n<li><code>find . -type f -mtime +3</code>   修改时间大于3天的文件</li>\n<li><code>find . -type f -mtime +3 | xargs rm -rf</code>  查找并删除</li>\n</ul>\n<h4 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h4><ul>\n<li><code>du -sk * | sort -n | cut -f2 | xargs -d &#39;\\n&#39; du -sh</code> 按文件大小排序显示</li>\n<li><code>du -hs</code> 常用</li>\n</ul>\n<h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><p><code>grep &#39;update_profile.*Android&#39; access-20180131.log |awk -F &#39;POST&#39; &#39;{print $2}&#39;|awk -F &#39;&amp;&#39; &#39;{print $26}&#39;|awk -F &#39; &#39; &#39;{print $1}&#39;|awk -F &#39;=&#39; &#39;{print $2}&#39;|sort -n|uniq -c|sort -nr|head -100</code></p>\n<p>-F 以空格分割</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># xargs 使用</span><br><span class=\"line\">//查询redis members里面的值</span><br><span class=\"line\">redis-cli smembers myset|awk &apos;&#123;print $1&#125;&apos;|xargs -I &#123;&#125; redis-cli get &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看进程监听的端口\"><a href=\"#查看进程监听的端口\" class=\"headerlink\" title=\"查看进程监听的端口\"></a>查看进程监听的端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">查看程序对应进程号：ps –ef|grep 进程名</span><br><span class=\"line\"></span><br><span class=\"line\">REDHAT :查看进程号所占用的端口号：netstat –nltp|grep 进程号</span><br><span class=\"line\"></span><br><span class=\"line\">ubuntu:查看进程占用端口号：netstat -anp|grep pid</span><br><span class=\"line\"></span><br><span class=\"line\">Linux下查看端口号所使用的进程号：</span><br><span class=\"line\"></span><br><span class=\"line\">使用lsof命令： lsof –i:端口号</span><br><span class=\"line\"></span><br><span class=\"line\">vim 块注释</span><br><span class=\"line\">ctrl+v</span><br><span class=\"line\">选择</span><br><span class=\"line\">大写I</span><br><span class=\"line\">输入注释符号</span><br><span class=\"line\">ESC 等一秒</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux-服务器常用命令整理\"><a href=\"#linux-服务器常用命令整理\" class=\"headerlink\" title=\"linux 服务器常用命令整理\"></a>linux 服务器常用命令整理</h1><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><strong>网络分析 - tcpdump \\ telnet \\ (netstat \\ ss \\ lsof) \\ nload</strong></li>\n<li><strong>网络传输 - scp \\ rsync \\ (rz \\ sz) \\ nc</strong></li>\n<li><strong>抓包工具 - charles</strong></li>\n<li><strong>内存检查 - free \\ meminfo</strong></li>\n<li><strong>系统监控 - vmstat \\ iostat \\ top \\ ps \\ sar \\ dstat</strong></li>\n<li><strong>系统调用追踪 - strace \\ gcore</strong></li>\n<li><strong>文件相关 - find \\ awk \\ sed \\ grep \\ tail \\ df \\ du \\ locate</strong></li>\n<li><strong>开发效率 - tmux</strong></li>\n</ul>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><h4 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h4><ol>\n<li>tcp:用来过滤数据报的类型</li>\n<li>-i eth1 : 只抓经过接口eth1的包</li>\n<li>-t : 不显示时间戳</li>\n<li>-s 0 : 抓取数据包时默认抓取长度为68字节, 加上-S 0 后可以抓到完整的数据包</li>\n<li>-c 100 : 只抓取100个数据包</li>\n<li>dst port !22: 不抓取目标端口是22数据包</li>\n<li>src net 10.99.184.0/24 : 数据包的源网络地址为10.99.184.0/24</li>\n<li>-A：显示数据包内容 </li>\n</ol>\n<p>示例：</p>\n<p><code>tcpdump -i any -v port 8888</code></p>\n<p><code>tcpdump -i any -A port 8888</code></p>\n<p>sudo tcpdump port 17280 -i lo0  -X</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6dysyqizj30lb08mt9e.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fp6dzuovqqj30w6093jtc.jpg\" alt=\"\"></p>\n<h4 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h4><p>查看所有连接</p>\n<p><code>netstat -autnp</code></p>\n<p>查看监听的tcp服务</p>\n<p><code>netstat -altnp</code>  </p>\n<p>看tcp端口</p>\n<p><code>netstat -ltnp</code></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e3o8h15j30ck090glz.jpg\" alt=\"\"></p>\n<h4 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h4><ul>\n<li><code>ss -pl</code>   查看每个进程及其监听的端口</li>\n<li><code>ss -t -a</code>  查看所有的tcp连接</li>\n<li><code>ss -u -a</code>  查看所有的udp连接</li>\n</ul>\n<h4 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h4><ul>\n<li><code>lsof -i :8888</code>  查看端口8888进程信息</li>\n<li><code>lsof -p 7915</code> 查看进程7915打开的fd信息</li>\n</ul>\n<h4 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h4><ul>\n<li><code>scp -r src remote:/tmp</code>  本地拷贝到远端</li>\n<li><code>scp -r remote:/tmp/src .</code>  远端拷贝到本地</li>\n<li><code>scp -3  remote:/tmp/a.tar   remote2:/tmp/</code>  以本地为跳板机，将remote机器上文件拷贝到remote2</li>\n</ul>\n<h4 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h4><ul>\n<li><code>rsync -av /home/mail/ 192.168.11.12:/home/mail/</code></li>\n<li><code>rsync -av 192.168.11.11:/home/mail/ /home/mail/</code></li>\n</ul>\n<h4 id=\"nc\"><a href=\"#nc\" class=\"headerlink\" title=\"nc\"></a>nc</h4><ul>\n<li><code>nc -l 8888</code>   本地启动8888端口</li>\n<li><code>nc -l 8888 &gt; a.tgz</code>   接收文件</li>\n<li><code>nc ali-a-bpc-userdevelop01.bj:8888   &lt; a.tgz</code> 发送文件到远端</li>\n</ul>\n<h4 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h4><ul>\n<li><code>vmstat 1 10</code>对内存监控，重点关注swpd、free、si、so。一般系统不繁忙的状态下，swpd、so的值不会持续很高，经常为0。如果swpd过高，那么就是系统内存经常不够用。</li>\n<li>对CPU监控，我们可以查看r（运行进程数）、us、sy、id（CPU空闲），如果r的数字大于系统CPU个数，则面临CPU不够用的危险，通过id分析，如果过小，则可以判断是CPU不足。</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fp6e824wffj30sg09vta7.jpg\" alt=\"\"></p>\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><ul>\n<li><code>iostat -x</code> 一般情况下，%util应该越小越好，10%以下正常，30%IO比较繁忙。50%以上一般是有问题的</li>\n</ul>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fp6e8iekncj30sg05qgm6.jpg\" alt=\"\"></p>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><ul>\n<li>1  按CPU核数查看</li>\n<li>P</li>\n<li>M</li>\n<li>c 查看完整进程命令</li>\n<li>top -Hp pid  查看线程数</li>\n</ul>\n<h4 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h4><ul>\n<li><code>ps -eo “pid,cmd,lstart”  | grep pid</code>   查看进程启动时间</li>\n<li><code>ps -ef f</code>  查看最近进程（常用）</li>\n</ul>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><ul>\n<li><code>find . -type f -mtime +3</code>   修改时间大于3天的文件</li>\n<li><code>find . -type f -mtime +3 | xargs rm -rf</code>  查找并删除</li>\n</ul>\n<h4 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h4><ul>\n<li><code>du -sk * | sort -n | cut -f2 | xargs -d &#39;\\n&#39; du -sh</code> 按文件大小排序显示</li>\n<li><code>du -hs</code> 常用</li>\n</ul>\n<h4 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h4><p><code>grep &#39;update_profile.*Android&#39; access-20180131.log |awk -F &#39;POST&#39; &#39;{print $2}&#39;|awk -F &#39;&amp;&#39; &#39;{print $26}&#39;|awk -F &#39; &#39; &#39;{print $1}&#39;|awk -F &#39;=&#39; &#39;{print $2}&#39;|sort -n|uniq -c|sort -nr|head -100</code></p>\n<p>-F 以空格分割</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># xargs 使用</span><br><span class=\"line\">//查询redis members里面的值</span><br><span class=\"line\">redis-cli smembers myset|awk &apos;&#123;print $1&#125;&apos;|xargs -I &#123;&#125; redis-cli get &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看进程监听的端口\"><a href=\"#查看进程监听的端口\" class=\"headerlink\" title=\"查看进程监听的端口\"></a>查看进程监听的端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">查看程序对应进程号：ps –ef|grep 进程名</span><br><span class=\"line\"></span><br><span class=\"line\">REDHAT :查看进程号所占用的端口号：netstat –nltp|grep 进程号</span><br><span class=\"line\"></span><br><span class=\"line\">ubuntu:查看进程占用端口号：netstat -anp|grep pid</span><br><span class=\"line\"></span><br><span class=\"line\">Linux下查看端口号所使用的进程号：</span><br><span class=\"line\"></span><br><span class=\"line\">使用lsof命令： lsof –i:端口号</span><br><span class=\"line\"></span><br><span class=\"line\">vim 块注释</span><br><span class=\"line\">ctrl+v</span><br><span class=\"line\">选择</span><br><span class=\"line\">大写I</span><br><span class=\"line\">输入注释符号</span><br><span class=\"line\">ESC 等一秒</span><br></pre></td></tr></table></figure>"},{"title":"sig信号","date":"2019-10-07T12:33:55.000Z","_content":"# signal信号\n\n1.信号的处理方式？\n\n> 信号（signal）-- 进程之间通讯的方式，是一种软件中断。一个进程一旦接收到信号就会打断原来的程序执行流程来处理信号。\n\n```\nsingnal.signal(signalnum, handler)#\n\nimport signal\nimport time\ndef myHandler(signum, frame):\n    print('I received: ', signum)\nif __name__ == \"__main__\":\n    signal.signal(signal.SIGALRM, myHandler)//信号注册\n    while True:\n        signal.alarm(1)//发送信号\n        time.sleep(1)\n```\n\n2.进程与线程的区别?\n\n>  进程独享进程空间fork全部复制一份，线程共享进程空间，栈上的东西独享","source":"_posts/linux/signal信号.md","raw":"---\ntitle: sig信号\ntags:\n  - signal\ncategories:\n  - linux\ndate: 2019-10-07 20:33:55\n---\n# signal信号\n\n1.信号的处理方式？\n\n> 信号（signal）-- 进程之间通讯的方式，是一种软件中断。一个进程一旦接收到信号就会打断原来的程序执行流程来处理信号。\n\n```\nsingnal.signal(signalnum, handler)#\n\nimport signal\nimport time\ndef myHandler(signum, frame):\n    print('I received: ', signum)\nif __name__ == \"__main__\":\n    signal.signal(signal.SIGALRM, myHandler)//信号注册\n    while True:\n        signal.alarm(1)//发送信号\n        time.sleep(1)\n```\n\n2.进程与线程的区别?\n\n>  进程独享进程空间fork全部复制一份，线程共享进程空间，栈上的东西独享","slug":"linux/signal信号","published":1,"updated":"2019-10-07T12:36:07.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dh002xwl38cejugm9x","content":"<h1 id=\"signal信号\"><a href=\"#signal信号\" class=\"headerlink\" title=\"signal信号\"></a>signal信号</h1><p>1.信号的处理方式？</p>\n<blockquote>\n<p>信号（signal）– 进程之间通讯的方式，是一种软件中断。一个进程一旦接收到信号就会打断原来的程序执行流程来处理信号。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singnal.signal(signalnum, handler)#</span><br><span class=\"line\"></span><br><span class=\"line\">import signal</span><br><span class=\"line\">import time</span><br><span class=\"line\">def myHandler(signum, frame):</span><br><span class=\"line\">    print(&apos;I received: &apos;, signum)</span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    signal.signal(signal.SIGALRM, myHandler)//信号注册</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        signal.alarm(1)//发送信号</span><br><span class=\"line\">        time.sleep(1)</span><br></pre></td></tr></table></figure>\n<p>2.进程与线程的区别?</p>\n<blockquote>\n<p> 进程独享进程空间fork全部复制一份，线程共享进程空间，栈上的东西独享</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"signal信号\"><a href=\"#signal信号\" class=\"headerlink\" title=\"signal信号\"></a>signal信号</h1><p>1.信号的处理方式？</p>\n<blockquote>\n<p>信号（signal）– 进程之间通讯的方式，是一种软件中断。一个进程一旦接收到信号就会打断原来的程序执行流程来处理信号。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singnal.signal(signalnum, handler)#</span><br><span class=\"line\"></span><br><span class=\"line\">import signal</span><br><span class=\"line\">import time</span><br><span class=\"line\">def myHandler(signum, frame):</span><br><span class=\"line\">    print(&apos;I received: &apos;, signum)</span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    signal.signal(signal.SIGALRM, myHandler)//信号注册</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        signal.alarm(1)//发送信号</span><br><span class=\"line\">        time.sleep(1)</span><br></pre></td></tr></table></figure>\n<p>2.进程与线程的区别?</p>\n<blockquote>\n<p> 进程独享进程空间fork全部复制一份，线程共享进程空间，栈上的东西独享</p>\n</blockquote>\n"},{"title":"supervisor使用","date":"2019-05-12T08:40:49.000Z","_content":"\n# linux进程守护\n\n### 安装\n```\npip install supervisor\nsupervisord -v\n```\n\n### 命令\n```\n1.配置路径\nmkdir -p /etc/supervisor\n\n2.完整配置示例\necho_supervisord_conf > /etc/supervisor/supervisord.conf\n\n3.修改配置\nvim /etc/supervisor/supervisord.conf\n添加如下\n[include]\nfiles=/etc/supervisor/conf.d/*.conf\n\n4.添加如下配置\nmkdir -p /etc/supervisor/conf.d/\nvim /etc/supervisor/conf.d/xmysql.conf\n\n[program:myxmysql]\ncommand=xmysql -h localhost -u username -p username -d music -r 0.0.0.0 ; 运行程序的命令\ndirectory=/home/xiaodong/node-v10.15.3-linux-x64/bin/ ; 执行前要不要先cd到\n目录去，一般不用\nautorestart = true   ; 程序异常退出后自动重启\nautostart=true       ; 随着supervisord的启动而启动\nstartretries = 10     ; 启动失败自动重试次数，默认是 3\nnumprocs=1           ; 启动几个进程\nstderr_logfile=/var/log/myxmysql.err.log ; 错误日志文件\nstdout_logfile=/var/log/myxmysql.out.log ; 输出日志文件\nenvironment=A=B ; 进程环境变量\nuser=root ; 进程执行的用户身份\nstopsignal=KILL ; 用来杀死进程的\nstopsignal=INT\n\n5.启动\nsupervisord -c /etc/supervisor/supervisord.conf\n或者重新加载配置\nsupervisorctl reload\n```\n\n### 额外\n```\n把配置文件中 inet_http_server 前面的分号去掉 在Supervisor中 ;是注释的格式 默认是不开启web界面的\n\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=*:9001        ; (ip_address:port specifier, *:port for all iface)\nusername=user              ; (default is no username (open server))\npassword=123 \n```","source":"_posts/linux/supervisor使用.md","raw":"---\ntitle: supervisor使用\ntags:\n  - linux\n  - supervisor\ncategories:\n  - linux\ndate: 2019-05-12 16:40:49\n---\n\n# linux进程守护\n\n### 安装\n```\npip install supervisor\nsupervisord -v\n```\n\n### 命令\n```\n1.配置路径\nmkdir -p /etc/supervisor\n\n2.完整配置示例\necho_supervisord_conf > /etc/supervisor/supervisord.conf\n\n3.修改配置\nvim /etc/supervisor/supervisord.conf\n添加如下\n[include]\nfiles=/etc/supervisor/conf.d/*.conf\n\n4.添加如下配置\nmkdir -p /etc/supervisor/conf.d/\nvim /etc/supervisor/conf.d/xmysql.conf\n\n[program:myxmysql]\ncommand=xmysql -h localhost -u username -p username -d music -r 0.0.0.0 ; 运行程序的命令\ndirectory=/home/xiaodong/node-v10.15.3-linux-x64/bin/ ; 执行前要不要先cd到\n目录去，一般不用\nautorestart = true   ; 程序异常退出后自动重启\nautostart=true       ; 随着supervisord的启动而启动\nstartretries = 10     ; 启动失败自动重试次数，默认是 3\nnumprocs=1           ; 启动几个进程\nstderr_logfile=/var/log/myxmysql.err.log ; 错误日志文件\nstdout_logfile=/var/log/myxmysql.out.log ; 输出日志文件\nenvironment=A=B ; 进程环境变量\nuser=root ; 进程执行的用户身份\nstopsignal=KILL ; 用来杀死进程的\nstopsignal=INT\n\n5.启动\nsupervisord -c /etc/supervisor/supervisord.conf\n或者重新加载配置\nsupervisorctl reload\n```\n\n### 额外\n```\n把配置文件中 inet_http_server 前面的分号去掉 在Supervisor中 ;是注释的格式 默认是不开启web界面的\n\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=*:9001        ; (ip_address:port specifier, *:port for all iface)\nusername=user              ; (default is no username (open server))\npassword=123 \n```","slug":"linux/supervisor使用","published":1,"updated":"2019-05-12T08:49:34.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0di0030wl38u0tr16j3","content":"<h1 id=\"linux进程守护\"><a href=\"#linux进程守护\" class=\"headerlink\" title=\"linux进程守护\"></a>linux进程守护</h1><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br><span class=\"line\">supervisord -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.配置路径</span><br><span class=\"line\">mkdir -p /etc/supervisor</span><br><span class=\"line\"></span><br><span class=\"line\">2.完整配置示例</span><br><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br><span class=\"line\"></span><br><span class=\"line\">3.修改配置</span><br><span class=\"line\">vim /etc/supervisor/supervisord.conf</span><br><span class=\"line\">添加如下</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files=/etc/supervisor/conf.d/*.conf</span><br><span class=\"line\"></span><br><span class=\"line\">4.添加如下配置</span><br><span class=\"line\">mkdir -p /etc/supervisor/conf.d/</span><br><span class=\"line\">vim /etc/supervisor/conf.d/xmysql.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[program:myxmysql]</span><br><span class=\"line\">command=xmysql -h localhost -u username -p username -d music -r 0.0.0.0 ; 运行程序的命令</span><br><span class=\"line\">directory=/home/xiaodong/node-v10.15.3-linux-x64/bin/ ; 执行前要不要先cd到</span><br><span class=\"line\">目录去，一般不用</span><br><span class=\"line\">autorestart = true   ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=true       ; 随着supervisord的启动而启动</span><br><span class=\"line\">startretries = 10     ; 启动失败自动重试次数，默认是 3</span><br><span class=\"line\">numprocs=1           ; 启动几个进程</span><br><span class=\"line\">stderr_logfile=/var/log/myxmysql.err.log ; 错误日志文件</span><br><span class=\"line\">stdout_logfile=/var/log/myxmysql.out.log ; 输出日志文件</span><br><span class=\"line\">environment=A=B ; 进程环境变量</span><br><span class=\"line\">user=root ; 进程执行的用户身份</span><br><span class=\"line\">stopsignal=KILL ; 用来杀死进程的</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\"></span><br><span class=\"line\">5.启动</span><br><span class=\"line\">supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">或者重新加载配置</span><br><span class=\"line\">supervisorctl reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把配置文件中 inet_http_server 前面的分号去掉 在Supervisor中 ;是注释的格式 默认是不开启web界面的</span><br><span class=\"line\"></span><br><span class=\"line\">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">port=*:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">username=user              ; (default is no username (open server))</span><br><span class=\"line\">password=123</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"linux进程守护\"><a href=\"#linux进程守护\" class=\"headerlink\" title=\"linux进程守护\"></a>linux进程守护</h1><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br><span class=\"line\">supervisord -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.配置路径</span><br><span class=\"line\">mkdir -p /etc/supervisor</span><br><span class=\"line\"></span><br><span class=\"line\">2.完整配置示例</span><br><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br><span class=\"line\"></span><br><span class=\"line\">3.修改配置</span><br><span class=\"line\">vim /etc/supervisor/supervisord.conf</span><br><span class=\"line\">添加如下</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files=/etc/supervisor/conf.d/*.conf</span><br><span class=\"line\"></span><br><span class=\"line\">4.添加如下配置</span><br><span class=\"line\">mkdir -p /etc/supervisor/conf.d/</span><br><span class=\"line\">vim /etc/supervisor/conf.d/xmysql.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[program:myxmysql]</span><br><span class=\"line\">command=xmysql -h localhost -u username -p username -d music -r 0.0.0.0 ; 运行程序的命令</span><br><span class=\"line\">directory=/home/xiaodong/node-v10.15.3-linux-x64/bin/ ; 执行前要不要先cd到</span><br><span class=\"line\">目录去，一般不用</span><br><span class=\"line\">autorestart = true   ; 程序异常退出后自动重启</span><br><span class=\"line\">autostart=true       ; 随着supervisord的启动而启动</span><br><span class=\"line\">startretries = 10     ; 启动失败自动重试次数，默认是 3</span><br><span class=\"line\">numprocs=1           ; 启动几个进程</span><br><span class=\"line\">stderr_logfile=/var/log/myxmysql.err.log ; 错误日志文件</span><br><span class=\"line\">stdout_logfile=/var/log/myxmysql.out.log ; 输出日志文件</span><br><span class=\"line\">environment=A=B ; 进程环境变量</span><br><span class=\"line\">user=root ; 进程执行的用户身份</span><br><span class=\"line\">stopsignal=KILL ; 用来杀死进程的</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\"></span><br><span class=\"line\">5.启动</span><br><span class=\"line\">supervisord -c /etc/supervisor/supervisord.conf</span><br><span class=\"line\">或者重新加载配置</span><br><span class=\"line\">supervisorctl reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把配置文件中 inet_http_server 前面的分号去掉 在Supervisor中 ;是注释的格式 默认是不开启web界面的</span><br><span class=\"line\"></span><br><span class=\"line\">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">port=*:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">username=user              ; (default is no username (open server))</span><br><span class=\"line\">password=123</span><br></pre></td></tr></table></figure>"},{"title":"mongodb_intro","date":"2019-10-07T12:18:50.000Z","_content":"# mongodb\n\n### 概念\n\n```\n# 对比\nmysql  MongoDB\n数据库\t数据库Db\n表\t   集合Collection\n行\t   文档Document\n列\t   字段Key\n表     集合[{\"k1\":\"v1\",\"k2\":\"v2\"},{}]\n\n# 常见API\ndb.collection.insert(doc)\n```\n\n### 优势\n- 格式不固定JSON\n- MapReduce复杂的聚合查询\n- 支持全文索引\n- 支持分片分布式存储\n\n### 缺点\n- 索引需要手动创建\n- 索引在内存创建（内存不够，则不会创建索引，或者删除部分索引）\n\n\n","source":"_posts/mysql/mongodb-intro.md","raw":"---\ntitle: mongodb_intro\ntags:\n  - mongo\ncategories:\n  - db\ndate: 2019-10-07 20:18:50\n---\n# mongodb\n\n### 概念\n\n```\n# 对比\nmysql  MongoDB\n数据库\t数据库Db\n表\t   集合Collection\n行\t   文档Document\n列\t   字段Key\n表     集合[{\"k1\":\"v1\",\"k2\":\"v2\"},{}]\n\n# 常见API\ndb.collection.insert(doc)\n```\n\n### 优势\n- 格式不固定JSON\n- MapReduce复杂的聚合查询\n- 支持全文索引\n- 支持分片分布式存储\n\n### 缺点\n- 索引需要手动创建\n- 索引在内存创建（内存不够，则不会创建索引，或者删除部分索引）\n\n\n","slug":"mysql/mongodb-intro","published":1,"updated":"2019-10-07T12:21:57.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dj0034wl388ogatmy7","content":"<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对比</span><br><span class=\"line\">mysql  MongoDB</span><br><span class=\"line\">数据库\t数据库Db</span><br><span class=\"line\">表\t   集合Collection</span><br><span class=\"line\">行\t   文档Document</span><br><span class=\"line\">列\t   字段Key</span><br><span class=\"line\">表     集合[&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;,&#123;&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"># 常见API</span><br><span class=\"line\">db.collection.insert(doc)</span><br></pre></td></tr></table></figure>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ul>\n<li>格式不固定JSON</li>\n<li>MapReduce复杂的聚合查询</li>\n<li>支持全文索引</li>\n<li>支持分片分布式存储</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>索引需要手动创建</li>\n<li>索引在内存创建（内存不够，则不会创建索引，或者删除部分索引）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对比</span><br><span class=\"line\">mysql  MongoDB</span><br><span class=\"line\">数据库\t数据库Db</span><br><span class=\"line\">表\t   集合Collection</span><br><span class=\"line\">行\t   文档Document</span><br><span class=\"line\">列\t   字段Key</span><br><span class=\"line\">表     集合[&#123;&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;&#125;,&#123;&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"># 常见API</span><br><span class=\"line\">db.collection.insert(doc)</span><br></pre></td></tr></table></figure>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ul>\n<li>格式不固定JSON</li>\n<li>MapReduce复杂的聚合查询</li>\n<li>支持全文索引</li>\n<li>支持分片分布式存储</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>索引需要手动创建</li>\n<li>索引在内存创建（内存不够，则不会创建索引，或者删除部分索引）</li>\n</ul>\n"},{"title":"gorm源码分析","date":"2019-10-07T13:06:26.000Z","_content":"# gorm源码解析\n\ngorm使用示例：\n\n```\npackage main\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\ntype Product struct {\n\tgorm.Model\n\tCode  string\n\tPrice uint\n}\n\nfunc main() {\n\tdb, err := gorm.Open(\"sqlite3\", \"test.db\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdefer db.Close()\n\tdb.AutoMigrate(&Product{})\n\tdb.Create(&Product{Code: \"L1212\", Price: 1000})\n\tvar product Product\n\tdb.First(&product, 1)                  \n\tdb.First(&product, \"code = ?\", \"L1212\") \n\tdb.Model(&product).Update(\"Price\", 2000)\n\tdb.Delete(&product)\n}\n```\n\n\n\ngorm一般的初始化方式\n\n```\ndb, err := gorm.Open(\"mysql\", \"user:password@/dbname?charset=utf8&parseTime=True&loc=Local\")\n```\n\ngorm中DB结构体的定义：\n\n```\n// DB的结构体\ntype DB struct {\n    sync.RWMutex                       // 锁\n    Value        interface{}           // 一般传入实际操作的表所对应的结构体\n    Error        error                 // DB操作失败的error\n    RowsAffected int64                 // 操作影响的行数\n\n    // single db\n    db                SQLCommon        // SQL接口，包括（Exec、Prepare、Query、QueryRow）\n    blockGlobalUpdate bool             // 为true时，可以在update在没有where条件是报错，避免全局更新\n    logMode           logModeValue     // 日志模式，gorm提供了三种   \n    logger            logger           // 内部日志实例\n    search            *search          // 查询相关的条件\n    values            sync.Map         // value Map\n\n    // global db\n    parent        *DB                  // 父db，为了保存一个空的初始化后的db，也为了保存curd注册的的callback方法\n    callbacks     *Callback            // callback方法\n    dialect       Dialect              // 不同类型数据库对应的不同实现的相同接口 \n    singularTable bool                 // 表名是否为复数形式，true时为user，false时为users\n}\n```\n\nSQLCommon定义基本的查询接口\n\n```\n// SQLCommon is the minimal database connection functionality gorm requires.  Implemented by *sql.DB.\ntype SQLCommon interface {\n\tExec(query string, args ...interface{}) (sql.Result, error)\n\tPrepare(query string) (*sql.Stmt, error)\n\tQuery(query string, args ...interface{}) (*sql.Rows, error)\n\tQueryRow(query string, args ...interface{}) *sql.Row\n}\n```\n\n\n\ngorm的Open方法：\n\n```\nfunc Open(dialect string, args ...interface{}) (db *DB, err error) {\n    if len(args) == 0 {\n        err = errors.New(\"invalid database source\")\n        return nil, err\n    }\n    var source string\n    var dbSQL SQLCommon\n    var ownDbSQL bool\n\n    switch value := args[0].(type) {\n    case string:\n        var driver = dialect\n        if len(args) == 1 {\n            source = value\n        } else if len(args) >= 2 {\n            driver = value\n            source = args[1].(string)\n        }\n        // 调用go基础库的Open方法获得db的connention附给dbSQL，\n        // 此时还没有真正连接数据库\n        dbSQL, err = sql.Open(driver, source)\n        ownDbSQL = true\n    case SQLCommon:\n        dbSQL = value\n        ownDbSQL = false\n    default:\n        return nil, fmt.Errorf(\"invalid database source: %v is not a valid type\", value)\n    }\n    // 初始化DB\n    db = &DB{\n        db:        dbSQL,\n        logger:    defaultLogger,\n        callbacks: DefaultCallback,\n        dialect:   newDialect(dialect, dbSQL),\n    }\n    // 将初始化的DB保存到db.parent中\n    db.parent = db\n    if err != nil {\n        return\n    }\n    // 调用go基础库的Ping方法检测数据库connention是否可以连通\n    if d, ok := dbSQL.(*sql.DB); ok {\n        if err = d.Ping(); err != nil && ownDbSQL {\n            d.Close()\n        }\n    }\n    return\n}\n```\n\ngorm是通过多个callbsck方法来实现curd的，具体流程以一个查询为例：\n\n```\nDBEngine.Table(entry.TableName).\n    Select(entry.Select).\n    Where(entry.sql, entry.values).\n    Order(entry.order).\n    Find(entry.result)\n```\n\n执行步骤：\n\n1.执行Table方法，添加tablename条件：\n\n```\nfunc (s *DB) Table(name string) *DB {\n    clone := s.clone()        // 执行clone方法也就是从新的db中赋值一个空的，避免交叉影响\n    clone.search.Table(name)  // 赋值table name\n    clone.Value = nil         // 附空\n    return clone\n}\n```\n\n2.执行Where方法，添加where条件：\n\n```\n// 首先也是调用clone方法，然后调用search的Where方法\nfunc (s *DB) Where(query interface{}, args ...interface{}) *DB {\n    return s.clone().search.Where(query, args...).db\n}\n\n// search的Where方法是将传进来的条件进行拼接，存入search.whereConditions\nfunc (s *search) Where(query interface{}, values ...interface{}) *search {\n    s.whereConditions = append(s.whereConditions, map[string]interface{}{\"query\": query, \"args\": values})\n    return s\n}\n```\n\n3.执行Order方法，添加order条件：\n\n```\n// 类似Where，reorder为true会强制刷掉gorm默认的order by\nfunc (s *DB) Order(value interface{}, reorder ...bool) *DB {\n    return s.clone().search.Order(value, reorder...).db\n}\n\nfunc (s *search) Order(value interface{}, reorder ...bool) *search {\n    // 如果为true，先清除s.orders\n    if len(reorder) > 0 && reorder[0] {\n        s.orders = []interface{}{}\n    }\n    // 将value拼接，存入s.orders\n    if value != nil && value != \"\" {\n        s.orders = append(s.orders, value)\n    }\n    return s\n}\n```\n\n4.执行Find方法，真正实现查询：\n\n```\n// 首先先创建一个scope（可以理解成只针对本次数据库操作有效的一个环境），再调用inlineCondition内部方法，最后执行callcallbacks一系列方法实现真正的查询操作，并将db返回\nfunc (s *DB) Find(out interface{}, where ...interface{}) *DB {\n    return s.NewScope(out).inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db\n}\n\n// NewScope方法就是初始化一个scope\nfunc (s *DB) NewScope(value interface{}) *Scope {\n    dbClone := s.clone()\n    // 此时赋值value\n    dbClone.Value = value\n    scope := &Scope{db: dbClone, Value: value}\n    if s.search != nil {\n        scope.Search = s.search.clone()\n    } else {\n        scope.Search = &search{}\n    }\n    return scope\n}\n\n// inlineCondition方法是执行scope.Search.Where\nfunc (scope *Scope) inlineCondition(values ...interface{}) *Scope {\n    if len(values) > 0 {\n        scope.Search.Where(values[0], values[1:]...)\n    }\n    return scope\n}\n// scope.Search.Where实际上也是执行条件拼接，由于我们在调用的时候没有在Find中传入条件，所以这个方法不会被执行\nfunc (s *search) Where(query interface{}, values ...interface{}) *search {\n    s.whereConditions = append(s.whereConditions, map[string]interface{}{\"query\": query, \"args\": values})\n    return s\n}\n\n// 最重要的就是callcallbacks方法，是真正执行的地方\nfunc (scope *Scope) callCallbacks(funcs []*func(s *Scope)) *Scope {\n    defer func() {\n        if err := recover(); err != nil {\n            if db, ok := scope.db.db.(sqlTx); ok {\n                db.Rollback()\n            }\n            panic(err)\n        }\n    }()\n    // 循环里面所有的注册的funcs\n    for _, f := range funcs {\n        (*f)(scope)\n        if scope.skipLeft {\n            break\n        }\n    }\n    return scope\n}\n\n// 这里的funcs实在程序启动时init方法注册的\nfunc init() {\n    DefaultCallback.Query().Register(\"gorm:query\", queryCallback)\n    DefaultCallback.Query().Register(\"gorm:preload\", preloadCallback)\n    DefaultCallback.Query().Register(\"gorm:after_query\", afterQueryCallback)\n}\n\n// 比如afterQueryCallback方法还提供了反射调用结构体的AfterFind方法，如果在查询前结构体实现了AfterFind方法就会被调用，这个机制比了灵活\nfunc afterQueryCallback(scope *Scope) {\n    if !scope.HasError() {\n        scope.CallMethod(\"AfterFind\")\n    }\n}\n```","source":"_posts/mysql/gorm源码分析.md","raw":"---\ntitle: gorm源码分析\ntags:\n  - gorm\ncategories:\n  - gorm\ndate: 2019-10-07 21:06:26\n---\n# gorm源码解析\n\ngorm使用示例：\n\n```\npackage main\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\ntype Product struct {\n\tgorm.Model\n\tCode  string\n\tPrice uint\n}\n\nfunc main() {\n\tdb, err := gorm.Open(\"sqlite3\", \"test.db\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdefer db.Close()\n\tdb.AutoMigrate(&Product{})\n\tdb.Create(&Product{Code: \"L1212\", Price: 1000})\n\tvar product Product\n\tdb.First(&product, 1)                  \n\tdb.First(&product, \"code = ?\", \"L1212\") \n\tdb.Model(&product).Update(\"Price\", 2000)\n\tdb.Delete(&product)\n}\n```\n\n\n\ngorm一般的初始化方式\n\n```\ndb, err := gorm.Open(\"mysql\", \"user:password@/dbname?charset=utf8&parseTime=True&loc=Local\")\n```\n\ngorm中DB结构体的定义：\n\n```\n// DB的结构体\ntype DB struct {\n    sync.RWMutex                       // 锁\n    Value        interface{}           // 一般传入实际操作的表所对应的结构体\n    Error        error                 // DB操作失败的error\n    RowsAffected int64                 // 操作影响的行数\n\n    // single db\n    db                SQLCommon        // SQL接口，包括（Exec、Prepare、Query、QueryRow）\n    blockGlobalUpdate bool             // 为true时，可以在update在没有where条件是报错，避免全局更新\n    logMode           logModeValue     // 日志模式，gorm提供了三种   \n    logger            logger           // 内部日志实例\n    search            *search          // 查询相关的条件\n    values            sync.Map         // value Map\n\n    // global db\n    parent        *DB                  // 父db，为了保存一个空的初始化后的db，也为了保存curd注册的的callback方法\n    callbacks     *Callback            // callback方法\n    dialect       Dialect              // 不同类型数据库对应的不同实现的相同接口 \n    singularTable bool                 // 表名是否为复数形式，true时为user，false时为users\n}\n```\n\nSQLCommon定义基本的查询接口\n\n```\n// SQLCommon is the minimal database connection functionality gorm requires.  Implemented by *sql.DB.\ntype SQLCommon interface {\n\tExec(query string, args ...interface{}) (sql.Result, error)\n\tPrepare(query string) (*sql.Stmt, error)\n\tQuery(query string, args ...interface{}) (*sql.Rows, error)\n\tQueryRow(query string, args ...interface{}) *sql.Row\n}\n```\n\n\n\ngorm的Open方法：\n\n```\nfunc Open(dialect string, args ...interface{}) (db *DB, err error) {\n    if len(args) == 0 {\n        err = errors.New(\"invalid database source\")\n        return nil, err\n    }\n    var source string\n    var dbSQL SQLCommon\n    var ownDbSQL bool\n\n    switch value := args[0].(type) {\n    case string:\n        var driver = dialect\n        if len(args) == 1 {\n            source = value\n        } else if len(args) >= 2 {\n            driver = value\n            source = args[1].(string)\n        }\n        // 调用go基础库的Open方法获得db的connention附给dbSQL，\n        // 此时还没有真正连接数据库\n        dbSQL, err = sql.Open(driver, source)\n        ownDbSQL = true\n    case SQLCommon:\n        dbSQL = value\n        ownDbSQL = false\n    default:\n        return nil, fmt.Errorf(\"invalid database source: %v is not a valid type\", value)\n    }\n    // 初始化DB\n    db = &DB{\n        db:        dbSQL,\n        logger:    defaultLogger,\n        callbacks: DefaultCallback,\n        dialect:   newDialect(dialect, dbSQL),\n    }\n    // 将初始化的DB保存到db.parent中\n    db.parent = db\n    if err != nil {\n        return\n    }\n    // 调用go基础库的Ping方法检测数据库connention是否可以连通\n    if d, ok := dbSQL.(*sql.DB); ok {\n        if err = d.Ping(); err != nil && ownDbSQL {\n            d.Close()\n        }\n    }\n    return\n}\n```\n\ngorm是通过多个callbsck方法来实现curd的，具体流程以一个查询为例：\n\n```\nDBEngine.Table(entry.TableName).\n    Select(entry.Select).\n    Where(entry.sql, entry.values).\n    Order(entry.order).\n    Find(entry.result)\n```\n\n执行步骤：\n\n1.执行Table方法，添加tablename条件：\n\n```\nfunc (s *DB) Table(name string) *DB {\n    clone := s.clone()        // 执行clone方法也就是从新的db中赋值一个空的，避免交叉影响\n    clone.search.Table(name)  // 赋值table name\n    clone.Value = nil         // 附空\n    return clone\n}\n```\n\n2.执行Where方法，添加where条件：\n\n```\n// 首先也是调用clone方法，然后调用search的Where方法\nfunc (s *DB) Where(query interface{}, args ...interface{}) *DB {\n    return s.clone().search.Where(query, args...).db\n}\n\n// search的Where方法是将传进来的条件进行拼接，存入search.whereConditions\nfunc (s *search) Where(query interface{}, values ...interface{}) *search {\n    s.whereConditions = append(s.whereConditions, map[string]interface{}{\"query\": query, \"args\": values})\n    return s\n}\n```\n\n3.执行Order方法，添加order条件：\n\n```\n// 类似Where，reorder为true会强制刷掉gorm默认的order by\nfunc (s *DB) Order(value interface{}, reorder ...bool) *DB {\n    return s.clone().search.Order(value, reorder...).db\n}\n\nfunc (s *search) Order(value interface{}, reorder ...bool) *search {\n    // 如果为true，先清除s.orders\n    if len(reorder) > 0 && reorder[0] {\n        s.orders = []interface{}{}\n    }\n    // 将value拼接，存入s.orders\n    if value != nil && value != \"\" {\n        s.orders = append(s.orders, value)\n    }\n    return s\n}\n```\n\n4.执行Find方法，真正实现查询：\n\n```\n// 首先先创建一个scope（可以理解成只针对本次数据库操作有效的一个环境），再调用inlineCondition内部方法，最后执行callcallbacks一系列方法实现真正的查询操作，并将db返回\nfunc (s *DB) Find(out interface{}, where ...interface{}) *DB {\n    return s.NewScope(out).inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db\n}\n\n// NewScope方法就是初始化一个scope\nfunc (s *DB) NewScope(value interface{}) *Scope {\n    dbClone := s.clone()\n    // 此时赋值value\n    dbClone.Value = value\n    scope := &Scope{db: dbClone, Value: value}\n    if s.search != nil {\n        scope.Search = s.search.clone()\n    } else {\n        scope.Search = &search{}\n    }\n    return scope\n}\n\n// inlineCondition方法是执行scope.Search.Where\nfunc (scope *Scope) inlineCondition(values ...interface{}) *Scope {\n    if len(values) > 0 {\n        scope.Search.Where(values[0], values[1:]...)\n    }\n    return scope\n}\n// scope.Search.Where实际上也是执行条件拼接，由于我们在调用的时候没有在Find中传入条件，所以这个方法不会被执行\nfunc (s *search) Where(query interface{}, values ...interface{}) *search {\n    s.whereConditions = append(s.whereConditions, map[string]interface{}{\"query\": query, \"args\": values})\n    return s\n}\n\n// 最重要的就是callcallbacks方法，是真正执行的地方\nfunc (scope *Scope) callCallbacks(funcs []*func(s *Scope)) *Scope {\n    defer func() {\n        if err := recover(); err != nil {\n            if db, ok := scope.db.db.(sqlTx); ok {\n                db.Rollback()\n            }\n            panic(err)\n        }\n    }()\n    // 循环里面所有的注册的funcs\n    for _, f := range funcs {\n        (*f)(scope)\n        if scope.skipLeft {\n            break\n        }\n    }\n    return scope\n}\n\n// 这里的funcs实在程序启动时init方法注册的\nfunc init() {\n    DefaultCallback.Query().Register(\"gorm:query\", queryCallback)\n    DefaultCallback.Query().Register(\"gorm:preload\", preloadCallback)\n    DefaultCallback.Query().Register(\"gorm:after_query\", afterQueryCallback)\n}\n\n// 比如afterQueryCallback方法还提供了反射调用结构体的AfterFind方法，如果在查询前结构体实现了AfterFind方法就会被调用，这个机制比了灵活\nfunc afterQueryCallback(scope *Scope) {\n    if !scope.HasError() {\n        scope.CallMethod(\"AfterFind\")\n    }\n}\n```","slug":"mysql/gorm源码分析","published":1,"updated":"2019-10-07T13:09:51.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dk0036wl38llecftsq","content":"<h1 id=\"gorm源码解析\"><a href=\"#gorm源码解析\" class=\"headerlink\" title=\"gorm源码解析\"></a>gorm源码解析</h1><p>gorm使用示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;github.com/jinzhu/gorm&quot;</span><br><span class=\"line\">\t_ &quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Product struct &#123;</span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tCode  string</span><br><span class=\"line\">\tPrice uint</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tdb, err := gorm.Open(&quot;sqlite3&quot;, &quot;test.db&quot;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(&quot;failed to connect database&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefer db.Close()</span><br><span class=\"line\">\tdb.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class=\"line\">\tdb.Create(&amp;Product&#123;Code: &quot;L1212&quot;, Price: 1000&#125;)</span><br><span class=\"line\">\tvar product Product</span><br><span class=\"line\">\tdb.First(&amp;product, 1)                  </span><br><span class=\"line\">\tdb.First(&amp;product, &quot;code = ?&quot;, &quot;L1212&quot;) </span><br><span class=\"line\">\tdb.Model(&amp;product).Update(&quot;Price&quot;, 2000)</span><br><span class=\"line\">\tdb.Delete(&amp;product)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm一般的初始化方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := gorm.Open(&quot;mysql&quot;, &quot;user:password@/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)</span><br></pre></td></tr></table></figure>\n<p>gorm中DB结构体的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// DB的结构体</span><br><span class=\"line\">type DB struct &#123;</span><br><span class=\"line\">    sync.RWMutex                       // 锁</span><br><span class=\"line\">    Value        interface&#123;&#125;           // 一般传入实际操作的表所对应的结构体</span><br><span class=\"line\">    Error        error                 // DB操作失败的error</span><br><span class=\"line\">    RowsAffected int64                 // 操作影响的行数</span><br><span class=\"line\"></span><br><span class=\"line\">    // single db</span><br><span class=\"line\">    db                SQLCommon        // SQL接口，包括（Exec、Prepare、Query、QueryRow）</span><br><span class=\"line\">    blockGlobalUpdate bool             // 为true时，可以在update在没有where条件是报错，避免全局更新</span><br><span class=\"line\">    logMode           logModeValue     // 日志模式，gorm提供了三种   </span><br><span class=\"line\">    logger            logger           // 内部日志实例</span><br><span class=\"line\">    search            *search          // 查询相关的条件</span><br><span class=\"line\">    values            sync.Map         // value Map</span><br><span class=\"line\"></span><br><span class=\"line\">    // global db</span><br><span class=\"line\">    parent        *DB                  // 父db，为了保存一个空的初始化后的db，也为了保存curd注册的的callback方法</span><br><span class=\"line\">    callbacks     *Callback            // callback方法</span><br><span class=\"line\">    dialect       Dialect              // 不同类型数据库对应的不同实现的相同接口 </span><br><span class=\"line\">    singularTable bool                 // 表名是否为复数形式，true时为user，false时为users</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SQLCommon定义基本的查询接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SQLCommon is the minimal database connection functionality gorm requires.  Implemented by *sql.DB.</span><br><span class=\"line\">type SQLCommon interface &#123;</span><br><span class=\"line\">\tExec(query string, args ...interface&#123;&#125;) (sql.Result, error)</span><br><span class=\"line\">\tPrepare(query string) (*sql.Stmt, error)</span><br><span class=\"line\">\tQuery(query string, args ...interface&#123;&#125;) (*sql.Rows, error)</span><br><span class=\"line\">\tQueryRow(query string, args ...interface&#123;&#125;) *sql.Row</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm的Open方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func Open(dialect string, args ...interface&#123;&#125;) (db *DB, err error) &#123;</span><br><span class=\"line\">    if len(args) == 0 &#123;</span><br><span class=\"line\">        err = errors.New(&quot;invalid database source&quot;)</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var source string</span><br><span class=\"line\">    var dbSQL SQLCommon</span><br><span class=\"line\">    var ownDbSQL bool</span><br><span class=\"line\"></span><br><span class=\"line\">    switch value := args[0].(type) &#123;</span><br><span class=\"line\">    case string:</span><br><span class=\"line\">        var driver = dialect</span><br><span class=\"line\">        if len(args) == 1 &#123;</span><br><span class=\"line\">            source = value</span><br><span class=\"line\">        &#125; else if len(args) &gt;= 2 &#123;</span><br><span class=\"line\">            driver = value</span><br><span class=\"line\">            source = args[1].(string)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 调用go基础库的Open方法获得db的connention附给dbSQL，</span><br><span class=\"line\">        // 此时还没有真正连接数据库</span><br><span class=\"line\">        dbSQL, err = sql.Open(driver, source)</span><br><span class=\"line\">        ownDbSQL = true</span><br><span class=\"line\">    case SQLCommon:</span><br><span class=\"line\">        dbSQL = value</span><br><span class=\"line\">        ownDbSQL = false</span><br><span class=\"line\">    default:</span><br><span class=\"line\">        return nil, fmt.Errorf(&quot;invalid database source: %v is not a valid type&quot;, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 初始化DB</span><br><span class=\"line\">    db = &amp;DB&#123;</span><br><span class=\"line\">        db:        dbSQL,</span><br><span class=\"line\">        logger:    defaultLogger,</span><br><span class=\"line\">        callbacks: DefaultCallback,</span><br><span class=\"line\">        dialect:   newDialect(dialect, dbSQL),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 将初始化的DB保存到db.parent中</span><br><span class=\"line\">    db.parent = db</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 调用go基础库的Ping方法检测数据库connention是否可以连通</span><br><span class=\"line\">    if d, ok := dbSQL.(*sql.DB); ok &#123;</span><br><span class=\"line\">        if err = d.Ping(); err != nil &amp;&amp; ownDbSQL &#123;</span><br><span class=\"line\">            d.Close()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm是通过多个callbsck方法来实现curd的，具体流程以一个查询为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBEngine.Table(entry.TableName).</span><br><span class=\"line\">    Select(entry.Select).</span><br><span class=\"line\">    Where(entry.sql, entry.values).</span><br><span class=\"line\">    Order(entry.order).</span><br><span class=\"line\">    Find(entry.result)</span><br></pre></td></tr></table></figure>\n<p>执行步骤：</p>\n<p>1.执行Table方法，添加tablename条件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (s *DB) Table(name string) *DB &#123;</span><br><span class=\"line\">    clone := s.clone()        // 执行clone方法也就是从新的db中赋值一个空的，避免交叉影响</span><br><span class=\"line\">    clone.search.Table(name)  // 赋值table name</span><br><span class=\"line\">    clone.Value = nil         // 附空</span><br><span class=\"line\">    return clone</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.执行Where方法，添加where条件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先也是调用clone方法，然后调用search的Where方法</span><br><span class=\"line\">func (s *DB) Where(query interface&#123;&#125;, args ...interface&#123;&#125;) *DB &#123;</span><br><span class=\"line\">    return s.clone().search.Where(query, args...).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// search的Where方法是将传进来的条件进行拼接，存入search.whereConditions</span><br><span class=\"line\">func (s *search) Where(query interface&#123;&#125;, values ...interface&#123;&#125;) *search &#123;</span><br><span class=\"line\">    s.whereConditions = append(s.whereConditions, map[string]interface&#123;&#125;&#123;&quot;query&quot;: query, &quot;args&quot;: values&#125;)</span><br><span class=\"line\">    return s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.执行Order方法，添加order条件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类似Where，reorder为true会强制刷掉gorm默认的order by</span><br><span class=\"line\">func (s *DB) Order(value interface&#123;&#125;, reorder ...bool) *DB &#123;</span><br><span class=\"line\">    return s.clone().search.Order(value, reorder...).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (s *search) Order(value interface&#123;&#125;, reorder ...bool) *search &#123;</span><br><span class=\"line\">    // 如果为true，先清除s.orders</span><br><span class=\"line\">    if len(reorder) &gt; 0 &amp;&amp; reorder[0] &#123;</span><br><span class=\"line\">        s.orders = []interface&#123;&#125;&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 将value拼接，存入s.orders</span><br><span class=\"line\">    if value != nil &amp;&amp; value != &quot;&quot; &#123;</span><br><span class=\"line\">        s.orders = append(s.orders, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.执行Find方法，真正实现查询：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先先创建一个scope（可以理解成只针对本次数据库操作有效的一个环境），再调用inlineCondition内部方法，最后执行callcallbacks一系列方法实现真正的查询操作，并将db返回</span><br><span class=\"line\">func (s *DB) Find(out interface&#123;&#125;, where ...interface&#123;&#125;) *DB &#123;</span><br><span class=\"line\">    return s.NewScope(out).inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// NewScope方法就是初始化一个scope</span><br><span class=\"line\">func (s *DB) NewScope(value interface&#123;&#125;) *Scope &#123;</span><br><span class=\"line\">    dbClone := s.clone()</span><br><span class=\"line\">    // 此时赋值value</span><br><span class=\"line\">    dbClone.Value = value</span><br><span class=\"line\">    scope := &amp;Scope&#123;db: dbClone, Value: value&#125;</span><br><span class=\"line\">    if s.search != nil &#123;</span><br><span class=\"line\">        scope.Search = s.search.clone()</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        scope.Search = &amp;search&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// inlineCondition方法是执行scope.Search.Where</span><br><span class=\"line\">func (scope *Scope) inlineCondition(values ...interface&#123;&#125;) *Scope &#123;</span><br><span class=\"line\">    if len(values) &gt; 0 &#123;</span><br><span class=\"line\">        scope.Search.Where(values[0], values[1:]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// scope.Search.Where实际上也是执行条件拼接，由于我们在调用的时候没有在Find中传入条件，所以这个方法不会被执行</span><br><span class=\"line\">func (s *search) Where(query interface&#123;&#125;, values ...interface&#123;&#125;) *search &#123;</span><br><span class=\"line\">    s.whereConditions = append(s.whereConditions, map[string]interface&#123;&#125;&#123;&quot;query&quot;: query, &quot;args&quot;: values&#125;)</span><br><span class=\"line\">    return s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 最重要的就是callcallbacks方法，是真正执行的地方</span><br><span class=\"line\">func (scope *Scope) callCallbacks(funcs []*func(s *Scope)) *Scope &#123;</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        if err := recover(); err != nil &#123;</span><br><span class=\"line\">            if db, ok := scope.db.db.(sqlTx); ok &#123;</span><br><span class=\"line\">                db.Rollback()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    // 循环里面所有的注册的funcs</span><br><span class=\"line\">    for _, f := range funcs &#123;</span><br><span class=\"line\">        (*f)(scope)</span><br><span class=\"line\">        if scope.skipLeft &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 这里的funcs实在程序启动时init方法注册的</span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">    DefaultCallback.Query().Register(&quot;gorm:query&quot;, queryCallback)</span><br><span class=\"line\">    DefaultCallback.Query().Register(&quot;gorm:preload&quot;, preloadCallback)</span><br><span class=\"line\">    DefaultCallback.Query().Register(&quot;gorm:after_query&quot;, afterQueryCallback)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 比如afterQueryCallback方法还提供了反射调用结构体的AfterFind方法，如果在查询前结构体实现了AfterFind方法就会被调用，这个机制比了灵活</span><br><span class=\"line\">func afterQueryCallback(scope *Scope) &#123;</span><br><span class=\"line\">    if !scope.HasError() &#123;</span><br><span class=\"line\">        scope.CallMethod(&quot;AfterFind&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"gorm源码解析\"><a href=\"#gorm源码解析\" class=\"headerlink\" title=\"gorm源码解析\"></a>gorm源码解析</h1><p>gorm使用示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;github.com/jinzhu/gorm&quot;</span><br><span class=\"line\">\t_ &quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Product struct &#123;</span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tCode  string</span><br><span class=\"line\">\tPrice uint</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tdb, err := gorm.Open(&quot;sqlite3&quot;, &quot;test.db&quot;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tpanic(&quot;failed to connect database&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefer db.Close()</span><br><span class=\"line\">\tdb.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class=\"line\">\tdb.Create(&amp;Product&#123;Code: &quot;L1212&quot;, Price: 1000&#125;)</span><br><span class=\"line\">\tvar product Product</span><br><span class=\"line\">\tdb.First(&amp;product, 1)                  </span><br><span class=\"line\">\tdb.First(&amp;product, &quot;code = ?&quot;, &quot;L1212&quot;) </span><br><span class=\"line\">\tdb.Model(&amp;product).Update(&quot;Price&quot;, 2000)</span><br><span class=\"line\">\tdb.Delete(&amp;product)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm一般的初始化方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := gorm.Open(&quot;mysql&quot;, &quot;user:password@/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)</span><br></pre></td></tr></table></figure>\n<p>gorm中DB结构体的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// DB的结构体</span><br><span class=\"line\">type DB struct &#123;</span><br><span class=\"line\">    sync.RWMutex                       // 锁</span><br><span class=\"line\">    Value        interface&#123;&#125;           // 一般传入实际操作的表所对应的结构体</span><br><span class=\"line\">    Error        error                 // DB操作失败的error</span><br><span class=\"line\">    RowsAffected int64                 // 操作影响的行数</span><br><span class=\"line\"></span><br><span class=\"line\">    // single db</span><br><span class=\"line\">    db                SQLCommon        // SQL接口，包括（Exec、Prepare、Query、QueryRow）</span><br><span class=\"line\">    blockGlobalUpdate bool             // 为true时，可以在update在没有where条件是报错，避免全局更新</span><br><span class=\"line\">    logMode           logModeValue     // 日志模式，gorm提供了三种   </span><br><span class=\"line\">    logger            logger           // 内部日志实例</span><br><span class=\"line\">    search            *search          // 查询相关的条件</span><br><span class=\"line\">    values            sync.Map         // value Map</span><br><span class=\"line\"></span><br><span class=\"line\">    // global db</span><br><span class=\"line\">    parent        *DB                  // 父db，为了保存一个空的初始化后的db，也为了保存curd注册的的callback方法</span><br><span class=\"line\">    callbacks     *Callback            // callback方法</span><br><span class=\"line\">    dialect       Dialect              // 不同类型数据库对应的不同实现的相同接口 </span><br><span class=\"line\">    singularTable bool                 // 表名是否为复数形式，true时为user，false时为users</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SQLCommon定义基本的查询接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SQLCommon is the minimal database connection functionality gorm requires.  Implemented by *sql.DB.</span><br><span class=\"line\">type SQLCommon interface &#123;</span><br><span class=\"line\">\tExec(query string, args ...interface&#123;&#125;) (sql.Result, error)</span><br><span class=\"line\">\tPrepare(query string) (*sql.Stmt, error)</span><br><span class=\"line\">\tQuery(query string, args ...interface&#123;&#125;) (*sql.Rows, error)</span><br><span class=\"line\">\tQueryRow(query string, args ...interface&#123;&#125;) *sql.Row</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm的Open方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func Open(dialect string, args ...interface&#123;&#125;) (db *DB, err error) &#123;</span><br><span class=\"line\">    if len(args) == 0 &#123;</span><br><span class=\"line\">        err = errors.New(&quot;invalid database source&quot;)</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var source string</span><br><span class=\"line\">    var dbSQL SQLCommon</span><br><span class=\"line\">    var ownDbSQL bool</span><br><span class=\"line\"></span><br><span class=\"line\">    switch value := args[0].(type) &#123;</span><br><span class=\"line\">    case string:</span><br><span class=\"line\">        var driver = dialect</span><br><span class=\"line\">        if len(args) == 1 &#123;</span><br><span class=\"line\">            source = value</span><br><span class=\"line\">        &#125; else if len(args) &gt;= 2 &#123;</span><br><span class=\"line\">            driver = value</span><br><span class=\"line\">            source = args[1].(string)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 调用go基础库的Open方法获得db的connention附给dbSQL，</span><br><span class=\"line\">        // 此时还没有真正连接数据库</span><br><span class=\"line\">        dbSQL, err = sql.Open(driver, source)</span><br><span class=\"line\">        ownDbSQL = true</span><br><span class=\"line\">    case SQLCommon:</span><br><span class=\"line\">        dbSQL = value</span><br><span class=\"line\">        ownDbSQL = false</span><br><span class=\"line\">    default:</span><br><span class=\"line\">        return nil, fmt.Errorf(&quot;invalid database source: %v is not a valid type&quot;, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 初始化DB</span><br><span class=\"line\">    db = &amp;DB&#123;</span><br><span class=\"line\">        db:        dbSQL,</span><br><span class=\"line\">        logger:    defaultLogger,</span><br><span class=\"line\">        callbacks: DefaultCallback,</span><br><span class=\"line\">        dialect:   newDialect(dialect, dbSQL),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 将初始化的DB保存到db.parent中</span><br><span class=\"line\">    db.parent = db</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 调用go基础库的Ping方法检测数据库connention是否可以连通</span><br><span class=\"line\">    if d, ok := dbSQL.(*sql.DB); ok &#123;</span><br><span class=\"line\">        if err = d.Ping(); err != nil &amp;&amp; ownDbSQL &#123;</span><br><span class=\"line\">            d.Close()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gorm是通过多个callbsck方法来实现curd的，具体流程以一个查询为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBEngine.Table(entry.TableName).</span><br><span class=\"line\">    Select(entry.Select).</span><br><span class=\"line\">    Where(entry.sql, entry.values).</span><br><span class=\"line\">    Order(entry.order).</span><br><span class=\"line\">    Find(entry.result)</span><br></pre></td></tr></table></figure>\n<p>执行步骤：</p>\n<p>1.执行Table方法，添加tablename条件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (s *DB) Table(name string) *DB &#123;</span><br><span class=\"line\">    clone := s.clone()        // 执行clone方法也就是从新的db中赋值一个空的，避免交叉影响</span><br><span class=\"line\">    clone.search.Table(name)  // 赋值table name</span><br><span class=\"line\">    clone.Value = nil         // 附空</span><br><span class=\"line\">    return clone</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.执行Where方法，添加where条件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先也是调用clone方法，然后调用search的Where方法</span><br><span class=\"line\">func (s *DB) Where(query interface&#123;&#125;, args ...interface&#123;&#125;) *DB &#123;</span><br><span class=\"line\">    return s.clone().search.Where(query, args...).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// search的Where方法是将传进来的条件进行拼接，存入search.whereConditions</span><br><span class=\"line\">func (s *search) Where(query interface&#123;&#125;, values ...interface&#123;&#125;) *search &#123;</span><br><span class=\"line\">    s.whereConditions = append(s.whereConditions, map[string]interface&#123;&#125;&#123;&quot;query&quot;: query, &quot;args&quot;: values&#125;)</span><br><span class=\"line\">    return s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.执行Order方法，添加order条件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类似Where，reorder为true会强制刷掉gorm默认的order by</span><br><span class=\"line\">func (s *DB) Order(value interface&#123;&#125;, reorder ...bool) *DB &#123;</span><br><span class=\"line\">    return s.clone().search.Order(value, reorder...).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (s *search) Order(value interface&#123;&#125;, reorder ...bool) *search &#123;</span><br><span class=\"line\">    // 如果为true，先清除s.orders</span><br><span class=\"line\">    if len(reorder) &gt; 0 &amp;&amp; reorder[0] &#123;</span><br><span class=\"line\">        s.orders = []interface&#123;&#125;&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 将value拼接，存入s.orders</span><br><span class=\"line\">    if value != nil &amp;&amp; value != &quot;&quot; &#123;</span><br><span class=\"line\">        s.orders = append(s.orders, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.执行Find方法，真正实现查询：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先先创建一个scope（可以理解成只针对本次数据库操作有效的一个环境），再调用inlineCondition内部方法，最后执行callcallbacks一系列方法实现真正的查询操作，并将db返回</span><br><span class=\"line\">func (s *DB) Find(out interface&#123;&#125;, where ...interface&#123;&#125;) *DB &#123;</span><br><span class=\"line\">    return s.NewScope(out).inlineCondition(where...).callCallbacks(s.parent.callbacks.queries).db</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// NewScope方法就是初始化一个scope</span><br><span class=\"line\">func (s *DB) NewScope(value interface&#123;&#125;) *Scope &#123;</span><br><span class=\"line\">    dbClone := s.clone()</span><br><span class=\"line\">    // 此时赋值value</span><br><span class=\"line\">    dbClone.Value = value</span><br><span class=\"line\">    scope := &amp;Scope&#123;db: dbClone, Value: value&#125;</span><br><span class=\"line\">    if s.search != nil &#123;</span><br><span class=\"line\">        scope.Search = s.search.clone()</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        scope.Search = &amp;search&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// inlineCondition方法是执行scope.Search.Where</span><br><span class=\"line\">func (scope *Scope) inlineCondition(values ...interface&#123;&#125;) *Scope &#123;</span><br><span class=\"line\">    if len(values) &gt; 0 &#123;</span><br><span class=\"line\">        scope.Search.Where(values[0], values[1:]...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// scope.Search.Where实际上也是执行条件拼接，由于我们在调用的时候没有在Find中传入条件，所以这个方法不会被执行</span><br><span class=\"line\">func (s *search) Where(query interface&#123;&#125;, values ...interface&#123;&#125;) *search &#123;</span><br><span class=\"line\">    s.whereConditions = append(s.whereConditions, map[string]interface&#123;&#125;&#123;&quot;query&quot;: query, &quot;args&quot;: values&#125;)</span><br><span class=\"line\">    return s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 最重要的就是callcallbacks方法，是真正执行的地方</span><br><span class=\"line\">func (scope *Scope) callCallbacks(funcs []*func(s *Scope)) *Scope &#123;</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        if err := recover(); err != nil &#123;</span><br><span class=\"line\">            if db, ok := scope.db.db.(sqlTx); ok &#123;</span><br><span class=\"line\">                db.Rollback()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            panic(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    // 循环里面所有的注册的funcs</span><br><span class=\"line\">    for _, f := range funcs &#123;</span><br><span class=\"line\">        (*f)(scope)</span><br><span class=\"line\">        if scope.skipLeft &#123;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return scope</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 这里的funcs实在程序启动时init方法注册的</span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">    DefaultCallback.Query().Register(&quot;gorm:query&quot;, queryCallback)</span><br><span class=\"line\">    DefaultCallback.Query().Register(&quot;gorm:preload&quot;, preloadCallback)</span><br><span class=\"line\">    DefaultCallback.Query().Register(&quot;gorm:after_query&quot;, afterQueryCallback)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 比如afterQueryCallback方法还提供了反射调用结构体的AfterFind方法，如果在查询前结构体实现了AfterFind方法就会被调用，这个机制比了灵活</span><br><span class=\"line\">func afterQueryCallback(scope *Scope) &#123;</span><br><span class=\"line\">    if !scope.HasError() &#123;</span><br><span class=\"line\">        scope.CallMethod(&quot;AfterFind&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"mysql常见问题","date":"2019-10-07T13:03:03.000Z","_content":"\n# mysql原理\n\n### 事务ACID如何实现？\n\n```\nredo log重做日志其实保障的是事务的持久性和一致性，而undo log撤销日志则保障了事务的原子性，锁保证隔离性。\n(一个事务)写操作对(另一个事务)写操作的影响：锁机制保证隔离性\n(一个事务)写操作对(另一个事务)读操作的影响：MVCC保证隔离性\n原子性：使用 undo log ，从而达到回滚\n持久性：使用 redo log，从而达到故障后恢复\n隔离性：使用锁以及MVCC,运用的优化思想有读写分离，读读并行，读写并行\n一致性：通过回滚，以及恢复，和在并发环境下的隔离做到一致性。\n```\n\n### 索引如何存储？\n\n```\nB+树，每一个节点为一页，IO次数约等于树高度\n```\n\n### mysql笔记\n\n- uid使用bigint 长度20和primary key 和auto_increment\n- create_time 使用timestamp默认值CURRENT_TIMESTAMP\n- update_time使用timestamp默认值CURRENT_TIMESTAMP加on_update\n- 一般用varchar长度64，128，512最大65535\n- 超大用text\n\n\n\n### 查询数据库磁盘占用\n\n```sql\nselect TABLE_SCHEMA, concat(truncate(sum(data_length)/1024/1024,2),' MB') as data_size,\nconcat(truncate(sum(index_length)/1024/1024,2),'MB') as index_size\nfrom information_schema.tables\ngroup by TABLE_SCHEMA\norder by data_length desc;\n```\n\n### 查询某个数据库每个表磁盘占用\n\n```sql\nselect TABLE_NAME, concat(truncate(data_length/1024/1024,2),' MB') as data_size,\nconcat(truncate(index_length/1024/1024,2),' MB') as index_size\nfrom information_schema.tables where TABLE_SCHEMA = 'red_packet'\ngroup by TABLE_NAME\norder by data_length desc;\n```\n\n","source":"_posts/mysql/mysql常见问题.md","raw":"---\ntitle: mysql常见问题\ntags:\n  - mysql\ncategories:\n  - mysql\ndate: 2019-10-07 21:03:03\n---\n\n# mysql原理\n\n### 事务ACID如何实现？\n\n```\nredo log重做日志其实保障的是事务的持久性和一致性，而undo log撤销日志则保障了事务的原子性，锁保证隔离性。\n(一个事务)写操作对(另一个事务)写操作的影响：锁机制保证隔离性\n(一个事务)写操作对(另一个事务)读操作的影响：MVCC保证隔离性\n原子性：使用 undo log ，从而达到回滚\n持久性：使用 redo log，从而达到故障后恢复\n隔离性：使用锁以及MVCC,运用的优化思想有读写分离，读读并行，读写并行\n一致性：通过回滚，以及恢复，和在并发环境下的隔离做到一致性。\n```\n\n### 索引如何存储？\n\n```\nB+树，每一个节点为一页，IO次数约等于树高度\n```\n\n### mysql笔记\n\n- uid使用bigint 长度20和primary key 和auto_increment\n- create_time 使用timestamp默认值CURRENT_TIMESTAMP\n- update_time使用timestamp默认值CURRENT_TIMESTAMP加on_update\n- 一般用varchar长度64，128，512最大65535\n- 超大用text\n\n\n\n### 查询数据库磁盘占用\n\n```sql\nselect TABLE_SCHEMA, concat(truncate(sum(data_length)/1024/1024,2),' MB') as data_size,\nconcat(truncate(sum(index_length)/1024/1024,2),'MB') as index_size\nfrom information_schema.tables\ngroup by TABLE_SCHEMA\norder by data_length desc;\n```\n\n### 查询某个数据库每个表磁盘占用\n\n```sql\nselect TABLE_NAME, concat(truncate(data_length/1024/1024,2),' MB') as data_size,\nconcat(truncate(index_length/1024/1024,2),' MB') as index_size\nfrom information_schema.tables where TABLE_SCHEMA = 'red_packet'\ngroup by TABLE_NAME\norder by data_length desc;\n```\n\n","slug":"mysql/mysql常见问题","published":1,"updated":"2019-10-07T13:04:27.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dl003awl38ux67nqel","content":"<h1 id=\"mysql原理\"><a href=\"#mysql原理\" class=\"headerlink\" title=\"mysql原理\"></a>mysql原理</h1><h3 id=\"事务ACID如何实现？\"><a href=\"#事务ACID如何实现？\" class=\"headerlink\" title=\"事务ACID如何实现？\"></a>事务ACID如何实现？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redo log重做日志其实保障的是事务的持久性和一致性，而undo log撤销日志则保障了事务的原子性，锁保证隔离性。</span><br><span class=\"line\">(一个事务)写操作对(另一个事务)写操作的影响：锁机制保证隔离性</span><br><span class=\"line\">(一个事务)写操作对(另一个事务)读操作的影响：MVCC保证隔离性</span><br><span class=\"line\">原子性：使用 undo log ，从而达到回滚</span><br><span class=\"line\">持久性：使用 redo log，从而达到故障后恢复</span><br><span class=\"line\">隔离性：使用锁以及MVCC,运用的优化思想有读写分离，读读并行，读写并行</span><br><span class=\"line\">一致性：通过回滚，以及恢复，和在并发环境下的隔离做到一致性。</span><br></pre></td></tr></table></figure>\n<h3 id=\"索引如何存储？\"><a href=\"#索引如何存储？\" class=\"headerlink\" title=\"索引如何存储？\"></a>索引如何存储？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B+树，每一个节点为一页，IO次数约等于树高度</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql笔记\"><a href=\"#mysql笔记\" class=\"headerlink\" title=\"mysql笔记\"></a>mysql笔记</h3><ul>\n<li>uid使用bigint 长度20和primary key 和auto_increment</li>\n<li>create_time 使用timestamp默认值CURRENT_TIMESTAMP</li>\n<li>update_time使用timestamp默认值CURRENT_TIMESTAMP加on_update</li>\n<li>一般用varchar长度64，128，512最大65535</li>\n<li>超大用text</li>\n</ul>\n<h3 id=\"查询数据库磁盘占用\"><a href=\"#查询数据库磁盘占用\" class=\"headerlink\" title=\"查询数据库磁盘占用\"></a>查询数据库磁盘占用</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> TABLE_SCHEMA, <span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(<span class=\"keyword\">sum</span>(data_length)/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> data_size,</span><br><span class=\"line\"><span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(<span class=\"keyword\">sum</span>(index_length)/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">'MB'</span>) <span class=\"keyword\">as</span> index_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TABLE_SCHEMA</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> data_length <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询某个数据库每个表磁盘占用\"><a href=\"#查询某个数据库每个表磁盘占用\" class=\"headerlink\" title=\"查询某个数据库每个表磁盘占用\"></a>查询某个数据库每个表磁盘占用</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> TABLE_NAME, <span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(data_length/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> data_size,</span><br><span class=\"line\"><span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(index_length/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> index_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> TABLE_SCHEMA = <span class=\"string\">'red_packet'</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TABLE_NAME</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> data_length <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mysql原理\"><a href=\"#mysql原理\" class=\"headerlink\" title=\"mysql原理\"></a>mysql原理</h1><h3 id=\"事务ACID如何实现？\"><a href=\"#事务ACID如何实现？\" class=\"headerlink\" title=\"事务ACID如何实现？\"></a>事务ACID如何实现？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redo log重做日志其实保障的是事务的持久性和一致性，而undo log撤销日志则保障了事务的原子性，锁保证隔离性。</span><br><span class=\"line\">(一个事务)写操作对(另一个事务)写操作的影响：锁机制保证隔离性</span><br><span class=\"line\">(一个事务)写操作对(另一个事务)读操作的影响：MVCC保证隔离性</span><br><span class=\"line\">原子性：使用 undo log ，从而达到回滚</span><br><span class=\"line\">持久性：使用 redo log，从而达到故障后恢复</span><br><span class=\"line\">隔离性：使用锁以及MVCC,运用的优化思想有读写分离，读读并行，读写并行</span><br><span class=\"line\">一致性：通过回滚，以及恢复，和在并发环境下的隔离做到一致性。</span><br></pre></td></tr></table></figure>\n<h3 id=\"索引如何存储？\"><a href=\"#索引如何存储？\" class=\"headerlink\" title=\"索引如何存储？\"></a>索引如何存储？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B+树，每一个节点为一页，IO次数约等于树高度</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql笔记\"><a href=\"#mysql笔记\" class=\"headerlink\" title=\"mysql笔记\"></a>mysql笔记</h3><ul>\n<li>uid使用bigint 长度20和primary key 和auto_increment</li>\n<li>create_time 使用timestamp默认值CURRENT_TIMESTAMP</li>\n<li>update_time使用timestamp默认值CURRENT_TIMESTAMP加on_update</li>\n<li>一般用varchar长度64，128，512最大65535</li>\n<li>超大用text</li>\n</ul>\n<h3 id=\"查询数据库磁盘占用\"><a href=\"#查询数据库磁盘占用\" class=\"headerlink\" title=\"查询数据库磁盘占用\"></a>查询数据库磁盘占用</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> TABLE_SCHEMA, <span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(<span class=\"keyword\">sum</span>(data_length)/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> data_size,</span><br><span class=\"line\"><span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(<span class=\"keyword\">sum</span>(index_length)/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">'MB'</span>) <span class=\"keyword\">as</span> index_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TABLE_SCHEMA</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> data_length <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询某个数据库每个表磁盘占用\"><a href=\"#查询某个数据库每个表磁盘占用\" class=\"headerlink\" title=\"查询某个数据库每个表磁盘占用\"></a>查询某个数据库每个表磁盘占用</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> TABLE_NAME, <span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(data_length/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> data_size,</span><br><span class=\"line\"><span class=\"keyword\">concat</span>(<span class=\"keyword\">truncate</span>(index_length/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>,<span class=\"number\">2</span>),<span class=\"string\">' MB'</span>) <span class=\"keyword\">as</span> index_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> TABLE_SCHEMA = <span class=\"string\">'red_packet'</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TABLE_NAME</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> data_length <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"redis注意点","date":"2019-10-07T12:44:03.000Z","_content":"# redis注意点\n\n```\n//这个max在前面\nZREVRANGEBYSCORE key max min WITHSCORES \n//这个max在后面\nZRANGEBYSCORE key min max WITHSCORES\n```\n\n","source":"_posts/mysql/redis注意点.md","raw":"---\ntitle: redis注意点\ntags:\n  - redis \ncategories:\n  - redis\ndate: 2019-10-07 20:44:03\n---\n# redis注意点\n\n```\n//这个max在前面\nZREVRANGEBYSCORE key max min WITHSCORES \n//这个max在后面\nZRANGEBYSCORE key min max WITHSCORES\n```\n\n","slug":"mysql/redis注意点","published":1,"updated":"2019-10-07T12:44:38.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dn003cwl386tii4494","content":"<h1 id=\"redis注意点\"><a href=\"#redis注意点\" class=\"headerlink\" title=\"redis注意点\"></a>redis注意点</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个max在前面</span><br><span class=\"line\">ZREVRANGEBYSCORE key max min WITHSCORES </span><br><span class=\"line\">//这个max在后面</span><br><span class=\"line\">ZRANGEBYSCORE key min max WITHSCORES</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redis注意点\"><a href=\"#redis注意点\" class=\"headerlink\" title=\"redis注意点\"></a>redis注意点</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个max在前面</span><br><span class=\"line\">ZREVRANGEBYSCORE key max min WITHSCORES </span><br><span class=\"line\">//这个max在后面</span><br><span class=\"line\">ZRANGEBYSCORE key min max WITHSCORES</span><br></pre></td></tr></table></figure>\n"},{"title":"python常见问题","date":"2019-10-07T12:48:01.000Z","_content":"# python安装\n`virtualenv -p /usr/bin/python2.7 venv`\n\n# python常用函数\n```\n# str\ns1 = str()\n# in python `''` or `\"\"` is the same\ns2 = \"shaunwei\" # 'shaunwei'\ns2len = len(s2)\n# last 3 chars\ns2[-3:] # wei\ns2[5:8] # wei\ns3 = s2[:5] # shaun\ns3 += 'wei' # return 'shaunwei'\n# list in python is same as ArrayList in java\ns2list = list(s3)\n# string at index 4\ns2[4] # 'n'\n# find index at first\ns2.index('w') # return 5, if not found, throw ValueError\ns2.find('w') # return 5, if not found, return -1\n\n# 链表\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass DListNode:\n    def __init__(self, val):\n        self.val = val\n        self.prev = self.next = None\n    def reverse(self, head):\n        curt = None\n        while head:\n            curt = head\n            head = curt.next\n            curt.next = curt.prev\n            curt.prev = head\n        return curt\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\nqueue = [] # same as list()\nsize = len(queue)\nqueue.append(1)\nqueue.append(2)\nqueue.pop(0) # return 1\nqueue[0] # return 2 examine the first element\n\n\ns = set()\ns1 = {1, 2, 3}\ns.add('shaunwei')\n'shaun' in s # return true\ns.remove('shaunwei')\n\n# map 在 python 中是一个keyword\nhash_map = {} # or dict()\nhash_map['shaun'] = 98\nhash_map['wei'] = 99\nexist = 'wei' in hash_map # check existence\npoint = hash_map['shaun'] # get value by key\npoint = hash_map.pop('shaun') # remove by key, return value\nkeys = hash_map.keys() # return key list\n# iterate dictionary(map)\nfor key, value in hash_map.items():\n    # do something with k, v\n    pass\n\nclass Person(object):\n    def __init__(self,name,age):\n        self.name=name\n        self.age=age\n\n    def hello(self):\n        print 'hello:'+self.name+\":\"+str(self.age)\n\n\n\nclass Tom(Person):\n    def __init__(self,name):\n        super(Tom,self).__init__(name,18)\n    def hello2(self):#只要子类有重复的名字就会覆盖\n        pass\n        #print 'child say hello'\nt=Tom('tom')\nt.hello()\n```\n\n### Python一些注意点\n\n1. Python有七个序列类型： 字符串、 Unicode字符串、 列表、 元组、 字节数组、 缓冲区和xrange对象。序列类型 —  str、unicode、list、 tuple、 bytearray、buffer、xrange\n2. if and执行逻辑\n\n```\ndef is_a():\n    print 'a'\n    return False\ndef is_b():\n    print 'b'\n    return False\n\n\nif __name__=='__main__':\n    #第一个条件如果为False,and后面的就直接不执行了\n    if is_a() and is_b():\n        print 'if中有先后顺序的'\n```\n\n### 遇到的一些问题\n1. tornado框架：\n\n1）异步async+await配合，2）效果和yield差不多，3）也可以使用callback\n\n```\nfrom tornado import gen\n\n@gen.coroutine\ndef fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = yield http_client.fetch(url)\n    # In Python versions prior to 3.3, returning a value from\n    # a generator is not allowed and you must use\n    #   raise gen.Return(response.body)\n    # instead.\n    return response.body\n```\n\n```\nasync def fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = await http_client.fetch(url)\n    return response.body\n```\n\n2. python语法\n\n- 何时执行装饰器：导入模块时\n\n用处：将函数添加到中央注册处，url-》相应函数\n\n- 装饰器将函数替换成新的函数(添加一个记时功能给函数)：\n\n```\n@clock\ndef haha():\n\txxxxx\n\t\n\t\ndef clock(func):\n\tdef clocked(*arg):\n\t\tfunc(*arg)\n\treturn clocked #返回新的函数了，替换掉原来的haha()\n```\n\n- == a.__eq--(b)和比较值Java中：equals，is比较对象标识（地址）Java中：==\n- Copy.deepcopy(obj)会记住循环引用，优雅处理\n- @classmethod 最常见的用法是构建备选的构造方法\n\n3. 重试函数\n\n```\n#encoding=utf8\n\n#有参数，必须再包一层（最外层的变量大家都可以访问）\ndef retry(times=1,exceptions=None):\n   exceptions = exceptions if exceptions is not None else Exception\n\n   # 包一层,传入对应的函数\n   def wrapper(func):\n      #替换函数\n      def wrapper(*args,**kwargs):\n         last_exception =None\n         for _ in range(times):\n            try:\n               return func(*args, **kwargs)\n            except exceptions as e:\n               last_exception = e\n         raise last_exception\n      return wrapper\n   return wrapper\n\nif __name__==\"__main__\":\n   @retry(5)\n   def test(uid,name):\n      print(\"do something\",uid,name)\n      raise Exception\n   test('123','tome')\n```\n\n4. 回调函数callback调用\n\n```\nclass Callback:\n    def run_callback(self,fn,*args,**kwargs):\n        print 'call function',fn.__name__\n        print args,kwargs\n        #fn(args)相当于传入一个元组参数\n        #fn(*args)会把元组拆开，给对应的参数赋值\n        fn(*args)\n\n\n    def hi(self,name,age):\n        print 'hello,',name,age\n\n\n    @classmethod\n    def start(cls):\n        cls().run_callback(cls().hi,'tome',18)\n\nCallback.start()\n```\n\n","source":"_posts/python/python常见问题.md","raw":"---\ntitle: python常见问题\ntags:\n  - python\ncategories:\n  - python\ndate: 2019-10-07 20:48:01\n---\n# python安装\n`virtualenv -p /usr/bin/python2.7 venv`\n\n# python常用函数\n```\n# str\ns1 = str()\n# in python `''` or `\"\"` is the same\ns2 = \"shaunwei\" # 'shaunwei'\ns2len = len(s2)\n# last 3 chars\ns2[-3:] # wei\ns2[5:8] # wei\ns3 = s2[:5] # shaun\ns3 += 'wei' # return 'shaunwei'\n# list in python is same as ArrayList in java\ns2list = list(s3)\n# string at index 4\ns2[4] # 'n'\n# find index at first\ns2.index('w') # return 5, if not found, throw ValueError\ns2.find('w') # return 5, if not found, return -1\n\n# 链表\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass DListNode:\n    def __init__(self, val):\n        self.val = val\n        self.prev = self.next = None\n    def reverse(self, head):\n        curt = None\n        while head:\n            curt = head\n            head = curt.next\n            curt.next = curt.prev\n            curt.prev = head\n        return curt\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\nqueue = [] # same as list()\nsize = len(queue)\nqueue.append(1)\nqueue.append(2)\nqueue.pop(0) # return 1\nqueue[0] # return 2 examine the first element\n\n\ns = set()\ns1 = {1, 2, 3}\ns.add('shaunwei')\n'shaun' in s # return true\ns.remove('shaunwei')\n\n# map 在 python 中是一个keyword\nhash_map = {} # or dict()\nhash_map['shaun'] = 98\nhash_map['wei'] = 99\nexist = 'wei' in hash_map # check existence\npoint = hash_map['shaun'] # get value by key\npoint = hash_map.pop('shaun') # remove by key, return value\nkeys = hash_map.keys() # return key list\n# iterate dictionary(map)\nfor key, value in hash_map.items():\n    # do something with k, v\n    pass\n\nclass Person(object):\n    def __init__(self,name,age):\n        self.name=name\n        self.age=age\n\n    def hello(self):\n        print 'hello:'+self.name+\":\"+str(self.age)\n\n\n\nclass Tom(Person):\n    def __init__(self,name):\n        super(Tom,self).__init__(name,18)\n    def hello2(self):#只要子类有重复的名字就会覆盖\n        pass\n        #print 'child say hello'\nt=Tom('tom')\nt.hello()\n```\n\n### Python一些注意点\n\n1. Python有七个序列类型： 字符串、 Unicode字符串、 列表、 元组、 字节数组、 缓冲区和xrange对象。序列类型 —  str、unicode、list、 tuple、 bytearray、buffer、xrange\n2. if and执行逻辑\n\n```\ndef is_a():\n    print 'a'\n    return False\ndef is_b():\n    print 'b'\n    return False\n\n\nif __name__=='__main__':\n    #第一个条件如果为False,and后面的就直接不执行了\n    if is_a() and is_b():\n        print 'if中有先后顺序的'\n```\n\n### 遇到的一些问题\n1. tornado框架：\n\n1）异步async+await配合，2）效果和yield差不多，3）也可以使用callback\n\n```\nfrom tornado import gen\n\n@gen.coroutine\ndef fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = yield http_client.fetch(url)\n    # In Python versions prior to 3.3, returning a value from\n    # a generator is not allowed and you must use\n    #   raise gen.Return(response.body)\n    # instead.\n    return response.body\n```\n\n```\nasync def fetch_coroutine(url):\n    http_client = AsyncHTTPClient()\n    response = await http_client.fetch(url)\n    return response.body\n```\n\n2. python语法\n\n- 何时执行装饰器：导入模块时\n\n用处：将函数添加到中央注册处，url-》相应函数\n\n- 装饰器将函数替换成新的函数(添加一个记时功能给函数)：\n\n```\n@clock\ndef haha():\n\txxxxx\n\t\n\t\ndef clock(func):\n\tdef clocked(*arg):\n\t\tfunc(*arg)\n\treturn clocked #返回新的函数了，替换掉原来的haha()\n```\n\n- == a.__eq--(b)和比较值Java中：equals，is比较对象标识（地址）Java中：==\n- Copy.deepcopy(obj)会记住循环引用，优雅处理\n- @classmethod 最常见的用法是构建备选的构造方法\n\n3. 重试函数\n\n```\n#encoding=utf8\n\n#有参数，必须再包一层（最外层的变量大家都可以访问）\ndef retry(times=1,exceptions=None):\n   exceptions = exceptions if exceptions is not None else Exception\n\n   # 包一层,传入对应的函数\n   def wrapper(func):\n      #替换函数\n      def wrapper(*args,**kwargs):\n         last_exception =None\n         for _ in range(times):\n            try:\n               return func(*args, **kwargs)\n            except exceptions as e:\n               last_exception = e\n         raise last_exception\n      return wrapper\n   return wrapper\n\nif __name__==\"__main__\":\n   @retry(5)\n   def test(uid,name):\n      print(\"do something\",uid,name)\n      raise Exception\n   test('123','tome')\n```\n\n4. 回调函数callback调用\n\n```\nclass Callback:\n    def run_callback(self,fn,*args,**kwargs):\n        print 'call function',fn.__name__\n        print args,kwargs\n        #fn(args)相当于传入一个元组参数\n        #fn(*args)会把元组拆开，给对应的参数赋值\n        fn(*args)\n\n\n    def hi(self,name,age):\n        print 'hello,',name,age\n\n\n    @classmethod\n    def start(cls):\n        cls().run_callback(cls().hi,'tome',18)\n\nCallback.start()\n```\n\n","slug":"python/python常见问题","published":1,"updated":"2019-10-07T12:54:27.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0do003gwl38bw8caari","content":"<h1 id=\"python安装\"><a href=\"#python安装\" class=\"headerlink\" title=\"python安装\"></a>python安装</h1><p><code>virtualenv -p /usr/bin/python2.7 venv</code></p>\n<h1 id=\"python常用函数\"><a href=\"#python常用函数\" class=\"headerlink\" title=\"python常用函数\"></a>python常用函数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># str</span><br><span class=\"line\">s1 = str()</span><br><span class=\"line\"># in python `&apos;&apos;` or `&quot;&quot;` is the same</span><br><span class=\"line\">s2 = &quot;shaunwei&quot; # &apos;shaunwei&apos;</span><br><span class=\"line\">s2len = len(s2)</span><br><span class=\"line\"># last 3 chars</span><br><span class=\"line\">s2[-3:] # wei</span><br><span class=\"line\">s2[5:8] # wei</span><br><span class=\"line\">s3 = s2[:5] # shaun</span><br><span class=\"line\">s3 += &apos;wei&apos; # return &apos;shaunwei&apos;</span><br><span class=\"line\"># list in python is same as ArrayList in java</span><br><span class=\"line\">s2list = list(s3)</span><br><span class=\"line\"># string at index 4</span><br><span class=\"line\">s2[4] # &apos;n&apos;</span><br><span class=\"line\"># find index at first</span><br><span class=\"line\">s2.index(&apos;w&apos;) # return 5, if not found, throw ValueError</span><br><span class=\"line\">s2.find(&apos;w&apos;) # return 5, if not found, return -1</span><br><span class=\"line\"></span><br><span class=\"line\"># 链表</span><br><span class=\"line\">class ListNode:</span><br><span class=\"line\">    def __init__(self, val):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.next = None</span><br><span class=\"line\">class DListNode:</span><br><span class=\"line\">    def __init__(self, val):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.prev = self.next = None</span><br><span class=\"line\">    def reverse(self, head):</span><br><span class=\"line\">        curt = None</span><br><span class=\"line\">        while head:</span><br><span class=\"line\">            curt = head</span><br><span class=\"line\">            head = curt.next</span><br><span class=\"line\">            curt.next = curt.prev</span><br><span class=\"line\">            curt.prev = head</span><br><span class=\"line\">        return curt</span><br><span class=\"line\"></span><br><span class=\"line\">class TreeNode:</span><br><span class=\"line\">    def __init__(self, val):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.left, self.right = None, None</span><br><span class=\"line\"></span><br><span class=\"line\">queue = [] # same as list()</span><br><span class=\"line\">size = len(queue)</span><br><span class=\"line\">queue.append(1)</span><br><span class=\"line\">queue.append(2)</span><br><span class=\"line\">queue.pop(0) # return 1</span><br><span class=\"line\">queue[0] # return 2 examine the first element</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s = set()</span><br><span class=\"line\">s1 = &#123;1, 2, 3&#125;</span><br><span class=\"line\">s.add(&apos;shaunwei&apos;)</span><br><span class=\"line\">&apos;shaun&apos; in s # return true</span><br><span class=\"line\">s.remove(&apos;shaunwei&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># map 在 python 中是一个keyword</span><br><span class=\"line\">hash_map = &#123;&#125; # or dict()</span><br><span class=\"line\">hash_map[&apos;shaun&apos;] = 98</span><br><span class=\"line\">hash_map[&apos;wei&apos;] = 99</span><br><span class=\"line\">exist = &apos;wei&apos; in hash_map # check existence</span><br><span class=\"line\">point = hash_map[&apos;shaun&apos;] # get value by key</span><br><span class=\"line\">point = hash_map.pop(&apos;shaun&apos;) # remove by key, return value</span><br><span class=\"line\">keys = hash_map.keys() # return key list</span><br><span class=\"line\"># iterate dictionary(map)</span><br><span class=\"line\">for key, value in hash_map.items():</span><br><span class=\"line\">    # do something with k, v</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">class Person(object):</span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name=name</span><br><span class=\"line\">        self.age=age</span><br><span class=\"line\"></span><br><span class=\"line\">    def hello(self):</span><br><span class=\"line\">        print &apos;hello:&apos;+self.name+&quot;:&quot;+str(self.age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Tom(Person):</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        super(Tom,self).__init__(name,18)</span><br><span class=\"line\">    def hello2(self):#只要子类有重复的名字就会覆盖</span><br><span class=\"line\">        pass</span><br><span class=\"line\">        #print &apos;child say hello&apos;</span><br><span class=\"line\">t=Tom(&apos;tom&apos;)</span><br><span class=\"line\">t.hello()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Python一些注意点\"><a href=\"#Python一些注意点\" class=\"headerlink\" title=\"Python一些注意点\"></a>Python一些注意点</h3><ol>\n<li>Python有七个序列类型： 字符串、 Unicode字符串、 列表、 元组、 字节数组、 缓冲区和xrange对象。序列类型 —  str、unicode、list、 tuple、 bytearray、buffer、xrange</li>\n<li>if and执行逻辑</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def is_a():</span><br><span class=\"line\">    print &apos;a&apos;</span><br><span class=\"line\">    return False</span><br><span class=\"line\">def is_b():</span><br><span class=\"line\">    print &apos;b&apos;</span><br><span class=\"line\">    return False</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&apos;__main__&apos;:</span><br><span class=\"line\">    #第一个条件如果为False,and后面的就直接不执行了</span><br><span class=\"line\">    if is_a() and is_b():</span><br><span class=\"line\">        print &apos;if中有先后顺序的&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"遇到的一些问题\"><a href=\"#遇到的一些问题\" class=\"headerlink\" title=\"遇到的一些问题\"></a>遇到的一些问题</h3><ol>\n<li>tornado框架：</li>\n</ol>\n<p>1）异步async+await配合，2）效果和yield差不多，3）也可以使用callback</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado import gen</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = yield http_client.fetch(url)</span><br><span class=\"line\">    # In Python versions prior to 3.3, returning a value from</span><br><span class=\"line\">    # a generator is not allowed and you must use</span><br><span class=\"line\">    #   raise gen.Return(response.body)</span><br><span class=\"line\">    # instead.</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = await http_client.fetch(url)</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>python语法</li>\n</ol>\n<ul>\n<li>何时执行装饰器：导入模块时</li>\n</ul>\n<p>用处：将函数添加到中央注册处，url-》相应函数</p>\n<ul>\n<li>装饰器将函数替换成新的函数(添加一个记时功能给函数)：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@clock</span><br><span class=\"line\">def haha():</span><br><span class=\"line\">\txxxxx</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">def clock(func):</span><br><span class=\"line\">\tdef clocked(*arg):</span><br><span class=\"line\">\t\tfunc(*arg)</span><br><span class=\"line\">\treturn clocked #返回新的函数了，替换掉原来的haha()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>== a.__eq–(b)和比较值Java中：equals，is比较对象标识（地址）Java中：==</li>\n<li>Copy.deepcopy(obj)会记住循环引用，优雅处理</li>\n<li>@classmethod 最常见的用法是构建备选的构造方法</li>\n</ul>\n<ol start=\"3\">\n<li>重试函数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#encoding=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">#有参数，必须再包一层（最外层的变量大家都可以访问）</span><br><span class=\"line\">def retry(times=1,exceptions=None):</span><br><span class=\"line\">   exceptions = exceptions if exceptions is not None else Exception</span><br><span class=\"line\"></span><br><span class=\"line\">   # 包一层,传入对应的函数</span><br><span class=\"line\">   def wrapper(func):</span><br><span class=\"line\">      #替换函数</span><br><span class=\"line\">      def wrapper(*args,**kwargs):</span><br><span class=\"line\">         last_exception =None</span><br><span class=\"line\">         for _ in range(times):</span><br><span class=\"line\">            try:</span><br><span class=\"line\">               return func(*args, **kwargs)</span><br><span class=\"line\">            except exceptions as e:</span><br><span class=\"line\">               last_exception = e</span><br><span class=\"line\">         raise last_exception</span><br><span class=\"line\">      return wrapper</span><br><span class=\"line\">   return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&quot;__main__&quot;:</span><br><span class=\"line\">   @retry(5)</span><br><span class=\"line\">   def test(uid,name):</span><br><span class=\"line\">      print(&quot;do something&quot;,uid,name)</span><br><span class=\"line\">      raise Exception</span><br><span class=\"line\">   test(&apos;123&apos;,&apos;tome&apos;)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>回调函数callback调用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Callback:</span><br><span class=\"line\">    def run_callback(self,fn,*args,**kwargs):</span><br><span class=\"line\">        print &apos;call function&apos;,fn.__name__</span><br><span class=\"line\">        print args,kwargs</span><br><span class=\"line\">        #fn(args)相当于传入一个元组参数</span><br><span class=\"line\">        #fn(*args)会把元组拆开，给对应的参数赋值</span><br><span class=\"line\">        fn(*args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def hi(self,name,age):</span><br><span class=\"line\">        print &apos;hello,&apos;,name,age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def start(cls):</span><br><span class=\"line\">        cls().run_callback(cls().hi,&apos;tome&apos;,18)</span><br><span class=\"line\"></span><br><span class=\"line\">Callback.start()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python安装\"><a href=\"#python安装\" class=\"headerlink\" title=\"python安装\"></a>python安装</h1><p><code>virtualenv -p /usr/bin/python2.7 venv</code></p>\n<h1 id=\"python常用函数\"><a href=\"#python常用函数\" class=\"headerlink\" title=\"python常用函数\"></a>python常用函数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># str</span><br><span class=\"line\">s1 = str()</span><br><span class=\"line\"># in python `&apos;&apos;` or `&quot;&quot;` is the same</span><br><span class=\"line\">s2 = &quot;shaunwei&quot; # &apos;shaunwei&apos;</span><br><span class=\"line\">s2len = len(s2)</span><br><span class=\"line\"># last 3 chars</span><br><span class=\"line\">s2[-3:] # wei</span><br><span class=\"line\">s2[5:8] # wei</span><br><span class=\"line\">s3 = s2[:5] # shaun</span><br><span class=\"line\">s3 += &apos;wei&apos; # return &apos;shaunwei&apos;</span><br><span class=\"line\"># list in python is same as ArrayList in java</span><br><span class=\"line\">s2list = list(s3)</span><br><span class=\"line\"># string at index 4</span><br><span class=\"line\">s2[4] # &apos;n&apos;</span><br><span class=\"line\"># find index at first</span><br><span class=\"line\">s2.index(&apos;w&apos;) # return 5, if not found, throw ValueError</span><br><span class=\"line\">s2.find(&apos;w&apos;) # return 5, if not found, return -1</span><br><span class=\"line\"></span><br><span class=\"line\"># 链表</span><br><span class=\"line\">class ListNode:</span><br><span class=\"line\">    def __init__(self, val):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.next = None</span><br><span class=\"line\">class DListNode:</span><br><span class=\"line\">    def __init__(self, val):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.prev = self.next = None</span><br><span class=\"line\">    def reverse(self, head):</span><br><span class=\"line\">        curt = None</span><br><span class=\"line\">        while head:</span><br><span class=\"line\">            curt = head</span><br><span class=\"line\">            head = curt.next</span><br><span class=\"line\">            curt.next = curt.prev</span><br><span class=\"line\">            curt.prev = head</span><br><span class=\"line\">        return curt</span><br><span class=\"line\"></span><br><span class=\"line\">class TreeNode:</span><br><span class=\"line\">    def __init__(self, val):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.left, self.right = None, None</span><br><span class=\"line\"></span><br><span class=\"line\">queue = [] # same as list()</span><br><span class=\"line\">size = len(queue)</span><br><span class=\"line\">queue.append(1)</span><br><span class=\"line\">queue.append(2)</span><br><span class=\"line\">queue.pop(0) # return 1</span><br><span class=\"line\">queue[0] # return 2 examine the first element</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s = set()</span><br><span class=\"line\">s1 = &#123;1, 2, 3&#125;</span><br><span class=\"line\">s.add(&apos;shaunwei&apos;)</span><br><span class=\"line\">&apos;shaun&apos; in s # return true</span><br><span class=\"line\">s.remove(&apos;shaunwei&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># map 在 python 中是一个keyword</span><br><span class=\"line\">hash_map = &#123;&#125; # or dict()</span><br><span class=\"line\">hash_map[&apos;shaun&apos;] = 98</span><br><span class=\"line\">hash_map[&apos;wei&apos;] = 99</span><br><span class=\"line\">exist = &apos;wei&apos; in hash_map # check existence</span><br><span class=\"line\">point = hash_map[&apos;shaun&apos;] # get value by key</span><br><span class=\"line\">point = hash_map.pop(&apos;shaun&apos;) # remove by key, return value</span><br><span class=\"line\">keys = hash_map.keys() # return key list</span><br><span class=\"line\"># iterate dictionary(map)</span><br><span class=\"line\">for key, value in hash_map.items():</span><br><span class=\"line\">    # do something with k, v</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">class Person(object):</span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name=name</span><br><span class=\"line\">        self.age=age</span><br><span class=\"line\"></span><br><span class=\"line\">    def hello(self):</span><br><span class=\"line\">        print &apos;hello:&apos;+self.name+&quot;:&quot;+str(self.age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Tom(Person):</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        super(Tom,self).__init__(name,18)</span><br><span class=\"line\">    def hello2(self):#只要子类有重复的名字就会覆盖</span><br><span class=\"line\">        pass</span><br><span class=\"line\">        #print &apos;child say hello&apos;</span><br><span class=\"line\">t=Tom(&apos;tom&apos;)</span><br><span class=\"line\">t.hello()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Python一些注意点\"><a href=\"#Python一些注意点\" class=\"headerlink\" title=\"Python一些注意点\"></a>Python一些注意点</h3><ol>\n<li>Python有七个序列类型： 字符串、 Unicode字符串、 列表、 元组、 字节数组、 缓冲区和xrange对象。序列类型 —  str、unicode、list、 tuple、 bytearray、buffer、xrange</li>\n<li>if and执行逻辑</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def is_a():</span><br><span class=\"line\">    print &apos;a&apos;</span><br><span class=\"line\">    return False</span><br><span class=\"line\">def is_b():</span><br><span class=\"line\">    print &apos;b&apos;</span><br><span class=\"line\">    return False</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&apos;__main__&apos;:</span><br><span class=\"line\">    #第一个条件如果为False,and后面的就直接不执行了</span><br><span class=\"line\">    if is_a() and is_b():</span><br><span class=\"line\">        print &apos;if中有先后顺序的&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"遇到的一些问题\"><a href=\"#遇到的一些问题\" class=\"headerlink\" title=\"遇到的一些问题\"></a>遇到的一些问题</h3><ol>\n<li>tornado框架：</li>\n</ol>\n<p>1）异步async+await配合，2）效果和yield差不多，3）也可以使用callback</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tornado import gen</span><br><span class=\"line\"></span><br><span class=\"line\">@gen.coroutine</span><br><span class=\"line\">def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = yield http_client.fetch(url)</span><br><span class=\"line\">    # In Python versions prior to 3.3, returning a value from</span><br><span class=\"line\">    # a generator is not allowed and you must use</span><br><span class=\"line\">    #   raise gen.Return(response.body)</span><br><span class=\"line\">    # instead.</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async def fetch_coroutine(url):</span><br><span class=\"line\">    http_client = AsyncHTTPClient()</span><br><span class=\"line\">    response = await http_client.fetch(url)</span><br><span class=\"line\">    return response.body</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>python语法</li>\n</ol>\n<ul>\n<li>何时执行装饰器：导入模块时</li>\n</ul>\n<p>用处：将函数添加到中央注册处，url-》相应函数</p>\n<ul>\n<li>装饰器将函数替换成新的函数(添加一个记时功能给函数)：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@clock</span><br><span class=\"line\">def haha():</span><br><span class=\"line\">\txxxxx</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">def clock(func):</span><br><span class=\"line\">\tdef clocked(*arg):</span><br><span class=\"line\">\t\tfunc(*arg)</span><br><span class=\"line\">\treturn clocked #返回新的函数了，替换掉原来的haha()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>== a.__eq–(b)和比较值Java中：equals，is比较对象标识（地址）Java中：==</li>\n<li>Copy.deepcopy(obj)会记住循环引用，优雅处理</li>\n<li>@classmethod 最常见的用法是构建备选的构造方法</li>\n</ul>\n<ol start=\"3\">\n<li>重试函数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#encoding=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">#有参数，必须再包一层（最外层的变量大家都可以访问）</span><br><span class=\"line\">def retry(times=1,exceptions=None):</span><br><span class=\"line\">   exceptions = exceptions if exceptions is not None else Exception</span><br><span class=\"line\"></span><br><span class=\"line\">   # 包一层,传入对应的函数</span><br><span class=\"line\">   def wrapper(func):</span><br><span class=\"line\">      #替换函数</span><br><span class=\"line\">      def wrapper(*args,**kwargs):</span><br><span class=\"line\">         last_exception =None</span><br><span class=\"line\">         for _ in range(times):</span><br><span class=\"line\">            try:</span><br><span class=\"line\">               return func(*args, **kwargs)</span><br><span class=\"line\">            except exceptions as e:</span><br><span class=\"line\">               last_exception = e</span><br><span class=\"line\">         raise last_exception</span><br><span class=\"line\">      return wrapper</span><br><span class=\"line\">   return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&quot;__main__&quot;:</span><br><span class=\"line\">   @retry(5)</span><br><span class=\"line\">   def test(uid,name):</span><br><span class=\"line\">      print(&quot;do something&quot;,uid,name)</span><br><span class=\"line\">      raise Exception</span><br><span class=\"line\">   test(&apos;123&apos;,&apos;tome&apos;)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>回调函数callback调用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Callback:</span><br><span class=\"line\">    def run_callback(self,fn,*args,**kwargs):</span><br><span class=\"line\">        print &apos;call function&apos;,fn.__name__</span><br><span class=\"line\">        print args,kwargs</span><br><span class=\"line\">        #fn(args)相当于传入一个元组参数</span><br><span class=\"line\">        #fn(*args)会把元组拆开，给对应的参数赋值</span><br><span class=\"line\">        fn(*args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def hi(self,name,age):</span><br><span class=\"line\">        print &apos;hello,&apos;,name,age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def start(cls):</span><br><span class=\"line\">        cls().run_callback(cls().hi,&apos;tome&apos;,18)</span><br><span class=\"line\"></span><br><span class=\"line\">Callback.start()</span><br></pre></td></tr></table></figure>\n"},{"title":"git cheatcheet","date":"2018-09-19T08:12:32.000Z","_content":"\n# 简图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fwy5q46d3lj215k10nabc.jpg)\n\n\n# 常用命令\n~~~\ngit add . //ga\ngit status //gs\ngit diff //gd\ngit commit -m \"desc\" //gcm\ngit push //gp\ngit checkout -b feature/comment //gcb\ngit pull origin master //gpom\n~~~\n\n## 偶尔用到\n~~~\ngit push --set-upstream origin dev_2 \ngit stash\ngit log\ngit cherry-pick xxx\ngit init\ngit clone\n~~~\n\n### 很少用到\n~~~\ngit config --global user.name \"muName\"\ngit config --global user.email \"myEmail\"\n~~~\n\n### GET NEW THING\n\n#### 比对 diff\n\n```\n# 显示暂存区和工作区的代码差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\ngit diff HEAD^ 比对当前内容和倒数第二次提交。\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n```\n\n```\n# 从暂存区移除一个文件\ngit rm file\n# 从暂存区移除所有文件\ngit reset .\n```\n\n#### rebase 变基【为了提交好看】\n\n#### gitnore\n```\nfilename  //递归 忽略当前目录下所有包含此文件名的文件\ndir/      //递归 忽略目录和子目录 \n!filename //递归 不忽略文件名\n\n```\n\n\n### 存储\n![](https://ws1.sinaimg.cn/large/e5320b2aly1g210qd00udj20l20h6do5.jpg)\n\n- commit\n- tree\n- blob\n\n差异存储，后面的可以引用前面的blob和tree","source":"_posts/tool/git-cheatcheet.md","raw":"---\ntitle: git cheatcheet\ntags:\n  - git\ncategories:\n  - tool\ndate: 2018-09-19 16:12:32\n---\n\n# 简图\n![](https://ws1.sinaimg.cn/large/e5320b2aly1fwy5q46d3lj215k10nabc.jpg)\n\n\n# 常用命令\n~~~\ngit add . //ga\ngit status //gs\ngit diff //gd\ngit commit -m \"desc\" //gcm\ngit push //gp\ngit checkout -b feature/comment //gcb\ngit pull origin master //gpom\n~~~\n\n## 偶尔用到\n~~~\ngit push --set-upstream origin dev_2 \ngit stash\ngit log\ngit cherry-pick xxx\ngit init\ngit clone\n~~~\n\n### 很少用到\n~~~\ngit config --global user.name \"muName\"\ngit config --global user.email \"myEmail\"\n~~~\n\n### GET NEW THING\n\n#### 比对 diff\n\n```\n# 显示暂存区和工作区的代码差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\ngit diff HEAD^ 比对当前内容和倒数第二次提交。\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n```\n\n```\n# 从暂存区移除一个文件\ngit rm file\n# 从暂存区移除所有文件\ngit reset .\n```\n\n#### rebase 变基【为了提交好看】\n\n#### gitnore\n```\nfilename  //递归 忽略当前目录下所有包含此文件名的文件\ndir/      //递归 忽略目录和子目录 \n!filename //递归 不忽略文件名\n\n```\n\n\n### 存储\n![](https://ws1.sinaimg.cn/large/e5320b2aly1g210qd00udj20l20h6do5.jpg)\n\n- commit\n- tree\n- blob\n\n差异存储，后面的可以引用前面的blob和tree","slug":"tool/git-cheatcheet","published":1,"updated":"2019-04-15T02:18:12.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dp003iwl38y8v7umb4","content":"<h1 id=\"简图\"><a href=\"#简图\" class=\"headerlink\" title=\"简图\"></a>简图</h1><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fwy5q46d3lj215k10nabc.jpg\" alt=\"\"></p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . //ga</span><br><span class=\"line\">git status //gs</span><br><span class=\"line\">git diff //gd</span><br><span class=\"line\">git commit -m &quot;desc&quot; //gcm</span><br><span class=\"line\">git push //gp</span><br><span class=\"line\">git checkout -b feature/comment //gcb</span><br><span class=\"line\">git pull origin master //gpom</span><br></pre></td></tr></table></figure>\n<h2 id=\"偶尔用到\"><a href=\"#偶尔用到\" class=\"headerlink\" title=\"偶尔用到\"></a>偶尔用到</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin dev_2 </span><br><span class=\"line\">git stash</span><br><span class=\"line\">git log</span><br><span class=\"line\">git cherry-pick xxx</span><br><span class=\"line\">git init</span><br><span class=\"line\">git clone</span><br></pre></td></tr></table></figure>\n<h3 id=\"很少用到\"><a href=\"#很少用到\" class=\"headerlink\" title=\"很少用到\"></a>很少用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;muName&quot;</span><br><span class=\"line\">git config --global user.email &quot;myEmail&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"GET-NEW-THING\"><a href=\"#GET-NEW-THING\" class=\"headerlink\" title=\"GET NEW THING\"></a>GET NEW THING</h3><h4 id=\"比对-diff\"><a href=\"#比对-diff\" class=\"headerlink\" title=\"比对 diff\"></a>比对 diff</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示暂存区和工作区的代码差异</span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示暂存区和上一个commit的差异</span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示工作区与当前分支最新commit之间的差异</span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\">git diff HEAD^ 比对当前内容和倒数第二次提交。</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示两次提交之间的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从暂存区移除一个文件</span><br><span class=\"line\">git rm file</span><br><span class=\"line\"># 从暂存区移除所有文件</span><br><span class=\"line\">git reset .</span><br></pre></td></tr></table></figure>\n<h4 id=\"rebase-变基【为了提交好看】\"><a href=\"#rebase-变基【为了提交好看】\" class=\"headerlink\" title=\"rebase 变基【为了提交好看】\"></a>rebase 变基【为了提交好看】</h4><h4 id=\"gitnore\"><a href=\"#gitnore\" class=\"headerlink\" title=\"gitnore\"></a>gitnore</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename  //递归 忽略当前目录下所有包含此文件名的文件</span><br><span class=\"line\">dir/      //递归 忽略目录和子目录 </span><br><span class=\"line\">!filename //递归 不忽略文件名</span><br></pre></td></tr></table></figure>\n<h3 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1g210qd00udj20l20h6do5.jpg\" alt=\"\"></p>\n<ul>\n<li>commit</li>\n<li>tree</li>\n<li>blob</li>\n</ul>\n<p>差异存储，后面的可以引用前面的blob和tree</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简图\"><a href=\"#简图\" class=\"headerlink\" title=\"简图\"></a>简图</h1><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fwy5q46d3lj215k10nabc.jpg\" alt=\"\"></p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . //ga</span><br><span class=\"line\">git status //gs</span><br><span class=\"line\">git diff //gd</span><br><span class=\"line\">git commit -m &quot;desc&quot; //gcm</span><br><span class=\"line\">git push //gp</span><br><span class=\"line\">git checkout -b feature/comment //gcb</span><br><span class=\"line\">git pull origin master //gpom</span><br></pre></td></tr></table></figure>\n<h2 id=\"偶尔用到\"><a href=\"#偶尔用到\" class=\"headerlink\" title=\"偶尔用到\"></a>偶尔用到</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin dev_2 </span><br><span class=\"line\">git stash</span><br><span class=\"line\">git log</span><br><span class=\"line\">git cherry-pick xxx</span><br><span class=\"line\">git init</span><br><span class=\"line\">git clone</span><br></pre></td></tr></table></figure>\n<h3 id=\"很少用到\"><a href=\"#很少用到\" class=\"headerlink\" title=\"很少用到\"></a>很少用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;muName&quot;</span><br><span class=\"line\">git config --global user.email &quot;myEmail&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"GET-NEW-THING\"><a href=\"#GET-NEW-THING\" class=\"headerlink\" title=\"GET NEW THING\"></a>GET NEW THING</h3><h4 id=\"比对-diff\"><a href=\"#比对-diff\" class=\"headerlink\" title=\"比对 diff\"></a>比对 diff</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示暂存区和工作区的代码差异</span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示暂存区和上一个commit的差异</span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示工作区与当前分支最新commit之间的差异</span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\">git diff HEAD^ 比对当前内容和倒数第二次提交。</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示两次提交之间的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从暂存区移除一个文件</span><br><span class=\"line\">git rm file</span><br><span class=\"line\"># 从暂存区移除所有文件</span><br><span class=\"line\">git reset .</span><br></pre></td></tr></table></figure>\n<h4 id=\"rebase-变基【为了提交好看】\"><a href=\"#rebase-变基【为了提交好看】\" class=\"headerlink\" title=\"rebase 变基【为了提交好看】\"></a>rebase 变基【为了提交好看】</h4><h4 id=\"gitnore\"><a href=\"#gitnore\" class=\"headerlink\" title=\"gitnore\"></a>gitnore</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename  //递归 忽略当前目录下所有包含此文件名的文件</span><br><span class=\"line\">dir/      //递归 忽略目录和子目录 </span><br><span class=\"line\">!filename //递归 不忽略文件名</span><br></pre></td></tr></table></figure>\n<h3 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h3><p><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1g210qd00udj20l20h6do5.jpg\" alt=\"\"></p>\n<ul>\n<li>commit</li>\n<li>tree</li>\n<li>blob</li>\n</ul>\n<p>差异存储，后面的可以引用前面的blob和tree</p>\n"},{"title":"一条查询语句的执行流程","date":"2018-11-20T12:06:15.000Z","_content":"# 一条查询语句的执行流程\n  \n \n我们经常说，看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL 的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 ID 字段，在执行下面这个查询语句时：\n```sql\nmysql> select * from T where ID=10；\n```\n\n我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。\n\n所以今天我想和你一起把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。这样当我们碰到 MySQL 的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。\n\n下面我给出的是 MySQL 的基本架构示意图，从中你可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。\n![MySQL 的逻辑架构图](https://ws1.sinaimg.cn/large/e5320b2aly1fxesclk4l6j21hc140wv4.jpg)\n\n大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。\nServer 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。\n\n而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。\n\n也就是说，你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功能也不同，在后面的文章中，我们会讨论到引擎的选择。\n\n从图中不难看出，不同的存储引擎共用一个Server 层，也就是从连接器到执行器的部分。你可以先对每个组件的名字有个印象，接下来我会结合开头提到的那条 SQL 语句，带你走一遍整个执行流程，依次看下每个组件的作用。\n\n###  1. 连接器\n第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：\n\n`mysql -h$ip -P$port -u$user -p`\n\n\n输完命令之后，你就需要在交互对话里面输入密码。虽然密码也可以直接跟在 -p 后面写在命令行中，但这样可能会导致你的密码泄露。如果你连的是生产服务器，强烈建议你不要这么做。\n\n连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。\n\n* 如果用户名或密码不对，你就会收到一个\"Access denied for user\"的错误，然后客户端程序结束执行。\n* 如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。\n\n\n这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。\n\n连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 show processlist 命令中看到它。文本中这个图是 show processlist 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。\n\n客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。\n\n如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。\n\n数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。\n\n建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。\n\n但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。\n\n怎么解决这个问题呢？你可以考虑以下两种方案。\n1. 定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。\n2. 如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。\n\n\n### 2. 查询缓存\n连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。\nMySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。\n如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。\n\n但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。\n\n查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。\n\n好在 MySQL 也提供了这种“按需使用”的方式。你可以将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：\n\n```\nmysql> select SQL_CACHE * from T where ID=10；\n```\n\n需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。\n### 3. 分析器\n如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。\n分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。\n\nMySQL 从你输入的\"select\"这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。\n\n做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。\n\n如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。\n\n```\nmysql> elect * from t where ID=1;\n\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1\n```\n\n一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。\n\n### 4. 优化器\n经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。\n优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：\n\n```\nmysql> select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;\n```\n\n* 既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。\n* 也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。\n这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。\n优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，没关系，我会在后面的文章中单独展开说明优化器的内容。\n\n### 5. 执行器\nMySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。\n开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示。\n\n```\nmysql> select * from T where ID=10;\n \n\nERROR 1142 (42000): SELECT command denied to user 'b'@'localhost' for table 'T'\n```\n\n如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。\n比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：\n1. 调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；\n2. 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。\n3. 执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。\n\n\n至此，这个语句就执行完成了。\n\n对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。\n\n你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。\n\n在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。我们后面会专门有一篇文章来讲存储引擎的内部机制，里面会有详细的说明。\n\n## 小结\n今天我给你介绍了 MySQL 的逻辑架构，希望你对一个 SQL 语句完整执行流程的各个阶段有了一个初步的印象。由于篇幅的限制，我只是用一个查询的例子将各个环节过了一遍。如果你还对每个环节的展开细节存有疑问，也不用担心，后续在实战章节中我还会再提到它们。\n\n我给你留一个问题吧，如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？\n\n> 答案：分析器","source":"_posts/mysql/深入mysql一条查询SQL语句的执行流程.md","raw":"---\ntitle: 一条查询语句的执行流程\ntags:\n  - mysql\ncategories:\n  - mysql\ndate: 2018-11-20 20:06:15\n---\n# 一条查询语句的执行流程\n  \n \n我们经常说，看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL 的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 ID 字段，在执行下面这个查询语句时：\n```sql\nmysql> select * from T where ID=10；\n```\n\n我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。\n\n所以今天我想和你一起把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。这样当我们碰到 MySQL 的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。\n\n下面我给出的是 MySQL 的基本架构示意图，从中你可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。\n![MySQL 的逻辑架构图](https://ws1.sinaimg.cn/large/e5320b2aly1fxesclk4l6j21hc140wv4.jpg)\n\n大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。\nServer 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。\n\n而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。\n\n也就是说，你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功能也不同，在后面的文章中，我们会讨论到引擎的选择。\n\n从图中不难看出，不同的存储引擎共用一个Server 层，也就是从连接器到执行器的部分。你可以先对每个组件的名字有个印象，接下来我会结合开头提到的那条 SQL 语句，带你走一遍整个执行流程，依次看下每个组件的作用。\n\n###  1. 连接器\n第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：\n\n`mysql -h$ip -P$port -u$user -p`\n\n\n输完命令之后，你就需要在交互对话里面输入密码。虽然密码也可以直接跟在 -p 后面写在命令行中，但这样可能会导致你的密码泄露。如果你连的是生产服务器，强烈建议你不要这么做。\n\n连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。\n\n* 如果用户名或密码不对，你就会收到一个\"Access denied for user\"的错误，然后客户端程序结束执行。\n* 如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。\n\n\n这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。\n\n连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 show processlist 命令中看到它。文本中这个图是 show processlist 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。\n\n客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。\n\n如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。\n\n数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。\n\n建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。\n\n但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。\n\n怎么解决这个问题呢？你可以考虑以下两种方案。\n1. 定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。\n2. 如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。\n\n\n### 2. 查询缓存\n连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。\nMySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。\n如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。\n\n但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。\n\n查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。\n\n好在 MySQL 也提供了这种“按需使用”的方式。你可以将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：\n\n```\nmysql> select SQL_CACHE * from T where ID=10；\n```\n\n需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。\n### 3. 分析器\n如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。\n分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。\n\nMySQL 从你输入的\"select\"这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。\n\n做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。\n\n如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。\n\n```\nmysql> elect * from t where ID=1;\n\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1\n```\n\n一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。\n\n### 4. 优化器\n经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。\n优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：\n\n```\nmysql> select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;\n```\n\n* 既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。\n* 也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。\n这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。\n优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，没关系，我会在后面的文章中单独展开说明优化器的内容。\n\n### 5. 执行器\nMySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。\n开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示。\n\n```\nmysql> select * from T where ID=10;\n \n\nERROR 1142 (42000): SELECT command denied to user 'b'@'localhost' for table 'T'\n```\n\n如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。\n比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：\n1. 调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；\n2. 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。\n3. 执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。\n\n\n至此，这个语句就执行完成了。\n\n对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。\n\n你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。\n\n在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。我们后面会专门有一篇文章来讲存储引擎的内部机制，里面会有详细的说明。\n\n## 小结\n今天我给你介绍了 MySQL 的逻辑架构，希望你对一个 SQL 语句完整执行流程的各个阶段有了一个初步的印象。由于篇幅的限制，我只是用一个查询的例子将各个环节过了一遍。如果你还对每个环节的展开细节存有疑问，也不用担心，后续在实战章节中我还会再提到它们。\n\n我给你留一个问题吧，如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？\n\n> 答案：分析器","slug":"mysql/深入mysql一条查询SQL语句的执行流程","published":1,"updated":"2018-11-20T12:25:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dr003lwl38jokdh2t9","content":"<h1 id=\"一条查询语句的执行流程\"><a href=\"#一条查询语句的执行流程\" class=\"headerlink\" title=\"一条查询语句的执行流程\"></a>一条查询语句的执行流程</h1><p>我们经常说，看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL 的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 ID 字段，在执行下面这个查询语句时：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10；</span><br></pre></td></tr></table></figure></p>\n<p>我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。</p>\n<p>所以今天我想和你一起把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。这样当我们碰到 MySQL 的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。</p>\n<p>下面我给出的是 MySQL 的基本架构示意图，从中你可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fxesclk4l6j21hc140wv4.jpg\" alt=\"MySQL 的逻辑架构图\"></p>\n<p>大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。<br>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p>\n<p>而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。</p>\n<p>也就是说，你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功能也不同，在后面的文章中，我们会讨论到引擎的选择。</p>\n<p>从图中不难看出，不同的存储引擎共用一个Server 层，也就是从连接器到执行器的部分。你可以先对每个组件的名字有个印象，接下来我会结合开头提到的那条 SQL 语句，带你走一遍整个执行流程，依次看下每个组件的作用。</p>\n<h3 id=\"1-连接器\"><a href=\"#1-连接器\" class=\"headerlink\" title=\"1. 连接器\"></a>1. 连接器</h3><p>第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：</p>\n<p><code>mysql -h$ip -P$port -u$user -p</code></p>\n<p>输完命令之后，你就需要在交互对话里面输入密码。虽然密码也可以直接跟在 -p 后面写在命令行中，但这样可能会导致你的密码泄露。如果你连的是生产服务器，强烈建议你不要这么做。</p>\n<p>连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。</p>\n<ul>\n<li>如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端程序结束执行。</li>\n<li>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</li>\n</ul>\n<p>这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。</p>\n<p>连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 show processlist 命令中看到它。文本中这个图是 show processlist 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。</p>\n<p>客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</p>\n<p>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。</p>\n<p>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p>\n<p>建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。</p>\n<p>但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。</p>\n<p>怎么解决这个问题呢？你可以考虑以下两种方案。</p>\n<ol>\n<li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li>\n<li>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li>\n</ol>\n<h3 id=\"2-查询缓存\"><a href=\"#2-查询缓存\" class=\"headerlink\" title=\"2. 查询缓存\"></a>2. 查询缓存</h3><p>连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。<br>MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。<br>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。</p>\n<p>但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。</p>\n<p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。</p>\n<p>好在 MySQL 也提供了这种“按需使用”的方式。你可以将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select SQL_CACHE * from T where ID=10；</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。</p>\n<h3 id=\"3-分析器\"><a href=\"#3-分析器\" class=\"headerlink\" title=\"3. 分析器\"></a>3. 分析器</h3><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。<br>分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。</p>\n<p>MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p>\n<p>做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。</p>\n<p>如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; elect * from t where ID=1;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;elect * from t where ID=1&apos; at line 1</span><br></pre></td></tr></table></figure>\n<p>一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。</p>\n<h3 id=\"4-优化器\"><a href=\"#4-优化器\" class=\"headerlink\" title=\"4. 优化器\"></a>4. 优化器</h3><p>经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。<br>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。</li>\n<li>也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。<br>这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。<br>优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，没关系，我会在后面的文章中单独展开说明优化器的内容。</li>\n</ul>\n<h3 id=\"5-执行器\"><a href=\"#5-执行器\" class=\"headerlink\" title=\"5. 执行器\"></a>5. 执行器</h3><p>MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。<br>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10;</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1142 (42000): SELECT command denied to user &apos;b&apos;@&apos;localhost&apos; for table &apos;T&apos;</span><br></pre></td></tr></table></figure>\n<p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。<br>比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p>\n<ol>\n<li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li>\n<li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li>\n<li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li>\n</ol>\n<p>至此，这个语句就执行完成了。</p>\n<p>对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。</p>\n<p>你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。</p>\n<p>在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。我们后面会专门有一篇文章来讲存储引擎的内部机制，里面会有详细的说明。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>今天我给你介绍了 MySQL 的逻辑架构，希望你对一个 SQL 语句完整执行流程的各个阶段有了一个初步的印象。由于篇幅的限制，我只是用一个查询的例子将各个环节过了一遍。如果你还对每个环节的展开细节存有疑问，也不用担心，后续在实战章节中我还会再提到它们。</p>\n<p>我给你留一个问题吧，如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？</p>\n<blockquote>\n<p>答案：分析器</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一条查询语句的执行流程\"><a href=\"#一条查询语句的执行流程\" class=\"headerlink\" title=\"一条查询语句的执行流程\"></a>一条查询语句的执行流程</h1><p>我们经常说，看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL 的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 ID 字段，在执行下面这个查询语句时：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10；</span><br></pre></td></tr></table></figure></p>\n<p>我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。</p>\n<p>所以今天我想和你一起把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。这样当我们碰到 MySQL 的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。</p>\n<p>下面我给出的是 MySQL 的基本架构示意图，从中你可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。<br><img src=\"https://ws1.sinaimg.cn/large/e5320b2aly1fxesclk4l6j21hc140wv4.jpg\" alt=\"MySQL 的逻辑架构图\"></p>\n<p>大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。<br>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p>\n<p>而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。</p>\n<p>也就是说，你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功能也不同，在后面的文章中，我们会讨论到引擎的选择。</p>\n<p>从图中不难看出，不同的存储引擎共用一个Server 层，也就是从连接器到执行器的部分。你可以先对每个组件的名字有个印象，接下来我会结合开头提到的那条 SQL 语句，带你走一遍整个执行流程，依次看下每个组件的作用。</p>\n<h3 id=\"1-连接器\"><a href=\"#1-连接器\" class=\"headerlink\" title=\"1. 连接器\"></a>1. 连接器</h3><p>第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：</p>\n<p><code>mysql -h$ip -P$port -u$user -p</code></p>\n<p>输完命令之后，你就需要在交互对话里面输入密码。虽然密码也可以直接跟在 -p 后面写在命令行中，但这样可能会导致你的密码泄露。如果你连的是生产服务器，强烈建议你不要这么做。</p>\n<p>连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。</p>\n<ul>\n<li>如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端程序结束执行。</li>\n<li>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</li>\n</ul>\n<p>这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。</p>\n<p>连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 show processlist 命令中看到它。文本中这个图是 show processlist 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。</p>\n<p>客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</p>\n<p>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。</p>\n<p>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p>\n<p>建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。</p>\n<p>但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。</p>\n<p>怎么解决这个问题呢？你可以考虑以下两种方案。</p>\n<ol>\n<li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li>\n<li>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li>\n</ol>\n<h3 id=\"2-查询缓存\"><a href=\"#2-查询缓存\" class=\"headerlink\" title=\"2. 查询缓存\"></a>2. 查询缓存</h3><p>连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。<br>MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。<br>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。</p>\n<p>但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。</p>\n<p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。</p>\n<p>好在 MySQL 也提供了这种“按需使用”的方式。你可以将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select SQL_CACHE * from T where ID=10；</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。</p>\n<h3 id=\"3-分析器\"><a href=\"#3-分析器\" class=\"headerlink\" title=\"3. 分析器\"></a>3. 分析器</h3><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。<br>分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。</p>\n<p>MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p>\n<p>做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。</p>\n<p>如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; elect * from t where ID=1;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;elect * from t where ID=1&apos; at line 1</span><br></pre></td></tr></table></figure>\n<p>一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。</p>\n<h3 id=\"4-优化器\"><a href=\"#4-优化器\" class=\"headerlink\" title=\"4. 优化器\"></a>4. 优化器</h3><p>经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。<br>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。</li>\n<li>也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。<br>这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。<br>优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，没关系，我会在后面的文章中单独展开说明优化器的内容。</li>\n</ul>\n<h3 id=\"5-执行器\"><a href=\"#5-执行器\" class=\"headerlink\" title=\"5. 执行器\"></a>5. 执行器</h3><p>MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。<br>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from T where ID=10;</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1142 (42000): SELECT command denied to user &apos;b&apos;@&apos;localhost&apos; for table &apos;T&apos;</span><br></pre></td></tr></table></figure>\n<p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。<br>比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p>\n<ol>\n<li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li>\n<li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li>\n<li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li>\n</ol>\n<p>至此，这个语句就执行完成了。</p>\n<p>对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。</p>\n<p>你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。</p>\n<p>在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。我们后面会专门有一篇文章来讲存储引擎的内部机制，里面会有详细的说明。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>今天我给你介绍了 MySQL 的逻辑架构，希望你对一个 SQL 语句完整执行流程的各个阶段有了一个初步的印象。由于篇幅的限制，我只是用一个查询的例子将各个环节过了一遍。如果你还对每个环节的展开细节存有疑问，也不用担心，后续在实战章节中我还会再提到它们。</p>\n<p>我给你留一个问题吧，如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？</p>\n<blockquote>\n<p>答案：分析器</p>\n</blockquote>\n"},{"title":"私信系统设计","date":"2019-02-21T03:15:41.000Z","_content":"\n# 私信系统设计\n## 整体设计\n分两种类型的表\n- 联系人表\n- 私信消息表\n\n通过长连接或者push消息推送实现实时聊天\n\n\n### 表结构设计[分库分表]\n```sql\nDROP TABLE IF EXISTS `contact_%v`;\nCREATE TABLE `contact_%v` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增id,主键',\n  `owner_id` bigint(20) unsigned NOT NULL COMMENT '私信发送者',\n  `peer_id` bigint(20) unsigned NOT NULL COMMENT '私信接收者',\n  `peer_type` tinyint(4) NOT NULL COMMENT '联系人类型：0普通/100系统/101群',\n  `peer_ack` tinyint(4) NOT NULL COMMENT 'peer是否给owner发过消息：0未发过/1发过',\n  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '联系人状态：0正常/1代表被删除; 默认值为0',\n  `last_msg_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '最新一次发送的私信id,默认值为0',\n  `last_del_msg_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '最后一次删除联系人时的私信id,默认值为0',\n  `version_id` bigint(20) unsigned NOT NULL COMMENT '版本号',\n  `sort_key` bigint(20) unsigned NOT NULL COMMENT '排序字段',\n  `labels` varchar(512) DEFAULT NULL COMMENT '标签,json串',\n  `created_at` timestamp NULL DEFAULT NULL,\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `idx_owner_id_peer_id` (`owner_id`,`peer_id`),\n  KEY `idx_owner_id_version_id` (`owner_id`,`version_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nDROP TABLE IF EXISTS `message_%v`;\nCREATE TABLE `message_%v` (\n  `msg_id` bigint(20) unsigned NOT NULL COMMENT '私信id',\n  `session_id` varchar(128) NOT NULL COMMENT '会话id,生成规则：uid小的在前大的在后用冒号连接；群消息和系统消息时为0:群号',\n  `send_id` bigint(20) unsigned NOT NULL COMMENT '私信发送者id',\n  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '私信状态：0正常/1代表被审核删除/2代表撤销; 默认值为0',\n  `has_read` tinyint(4) NOT NULL DEFAULT '0' COMMENT '私信接收者消息已读/未读状态：0未读/1已读; 默认值为0',\n  `seq_id` bigint(20) unsigned NOT NULL COMMENT '客户端本地私信序列id',\n  `version_id` bigint(20) unsigned NOT NULL COMMENT '版本号',\n  `sort_key` bigint(20) unsigned NOT NULL COMMENT '排序字段',\n  `msg_type` tinyint(4) NOT NULL COMMENT '私信类型',\n  `content` varchar(2048) NOT NULL COMMENT '私信内容',\n  `invisible_list` varchar(2048) DEFAULT NULL COMMENT '此msg对哪些用户不可见',\n  `created_at` timestamp NULL DEFAULT NULL,\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`msg_id`),\n  KEY `idx_session_id_msg_id` (`session_id`, `version_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n### 缓存设计\n\n\n\n### 详细设计\n1. 发送，写联系人表，写消息表\n2. 拉取联系人，拉取消息\n3. 删除私信【自己不可见】 撤销私信【全部不可见】\n4. 置顶会话 排序为设为最大\n5. 清空未读\n6.\b 发系统私信\n\n### \bQA？\n1. 系统消息怎么处理？\n\n","source":"_posts/system_design/私信系统设计.md","raw":"---\ntitle: 私信系统设计\ntags:\n  - 私信系统\ncategories:\n  - system design\ndate: 2019-02-21 11:15:41\n---\n\n# 私信系统设计\n## 整体设计\n分两种类型的表\n- 联系人表\n- 私信消息表\n\n通过长连接或者push消息推送实现实时聊天\n\n\n### 表结构设计[分库分表]\n```sql\nDROP TABLE IF EXISTS `contact_%v`;\nCREATE TABLE `contact_%v` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增id,主键',\n  `owner_id` bigint(20) unsigned NOT NULL COMMENT '私信发送者',\n  `peer_id` bigint(20) unsigned NOT NULL COMMENT '私信接收者',\n  `peer_type` tinyint(4) NOT NULL COMMENT '联系人类型：0普通/100系统/101群',\n  `peer_ack` tinyint(4) NOT NULL COMMENT 'peer是否给owner发过消息：0未发过/1发过',\n  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '联系人状态：0正常/1代表被删除; 默认值为0',\n  `last_msg_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '最新一次发送的私信id,默认值为0',\n  `last_del_msg_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '最后一次删除联系人时的私信id,默认值为0',\n  `version_id` bigint(20) unsigned NOT NULL COMMENT '版本号',\n  `sort_key` bigint(20) unsigned NOT NULL COMMENT '排序字段',\n  `labels` varchar(512) DEFAULT NULL COMMENT '标签,json串',\n  `created_at` timestamp NULL DEFAULT NULL,\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `idx_owner_id_peer_id` (`owner_id`,`peer_id`),\n  KEY `idx_owner_id_version_id` (`owner_id`,`version_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nDROP TABLE IF EXISTS `message_%v`;\nCREATE TABLE `message_%v` (\n  `msg_id` bigint(20) unsigned NOT NULL COMMENT '私信id',\n  `session_id` varchar(128) NOT NULL COMMENT '会话id,生成规则：uid小的在前大的在后用冒号连接；群消息和系统消息时为0:群号',\n  `send_id` bigint(20) unsigned NOT NULL COMMENT '私信发送者id',\n  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '私信状态：0正常/1代表被审核删除/2代表撤销; 默认值为0',\n  `has_read` tinyint(4) NOT NULL DEFAULT '0' COMMENT '私信接收者消息已读/未读状态：0未读/1已读; 默认值为0',\n  `seq_id` bigint(20) unsigned NOT NULL COMMENT '客户端本地私信序列id',\n  `version_id` bigint(20) unsigned NOT NULL COMMENT '版本号',\n  `sort_key` bigint(20) unsigned NOT NULL COMMENT '排序字段',\n  `msg_type` tinyint(4) NOT NULL COMMENT '私信类型',\n  `content` varchar(2048) NOT NULL COMMENT '私信内容',\n  `invisible_list` varchar(2048) DEFAULT NULL COMMENT '此msg对哪些用户不可见',\n  `created_at` timestamp NULL DEFAULT NULL,\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`msg_id`),\n  KEY `idx_session_id_msg_id` (`session_id`, `version_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n### 缓存设计\n\n\n\n### 详细设计\n1. 发送，写联系人表，写消息表\n2. 拉取联系人，拉取消息\n3. 删除私信【自己不可见】 撤销私信【全部不可见】\n4. 置顶会话 排序为设为最大\n5. 清空未读\n6.\b 发系统私信\n\n### \bQA？\n1. 系统消息怎么处理？\n\n","slug":"system_design/私信系统设计","published":1,"updated":"2019-02-21T10:10:16.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0ds003owl38izq088b5","content":"<h1 id=\"私信系统设计\"><a href=\"#私信系统设计\" class=\"headerlink\" title=\"私信系统设计\"></a>私信系统设计</h1><h2 id=\"整体设计\"><a href=\"#整体设计\" class=\"headerlink\" title=\"整体设计\"></a>整体设计</h2><p>分两种类型的表</p>\n<ul>\n<li>联系人表</li>\n<li>私信消息表</li>\n</ul>\n<p>通过长连接或者push消息推送实现实时聊天</p>\n<h3 id=\"表结构设计-分库分表\"><a href=\"#表结构设计-分库分表\" class=\"headerlink\" title=\"表结构设计[分库分表]\"></a>表结构设计[分库分表]</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`contact_%v`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`contact_%v`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'自增id,主键'</span>,</span><br><span class=\"line\">  <span class=\"string\">`owner_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信发送者'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信接收者'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_type`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'联系人类型：0普通/100系统/101群'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_ack`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'peer是否给owner发过消息：0未发过/1发过'</span>,</span><br><span class=\"line\">  <span class=\"string\">`status`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'联系人状态：0正常/1代表被删除; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`last_msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'最新一次发送的私信id,默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`last_del_msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'最后一次删除联系人时的私信id,默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'版本号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`sort_key`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'排序字段'</span>,</span><br><span class=\"line\">  <span class=\"string\">`labels`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">512</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'标签,json串'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`updated_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_owner_id_peer_id`</span> (<span class=\"string\">`owner_id`</span>,<span class=\"string\">`peer_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_owner_id_version_id`</span> (<span class=\"string\">`owner_id`</span>,<span class=\"string\">`version_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`message_%v`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`message_%v`</span> (</span><br><span class=\"line\">  <span class=\"string\">`msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`session_id`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'会话id,生成规则：uid小的在前大的在后用冒号连接；群消息和系统消息时为0:群号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`send_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信发送者id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`status`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信状态：0正常/1代表被审核删除/2代表撤销; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`has_read`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信接收者消息已读/未读状态：0未读/1已读; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`seq_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'客户端本地私信序列id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'版本号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`sort_key`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'排序字段'</span>,</span><br><span class=\"line\">  <span class=\"string\">`msg_type`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信类型'</span>,</span><br><span class=\"line\">  <span class=\"string\">`content`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">2048</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信内容'</span>,</span><br><span class=\"line\">  <span class=\"string\">`invisible_list`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">2048</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'此msg对哪些用户不可见'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`updated_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`msg_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_session_id_msg_id`</span> (<span class=\"string\">`session_id`</span>, <span class=\"string\">`version_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存设计\"><a href=\"#缓存设计\" class=\"headerlink\" title=\"缓存设计\"></a>缓存设计</h3><h3 id=\"详细设计\"><a href=\"#详细设计\" class=\"headerlink\" title=\"详细设计\"></a>详细设计</h3><ol>\n<li>发送，写联系人表，写消息表</li>\n<li>拉取联系人，拉取消息</li>\n<li>删除私信【自己不可见】 撤销私信【全部不可见】</li>\n<li>置顶会话 排序为设为最大</li>\n<li>清空未读<br>6.\b 发系统私信</li>\n</ol>\n<h3 id=\"QA？\"><a href=\"#QA？\" class=\"headerlink\" title=\"\bQA？\"></a>\bQA？</h3><ol>\n<li>系统消息怎么处理？</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"私信系统设计\"><a href=\"#私信系统设计\" class=\"headerlink\" title=\"私信系统设计\"></a>私信系统设计</h1><h2 id=\"整体设计\"><a href=\"#整体设计\" class=\"headerlink\" title=\"整体设计\"></a>整体设计</h2><p>分两种类型的表</p>\n<ul>\n<li>联系人表</li>\n<li>私信消息表</li>\n</ul>\n<p>通过长连接或者push消息推送实现实时聊天</p>\n<h3 id=\"表结构设计-分库分表\"><a href=\"#表结构设计-分库分表\" class=\"headerlink\" title=\"表结构设计[分库分表]\"></a>表结构设计[分库分表]</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`contact_%v`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`contact_%v`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'自增id,主键'</span>,</span><br><span class=\"line\">  <span class=\"string\">`owner_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信发送者'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信接收者'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_type`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'联系人类型：0普通/100系统/101群'</span>,</span><br><span class=\"line\">  <span class=\"string\">`peer_ack`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'peer是否给owner发过消息：0未发过/1发过'</span>,</span><br><span class=\"line\">  <span class=\"string\">`status`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'联系人状态：0正常/1代表被删除; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`last_msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'最新一次发送的私信id,默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`last_del_msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'最后一次删除联系人时的私信id,默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'版本号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`sort_key`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'排序字段'</span>,</span><br><span class=\"line\">  <span class=\"string\">`labels`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">512</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'标签,json串'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`updated_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_owner_id_peer_id`</span> (<span class=\"string\">`owner_id`</span>,<span class=\"string\">`peer_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_owner_id_version_id`</span> (<span class=\"string\">`owner_id`</span>,<span class=\"string\">`version_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`message_%v`</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`message_%v`</span> (</span><br><span class=\"line\">  <span class=\"string\">`msg_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`session_id`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'会话id,生成规则：uid小的在前大的在后用冒号连接；群消息和系统消息时为0:群号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`send_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信发送者id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`status`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信状态：0正常/1代表被审核删除/2代表撤销; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`has_read`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信接收者消息已读/未读状态：0未读/1已读; 默认值为0'</span>,</span><br><span class=\"line\">  <span class=\"string\">`seq_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'客户端本地私信序列id'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'版本号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`sort_key`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'排序字段'</span>,</span><br><span class=\"line\">  <span class=\"string\">`msg_type`</span> tinyint(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信类型'</span>,</span><br><span class=\"line\">  <span class=\"string\">`content`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">2048</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'私信内容'</span>,</span><br><span class=\"line\">  <span class=\"string\">`invisible_list`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">2048</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'此msg对哪些用户不可见'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`updated_at`</span> <span class=\"built_in\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`msg_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`idx_session_id_msg_id`</span> (<span class=\"string\">`session_id`</span>, <span class=\"string\">`version_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存设计\"><a href=\"#缓存设计\" class=\"headerlink\" title=\"缓存设计\"></a>缓存设计</h3><h3 id=\"详细设计\"><a href=\"#详细设计\" class=\"headerlink\" title=\"详细设计\"></a>详细设计</h3><ol>\n<li>发送，写联系人表，写消息表</li>\n<li>拉取联系人，拉取消息</li>\n<li>删除私信【自己不可见】 撤销私信【全部不可见】</li>\n<li>置顶会话 排序为设为最大</li>\n<li>清空未读<br>6.\b 发系统私信</li>\n</ol>\n<h3 id=\"QA？\"><a href=\"#QA？\" class=\"headerlink\" title=\"\bQA？\"></a>\bQA？</h3><ol>\n<li>系统消息怎么处理？</li>\n</ol>\n"},{"title":"常用工具使用","date":"2018-09-19T06:29:54.000Z","_content":"# 优点\n\n1. 轻量\n2. 可以直接打开文件夹&文件\n3. 可以安装各种插件\n\n# 常用配置\n\n### 主题\natom one dark\n\n### 文件图标\nvscode icons/nomo dark icon theme\n\n### 键盘map\nintellij idea keybindings 插件\n\n### 插件\n\n\n#### 原始快捷键\n```\nalt shift 下  向下复制一行\n\ncmd enter 强行下一行\n\nalt shift F 格式化代码\n\n\ncmd F 查找/替换\n\ncmd + 放大\n\nF12 转到定义\n\nctrl 斜点 打开控制台\n\nctrl - 回退\n\nctrl+shift+-前进\n\nalt+shift+选择 竖行选择\n```","source":"_posts/tool/vscode使用.md","raw":"---\ntitle: 常用工具使用\ntags:\n  - vscode\ncategories:\n  - tool\ndate: 2018-09-19 14:29:54\n---\n# 优点\n\n1. 轻量\n2. 可以直接打开文件夹&文件\n3. 可以安装各种插件\n\n# 常用配置\n\n### 主题\natom one dark\n\n### 文件图标\nvscode icons/nomo dark icon theme\n\n### 键盘map\nintellij idea keybindings 插件\n\n### 插件\n\n\n#### 原始快捷键\n```\nalt shift 下  向下复制一行\n\ncmd enter 强行下一行\n\nalt shift F 格式化代码\n\n\ncmd F 查找/替换\n\ncmd + 放大\n\nF12 转到定义\n\nctrl 斜点 打开控制台\n\nctrl - 回退\n\nctrl+shift+-前进\n\nalt+shift+选择 竖行选择\n```","slug":"tool/vscode使用","published":1,"updated":"2019-10-07T12:30:31.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0du003rwl38frlf3yvz","content":"<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ol>\n<li>轻量</li>\n<li>可以直接打开文件夹&amp;文件</li>\n<li>可以安装各种插件</li>\n</ol>\n<h1 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h1><h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>atom one dark</p>\n<h3 id=\"文件图标\"><a href=\"#文件图标\" class=\"headerlink\" title=\"文件图标\"></a>文件图标</h3><p>vscode icons/nomo dark icon theme</p>\n<h3 id=\"键盘map\"><a href=\"#键盘map\" class=\"headerlink\" title=\"键盘map\"></a>键盘map</h3><p>intellij idea keybindings 插件</p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><h4 id=\"原始快捷键\"><a href=\"#原始快捷键\" class=\"headerlink\" title=\"原始快捷键\"></a>原始快捷键</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alt shift 下  向下复制一行</span><br><span class=\"line\"></span><br><span class=\"line\">cmd enter 强行下一行</span><br><span class=\"line\"></span><br><span class=\"line\">alt shift F 格式化代码</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cmd F 查找/替换</span><br><span class=\"line\"></span><br><span class=\"line\">cmd + 放大</span><br><span class=\"line\"></span><br><span class=\"line\">F12 转到定义</span><br><span class=\"line\"></span><br><span class=\"line\">ctrl 斜点 打开控制台</span><br><span class=\"line\"></span><br><span class=\"line\">ctrl - 回退</span><br><span class=\"line\"></span><br><span class=\"line\">ctrl+shift+-前进</span><br><span class=\"line\"></span><br><span class=\"line\">alt+shift+选择 竖行选择</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ol>\n<li>轻量</li>\n<li>可以直接打开文件夹&amp;文件</li>\n<li>可以安装各种插件</li>\n</ol>\n<h1 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h1><h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>atom one dark</p>\n<h3 id=\"文件图标\"><a href=\"#文件图标\" class=\"headerlink\" title=\"文件图标\"></a>文件图标</h3><p>vscode icons/nomo dark icon theme</p>\n<h3 id=\"键盘map\"><a href=\"#键盘map\" class=\"headerlink\" title=\"键盘map\"></a>键盘map</h3><p>intellij idea keybindings 插件</p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><h4 id=\"原始快捷键\"><a href=\"#原始快捷键\" class=\"headerlink\" title=\"原始快捷键\"></a>原始快捷键</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alt shift 下  向下复制一行</span><br><span class=\"line\"></span><br><span class=\"line\">cmd enter 强行下一行</span><br><span class=\"line\"></span><br><span class=\"line\">alt shift F 格式化代码</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cmd F 查找/替换</span><br><span class=\"line\"></span><br><span class=\"line\">cmd + 放大</span><br><span class=\"line\"></span><br><span class=\"line\">F12 转到定义</span><br><span class=\"line\"></span><br><span class=\"line\">ctrl 斜点 打开控制台</span><br><span class=\"line\"></span><br><span class=\"line\">ctrl - 回退</span><br><span class=\"line\"></span><br><span class=\"line\">ctrl+shift+-前进</span><br><span class=\"line\"></span><br><span class=\"line\">alt+shift+选择 竖行选择</span><br></pre></td></tr></table></figure>"},{"title":"0x 定一个目标","date":"2018-07-21T13:04:44.000Z","_content":"\n# 计划\n好好写博客，把思想沉淀下来\n\n## 短期计划\n\n- 每日一Page\n\n","source":"_posts/z-summary/定一个目标.md","raw":"---\ntitle: 0x 定一个目标\ndate: 2018-07-21 21:04:44\ncategories: \n- idea\ntags:\n- 计划\n- 目标\n---\n\n# 计划\n好好写博客，把思想沉淀下来\n\n## 短期计划\n\n- 每日一Page\n\n","slug":"z-summary/定一个目标","published":1,"updated":"2018-09-19T08:28:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dv003twl38npgwvdcm","content":"<h1 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h1><p>好好写博客，把思想沉淀下来</p>\n<h2 id=\"短期计划\"><a href=\"#短期计划\" class=\"headerlink\" title=\"短期计划\"></a>短期计划</h2><ul>\n<li>每日一Page</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h1><p>好好写博客，把思想沉淀下来</p>\n<h2 id=\"短期计划\"><a href=\"#短期计划\" class=\"headerlink\" title=\"短期计划\"></a>短期计划</h2><ul>\n<li>每日一Page</li>\n</ul>\n"},{"title":"gitbook使用","date":"2019-03-19T13:48:04.000Z","_content":"\n# GitBook：借助 gitbook 工具创建一本书\n\n## 创建步骤\n### 1. 安装 [Node.js](https://nodejs.org/en/) 和 npm (Node.js 的安装包一般会包含 npm 的安装)；\n### 2. 创建 gitbook 文件夹，并进到该文件夹：\n\n   ```javascript\n   $ mkdir /PATH/TO/gitbook\n   $ cd /PATH/TO/gitbook\n   ```\n### 3. 安装 gitbook ：\n   \n   ```javascript\n   $ npm install gitbook-cli -g\n   ```\n   添加全局配置，配置path\n### 4. 创建你的书：\n   \n   ```javascript\n   $ gitbook init\n   ```\n   上述命令行是会报错的，因为你的插件不是装在全局的；这时可用下面的命令行：\n   ```javascript\n   $ gitbook init\n   ```\n   \n   init 成功之后会看到文件： `README.md` 和 `SUMMARY.md`。\n### 5. 打开并编辑书目录文件 SUMMARY.md ：\n    \n   ```javascript\n    * [Introduction](README.md)\n\t* [第一章：如何造火箭](ch1/build.md)\n\t\t* [1. 燃料学](ch1/fuel.md)\n\t\t* [2. 空气动力学](ch1/air.md)\n\t\t* [3. 总装工程学](ch1/enginer.md)\n\t\t* [小结](ch1/WRAPUP.md)\n\t* [第二章：如何回收火箭](ch2/recycle.md)\n\t\t* [1. 自动控制原理](ch2/ac.md)\n\t\t* [2. 二次利用要点](ch2/key.md)\n\t\t* [3. 三次利用要点](ch2/three.md)\n\t\t* [4. 四次利用要点](ch2/four.md)\n\t* [结束](end/SUMMARY.md)\n   ```\n   保存之后再执行下面的命令：\n   \n   ```javascript\n   $ gitbook init\n   ```\n   你会发现 gitbook 为你建好了 ch1、ch2、end 三个文件夹，且把在 SUMMARY.md 列出来的 md 文件都建好放在了相应文件夹里。\n   \n   接下来我们只要对应的打开 md 文件填写我们的内容就好。\n### 6. 预览一下书的样子：\n   \n   ```javascript\n   $ gitbook serve\n   ```\n   执行成功之后会看到一个网址：\n   \n   ```javascript\n   http://localhost:4000\n   ```\n   拷贝该网址在浏览器打开就可以预览书的样式了。\n### 7. 将 md 文件 build 成 html 文件：\n   \n   ```javascript\n   $ gitbook build\n   ```\n   执行成功之后你会看到多了一个 **_book** 文件夹，里面就是转换好的 html 文件。\n\n### 8. 生成电子书\nGitBook不仅可以生成静态网站，也可以将内容输出为电子书(ePub，Mobi，PDF)格式。\n\n安装插件\n\n```\n苹果OS X系统\n\n下载Caliber应用程序应用程序。将calibre.app移动到您的应用程序文件夹后，创建一个指向ebook-convert工具的软件链接：\n\nsudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin\n这样就可以在任何目录下执行目录执行ebook-convert命令。\n\n如果出现Operation not permitted异常，说明系统权限限制，需要配置环境变量的方式解决\n\nsudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin\nln: /usr/bin/ebook-convert: Operation not permitted\n环境变量配置\n\n先启动ebook-convert完成第一次启动配置，然后关闭。接着在命令行窗口修改环境配置文件，加入EBOOK_PATH（ebook-convert命令的所在目录）\n\nvim ~/.bash_profile \n\nexport EBOOK_PATH=/Applications/calibre.app/Contents/MacOS\nexport PATH=$PATH:$EBOOK_PATH\n然后刷新一下刚刚的配置:\n\nsource ~/.bash_profile\n最后测试一下ebook-convert指令是否能正常被调用：\n\n$ ebook-convert --version\nebook-convert (calibre 2.81.0)\nCreated by: Kovid Goyal <kovid@kovidgoyal.net>\n大功告成！下面就可以使用gitbook pdf ./ ./mybook.pdf 命令把你的项目生成pdf文档了！\n```\n```\n＃生成PDF文件\n$ gitbook pdf ./ ./mybook.pdf\n\n＃生成ePub文件\n$ gitbook epub ./ ./mybook.epub\n\n＃生成Mobi文件\n$ gitbook mobi ./ ./mybook.mobi\n```\n\n\n\n   \n   \n","source":"_posts/tool/gitbook使用.md","raw":"---\ntitle: gitbook使用\ntags:\n  - gitbook\ncategories:\n  - tool\ndate: 2019-03-19 21:48:04\n---\n\n# GitBook：借助 gitbook 工具创建一本书\n\n## 创建步骤\n### 1. 安装 [Node.js](https://nodejs.org/en/) 和 npm (Node.js 的安装包一般会包含 npm 的安装)；\n### 2. 创建 gitbook 文件夹，并进到该文件夹：\n\n   ```javascript\n   $ mkdir /PATH/TO/gitbook\n   $ cd /PATH/TO/gitbook\n   ```\n### 3. 安装 gitbook ：\n   \n   ```javascript\n   $ npm install gitbook-cli -g\n   ```\n   添加全局配置，配置path\n### 4. 创建你的书：\n   \n   ```javascript\n   $ gitbook init\n   ```\n   上述命令行是会报错的，因为你的插件不是装在全局的；这时可用下面的命令行：\n   ```javascript\n   $ gitbook init\n   ```\n   \n   init 成功之后会看到文件： `README.md` 和 `SUMMARY.md`。\n### 5. 打开并编辑书目录文件 SUMMARY.md ：\n    \n   ```javascript\n    * [Introduction](README.md)\n\t* [第一章：如何造火箭](ch1/build.md)\n\t\t* [1. 燃料学](ch1/fuel.md)\n\t\t* [2. 空气动力学](ch1/air.md)\n\t\t* [3. 总装工程学](ch1/enginer.md)\n\t\t* [小结](ch1/WRAPUP.md)\n\t* [第二章：如何回收火箭](ch2/recycle.md)\n\t\t* [1. 自动控制原理](ch2/ac.md)\n\t\t* [2. 二次利用要点](ch2/key.md)\n\t\t* [3. 三次利用要点](ch2/three.md)\n\t\t* [4. 四次利用要点](ch2/four.md)\n\t* [结束](end/SUMMARY.md)\n   ```\n   保存之后再执行下面的命令：\n   \n   ```javascript\n   $ gitbook init\n   ```\n   你会发现 gitbook 为你建好了 ch1、ch2、end 三个文件夹，且把在 SUMMARY.md 列出来的 md 文件都建好放在了相应文件夹里。\n   \n   接下来我们只要对应的打开 md 文件填写我们的内容就好。\n### 6. 预览一下书的样子：\n   \n   ```javascript\n   $ gitbook serve\n   ```\n   执行成功之后会看到一个网址：\n   \n   ```javascript\n   http://localhost:4000\n   ```\n   拷贝该网址在浏览器打开就可以预览书的样式了。\n### 7. 将 md 文件 build 成 html 文件：\n   \n   ```javascript\n   $ gitbook build\n   ```\n   执行成功之后你会看到多了一个 **_book** 文件夹，里面就是转换好的 html 文件。\n\n### 8. 生成电子书\nGitBook不仅可以生成静态网站，也可以将内容输出为电子书(ePub，Mobi，PDF)格式。\n\n安装插件\n\n```\n苹果OS X系统\n\n下载Caliber应用程序应用程序。将calibre.app移动到您的应用程序文件夹后，创建一个指向ebook-convert工具的软件链接：\n\nsudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin\n这样就可以在任何目录下执行目录执行ebook-convert命令。\n\n如果出现Operation not permitted异常，说明系统权限限制，需要配置环境变量的方式解决\n\nsudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin\nln: /usr/bin/ebook-convert: Operation not permitted\n环境变量配置\n\n先启动ebook-convert完成第一次启动配置，然后关闭。接着在命令行窗口修改环境配置文件，加入EBOOK_PATH（ebook-convert命令的所在目录）\n\nvim ~/.bash_profile \n\nexport EBOOK_PATH=/Applications/calibre.app/Contents/MacOS\nexport PATH=$PATH:$EBOOK_PATH\n然后刷新一下刚刚的配置:\n\nsource ~/.bash_profile\n最后测试一下ebook-convert指令是否能正常被调用：\n\n$ ebook-convert --version\nebook-convert (calibre 2.81.0)\nCreated by: Kovid Goyal <kovid@kovidgoyal.net>\n大功告成！下面就可以使用gitbook pdf ./ ./mybook.pdf 命令把你的项目生成pdf文档了！\n```\n```\n＃生成PDF文件\n$ gitbook pdf ./ ./mybook.pdf\n\n＃生成ePub文件\n$ gitbook epub ./ ./mybook.epub\n\n＃生成Mobi文件\n$ gitbook mobi ./ ./mybook.mobi\n```\n\n\n\n   \n   \n","slug":"tool/gitbook使用","published":1,"updated":"2019-03-19T13:52:59.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dx003xwl38zq364n1c","content":"<h1 id=\"GitBook：借助-gitbook-工具创建一本书\"><a href=\"#GitBook：借助-gitbook-工具创建一本书\" class=\"headerlink\" title=\"GitBook：借助 gitbook 工具创建一本书\"></a>GitBook：借助 gitbook 工具创建一本书</h1><h2 id=\"创建步骤\"><a href=\"#创建步骤\" class=\"headerlink\" title=\"创建步骤\"></a>创建步骤</h2><h3 id=\"1-安装-Node-js-和-npm-Node-js-的安装包一般会包含-npm-的安装-；\"><a href=\"#1-安装-Node-js-和-npm-Node-js-的安装包一般会包含-npm-的安装-；\" class=\"headerlink\" title=\"1. 安装 Node.js 和 npm (Node.js 的安装包一般会包含 npm 的安装)；\"></a>1. 安装 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a> 和 npm (Node.js 的安装包一般会包含 npm 的安装)；</h3><h3 id=\"2-创建-gitbook-文件夹，并进到该文件夹：\"><a href=\"#2-创建-gitbook-文件夹，并进到该文件夹：\" class=\"headerlink\" title=\"2. 创建 gitbook 文件夹，并进到该文件夹：\"></a>2. 创建 gitbook 文件夹，并进到该文件夹：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /PATH/TO/gitbook</span><br><span class=\"line\">$ cd /PATH/TO/gitbook</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-安装-gitbook-：\"><a href=\"#3-安装-gitbook-：\" class=\"headerlink\" title=\"3. 安装 gitbook ：\"></a>3. 安装 gitbook ：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gitbook-cli -g</span><br></pre></td></tr></table></figure>\n<p>   添加全局配置，配置path</p>\n<h3 id=\"4-创建你的书：\"><a href=\"#4-创建你的书：\" class=\"headerlink\" title=\"4. 创建你的书：\"></a>4. 创建你的书：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook init</span><br></pre></td></tr></table></figure>\n<p>   上述命令行是会报错的，因为你的插件不是装在全局的；这时可用下面的命令行：<br>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook init</span><br></pre></td></tr></table></figure></p>\n<p>   init 成功之后会看到文件： <code>README.md</code> 和 <code>SUMMARY.md</code>。</p>\n<h3 id=\"5-打开并编辑书目录文件-SUMMARY-md-：\"><a href=\"#5-打开并编辑书目录文件-SUMMARY-md-：\" class=\"headerlink\" title=\"5. 打开并编辑书目录文件 SUMMARY.md ：\"></a>5. 打开并编辑书目录文件 SUMMARY.md ：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   * [Introduction](README.md)</span><br><span class=\"line\">* [第一章：如何造火箭](ch1/build.md)</span><br><span class=\"line\">\t* [<span class=\"number\">1.</span> 燃料学](ch1/fuel.md)</span><br><span class=\"line\">\t* [<span class=\"number\">2.</span> 空气动力学](ch1/air.md)</span><br><span class=\"line\">\t* [<span class=\"number\">3.</span> 总装工程学](ch1/enginer.md)</span><br><span class=\"line\">\t* [小结](ch1/WRAPUP.md)</span><br><span class=\"line\">* [第二章：如何回收火箭](ch2/recycle.md)</span><br><span class=\"line\">\t* [<span class=\"number\">1.</span> 自动控制原理](ch2/ac.md)</span><br><span class=\"line\">\t* [<span class=\"number\">2.</span> 二次利用要点](ch2/key.md)</span><br><span class=\"line\">\t* [<span class=\"number\">3.</span> 三次利用要点](ch2/three.md)</span><br><span class=\"line\">\t* [<span class=\"number\">4.</span> 四次利用要点](ch2/four.md)</span><br><span class=\"line\">* [结束](end/SUMMARY.md)</span><br></pre></td></tr></table></figure>\n<p>   保存之后再执行下面的命令：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook init</span><br></pre></td></tr></table></figure>\n<p>   你会发现 gitbook 为你建好了 ch1、ch2、end 三个文件夹，且把在 SUMMARY.md 列出来的 md 文件都建好放在了相应文件夹里。</p>\n<p>   接下来我们只要对应的打开 md 文件填写我们的内容就好。</p>\n<h3 id=\"6-预览一下书的样子：\"><a href=\"#6-预览一下书的样子：\" class=\"headerlink\" title=\"6. 预览一下书的样子：\"></a>6. 预览一下书的样子：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook serve</span><br></pre></td></tr></table></figure>\n<p>   执行成功之后会看到一个网址：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost:4000</span></span><br></pre></td></tr></table></figure>\n<p>   拷贝该网址在浏览器打开就可以预览书的样式了。</p>\n<h3 id=\"7-将-md-文件-build-成-html-文件：\"><a href=\"#7-将-md-文件-build-成-html-文件：\" class=\"headerlink\" title=\"7. 将 md 文件 build 成 html 文件：\"></a>7. 将 md 文件 build 成 html 文件：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook build</span><br></pre></td></tr></table></figure>\n<p>   执行成功之后你会看到多了一个 <strong>_book</strong> 文件夹，里面就是转换好的 html 文件。</p>\n<h3 id=\"8-生成电子书\"><a href=\"#8-生成电子书\" class=\"headerlink\" title=\"8. 生成电子书\"></a>8. 生成电子书</h3><p>GitBook不仅可以生成静态网站，也可以将内容输出为电子书(ePub，Mobi，PDF)格式。</p>\n<p>安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">苹果OS X系统</span><br><span class=\"line\"></span><br><span class=\"line\">下载Caliber应用程序应用程序。将calibre.app移动到您的应用程序文件夹后，创建一个指向ebook-convert工具的软件链接：</span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin</span><br><span class=\"line\">这样就可以在任何目录下执行目录执行ebook-convert命令。</span><br><span class=\"line\"></span><br><span class=\"line\">如果出现Operation not permitted异常，说明系统权限限制，需要配置环境变量的方式解决</span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin</span><br><span class=\"line\">ln: /usr/bin/ebook-convert: Operation not permitted</span><br><span class=\"line\">环境变量配置</span><br><span class=\"line\"></span><br><span class=\"line\">先启动ebook-convert完成第一次启动配置，然后关闭。接着在命令行窗口修改环境配置文件，加入EBOOK_PATH（ebook-convert命令的所在目录）</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.bash_profile </span><br><span class=\"line\"></span><br><span class=\"line\">export EBOOK_PATH=/Applications/calibre.app/Contents/MacOS</span><br><span class=\"line\">export PATH=$PATH:$EBOOK_PATH</span><br><span class=\"line\">然后刷新一下刚刚的配置:</span><br><span class=\"line\"></span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">最后测试一下ebook-convert指令是否能正常被调用：</span><br><span class=\"line\"></span><br><span class=\"line\">$ ebook-convert --version</span><br><span class=\"line\">ebook-convert (calibre 2.81.0)</span><br><span class=\"line\">Created by: Kovid Goyal &lt;kovid@kovidgoyal.net&gt;</span><br><span class=\"line\">大功告成！下面就可以使用gitbook pdf ./ ./mybook.pdf 命令把你的项目生成pdf文档了！</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃生成PDF文件</span><br><span class=\"line\">$ gitbook pdf ./ ./mybook.pdf</span><br><span class=\"line\"></span><br><span class=\"line\">＃生成ePub文件</span><br><span class=\"line\">$ gitbook epub ./ ./mybook.epub</span><br><span class=\"line\"></span><br><span class=\"line\">＃生成Mobi文件</span><br><span class=\"line\">$ gitbook mobi ./ ./mybook.mobi</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GitBook：借助-gitbook-工具创建一本书\"><a href=\"#GitBook：借助-gitbook-工具创建一本书\" class=\"headerlink\" title=\"GitBook：借助 gitbook 工具创建一本书\"></a>GitBook：借助 gitbook 工具创建一本书</h1><h2 id=\"创建步骤\"><a href=\"#创建步骤\" class=\"headerlink\" title=\"创建步骤\"></a>创建步骤</h2><h3 id=\"1-安装-Node-js-和-npm-Node-js-的安装包一般会包含-npm-的安装-；\"><a href=\"#1-安装-Node-js-和-npm-Node-js-的安装包一般会包含-npm-的安装-；\" class=\"headerlink\" title=\"1. 安装 Node.js 和 npm (Node.js 的安装包一般会包含 npm 的安装)；\"></a>1. 安装 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a> 和 npm (Node.js 的安装包一般会包含 npm 的安装)；</h3><h3 id=\"2-创建-gitbook-文件夹，并进到该文件夹：\"><a href=\"#2-创建-gitbook-文件夹，并进到该文件夹：\" class=\"headerlink\" title=\"2. 创建 gitbook 文件夹，并进到该文件夹：\"></a>2. 创建 gitbook 文件夹，并进到该文件夹：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /PATH/TO/gitbook</span><br><span class=\"line\">$ cd /PATH/TO/gitbook</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-安装-gitbook-：\"><a href=\"#3-安装-gitbook-：\" class=\"headerlink\" title=\"3. 安装 gitbook ：\"></a>3. 安装 gitbook ：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gitbook-cli -g</span><br></pre></td></tr></table></figure>\n<p>   添加全局配置，配置path</p>\n<h3 id=\"4-创建你的书：\"><a href=\"#4-创建你的书：\" class=\"headerlink\" title=\"4. 创建你的书：\"></a>4. 创建你的书：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook init</span><br></pre></td></tr></table></figure>\n<p>   上述命令行是会报错的，因为你的插件不是装在全局的；这时可用下面的命令行：<br>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook init</span><br></pre></td></tr></table></figure></p>\n<p>   init 成功之后会看到文件： <code>README.md</code> 和 <code>SUMMARY.md</code>。</p>\n<h3 id=\"5-打开并编辑书目录文件-SUMMARY-md-：\"><a href=\"#5-打开并编辑书目录文件-SUMMARY-md-：\" class=\"headerlink\" title=\"5. 打开并编辑书目录文件 SUMMARY.md ：\"></a>5. 打开并编辑书目录文件 SUMMARY.md ：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   * [Introduction](README.md)</span><br><span class=\"line\">* [第一章：如何造火箭](ch1/build.md)</span><br><span class=\"line\">\t* [<span class=\"number\">1.</span> 燃料学](ch1/fuel.md)</span><br><span class=\"line\">\t* [<span class=\"number\">2.</span> 空气动力学](ch1/air.md)</span><br><span class=\"line\">\t* [<span class=\"number\">3.</span> 总装工程学](ch1/enginer.md)</span><br><span class=\"line\">\t* [小结](ch1/WRAPUP.md)</span><br><span class=\"line\">* [第二章：如何回收火箭](ch2/recycle.md)</span><br><span class=\"line\">\t* [<span class=\"number\">1.</span> 自动控制原理](ch2/ac.md)</span><br><span class=\"line\">\t* [<span class=\"number\">2.</span> 二次利用要点](ch2/key.md)</span><br><span class=\"line\">\t* [<span class=\"number\">3.</span> 三次利用要点](ch2/three.md)</span><br><span class=\"line\">\t* [<span class=\"number\">4.</span> 四次利用要点](ch2/four.md)</span><br><span class=\"line\">* [结束](end/SUMMARY.md)</span><br></pre></td></tr></table></figure>\n<p>   保存之后再执行下面的命令：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook init</span><br></pre></td></tr></table></figure>\n<p>   你会发现 gitbook 为你建好了 ch1、ch2、end 三个文件夹，且把在 SUMMARY.md 列出来的 md 文件都建好放在了相应文件夹里。</p>\n<p>   接下来我们只要对应的打开 md 文件填写我们的内容就好。</p>\n<h3 id=\"6-预览一下书的样子：\"><a href=\"#6-预览一下书的样子：\" class=\"headerlink\" title=\"6. 预览一下书的样子：\"></a>6. 预览一下书的样子：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook serve</span><br></pre></td></tr></table></figure>\n<p>   执行成功之后会看到一个网址：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//localhost:4000</span></span><br></pre></td></tr></table></figure>\n<p>   拷贝该网址在浏览器打开就可以预览书的样式了。</p>\n<h3 id=\"7-将-md-文件-build-成-html-文件：\"><a href=\"#7-将-md-文件-build-成-html-文件：\" class=\"headerlink\" title=\"7. 将 md 文件 build 成 html 文件：\"></a>7. 将 md 文件 build 成 html 文件：</h3>   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitbook build</span><br></pre></td></tr></table></figure>\n<p>   执行成功之后你会看到多了一个 <strong>_book</strong> 文件夹，里面就是转换好的 html 文件。</p>\n<h3 id=\"8-生成电子书\"><a href=\"#8-生成电子书\" class=\"headerlink\" title=\"8. 生成电子书\"></a>8. 生成电子书</h3><p>GitBook不仅可以生成静态网站，也可以将内容输出为电子书(ePub，Mobi，PDF)格式。</p>\n<p>安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">苹果OS X系统</span><br><span class=\"line\"></span><br><span class=\"line\">下载Caliber应用程序应用程序。将calibre.app移动到您的应用程序文件夹后，创建一个指向ebook-convert工具的软件链接：</span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin</span><br><span class=\"line\">这样就可以在任何目录下执行目录执行ebook-convert命令。</span><br><span class=\"line\"></span><br><span class=\"line\">如果出现Operation not permitted异常，说明系统权限限制，需要配置环境变量的方式解决</span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin</span><br><span class=\"line\">ln: /usr/bin/ebook-convert: Operation not permitted</span><br><span class=\"line\">环境变量配置</span><br><span class=\"line\"></span><br><span class=\"line\">先启动ebook-convert完成第一次启动配置，然后关闭。接着在命令行窗口修改环境配置文件，加入EBOOK_PATH（ebook-convert命令的所在目录）</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.bash_profile </span><br><span class=\"line\"></span><br><span class=\"line\">export EBOOK_PATH=/Applications/calibre.app/Contents/MacOS</span><br><span class=\"line\">export PATH=$PATH:$EBOOK_PATH</span><br><span class=\"line\">然后刷新一下刚刚的配置:</span><br><span class=\"line\"></span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">最后测试一下ebook-convert指令是否能正常被调用：</span><br><span class=\"line\"></span><br><span class=\"line\">$ ebook-convert --version</span><br><span class=\"line\">ebook-convert (calibre 2.81.0)</span><br><span class=\"line\">Created by: Kovid Goyal &lt;kovid@kovidgoyal.net&gt;</span><br><span class=\"line\">大功告成！下面就可以使用gitbook pdf ./ ./mybook.pdf 命令把你的项目生成pdf文档了！</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃生成PDF文件</span><br><span class=\"line\">$ gitbook pdf ./ ./mybook.pdf</span><br><span class=\"line\"></span><br><span class=\"line\">＃生成ePub文件</span><br><span class=\"line\">$ gitbook epub ./ ./mybook.epub</span><br><span class=\"line\"></span><br><span class=\"line\">＃生成Mobi文件</span><br><span class=\"line\">$ gitbook mobi ./ ./mybook.mobi</span><br></pre></td></tr></table></figure>\n"},{"title":"设计模式理解","date":"2019-02-21T10:24:44.000Z","_content":"\n# 设计模式理解\n\n设计模式就是一个解决问题的模板\n\n有了这个模板可以更快的解决问题\n\n","source":"_posts/z-summary/设计模式理解.md","raw":"---\ntitle: 设计模式理解\ntags:\n  - cs\ncategories:\n  - cs\ndate: 2019-02-21 18:24:44\n---\n\n# 设计模式理解\n\n设计模式就是一个解决问题的模板\n\n有了这个模板可以更快的解决问题\n\n","slug":"z-summary/设计模式理解","published":1,"updated":"2019-02-21T10:28:38.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dy003zwl381jon942i","content":"<h1 id=\"设计模式理解\"><a href=\"#设计模式理解\" class=\"headerlink\" title=\"设计模式理解\"></a>设计模式理解</h1><p>设计模式就是一个解决问题的模板</p>\n<p>有了这个模板可以更快的解决问题</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"设计模式理解\"><a href=\"#设计模式理解\" class=\"headerlink\" title=\"设计模式理解\"></a>设计模式理解</h1><p>设计模式就是一个解决问题的模板</p>\n<p>有了这个模板可以更快的解决问题</p>\n"},{"title":"时间和金钱","date":"2019-03-14T06:30:12.000Z","_content":"\n# 时间和金钱\n\n时间用在刀刃上\n\n金钱用在刀刃上\n\n人生的每个阶段都有一个刀刃，精力不要太过于分散","source":"_posts/z-summary/时间和金钱.md","raw":"---\ntitle: 时间和金钱\ntags:\n  - 时间\n  - 金钱\ncategories:\n  - 人生大事\ndate: 2019-03-14 14:30:12\n---\n\n# 时间和金钱\n\n时间用在刀刃上\n\n金钱用在刀刃上\n\n人生的每个阶段都有一个刀刃，精力不要太过于分散","slug":"z-summary/时间和金钱","published":1,"updated":"2019-03-14T06:32:36.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0dz0042wl38zax6prd5","content":"<h1 id=\"时间和金钱\"><a href=\"#时间和金钱\" class=\"headerlink\" title=\"时间和金钱\"></a>时间和金钱</h1><p>时间用在刀刃上</p>\n<p>金钱用在刀刃上</p>\n<p>人生的每个阶段都有一个刀刃，精力不要太过于分散</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"时间和金钱\"><a href=\"#时间和金钱\" class=\"headerlink\" title=\"时间和金钱\"></a>时间和金钱</h1><p>时间用在刀刃上</p>\n<p>金钱用在刀刃上</p>\n<p>人生的每个阶段都有一个刀刃，精力不要太过于分散</p>\n"},{"title":"模板方法","date":"2019-02-21T10:21:58.000Z","_content":"\n\n# 解决办法的归纳\n就是\n\n找到一套模板\n\n使用并更新这个模板\n\n","source":"_posts/z-summary/模板方法.md","raw":"---\ntitle: 模板方法\ntags:\n  - method\ncategories:\n  - method\ndate: 2019-02-21 18:21:58\n---\n\n\n# 解决办法的归纳\n就是\n\n找到一套模板\n\n使用并更新这个模板\n\n","slug":"z-summary/模板方法","published":1,"updated":"2019-10-07T12:11:40.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0e00044wl38eftnlzo1","content":"<h1 id=\"解决办法的归纳\"><a href=\"#解决办法的归纳\" class=\"headerlink\" title=\"解决办法的归纳\"></a>解决办法的归纳</h1><p>就是</p>\n<p>找到一套模板</p>\n<p>使用并更新这个模板</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"解决办法的归纳\"><a href=\"#解决办法的归纳\" class=\"headerlink\" title=\"解决办法的归纳\"></a>解决办法的归纳</h1><p>就是</p>\n<p>找到一套模板</p>\n<p>使用并更新这个模板</p>\n"},{"title":"源码阅读顺序","date":"2019-03-14T06:21:36.000Z","_content":"\n# 源码阅读习惯\n\n1. 快速浏览程序文档【官方文档】，制作简单的demo，使用一些核心功能\n\n2. 在Google中搜索程序的源码解析，浏览前十篇文章，记录一些关键点\n\n3. 自己下载源码，找前面的记录的一些关键点，写上自己的源码理解注释\n\n4. 发布注释后的源码到自己的github仓库，写上自己的心得理解到README\n\n5. 给别人讲讲这个简单的东西！！！\n\n核心点：\n- 是什么\n- 基本用法\n- 关键实现点","source":"_posts/z-summary/源码阅读顺序.md","raw":"---\ntitle: 源码阅读顺序\ntags:\n  - 源码阅读\ncategories:\n  - 源码阅读\ndate: 2019-03-14 14:21:36\n---\n\n# 源码阅读习惯\n\n1. 快速浏览程序文档【官方文档】，制作简单的demo，使用一些核心功能\n\n2. 在Google中搜索程序的源码解析，浏览前十篇文章，记录一些关键点\n\n3. 自己下载源码，找前面的记录的一些关键点，写上自己的源码理解注释\n\n4. 发布注释后的源码到自己的github仓库，写上自己的心得理解到README\n\n5. 给别人讲讲这个简单的东西！！！\n\n核心点：\n- 是什么\n- 基本用法\n- 关键实现点","slug":"z-summary/源码阅读顺序","published":1,"updated":"2019-03-14T06:26:57.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1gha0e20048wl38t66mfsep","content":"<h1 id=\"源码阅读习惯\"><a href=\"#源码阅读习惯\" class=\"headerlink\" title=\"源码阅读习惯\"></a>源码阅读习惯</h1><ol>\n<li><p>快速浏览程序文档【官方文档】，制作简单的demo，使用一些核心功能</p>\n</li>\n<li><p>在Google中搜索程序的源码解析，浏览前十篇文章，记录一些关键点</p>\n</li>\n<li><p>自己下载源码，找前面的记录的一些关键点，写上自己的源码理解注释</p>\n</li>\n<li><p>发布注释后的源码到自己的github仓库，写上自己的心得理解到README</p>\n</li>\n<li><p>给别人讲讲这个简单的东西！！！</p>\n</li>\n</ol>\n<p>核心点：</p>\n<ul>\n<li>是什么</li>\n<li>基本用法</li>\n<li>关键实现点</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"源码阅读习惯\"><a href=\"#源码阅读习惯\" class=\"headerlink\" title=\"源码阅读习惯\"></a>源码阅读习惯</h1><ol>\n<li><p>快速浏览程序文档【官方文档】，制作简单的demo，使用一些核心功能</p>\n</li>\n<li><p>在Google中搜索程序的源码解析，浏览前十篇文章，记录一些关键点</p>\n</li>\n<li><p>自己下载源码，找前面的记录的一些关键点，写上自己的源码理解注释</p>\n</li>\n<li><p>发布注释后的源码到自己的github仓库，写上自己的心得理解到README</p>\n</li>\n<li><p>给别人讲讲这个简单的东西！！！</p>\n</li>\n</ol>\n<p>核心点：</p>\n<ul>\n<li>是什么</li>\n<li>基本用法</li>\n<li>关键实现点</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1gha0c10003wl38fbt55s3s","category_id":"ck1gha0c70005wl38wlokfv9h","_id":"ck1gha0cg000fwl38b9dxg7n0"},{"post_id":"ck1gha0c50004wl38eglfl5vn","category_id":"ck1gha0c70005wl38wlokfv9h","_id":"ck1gha0cj000jwl38ocvf62ib"},{"post_id":"ck1gha0c90007wl38rva3v0a3","category_id":"ck1gha0cf000ewl38lo7rgqja","_id":"ck1gha0cm000pwl389pamupty"},{"post_id":"ck1gha0cb0008wl38nf0eq4nf","category_id":"ck1gha0cj000kwl38jg796jdi","_id":"ck1gha0cp000xwl38cia1irrl"},{"post_id":"ck1gha0cn000twl38jr797ed4","category_id":"ck1gha0cj000kwl38jg796jdi","_id":"ck1gha0cr0012wl38w0syjc5p"},{"post_id":"ck1gha0cc0009wl386836ubce","category_id":"ck1gha0cf000ewl38lo7rgqja","_id":"ck1gha0ct0016wl38x51jrfac"},{"post_id":"ck1gha0ce000cwl382x81mmja","category_id":"ck1gha0cf000ewl38lo7rgqja","_id":"ck1gha0cu001awl38ism08rok"},{"post_id":"ck1gha0cf000dwl38kzj1c2c7","category_id":"ck1gha0cs0013wl38nhysi9xe","_id":"ck1gha0cw001gwl38iqe19crj"},{"post_id":"ck1gha0cg000hwl38u1waiumf","category_id":"ck1gha0cu001bwl3842irx3cg","_id":"ck1gha0cz001nwl38h0nzzzap"},{"post_id":"ck1gha0ch000iwl384vk9a7an","category_id":"ck1gha0cx001iwl38hvjpgiui","_id":"ck1gha0d2001swl38bprbo9a4"},{"post_id":"ck1gha0ck000mwl38aublogr8","category_id":"ck1gha0cz001owl38e4n3ssj0","_id":"ck1gha0d4001xwl38jqh6yysq"},{"post_id":"ck1gha0d2001uwl38144s1xb7","category_id":"ck1gha0cj000kwl38jg796jdi","_id":"ck1gha0d70023wl38dzy0ekab"},{"post_id":"ck1gha0cl000owl38i1qxchyz","category_id":"ck1gha0d2001twl38y2jd9w9f","_id":"ck1gha0d80026wl38cxpgmwy8"},{"post_id":"ck1gha0d50020wl38nxhih6cb","category_id":"ck1gha0cj000kwl38jg796jdi","_id":"ck1gha0d9002bwl38ijp8p2gp"},{"post_id":"ck1gha0co000vwl38stwij1bw","category_id":"ck1gha0d4001zwl38w15v3nx3","_id":"ck1gha0da002ewl38etdfue04"},{"post_id":"ck1gha0cq000zwl388k1g99us","category_id":"ck1gha0d80027wl38y814uw09","_id":"ck1gha0dd002mwl38uqwnmzg6"},{"post_id":"ck1gha0cr0011wl385phm7c6w","category_id":"ck1gha0db002gwl38m2pw3gcd","_id":"ck1gha0df002swl3892rev5ga"},{"post_id":"ck1gha0cs0015wl38bomucqik","category_id":"ck1gha0dd002nwl38a78r6q60","_id":"ck1gha0di002zwl388mmaxnuw"},{"post_id":"ck1gha0de002rwl38vhjfp2bm","category_id":"ck1gha0cj000kwl38jg796jdi","_id":"ck1gha0dj0033wl38lfoqa70a"},{"post_id":"ck1gha0ct0019wl385sdfwf6m","category_id":"ck1gha0df002twl382cy2z3jx","_id":"ck1gha0dl0037wl38rgz0mn8c"},{"post_id":"ck1gha0cu001cwl38puslq6pf","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0dn003ewl388f4xgxue"},{"post_id":"ck1gha0cv001ewl381f3gdjc9","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0dq003kwl389jv38k91"},{"post_id":"ck1gha0cw001hwl38rm0b7w43","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0du003qwl38p4ltjjva"},{"post_id":"ck1gha0cx001kwl389r3pstqa","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0dw003vwl38d3kj358v"},{"post_id":"ck1gha0d0001qwl388io0md33","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0e10046wl38id7mnw49"},{"post_id":"ck1gha0dy003zwl381jon942i","category_id":"ck1gha0cf000ewl38lo7rgqja","_id":"ck1gha0e20049wl38lgjmzizc"},{"post_id":"ck1gha0d1001rwl38rmkk3l7u","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0e3004cwl38lk2znazm"},{"post_id":"ck1gha0d3001wwl38qg3y544a","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0e4004gwl38r6qhm6ff"},{"post_id":"ck1gha0d60022wl38yyx13k4k","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0e5004jwl38e8bopq5a"},{"post_id":"ck1gha0d70025wl38f0lz0j44","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0e5004mwl387kz684kp"},{"post_id":"ck1gha0d8002awl38qvsb382s","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0e6004pwl38rhlkq3og"},{"post_id":"ck1gha0da002dwl38w36xt8hs","category_id":"ck1gha0e5004lwl38cqbpq7rh","_id":"ck1gha0e6004twl38uy2ytwv3"},{"post_id":"ck1gha0db002iwl38b2cp1sck","category_id":"ck1gha0e6004rwl38ojez6mcd","_id":"ck1gha0e7004ywl38vjntnlz8"},{"post_id":"ck1gha0dc002kwl38ibybbd5x","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0e80052wl38fnpe10fx"},{"post_id":"ck1gha0dd002owl38p557pztp","category_id":"ck1gha0di0031wl381d6bg8gj","_id":"ck1gha0e90055wl3889k600sp"},{"post_id":"ck1gha0dg002uwl38163e0efq","category_id":"ck1gha0e80051wl389fs5nn2m","_id":"ck1gha0eb005bwl389nbxo30w"},{"post_id":"ck1gha0dh002xwl38cejugm9x","category_id":"ck1gha0e80051wl389fs5nn2m","_id":"ck1gha0ec005fwl38s0pobsb5"},{"post_id":"ck1gha0di0030wl38u0tr16j3","category_id":"ck1gha0e80051wl389fs5nn2m","_id":"ck1gha0ed005iwl38mxkil4ah"},{"post_id":"ck1gha0dj0034wl388ogatmy7","category_id":"ck1gha0ec005ewl382q669861","_id":"ck1gha0ed005mwl38guc5l1be"},{"post_id":"ck1gha0dk0036wl38llecftsq","category_id":"ck1gha0ed005jwl38mswxklwt","_id":"ck1gha0eg005qwl38f9d84rxd"},{"post_id":"ck1gha0dl003awl38ux67nqel","category_id":"ck1gha0ed005nwl383g6rmg8m","_id":"ck1gha0eg005uwl38my5dqfuc"},{"post_id":"ck1gha0dn003cwl386tii4494","category_id":"ck1gha0eg005rwl38mmczko20","_id":"ck1gha0eh005ywl38r53v4pv3"},{"post_id":"ck1gha0do003gwl38bw8caari","category_id":"ck1gha0eg005vwl38u7i5yvak","_id":"ck1gha0ei0062wl388fuuu3y3"},{"post_id":"ck1gha0dp003iwl38y8v7umb4","category_id":"ck1gha0eh005zwl38iup6r1kc","_id":"ck1gha0ej0067wl385teswl94"},{"post_id":"ck1gha0dr003lwl38jokdh2t9","category_id":"ck1gha0ed005nwl383g6rmg8m","_id":"ck1gha0ek006awl380pbofwtn"},{"post_id":"ck1gha0ds003owl38izq088b5","category_id":"ck1gha0ej0066wl38ywjv6hkj","_id":"ck1gha0el006ewl380y5eyqzu"},{"post_id":"ck1gha0du003rwl38frlf3yvz","category_id":"ck1gha0eh005zwl38iup6r1kc","_id":"ck1gha0el006hwl381kcxg4zc"},{"post_id":"ck1gha0cy001mwl389gh2ubdl","category_id":"ck1gha0du003pwl38sxzpf8ti","_id":"ck1gha0em006mwl38p4owo8sw"},{"post_id":"ck1gha0cy001mwl389gh2ubdl","category_id":"ck1gha0ek006dwl385ahb7xor","_id":"ck1gha0en006pwl38pvy54r94"},{"post_id":"ck1gha0dv003twl38npgwvdcm","category_id":"ck1gha0em006jwl387f9magys","_id":"ck1gha0en006rwl38xbk3wby6"},{"post_id":"ck1gha0dx003xwl38zq364n1c","category_id":"ck1gha0eh005zwl38iup6r1kc","_id":"ck1gha0eo006uwl38ura5osjc"},{"post_id":"ck1gha0dz0042wl38zax6prd5","category_id":"ck1gha0en006qwl380o4pz1jx","_id":"ck1gha0ep006zwl387kswrcgi"},{"post_id":"ck1gha0e00044wl38eftnlzo1","category_id":"ck1gha0eo006wwl382bxobmq4","_id":"ck1gha0ep0073wl38vh4ldg68"},{"post_id":"ck1gha0e20048wl38t66mfsep","category_id":"ck1gha0ep0070wl382yzfpslg","_id":"ck1gha0eq0076wl381wspxb5u"}],"PostTag":[{"post_id":"ck1gha0c10003wl38fbt55s3s","tag_id":"ck1gha0c90006wl38mtlixd62","_id":"ck1gha0cl000nwl38rsde12fx"},{"post_id":"ck1gha0c10003wl38fbt55s3s","tag_id":"ck1gha0cd000bwl38bqodzdck","_id":"ck1gha0cm000qwl38ahkfwutd"},{"post_id":"ck1gha0c10003wl38fbt55s3s","tag_id":"ck1gha0cg000gwl38gfwzkurr","_id":"ck1gha0co000uwl38epmfj8rm"},{"post_id":"ck1gha0c50004wl38eglfl5vn","tag_id":"ck1gha0c90006wl38mtlixd62","_id":"ck1gha0cr0010wl384mk242op"},{"post_id":"ck1gha0c50004wl38eglfl5vn","tag_id":"ck1gha0cm000swl383p3i1gyp","_id":"ck1gha0cs0014wl38muwlq7sn"},{"post_id":"ck1gha0c90007wl38rva3v0a3","tag_id":"ck1gha0cp000ywl38acygv50a","_id":"ck1gha0ct0018wl38abl58iii"},{"post_id":"ck1gha0cb0008wl38nf0eq4nf","tag_id":"ck1gha0ct0017wl38h7reufpv","_id":"ck1gha0cw001fwl38y6s11wvk"},{"post_id":"ck1gha0cc0009wl386836ubce","tag_id":"ck1gha0cv001dwl38zqc29qch","_id":"ck1gha0cy001lwl38uzizy2oa"},{"post_id":"ck1gha0d2001uwl38144s1xb7","tag_id":"ck1gha0ct0017wl38h7reufpv","_id":"ck1gha0d4001ywl386z3lz76j"},{"post_id":"ck1gha0ce000cwl382x81mmja","tag_id":"ck1gha0cx001jwl38hcqfsd3p","_id":"ck1gha0d70024wl38vypqm0r8"},{"post_id":"ck1gha0ce000cwl382x81mmja","tag_id":"ck1gha0d0001pwl38mfte8v9y","_id":"ck1gha0d80028wl38pxvqr9lt"},{"post_id":"ck1gha0ce000cwl382x81mmja","tag_id":"ck1gha0d3001vwl38ehk3st47","_id":"ck1gha0d9002cwl38sr8tc0el"},{"post_id":"ck1gha0d50020wl38nxhih6cb","tag_id":"ck1gha0ct0017wl38h7reufpv","_id":"ck1gha0db002fwl389asoumjt"},{"post_id":"ck1gha0cf000dwl38kzj1c2c7","tag_id":"ck1gha0d60021wl38riadb0et","_id":"ck1gha0dc002jwl383dwxvt6x"},{"post_id":"ck1gha0cg000hwl38u1waiumf","tag_id":"ck1gha0d80029wl38216gmg3a","_id":"ck1gha0dd002lwl384v9ifk64"},{"post_id":"ck1gha0ch000iwl384vk9a7an","tag_id":"ck1gha0db002hwl38vuhikcvl","_id":"ck1gha0de002qwl38fqv7q1ua"},{"post_id":"ck1gha0de002rwl38vhjfp2bm","tag_id":"ck1gha0ct0017wl38h7reufpv","_id":"ck1gha0dh002wwl3867hlh0zq"},{"post_id":"ck1gha0ck000mwl38aublogr8","tag_id":"ck1gha0de002pwl38lse23c0s","_id":"ck1gha0dh002ywl38718n3uh1"},{"post_id":"ck1gha0cl000owl38i1qxchyz","tag_id":"ck1gha0dg002vwl38gjwnznhn","_id":"ck1gha0dk0035wl38eiet0tp5"},{"post_id":"ck1gha0cn000twl38jr797ed4","tag_id":"ck1gha0ct0017wl38h7reufpv","_id":"ck1gha0dm003bwl38f5hwkjcd"},{"post_id":"ck1gha0co000vwl38stwij1bw","tag_id":"ck1gha0dl0039wl38yw6t9lem","_id":"ck1gha0dp003hwl383do9nxbt"},{"post_id":"ck1gha0cq000zwl388k1g99us","tag_id":"ck1gha0do003fwl38zw30vq7d","_id":"ck1gha0ds003nwl388tpvt0h5"},{"post_id":"ck1gha0cr0011wl385phm7c6w","tag_id":"ck1gha0ds003mwl38oexn8lwr","_id":"ck1gha0dw003uwl388y3f72h0"},{"post_id":"ck1gha0cs0015wl38bomucqik","tag_id":"ck1gha0dv003swl38n3djf9ex","_id":"ck1gha0dz0040wl38zfds81ca"},{"post_id":"ck1gha0ct0019wl385sdfwf6m","tag_id":"ck1gha0dy003ywl38yu8bh2u2","_id":"ck1gha0e10047wl38bcwnv1xe"},{"post_id":"ck1gha0cu001cwl38puslq6pf","tag_id":"ck1gha0e00043wl385anqukhm","_id":"ck1gha0e3004dwl386n796kwi"},{"post_id":"ck1gha0cv001ewl381f3gdjc9","tag_id":"ck1gha0e3004awl3807d2hpm3","_id":"ck1gha0e4004hwl380y0mncef"},{"post_id":"ck1gha0cw001hwl38rm0b7w43","tag_id":"ck1gha0e4004ewl388b2coa95","_id":"ck1gha0e6004owl38iq9zufae"},{"post_id":"ck1gha0cw001hwl38rm0b7w43","tag_id":"ck1gha0e5004kwl38fzftvbo1","_id":"ck1gha0e6004qwl38j0pb44wc"},{"post_id":"ck1gha0cx001kwl389r3pstqa","tag_id":"ck1gha0e5004nwl38qzj37u99","_id":"ck1gha0e7004wwl386ye2k65c"},{"post_id":"ck1gha0cx001kwl389r3pstqa","tag_id":"ck1gha0e6004swl38vmx3yqt2","_id":"ck1gha0e7004zwl38oaew0hu8"},{"post_id":"ck1gha0cy001mwl389gh2ubdl","tag_id":"ck1gha0e7004vwl386bdvurdo","_id":"ck1gha0e90054wl389mg3z39f"},{"post_id":"ck1gha0cy001mwl389gh2ubdl","tag_id":"ck1gha0e80050wl38s2jsbvnv","_id":"ck1gha0e90057wl382f2rs1o0"},{"post_id":"ck1gha0d0001qwl388io0md33","tag_id":"ck1gha0e7004vwl386bdvurdo","_id":"ck1gha0eb0059wl38m32jjlr6"},{"post_id":"ck1gha0d1001rwl38rmkk3l7u","tag_id":"ck1gha0e7004vwl386bdvurdo","_id":"ck1gha0ec005dwl38c7xl3hbx"},{"post_id":"ck1gha0d3001wwl38qg3y544a","tag_id":"ck1gha0e7004vwl386bdvurdo","_id":"ck1gha0ec005hwl38v9p7eu4q"},{"post_id":"ck1gha0d60022wl38yyx13k4k","tag_id":"ck1gha0ec005gwl38htaxi3zm","_id":"ck1gha0ed005lwl38dp1nlz3y"},{"post_id":"ck1gha0d70025wl38f0lz0j44","tag_id":"ck1gha0e7004vwl386bdvurdo","_id":"ck1gha0eg005pwl38pkmyjwyh"},{"post_id":"ck1gha0d8002awl38qvsb382s","tag_id":"ck1gha0e7004vwl386bdvurdo","_id":"ck1gha0eg005twl38ty3rgv5t"},{"post_id":"ck1gha0da002dwl38w36xt8hs","tag_id":"ck1gha0eg005swl388u8di4f7","_id":"ck1gha0eh005xwl38pkvxy9oq"},{"post_id":"ck1gha0db002iwl38b2cp1sck","tag_id":"ck1gha0eh005wwl38s2jp031i","_id":"ck1gha0ei0061wl38159eg3vj"},{"post_id":"ck1gha0dc002kwl38ibybbd5x","tag_id":"ck1gha0e7004vwl386bdvurdo","_id":"ck1gha0ej0065wl38fh9gnvdo"},{"post_id":"ck1gha0dd002owl38p557pztp","tag_id":"ck1gha0ei0063wl387811xryl","_id":"ck1gha0ej0069wl38j52ksc4c"},{"post_id":"ck1gha0dg002uwl38163e0efq","tag_id":"ck1gha0ej0068wl38slq4v0cx","_id":"ck1gha0el006gwl38lc815iw8"},{"post_id":"ck1gha0dg002uwl38163e0efq","tag_id":"ck1gha0ek006cwl387xb8wcr6","_id":"ck1gha0em006iwl38sn2ls135"},{"post_id":"ck1gha0dh002xwl38cejugm9x","tag_id":"ck1gha0el006fwl38ymd733kr","_id":"ck1gha0em006lwl38bkcr1cb2"},{"post_id":"ck1gha0di0030wl38u0tr16j3","tag_id":"ck1gha0ej0068wl38slq4v0cx","_id":"ck1gha0eo006twl38n85fl5eu"},{"post_id":"ck1gha0di0030wl38u0tr16j3","tag_id":"ck1gha0en006owl38a113hp1l","_id":"ck1gha0eo006vwl38b70ebdli"},{"post_id":"ck1gha0dj0034wl388ogatmy7","tag_id":"ck1gha0eo006swl38ygry4zyi","_id":"ck1gha0eo006ywl38iakrap7u"},{"post_id":"ck1gha0dk0036wl38llecftsq","tag_id":"ck1gha0eo006xwl38w58a9mna","_id":"ck1gha0ep0072wl38x9iy9x8b"},{"post_id":"ck1gha0dl003awl38ux67nqel","tag_id":"ck1gha0ep0071wl38519ytt91","_id":"ck1gha0eq0075wl38zea4lx84"},{"post_id":"ck1gha0dn003cwl386tii4494","tag_id":"ck1gha0ep0074wl382e7uwlca","_id":"ck1gha0eq0078wl381kt1idlt"},{"post_id":"ck1gha0do003gwl38bw8caari","tag_id":"ck1gha0eq0077wl38m0ogncxn","_id":"ck1gha0eq007awl38f2eflvn5"},{"post_id":"ck1gha0dp003iwl38y8v7umb4","tag_id":"ck1gha0eq0079wl38g238w099","_id":"ck1gha0er007cwl38x5x6h3kh"},{"post_id":"ck1gha0dr003lwl38jokdh2t9","tag_id":"ck1gha0ep0071wl38519ytt91","_id":"ck1gha0er007ewl38r2jp39tp"},{"post_id":"ck1gha0ds003owl38izq088b5","tag_id":"ck1gha0er007dwl38w01novzk","_id":"ck1gha0es007gwl38ztnp7w86"},{"post_id":"ck1gha0du003rwl38frlf3yvz","tag_id":"ck1gha0er007fwl38gmlnr415","_id":"ck1gha0es007iwl38hv5e2ww5"},{"post_id":"ck1gha0dv003twl38npgwvdcm","tag_id":"ck1gha0es007hwl38ylhf9830","_id":"ck1gha0es007lwl38zkftxild"},{"post_id":"ck1gha0dv003twl38npgwvdcm","tag_id":"ck1gha0es007jwl38sqeke5h8","_id":"ck1gha0et007mwl389gdb1zu7"},{"post_id":"ck1gha0dx003xwl38zq364n1c","tag_id":"ck1gha0es007kwl38eqatuvaz","_id":"ck1gha0et007owl38jgoklcto"},{"post_id":"ck1gha0dy003zwl381jon942i","tag_id":"ck1gha0et007nwl38l13o3rpr","_id":"ck1gha0et007qwl381d42pcx6"},{"post_id":"ck1gha0dz0042wl38zax6prd5","tag_id":"ck1gha0et007pwl38zqdyfqcy","_id":"ck1gha0eu007twl38jertvmyj"},{"post_id":"ck1gha0dz0042wl38zax6prd5","tag_id":"ck1gha0et007rwl38b4cehwaw","_id":"ck1gha0eu007uwl389q9htd58"},{"post_id":"ck1gha0e00044wl38eftnlzo1","tag_id":"ck1gha0eu007swl383wttxiku","_id":"ck1gha0eu007wwl38ydozluft"},{"post_id":"ck1gha0e20048wl38t66mfsep","tag_id":"ck1gha0eu007vwl38cvqmkctu","_id":"ck1gha0eu007xwl388dfqkdmc"}],"Tag":[{"name":"algorithm","_id":"ck1gha0c90006wl38mtlixd62"},{"name":"strStr","_id":"ck1gha0cd000bwl38bqodzdck"},{"name":"subset","_id":"ck1gha0cg000gwl38gfwzkurr"},{"name":"二分搜索","_id":"ck1gha0cm000swl383p3i1gyp"},{"name":"epoll","_id":"ck1gha0cp000ywl38acygv50a"},{"name":"tags","_id":"ck1gha0ct0017wl38h7reufpv"},{"name":"hash","_id":"ck1gha0cv001dwl38zqc29qch"},{"name":"https","_id":"ck1gha0cx001jwl38hcqfsd3p"},{"name":"SSL/TLS","_id":"ck1gha0d0001pwl38mfte8v9y"},{"name":"Secure Sockets Layer/Transport Layer Security","_id":"ck1gha0d3001vwl38ehk3st47"},{"name":"标签","_id":"ck1gha0d60021wl38riadb0et"},{"name":"protobuf","_id":"ck1gha0d80029wl38216gmg3a"},{"name":"mapreduce","_id":"ck1gha0db002hwl38vuhikcvl"},{"name":"cap","_id":"ck1gha0de002pwl38lse23c0s"},{"name":"code_style","_id":"ck1gha0dg002vwl38gjwnznhn"},{"name":"k8s","_id":"ck1gha0dl0039wl38yw6t9lem"},{"name":"gin","_id":"ck1gha0do003fwl38zw30vq7d"},{"name":"etcd","_id":"ck1gha0ds003mwl38oexn8lwr"},{"name":"thrift","_id":"ck1gha0dv003swl38n3djf9ex"},{"name":"boltdb","_id":"ck1gha0dy003ywl38yu8bh2u2"},{"name":"buffer","_id":"ck1gha0e00043wl385anqukhm"},{"name":"标准库","_id":"ck1gha0e3004awl3807d2hpm3"},{"name":"test","_id":"ck1gha0e4004ewl388b2coa95"},{"name":"bench test","_id":"ck1gha0e5004kwl38fzftvbo1"},{"name":"golang","_id":"ck1gha0e5004nwl38qzj37u99"},{"name":"context","_id":"ck1gha0e6004swl38vmx3yqt2"},{"name":"go","_id":"ck1gha0e7004vwl386bdvurdo"},{"name":"函数式选项","_id":"ck1gha0e80050wl38s2jsbvnv"},{"name":"代码规范","_id":"ck1gha0ec005gwl38htaxi3zm"},{"name":"闭包","_id":"ck1gha0eg005swl388u8di4f7"},{"name":"ES6","_id":"ck1gha0eh005wwl38s2jp031i"},{"name":"net/http","_id":"ck1gha0ei0063wl387811xryl"},{"name":"linux","_id":"ck1gha0ej0068wl38slq4v0cx"},{"name":"cmd","_id":"ck1gha0ek006cwl387xb8wcr6"},{"name":"signal","_id":"ck1gha0el006fwl38ymd733kr"},{"name":"supervisor","_id":"ck1gha0en006owl38a113hp1l"},{"name":"mongo","_id":"ck1gha0eo006swl38ygry4zyi"},{"name":"gorm","_id":"ck1gha0eo006xwl38w58a9mna"},{"name":"mysql","_id":"ck1gha0ep0071wl38519ytt91"},{"name":"redis","_id":"ck1gha0ep0074wl382e7uwlca"},{"name":"python","_id":"ck1gha0eq0077wl38m0ogncxn"},{"name":"git","_id":"ck1gha0eq0079wl38g238w099"},{"name":"私信系统","_id":"ck1gha0er007dwl38w01novzk"},{"name":"vscode","_id":"ck1gha0er007fwl38gmlnr415"},{"name":"计划","_id":"ck1gha0es007hwl38ylhf9830"},{"name":"目标","_id":"ck1gha0es007jwl38sqeke5h8"},{"name":"gitbook","_id":"ck1gha0es007kwl38eqatuvaz"},{"name":"cs","_id":"ck1gha0et007nwl38l13o3rpr"},{"name":"时间","_id":"ck1gha0et007pwl38zqdyfqcy"},{"name":"金钱","_id":"ck1gha0et007rwl38b4cehwaw"},{"name":"method","_id":"ck1gha0eu007swl383wttxiku"},{"name":"源码阅读","_id":"ck1gha0eu007vwl38cvqmkctu"}]}}